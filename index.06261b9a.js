
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

      var $parcel$global = globalThis;
    
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequireb8e7"];

if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequireb8e7"] = parcelRequire;
}

var parcelRegister = parcelRequire.register;
parcelRegister("4WnG3", function(module, exports) {

$parcel$export(module.exports, "Fragment", () => $398ef20bfcd6b165$export$ffb0004e005737fa, (v) => $398ef20bfcd6b165$export$ffb0004e005737fa = v);
$parcel$export(module.exports, "jsx", () => $398ef20bfcd6b165$export$34b9dba7ce09269b, (v) => $398ef20bfcd6b165$export$34b9dba7ce09269b = v);
$parcel$export(module.exports, "jsxs", () => $398ef20bfcd6b165$export$25062201e9e25d76, (v) => $398ef20bfcd6b165$export$25062201e9e25d76 = v);
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var $398ef20bfcd6b165$export$ffb0004e005737fa;
var $398ef20bfcd6b165$export$34b9dba7ce09269b;
var $398ef20bfcd6b165$export$25062201e9e25d76;
"use strict";

var $d4J5n = parcelRequire("d4J5n");
var $398ef20bfcd6b165$var$k = Symbol.for("react.element"), $398ef20bfcd6b165$var$l = Symbol.for("react.fragment"), $398ef20bfcd6b165$var$m = Object.prototype.hasOwnProperty, $398ef20bfcd6b165$var$n = $d4J5n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, $398ef20bfcd6b165$var$p = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
};
function $398ef20bfcd6b165$var$q(c, a, g) {
    var b, d = {}, e = null, h = null;
    void 0 !== g && (e = "" + g);
    void 0 !== a.key && (e = "" + a.key);
    void 0 !== a.ref && (h = a.ref);
    for(b in a)$398ef20bfcd6b165$var$m.call(a, b) && !$398ef20bfcd6b165$var$p.hasOwnProperty(b) && (d[b] = a[b]);
    if (c && c.defaultProps) for(b in a = c.defaultProps, a)void 0 === d[b] && (d[b] = a[b]);
    return {
        $$typeof: $398ef20bfcd6b165$var$k,
        type: c,
        key: e,
        ref: h,
        props: d,
        _owner: $398ef20bfcd6b165$var$n.current
    };
}
$398ef20bfcd6b165$export$ffb0004e005737fa = $398ef20bfcd6b165$var$l;
$398ef20bfcd6b165$export$34b9dba7ce09269b = $398ef20bfcd6b165$var$q;
$398ef20bfcd6b165$export$25062201e9e25d76 = $398ef20bfcd6b165$var$q;

});
parcelRegister("d4J5n", function(module, exports) {
"use strict";

module.exports = (parcelRequire("7uDWo"));

});
parcelRegister("7uDWo", function(module, exports) {

$parcel$export(module.exports, "Children", () => $574a51285872e9b8$export$dca3b0875bd9a954, (v) => $574a51285872e9b8$export$dca3b0875bd9a954 = v);
$parcel$export(module.exports, "Component", () => $574a51285872e9b8$export$16fa2f45be04daa8, (v) => $574a51285872e9b8$export$16fa2f45be04daa8 = v);
$parcel$export(module.exports, "Fragment", () => $574a51285872e9b8$export$ffb0004e005737fa, (v) => $574a51285872e9b8$export$ffb0004e005737fa = v);
$parcel$export(module.exports, "Profiler", () => $574a51285872e9b8$export$e2c29f18771995cb, (v) => $574a51285872e9b8$export$e2c29f18771995cb = v);
$parcel$export(module.exports, "PureComponent", () => $574a51285872e9b8$export$221d75b3f55bb0bd, (v) => $574a51285872e9b8$export$221d75b3f55bb0bd = v);
$parcel$export(module.exports, "StrictMode", () => $574a51285872e9b8$export$5f8d39834fd61797, (v) => $574a51285872e9b8$export$5f8d39834fd61797 = v);
$parcel$export(module.exports, "Suspense", () => $574a51285872e9b8$export$74bf444e3cd11ea5, (v) => $574a51285872e9b8$export$74bf444e3cd11ea5 = v);
$parcel$export(module.exports, "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", () => $574a51285872e9b8$export$ae55be85d98224ed, (v) => $574a51285872e9b8$export$ae55be85d98224ed = v);
$parcel$export(module.exports, "cloneElement", () => $574a51285872e9b8$export$e530037191fcd5d7, (v) => $574a51285872e9b8$export$e530037191fcd5d7 = v);
$parcel$export(module.exports, "createContext", () => $574a51285872e9b8$export$fd42f52fd3ae1109, (v) => $574a51285872e9b8$export$fd42f52fd3ae1109 = v);
$parcel$export(module.exports, "createElement", () => $574a51285872e9b8$export$c8a8987d4410bf2d, (v) => $574a51285872e9b8$export$c8a8987d4410bf2d = v);
$parcel$export(module.exports, "createFactory", () => $574a51285872e9b8$export$d38cd72104c1f0e9, (v) => $574a51285872e9b8$export$d38cd72104c1f0e9 = v);
$parcel$export(module.exports, "createRef", () => $574a51285872e9b8$export$7d1e3a5e95ceca43, (v) => $574a51285872e9b8$export$7d1e3a5e95ceca43 = v);
$parcel$export(module.exports, "forwardRef", () => $574a51285872e9b8$export$257a8862b851cb5b, (v) => $574a51285872e9b8$export$257a8862b851cb5b = v);
$parcel$export(module.exports, "isValidElement", () => $574a51285872e9b8$export$a8257692ac88316c, (v) => $574a51285872e9b8$export$a8257692ac88316c = v);
$parcel$export(module.exports, "lazy", () => $574a51285872e9b8$export$488013bae63b21da, (v) => $574a51285872e9b8$export$488013bae63b21da = v);
$parcel$export(module.exports, "memo", () => $574a51285872e9b8$export$7c73462e0d25e514, (v) => $574a51285872e9b8$export$7c73462e0d25e514 = v);
$parcel$export(module.exports, "startTransition", () => $574a51285872e9b8$export$7568632d0d33d16d, (v) => $574a51285872e9b8$export$7568632d0d33d16d = v);
$parcel$export(module.exports, "unstable_act", () => $574a51285872e9b8$export$88948ce120ea2619, (v) => $574a51285872e9b8$export$88948ce120ea2619 = v);
$parcel$export(module.exports, "useCallback", () => $574a51285872e9b8$export$35808ee640e87ca7, (v) => $574a51285872e9b8$export$35808ee640e87ca7 = v);
$parcel$export(module.exports, "useContext", () => $574a51285872e9b8$export$fae74005e78b1a27, (v) => $574a51285872e9b8$export$fae74005e78b1a27 = v);
$parcel$export(module.exports, "useDebugValue", () => $574a51285872e9b8$export$dc8fbce3eb94dc1e, (v) => $574a51285872e9b8$export$dc8fbce3eb94dc1e = v);
$parcel$export(module.exports, "useDeferredValue", () => $574a51285872e9b8$export$6a7bc4e911dc01cf, (v) => $574a51285872e9b8$export$6a7bc4e911dc01cf = v);
$parcel$export(module.exports, "useEffect", () => $574a51285872e9b8$export$6d9c69b0de29b591, (v) => $574a51285872e9b8$export$6d9c69b0de29b591 = v);
$parcel$export(module.exports, "useId", () => $574a51285872e9b8$export$f680877a34711e37, (v) => $574a51285872e9b8$export$f680877a34711e37 = v);
$parcel$export(module.exports, "useImperativeHandle", () => $574a51285872e9b8$export$d5a552a76deda3c2, (v) => $574a51285872e9b8$export$d5a552a76deda3c2 = v);
$parcel$export(module.exports, "useInsertionEffect", () => $574a51285872e9b8$export$aaabe4eda9ed9969, (v) => $574a51285872e9b8$export$aaabe4eda9ed9969 = v);
$parcel$export(module.exports, "useLayoutEffect", () => $574a51285872e9b8$export$e5c5a5f917a5871c, (v) => $574a51285872e9b8$export$e5c5a5f917a5871c = v);
$parcel$export(module.exports, "useMemo", () => $574a51285872e9b8$export$1538c33de8887b59, (v) => $574a51285872e9b8$export$1538c33de8887b59 = v);
$parcel$export(module.exports, "useReducer", () => $574a51285872e9b8$export$13e3392192263954, (v) => $574a51285872e9b8$export$13e3392192263954 = v);
$parcel$export(module.exports, "useRef", () => $574a51285872e9b8$export$b8f5890fc79d6aca, (v) => $574a51285872e9b8$export$b8f5890fc79d6aca = v);
$parcel$export(module.exports, "useState", () => $574a51285872e9b8$export$60241385465d0a34, (v) => $574a51285872e9b8$export$60241385465d0a34 = v);
$parcel$export(module.exports, "useSyncExternalStore", () => $574a51285872e9b8$export$306c0aa65ff9ec16, (v) => $574a51285872e9b8$export$306c0aa65ff9ec16 = v);
$parcel$export(module.exports, "useTransition", () => $574a51285872e9b8$export$7b286972b8d8ccbf, (v) => $574a51285872e9b8$export$7b286972b8d8ccbf = v);
$parcel$export(module.exports, "version", () => $574a51285872e9b8$export$83d89fbfd8236492, (v) => $574a51285872e9b8$export$83d89fbfd8236492 = v);
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var $574a51285872e9b8$export$dca3b0875bd9a954;
var $574a51285872e9b8$export$16fa2f45be04daa8;
var $574a51285872e9b8$export$ffb0004e005737fa;
var $574a51285872e9b8$export$e2c29f18771995cb;
var $574a51285872e9b8$export$221d75b3f55bb0bd;
var $574a51285872e9b8$export$5f8d39834fd61797;
var $574a51285872e9b8$export$74bf444e3cd11ea5;
var $574a51285872e9b8$export$ae55be85d98224ed;
var $574a51285872e9b8$export$e530037191fcd5d7;
var $574a51285872e9b8$export$fd42f52fd3ae1109;
var $574a51285872e9b8$export$c8a8987d4410bf2d;
var $574a51285872e9b8$export$d38cd72104c1f0e9;
var $574a51285872e9b8$export$7d1e3a5e95ceca43;
var $574a51285872e9b8$export$257a8862b851cb5b;
var $574a51285872e9b8$export$a8257692ac88316c;
var $574a51285872e9b8$export$488013bae63b21da;
var $574a51285872e9b8$export$7c73462e0d25e514;
var $574a51285872e9b8$export$7568632d0d33d16d;
var $574a51285872e9b8$export$88948ce120ea2619;
var $574a51285872e9b8$export$35808ee640e87ca7;
var $574a51285872e9b8$export$fae74005e78b1a27;
var $574a51285872e9b8$export$dc8fbce3eb94dc1e;
var $574a51285872e9b8$export$6a7bc4e911dc01cf;
var $574a51285872e9b8$export$6d9c69b0de29b591;
var $574a51285872e9b8$export$f680877a34711e37;
var $574a51285872e9b8$export$d5a552a76deda3c2;
var $574a51285872e9b8$export$aaabe4eda9ed9969;
var $574a51285872e9b8$export$e5c5a5f917a5871c;
var $574a51285872e9b8$export$1538c33de8887b59;
var $574a51285872e9b8$export$13e3392192263954;
var $574a51285872e9b8$export$b8f5890fc79d6aca;
var $574a51285872e9b8$export$60241385465d0a34;
var $574a51285872e9b8$export$306c0aa65ff9ec16;
var $574a51285872e9b8$export$7b286972b8d8ccbf;
var $574a51285872e9b8$export$83d89fbfd8236492;
"use strict";
var $574a51285872e9b8$var$l = Symbol.for("react.element"), $574a51285872e9b8$var$n = Symbol.for("react.portal"), $574a51285872e9b8$var$p = Symbol.for("react.fragment"), $574a51285872e9b8$var$q = Symbol.for("react.strict_mode"), $574a51285872e9b8$var$r = Symbol.for("react.profiler"), $574a51285872e9b8$var$t = Symbol.for("react.provider"), $574a51285872e9b8$var$u = Symbol.for("react.context"), $574a51285872e9b8$var$v = Symbol.for("react.forward_ref"), $574a51285872e9b8$var$w = Symbol.for("react.suspense"), $574a51285872e9b8$var$x = Symbol.for("react.memo"), $574a51285872e9b8$var$y = Symbol.for("react.lazy"), $574a51285872e9b8$var$z = Symbol.iterator;
function $574a51285872e9b8$var$A(a) {
    if (null === a || "object" !== typeof a) return null;
    a = $574a51285872e9b8$var$z && a[$574a51285872e9b8$var$z] || a["@@iterator"];
    return "function" === typeof a ? a : null;
}
var $574a51285872e9b8$var$B = {
    isMounted: function() {
        return !1;
    },
    enqueueForceUpdate: function() {},
    enqueueReplaceState: function() {},
    enqueueSetState: function() {}
}, $574a51285872e9b8$var$C = Object.assign, $574a51285872e9b8$var$D = {};
function $574a51285872e9b8$var$E(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = $574a51285872e9b8$var$D;
    this.updater = e || $574a51285872e9b8$var$B;
}
$574a51285872e9b8$var$E.prototype.isReactComponent = {};
$574a51285872e9b8$var$E.prototype.setState = function(a, b) {
    if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, a, b, "setState");
};
$574a51285872e9b8$var$E.prototype.forceUpdate = function(a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
};
function $574a51285872e9b8$var$F() {}
$574a51285872e9b8$var$F.prototype = $574a51285872e9b8$var$E.prototype;
function $574a51285872e9b8$var$G(a, b, e) {
    this.props = a;
    this.context = b;
    this.refs = $574a51285872e9b8$var$D;
    this.updater = e || $574a51285872e9b8$var$B;
}
var $574a51285872e9b8$var$H = $574a51285872e9b8$var$G.prototype = new $574a51285872e9b8$var$F;
$574a51285872e9b8$var$H.constructor = $574a51285872e9b8$var$G;
$574a51285872e9b8$var$C($574a51285872e9b8$var$H, $574a51285872e9b8$var$E.prototype);
$574a51285872e9b8$var$H.isPureReactComponent = !0;
var $574a51285872e9b8$var$I = Array.isArray, $574a51285872e9b8$var$J = Object.prototype.hasOwnProperty, $574a51285872e9b8$var$K = {
    current: null
}, $574a51285872e9b8$var$L = {
    key: !0,
    ref: !0,
    __self: !0,
    __source: !0
};
function $574a51285872e9b8$var$M(a, b, e) {
    var d, c = {}, k = null, h = null;
    if (null != b) for(d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b)$574a51285872e9b8$var$J.call(b, d) && !$574a51285872e9b8$var$L.hasOwnProperty(d) && (c[d] = b[d]);
    var g = arguments.length - 2;
    if (1 === g) c.children = e;
    else if (1 < g) {
        for(var f = Array(g), m = 0; m < g; m++)f[m] = arguments[m + 2];
        c.children = f;
    }
    if (a && a.defaultProps) for(d in g = a.defaultProps, g)void 0 === c[d] && (c[d] = g[d]);
    return {
        $$typeof: $574a51285872e9b8$var$l,
        type: a,
        key: k,
        ref: h,
        props: c,
        _owner: $574a51285872e9b8$var$K.current
    };
}
function $574a51285872e9b8$var$N(a, b) {
    return {
        $$typeof: $574a51285872e9b8$var$l,
        type: a.type,
        key: b,
        ref: a.ref,
        props: a.props,
        _owner: a._owner
    };
}
function $574a51285872e9b8$var$O(a) {
    return "object" === typeof a && null !== a && a.$$typeof === $574a51285872e9b8$var$l;
}
function $574a51285872e9b8$var$escape(a) {
    var b = {
        "=": "=0",
        ":": "=2"
    };
    return "$" + a.replace(/[=:]/g, function(a) {
        return b[a];
    });
}
var $574a51285872e9b8$var$P = /\/+/g;
function $574a51285872e9b8$var$Q(a, b) {
    return "object" === typeof a && null !== a && null != a.key ? $574a51285872e9b8$var$escape("" + a.key) : b.toString(36);
}
function $574a51285872e9b8$var$R(a, b, e, d, c) {
    var k = typeof a;
    if ("undefined" === k || "boolean" === k) a = null;
    var h = !1;
    if (null === a) h = !0;
    else switch(k){
        case "string":
        case "number":
            h = !0;
            break;
        case "object":
            switch(a.$$typeof){
                case $574a51285872e9b8$var$l:
                case $574a51285872e9b8$var$n:
                    h = !0;
            }
    }
    if (h) return h = a, c = c(h), a = "" === d ? "." + $574a51285872e9b8$var$Q(h, 0) : d, $574a51285872e9b8$var$I(c) ? (e = "", null != a && (e = a.replace($574a51285872e9b8$var$P, "$&/") + "/"), $574a51285872e9b8$var$R(c, b, e, "", function(a) {
        return a;
    })) : null != c && ($574a51285872e9b8$var$O(c) && (c = $574a51285872e9b8$var$N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace($574a51285872e9b8$var$P, "$&/") + "/") + a)), b.push(c)), 1;
    h = 0;
    d = "" === d ? "." : d + ":";
    if ($574a51285872e9b8$var$I(a)) for(var g = 0; g < a.length; g++){
        k = a[g];
        var f = d + $574a51285872e9b8$var$Q(k, g);
        h += $574a51285872e9b8$var$R(k, b, e, f, c);
    }
    else if (f = $574a51285872e9b8$var$A(a), "function" === typeof f) for(a = f.call(a), g = 0; !(k = a.next()).done;)k = k.value, f = d + $574a51285872e9b8$var$Q(k, g++), h += $574a51285872e9b8$var$R(k, b, e, f, c);
    else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
    return h;
}
function $574a51285872e9b8$var$S(a, b, e) {
    if (null == a) return a;
    var d = [], c = 0;
    $574a51285872e9b8$var$R(a, d, "", "", function(a) {
        return b.call(e, a, c++);
    });
    return d;
}
function $574a51285872e9b8$var$T(a) {
    if (-1 === a._status) {
        var b = a._result;
        b = b();
        b.then(function(b) {
            if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;
        }, function(b) {
            if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;
        });
        -1 === a._status && (a._status = 0, a._result = b);
    }
    if (1 === a._status) return a._result.default;
    throw a._result;
}
var $574a51285872e9b8$var$U = {
    current: null
}, $574a51285872e9b8$var$V = {
    transition: null
}, $574a51285872e9b8$var$W = {
    ReactCurrentDispatcher: $574a51285872e9b8$var$U,
    ReactCurrentBatchConfig: $574a51285872e9b8$var$V,
    ReactCurrentOwner: $574a51285872e9b8$var$K
};
$574a51285872e9b8$export$dca3b0875bd9a954 = {
    map: $574a51285872e9b8$var$S,
    forEach: function(a, b, e) {
        $574a51285872e9b8$var$S(a, function() {
            b.apply(this, arguments);
        }, e);
    },
    count: function(a) {
        var b = 0;
        $574a51285872e9b8$var$S(a, function() {
            b++;
        });
        return b;
    },
    toArray: function(a) {
        return $574a51285872e9b8$var$S(a, function(a) {
            return a;
        }) || [];
    },
    only: function(a) {
        if (!$574a51285872e9b8$var$O(a)) throw Error("React.Children.only expected to receive a single React element child.");
        return a;
    }
};
$574a51285872e9b8$export$16fa2f45be04daa8 = $574a51285872e9b8$var$E;
$574a51285872e9b8$export$ffb0004e005737fa = $574a51285872e9b8$var$p;
$574a51285872e9b8$export$e2c29f18771995cb = $574a51285872e9b8$var$r;
$574a51285872e9b8$export$221d75b3f55bb0bd = $574a51285872e9b8$var$G;
$574a51285872e9b8$export$5f8d39834fd61797 = $574a51285872e9b8$var$q;
$574a51285872e9b8$export$74bf444e3cd11ea5 = $574a51285872e9b8$var$w;
$574a51285872e9b8$export$ae55be85d98224ed = $574a51285872e9b8$var$W;
$574a51285872e9b8$export$e530037191fcd5d7 = function(a, b, e) {
    if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
    var d = $574a51285872e9b8$var$C({}, a.props), c = a.key, k = a.ref, h = a._owner;
    if (null != b) {
        void 0 !== b.ref && (k = b.ref, h = $574a51285872e9b8$var$K.current);
        void 0 !== b.key && (c = "" + b.key);
        if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
        for(f in b)$574a51285872e9b8$var$J.call(b, f) && !$574a51285872e9b8$var$L.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
    }
    var f = arguments.length - 2;
    if (1 === f) d.children = e;
    else if (1 < f) {
        g = Array(f);
        for(var m = 0; m < f; m++)g[m] = arguments[m + 2];
        d.children = g;
    }
    return {
        $$typeof: $574a51285872e9b8$var$l,
        type: a.type,
        key: c,
        ref: k,
        props: d,
        _owner: h
    };
};
$574a51285872e9b8$export$fd42f52fd3ae1109 = function(a) {
    a = {
        $$typeof: $574a51285872e9b8$var$u,
        _currentValue: a,
        _currentValue2: a,
        _threadCount: 0,
        Provider: null,
        Consumer: null,
        _defaultValue: null,
        _globalName: null
    };
    a.Provider = {
        $$typeof: $574a51285872e9b8$var$t,
        _context: a
    };
    return a.Consumer = a;
};
$574a51285872e9b8$export$c8a8987d4410bf2d = $574a51285872e9b8$var$M;
$574a51285872e9b8$export$d38cd72104c1f0e9 = function(a) {
    var b = $574a51285872e9b8$var$M.bind(null, a);
    b.type = a;
    return b;
};
$574a51285872e9b8$export$7d1e3a5e95ceca43 = function() {
    return {
        current: null
    };
};
$574a51285872e9b8$export$257a8862b851cb5b = function(a) {
    return {
        $$typeof: $574a51285872e9b8$var$v,
        render: a
    };
};
$574a51285872e9b8$export$a8257692ac88316c = $574a51285872e9b8$var$O;
$574a51285872e9b8$export$488013bae63b21da = function(a) {
    return {
        $$typeof: $574a51285872e9b8$var$y,
        _payload: {
            _status: -1,
            _result: a
        },
        _init: $574a51285872e9b8$var$T
    };
};
$574a51285872e9b8$export$7c73462e0d25e514 = function(a, b) {
    return {
        $$typeof: $574a51285872e9b8$var$x,
        type: a,
        compare: void 0 === b ? null : b
    };
};
$574a51285872e9b8$export$7568632d0d33d16d = function(a) {
    var b = $574a51285872e9b8$var$V.transition;
    $574a51285872e9b8$var$V.transition = {};
    try {
        a();
    } finally{
        $574a51285872e9b8$var$V.transition = b;
    }
};
$574a51285872e9b8$export$88948ce120ea2619 = function() {
    throw Error("act(...) is not supported in production builds of React.");
};
$574a51285872e9b8$export$35808ee640e87ca7 = function(a, b) {
    return $574a51285872e9b8$var$U.current.useCallback(a, b);
};
$574a51285872e9b8$export$fae74005e78b1a27 = function(a) {
    return $574a51285872e9b8$var$U.current.useContext(a);
};
$574a51285872e9b8$export$dc8fbce3eb94dc1e = function() {};
$574a51285872e9b8$export$6a7bc4e911dc01cf = function(a) {
    return $574a51285872e9b8$var$U.current.useDeferredValue(a);
};
$574a51285872e9b8$export$6d9c69b0de29b591 = function(a, b) {
    return $574a51285872e9b8$var$U.current.useEffect(a, b);
};
$574a51285872e9b8$export$f680877a34711e37 = function() {
    return $574a51285872e9b8$var$U.current.useId();
};
$574a51285872e9b8$export$d5a552a76deda3c2 = function(a, b, e) {
    return $574a51285872e9b8$var$U.current.useImperativeHandle(a, b, e);
};
$574a51285872e9b8$export$aaabe4eda9ed9969 = function(a, b) {
    return $574a51285872e9b8$var$U.current.useInsertionEffect(a, b);
};
$574a51285872e9b8$export$e5c5a5f917a5871c = function(a, b) {
    return $574a51285872e9b8$var$U.current.useLayoutEffect(a, b);
};
$574a51285872e9b8$export$1538c33de8887b59 = function(a, b) {
    return $574a51285872e9b8$var$U.current.useMemo(a, b);
};
$574a51285872e9b8$export$13e3392192263954 = function(a, b, e) {
    return $574a51285872e9b8$var$U.current.useReducer(a, b, e);
};
$574a51285872e9b8$export$b8f5890fc79d6aca = function(a) {
    return $574a51285872e9b8$var$U.current.useRef(a);
};
$574a51285872e9b8$export$60241385465d0a34 = function(a) {
    return $574a51285872e9b8$var$U.current.useState(a);
};
$574a51285872e9b8$export$306c0aa65ff9ec16 = function(a, b, e) {
    return $574a51285872e9b8$var$U.current.useSyncExternalStore(a, b, e);
};
$574a51285872e9b8$export$7b286972b8d8ccbf = function() {
    return $574a51285872e9b8$var$U.current.useTransition();
};
$574a51285872e9b8$export$83d89fbfd8236492 = "18.2.0";

});



parcelRegister("bgpZC", function(module, exports) {

$parcel$export(module.exports, "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", () => $833559fe574b4225$export$ae55be85d98224ed, (v) => $833559fe574b4225$export$ae55be85d98224ed = v);
$parcel$export(module.exports, "createPortal", () => $833559fe574b4225$export$d39a5bbd09211389, (v) => $833559fe574b4225$export$d39a5bbd09211389 = v);
$parcel$export(module.exports, "createRoot", () => $833559fe574b4225$export$882461b6382ed46c, (v) => $833559fe574b4225$export$882461b6382ed46c = v);
$parcel$export(module.exports, "findDOMNode", () => $833559fe574b4225$export$466bfc07425424d5, (v) => $833559fe574b4225$export$466bfc07425424d5 = v);
$parcel$export(module.exports, "flushSync", () => $833559fe574b4225$export$cd75ccfd720a3cd4, (v) => $833559fe574b4225$export$cd75ccfd720a3cd4 = v);
$parcel$export(module.exports, "hydrate", () => $833559fe574b4225$export$fa8d919ba61d84db, (v) => $833559fe574b4225$export$fa8d919ba61d84db = v);
$parcel$export(module.exports, "hydrateRoot", () => $833559fe574b4225$export$757ceba2d55c277e, (v) => $833559fe574b4225$export$757ceba2d55c277e = v);
$parcel$export(module.exports, "render", () => $833559fe574b4225$export$b3890eb0ae9dca99, (v) => $833559fe574b4225$export$b3890eb0ae9dca99 = v);
$parcel$export(module.exports, "unmountComponentAtNode", () => $833559fe574b4225$export$502457920280e6be, (v) => $833559fe574b4225$export$502457920280e6be = v);
$parcel$export(module.exports, "unstable_batchedUpdates", () => $833559fe574b4225$export$c78a37762a8d58e1, (v) => $833559fe574b4225$export$c78a37762a8d58e1 = v);
$parcel$export(module.exports, "unstable_renderSubtreeIntoContainer", () => $833559fe574b4225$export$dc54d992c10e8a18, (v) => $833559fe574b4225$export$dc54d992c10e8a18 = v);
$parcel$export(module.exports, "version", () => $833559fe574b4225$export$83d89fbfd8236492, (v) => $833559fe574b4225$export$83d89fbfd8236492 = v);
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/ var $833559fe574b4225$export$ae55be85d98224ed;
var $833559fe574b4225$export$d39a5bbd09211389;
var $833559fe574b4225$export$882461b6382ed46c;
var $833559fe574b4225$export$466bfc07425424d5;
var $833559fe574b4225$export$cd75ccfd720a3cd4;
var $833559fe574b4225$export$fa8d919ba61d84db;
var $833559fe574b4225$export$757ceba2d55c277e;
var $833559fe574b4225$export$b3890eb0ae9dca99;
var $833559fe574b4225$export$502457920280e6be;
var $833559fe574b4225$export$c78a37762a8d58e1;
var $833559fe574b4225$export$dc54d992c10e8a18;
var $833559fe574b4225$export$83d89fbfd8236492;
"use strict";

var $d4J5n = parcelRequire("d4J5n");

var $fw68E = parcelRequire("fw68E");
function $833559fe574b4225$var$p(a) {
    for(var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)b += "&args[]=" + encodeURIComponent(arguments[c]);
    return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
var $833559fe574b4225$var$da = new Set, $833559fe574b4225$var$ea = {};
function $833559fe574b4225$var$fa(a, b) {
    $833559fe574b4225$var$ha(a, b);
    $833559fe574b4225$var$ha(a + "Capture", b);
}
function $833559fe574b4225$var$ha(a, b) {
    $833559fe574b4225$var$ea[a] = b;
    for(a = 0; a < b.length; a++)$833559fe574b4225$var$da.add(b[a]);
}
var $833559fe574b4225$var$ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), $833559fe574b4225$var$ja = Object.prototype.hasOwnProperty, $833559fe574b4225$var$ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, $833559fe574b4225$var$la = {}, $833559fe574b4225$var$ma = {};
function $833559fe574b4225$var$oa(a) {
    if ($833559fe574b4225$var$ja.call($833559fe574b4225$var$ma, a)) return !0;
    if ($833559fe574b4225$var$ja.call($833559fe574b4225$var$la, a)) return !1;
    if ($833559fe574b4225$var$ka.test(a)) return $833559fe574b4225$var$ma[a] = !0;
    $833559fe574b4225$var$la[a] = !0;
    return !1;
}
function $833559fe574b4225$var$pa(a, b, c, d) {
    if (null !== c && 0 === c.type) return !1;
    switch(typeof b){
        case "function":
        case "symbol":
            return !0;
        case "boolean":
            if (d) return !1;
            if (null !== c) return !c.acceptsBooleans;
            a = a.toLowerCase().slice(0, 5);
            return "data-" !== a && "aria-" !== a;
        default:
            return !1;
    }
}
function $833559fe574b4225$var$qa(a, b, c, d) {
    if (null === b || "undefined" === typeof b || $833559fe574b4225$var$pa(a, b, c, d)) return !0;
    if (d) return !1;
    if (null !== c) switch(c.type){
        case 3:
            return !b;
        case 4:
            return !1 === b;
        case 5:
            return isNaN(b);
        case 6:
            return isNaN(b) || 1 > b;
    }
    return !1;
}
function $833559fe574b4225$var$v(a, b, c, d, e, f, g) {
    this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
    this.attributeName = d;
    this.attributeNamespace = e;
    this.mustUseProperty = c;
    this.propertyName = a;
    this.type = b;
    this.sanitizeURL = f;
    this.removeEmptyString = g;
}
var $833559fe574b4225$var$z = {};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
    $833559fe574b4225$var$z[a] = new $833559fe574b4225$var$v(a, 0, !1, a, null, !1, !1);
});
[
    [
        "acceptCharset",
        "accept-charset"
    ],
    [
        "className",
        "class"
    ],
    [
        "htmlFor",
        "for"
    ],
    [
        "httpEquiv",
        "http-equiv"
    ]
].forEach(function(a) {
    var b = a[0];
    $833559fe574b4225$var$z[b] = new $833559fe574b4225$var$v(b, 1, !1, a[1], null, !1, !1);
});
[
    "contentEditable",
    "draggable",
    "spellCheck",
    "value"
].forEach(function(a) {
    $833559fe574b4225$var$z[a] = new $833559fe574b4225$var$v(a, 2, !1, a.toLowerCase(), null, !1, !1);
});
[
    "autoReverse",
    "externalResourcesRequired",
    "focusable",
    "preserveAlpha"
].forEach(function(a) {
    $833559fe574b4225$var$z[a] = new $833559fe574b4225$var$v(a, 2, !1, a, null, !1, !1);
});
"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
    $833559fe574b4225$var$z[a] = new $833559fe574b4225$var$v(a, 3, !1, a.toLowerCase(), null, !1, !1);
});
[
    "checked",
    "multiple",
    "muted",
    "selected"
].forEach(function(a) {
    $833559fe574b4225$var$z[a] = new $833559fe574b4225$var$v(a, 3, !0, a, null, !1, !1);
});
[
    "capture",
    "download"
].forEach(function(a) {
    $833559fe574b4225$var$z[a] = new $833559fe574b4225$var$v(a, 4, !1, a, null, !1, !1);
});
[
    "cols",
    "rows",
    "size",
    "span"
].forEach(function(a) {
    $833559fe574b4225$var$z[a] = new $833559fe574b4225$var$v(a, 6, !1, a, null, !1, !1);
});
[
    "rowSpan",
    "start"
].forEach(function(a) {
    $833559fe574b4225$var$z[a] = new $833559fe574b4225$var$v(a, 5, !1, a.toLowerCase(), null, !1, !1);
});
var $833559fe574b4225$var$ra = /[\-:]([a-z])/g;
function $833559fe574b4225$var$sa(a) {
    return a[1].toUpperCase();
}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
    var b = a.replace($833559fe574b4225$var$ra, $833559fe574b4225$var$sa);
    $833559fe574b4225$var$z[b] = new $833559fe574b4225$var$v(b, 1, !1, a, null, !1, !1);
});
"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
    var b = a.replace($833559fe574b4225$var$ra, $833559fe574b4225$var$sa);
    $833559fe574b4225$var$z[b] = new $833559fe574b4225$var$v(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
});
[
    "xml:base",
    "xml:lang",
    "xml:space"
].forEach(function(a) {
    var b = a.replace($833559fe574b4225$var$ra, $833559fe574b4225$var$sa);
    $833559fe574b4225$var$z[b] = new $833559fe574b4225$var$v(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
});
[
    "tabIndex",
    "crossOrigin"
].forEach(function(a) {
    $833559fe574b4225$var$z[a] = new $833559fe574b4225$var$v(a, 1, !1, a.toLowerCase(), null, !1, !1);
});
$833559fe574b4225$var$z.xlinkHref = new $833559fe574b4225$var$v("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
[
    "src",
    "href",
    "action",
    "formAction"
].forEach(function(a) {
    $833559fe574b4225$var$z[a] = new $833559fe574b4225$var$v(a, 1, !1, a.toLowerCase(), null, !0, !0);
});
function $833559fe574b4225$var$ta(a, b, c, d) {
    var e = $833559fe574b4225$var$z.hasOwnProperty(b) ? $833559fe574b4225$var$z[b] : null;
    if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) $833559fe574b4225$var$qa(b, c, e, d) && (c = null), d || null === e ? $833559fe574b4225$var$oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));
}
var $833559fe574b4225$var$ua = $d4J5n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, $833559fe574b4225$var$va = Symbol.for("react.element"), $833559fe574b4225$var$wa = Symbol.for("react.portal"), $833559fe574b4225$var$ya = Symbol.for("react.fragment"), $833559fe574b4225$var$za = Symbol.for("react.strict_mode"), $833559fe574b4225$var$Aa = Symbol.for("react.profiler"), $833559fe574b4225$var$Ba = Symbol.for("react.provider"), $833559fe574b4225$var$Ca = Symbol.for("react.context"), $833559fe574b4225$var$Da = Symbol.for("react.forward_ref"), $833559fe574b4225$var$Ea = Symbol.for("react.suspense"), $833559fe574b4225$var$Fa = Symbol.for("react.suspense_list"), $833559fe574b4225$var$Ga = Symbol.for("react.memo"), $833559fe574b4225$var$Ha = Symbol.for("react.lazy");
Symbol.for("react.scope");
Symbol.for("react.debug_trace_mode");
var $833559fe574b4225$var$Ia = Symbol.for("react.offscreen");
Symbol.for("react.legacy_hidden");
Symbol.for("react.cache");
Symbol.for("react.tracing_marker");
var $833559fe574b4225$var$Ja = Symbol.iterator;
function $833559fe574b4225$var$Ka(a) {
    if (null === a || "object" !== typeof a) return null;
    a = $833559fe574b4225$var$Ja && a[$833559fe574b4225$var$Ja] || a["@@iterator"];
    return "function" === typeof a ? a : null;
}
var $833559fe574b4225$var$A = Object.assign, $833559fe574b4225$var$La;
function $833559fe574b4225$var$Ma(a) {
    if (void 0 === $833559fe574b4225$var$La) try {
        throw Error();
    } catch (c) {
        var b = c.stack.trim().match(/\n( *(at )?)/);
        $833559fe574b4225$var$La = b && b[1] || "";
    }
    return "\n" + $833559fe574b4225$var$La + a;
}
var $833559fe574b4225$var$Na = !1;
function $833559fe574b4225$var$Oa(a, b) {
    if (!a || $833559fe574b4225$var$Na) return "";
    $833559fe574b4225$var$Na = !0;
    var c = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
        if (b) {
            if (b = function() {
                throw Error();
            }, Object.defineProperty(b.prototype, "props", {
                set: function() {
                    throw Error();
                }
            }), "object" === typeof Reflect && Reflect.construct) {
                try {
                    Reflect.construct(b, []);
                } catch (l) {
                    var d = l;
                }
                Reflect.construct(a, [], b);
            } else {
                try {
                    b.call();
                } catch (l) {
                    d = l;
                }
                a.call(b.prototype);
            }
        } else {
            try {
                throw Error();
            } catch (l) {
                d = l;
            }
            a();
        }
    } catch (l) {
        if (l && d && "string" === typeof l.stack) {
            for(var e = l.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];)h--;
            for(; 1 <= g && 0 <= h; g--, h--)if (e[g] !== f[h]) {
                if (1 !== g || 1 !== h) {
                    do if (g--, h--, 0 > h || e[g] !== f[h]) {
                        var k = "\n" + e[g].replace(" at new ", " at ");
                        a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName));
                        return k;
                    }
                    while (1 <= g && 0 <= h);
                }
                break;
            }
        }
    } finally{
        $833559fe574b4225$var$Na = !1, Error.prepareStackTrace = c;
    }
    return (a = a ? a.displayName || a.name : "") ? $833559fe574b4225$var$Ma(a) : "";
}
function $833559fe574b4225$var$Pa(a) {
    switch(a.tag){
        case 5:
            return $833559fe574b4225$var$Ma(a.type);
        case 16:
            return $833559fe574b4225$var$Ma("Lazy");
        case 13:
            return $833559fe574b4225$var$Ma("Suspense");
        case 19:
            return $833559fe574b4225$var$Ma("SuspenseList");
        case 0:
        case 2:
        case 15:
            return a = $833559fe574b4225$var$Oa(a.type, !1), a;
        case 11:
            return a = $833559fe574b4225$var$Oa(a.type.render, !1), a;
        case 1:
            return a = $833559fe574b4225$var$Oa(a.type, !0), a;
        default:
            return "";
    }
}
function $833559fe574b4225$var$Qa(a) {
    if (null == a) return null;
    if ("function" === typeof a) return a.displayName || a.name || null;
    if ("string" === typeof a) return a;
    switch(a){
        case $833559fe574b4225$var$ya:
            return "Fragment";
        case $833559fe574b4225$var$wa:
            return "Portal";
        case $833559fe574b4225$var$Aa:
            return "Profiler";
        case $833559fe574b4225$var$za:
            return "StrictMode";
        case $833559fe574b4225$var$Ea:
            return "Suspense";
        case $833559fe574b4225$var$Fa:
            return "SuspenseList";
    }
    if ("object" === typeof a) switch(a.$$typeof){
        case $833559fe574b4225$var$Ca:
            return (a.displayName || "Context") + ".Consumer";
        case $833559fe574b4225$var$Ba:
            return (a._context.displayName || "Context") + ".Provider";
        case $833559fe574b4225$var$Da:
            var b = a.render;
            a = a.displayName;
            a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
            return a;
        case $833559fe574b4225$var$Ga:
            return b = a.displayName || null, null !== b ? b : $833559fe574b4225$var$Qa(a.type) || "Memo";
        case $833559fe574b4225$var$Ha:
            b = a._payload;
            a = a._init;
            try {
                return $833559fe574b4225$var$Qa(a(b));
            } catch (c) {}
    }
    return null;
}
function $833559fe574b4225$var$Ra(a) {
    var b = a.type;
    switch(a.tag){
        case 24:
            return "Cache";
        case 9:
            return (b.displayName || "Context") + ".Consumer";
        case 10:
            return (b._context.displayName || "Context") + ".Provider";
        case 18:
            return "DehydratedFragment";
        case 11:
            return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
        case 7:
            return "Fragment";
        case 5:
            return b;
        case 4:
            return "Portal";
        case 3:
            return "Root";
        case 6:
            return "Text";
        case 16:
            return $833559fe574b4225$var$Qa(b);
        case 8:
            return b === $833559fe574b4225$var$za ? "StrictMode" : "Mode";
        case 22:
            return "Offscreen";
        case 12:
            return "Profiler";
        case 21:
            return "Scope";
        case 13:
            return "Suspense";
        case 19:
            return "SuspenseList";
        case 25:
            return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
            if ("function" === typeof b) return b.displayName || b.name || null;
            if ("string" === typeof b) return b;
    }
    return null;
}
function $833559fe574b4225$var$Sa(a) {
    switch(typeof a){
        case "boolean":
        case "number":
        case "string":
        case "undefined":
            return a;
        case "object":
            return a;
        default:
            return "";
    }
}
function $833559fe574b4225$var$Ta(a) {
    var b = a.type;
    return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
}
function $833559fe574b4225$var$Ua(a) {
    var b = $833559fe574b4225$var$Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = "" + a[b];
    if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
        var e = c.get, f = c.set;
        Object.defineProperty(a, b, {
            configurable: !0,
            get: function() {
                return e.call(this);
            },
            set: function(a) {
                d = "" + a;
                f.call(this, a);
            }
        });
        Object.defineProperty(a, b, {
            enumerable: c.enumerable
        });
        return {
            getValue: function() {
                return d;
            },
            setValue: function(a) {
                d = "" + a;
            },
            stopTracking: function() {
                a._valueTracker = null;
                delete a[b];
            }
        };
    }
}
function $833559fe574b4225$var$Va(a) {
    a._valueTracker || (a._valueTracker = $833559fe574b4225$var$Ua(a));
}
function $833559fe574b4225$var$Wa(a) {
    if (!a) return !1;
    var b = a._valueTracker;
    if (!b) return !0;
    var c = b.getValue();
    var d = "";
    a && (d = $833559fe574b4225$var$Ta(a) ? a.checked ? "true" : "false" : a.value);
    a = d;
    return a !== c ? (b.setValue(a), !0) : !1;
}
function $833559fe574b4225$var$Xa(a) {
    a = a || ("undefined" !== typeof document ? document : void 0);
    if ("undefined" === typeof a) return null;
    try {
        return a.activeElement || a.body;
    } catch (b) {
        return a.body;
    }
}
function $833559fe574b4225$var$Ya(a, b) {
    var c = b.checked;
    return $833559fe574b4225$var$A({}, b, {
        defaultChecked: void 0,
        defaultValue: void 0,
        value: void 0,
        checked: null != c ? c : a._wrapperState.initialChecked
    });
}
function $833559fe574b4225$var$Za(a, b) {
    var c = null == b.defaultValue ? "" : b.defaultValue, d = null != b.checked ? b.checked : b.defaultChecked;
    c = $833559fe574b4225$var$Sa(null != b.value ? b.value : c);
    a._wrapperState = {
        initialChecked: d,
        initialValue: c,
        controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
    };
}
function $833559fe574b4225$var$ab(a, b) {
    b = b.checked;
    null != b && $833559fe574b4225$var$ta(a, "checked", b, !1);
}
function $833559fe574b4225$var$bb(a, b) {
    $833559fe574b4225$var$ab(a, b);
    var c = $833559fe574b4225$var$Sa(b.value), d = b.type;
    if (null != c) {
        if ("number" === d) {
            if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
        } else a.value !== "" + c && (a.value = "" + c);
    } else if ("submit" === d || "reset" === d) {
        a.removeAttribute("value");
        return;
    }
    b.hasOwnProperty("value") ? $833559fe574b4225$var$cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && $833559fe574b4225$var$cb(a, b.type, $833559fe574b4225$var$Sa(b.defaultValue));
    null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
}
function $833559fe574b4225$var$db(a, b, c) {
    if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
        var d = b.type;
        if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
        b = "" + a._wrapperState.initialValue;
        c || b === a.value || (a.value = b);
        a.defaultValue = b;
    }
    c = a.name;
    "" !== c && (a.name = "");
    a.defaultChecked = !!a._wrapperState.initialChecked;
    "" !== c && (a.name = c);
}
function $833559fe574b4225$var$cb(a, b, c) {
    if ("number" !== b || $833559fe574b4225$var$Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
}
var $833559fe574b4225$var$eb = Array.isArray;
function $833559fe574b4225$var$fb(a, b, c, d) {
    a = a.options;
    if (b) {
        b = {};
        for(var e = 0; e < c.length; e++)b["$" + c[e]] = !0;
        for(c = 0; c < a.length; c++)e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
    } else {
        c = "" + $833559fe574b4225$var$Sa(c);
        b = null;
        for(e = 0; e < a.length; e++){
            if (a[e].value === c) {
                a[e].selected = !0;
                d && (a[e].defaultSelected = !0);
                return;
            }
            null !== b || a[e].disabled || (b = a[e]);
        }
        null !== b && (b.selected = !0);
    }
}
function $833559fe574b4225$var$gb(a, b) {
    if (null != b.dangerouslySetInnerHTML) throw Error($833559fe574b4225$var$p(91));
    return $833559fe574b4225$var$A({}, b, {
        value: void 0,
        defaultValue: void 0,
        children: "" + a._wrapperState.initialValue
    });
}
function $833559fe574b4225$var$hb(a, b) {
    var c = b.value;
    if (null == c) {
        c = b.children;
        b = b.defaultValue;
        if (null != c) {
            if (null != b) throw Error($833559fe574b4225$var$p(92));
            if ($833559fe574b4225$var$eb(c)) {
                if (1 < c.length) throw Error($833559fe574b4225$var$p(93));
                c = c[0];
            }
            b = c;
        }
        null == b && (b = "");
        c = b;
    }
    a._wrapperState = {
        initialValue: $833559fe574b4225$var$Sa(c)
    };
}
function $833559fe574b4225$var$ib(a, b) {
    var c = $833559fe574b4225$var$Sa(b.value), d = $833559fe574b4225$var$Sa(b.defaultValue);
    null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
    null != d && (a.defaultValue = "" + d);
}
function $833559fe574b4225$var$jb(a) {
    var b = a.textContent;
    b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
}
function $833559fe574b4225$var$kb(a) {
    switch(a){
        case "svg":
            return "http://www.w3.org/2000/svg";
        case "math":
            return "http://www.w3.org/1998/Math/MathML";
        default:
            return "http://www.w3.org/1999/xhtml";
    }
}
function $833559fe574b4225$var$lb(a, b) {
    return null == a || "http://www.w3.org/1999/xhtml" === a ? $833559fe574b4225$var$kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
}
var $833559fe574b4225$var$mb, $833559fe574b4225$var$nb = function(a) {
    return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b, c, d, e) {
        MSApp.execUnsafeLocalFunction(function() {
            return a(b, c, d, e);
        });
    } : a;
}(function(a, b) {
    if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;
    else {
        $833559fe574b4225$var$mb = $833559fe574b4225$var$mb || document.createElement("div");
        $833559fe574b4225$var$mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
        for(b = $833559fe574b4225$var$mb.firstChild; a.firstChild;)a.removeChild(a.firstChild);
        for(; b.firstChild;)a.appendChild(b.firstChild);
    }
});
function $833559fe574b4225$var$ob(a, b) {
    if (b) {
        var c = a.firstChild;
        if (c && c === a.lastChild && 3 === c.nodeType) {
            c.nodeValue = b;
            return;
        }
    }
    a.textContent = b;
}
var $833559fe574b4225$var$pb = {
    animationIterationCount: !0,
    aspectRatio: !0,
    borderImageOutset: !0,
    borderImageSlice: !0,
    borderImageWidth: !0,
    boxFlex: !0,
    boxFlexGroup: !0,
    boxOrdinalGroup: !0,
    columnCount: !0,
    columns: !0,
    flex: !0,
    flexGrow: !0,
    flexPositive: !0,
    flexShrink: !0,
    flexNegative: !0,
    flexOrder: !0,
    gridArea: !0,
    gridRow: !0,
    gridRowEnd: !0,
    gridRowSpan: !0,
    gridRowStart: !0,
    gridColumn: !0,
    gridColumnEnd: !0,
    gridColumnSpan: !0,
    gridColumnStart: !0,
    fontWeight: !0,
    lineClamp: !0,
    lineHeight: !0,
    opacity: !0,
    order: !0,
    orphans: !0,
    tabSize: !0,
    widows: !0,
    zIndex: !0,
    zoom: !0,
    fillOpacity: !0,
    floodOpacity: !0,
    stopOpacity: !0,
    strokeDasharray: !0,
    strokeDashoffset: !0,
    strokeMiterlimit: !0,
    strokeOpacity: !0,
    strokeWidth: !0
}, $833559fe574b4225$var$qb = [
    "Webkit",
    "ms",
    "Moz",
    "O"
];
Object.keys($833559fe574b4225$var$pb).forEach(function(a) {
    $833559fe574b4225$var$qb.forEach(function(b) {
        b = b + a.charAt(0).toUpperCase() + a.substring(1);
        $833559fe574b4225$var$pb[b] = $833559fe574b4225$var$pb[a];
    });
});
function $833559fe574b4225$var$rb(a, b, c) {
    return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || $833559fe574b4225$var$pb.hasOwnProperty(a) && $833559fe574b4225$var$pb[a] ? ("" + b).trim() : b + "px";
}
function $833559fe574b4225$var$sb(a, b) {
    a = a.style;
    for(var c in b)if (b.hasOwnProperty(c)) {
        var d = 0 === c.indexOf("--"), e = $833559fe574b4225$var$rb(c, b[c], d);
        "float" === c && (c = "cssFloat");
        d ? a.setProperty(c, e) : a[c] = e;
    }
}
var $833559fe574b4225$var$tb = $833559fe574b4225$var$A({
    menuitem: !0
}, {
    area: !0,
    base: !0,
    br: !0,
    col: !0,
    embed: !0,
    hr: !0,
    img: !0,
    input: !0,
    keygen: !0,
    link: !0,
    meta: !0,
    param: !0,
    source: !0,
    track: !0,
    wbr: !0
});
function $833559fe574b4225$var$ub(a, b) {
    if (b) {
        if ($833559fe574b4225$var$tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error($833559fe574b4225$var$p(137, a));
        if (null != b.dangerouslySetInnerHTML) {
            if (null != b.children) throw Error($833559fe574b4225$var$p(60));
            if ("object" !== typeof b.dangerouslySetInnerHTML || !("__html" in b.dangerouslySetInnerHTML)) throw Error($833559fe574b4225$var$p(61));
        }
        if (null != b.style && "object" !== typeof b.style) throw Error($833559fe574b4225$var$p(62));
    }
}
function $833559fe574b4225$var$vb(a, b) {
    if (-1 === a.indexOf("-")) return "string" === typeof b.is;
    switch(a){
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
            return !1;
        default:
            return !0;
    }
}
var $833559fe574b4225$var$wb = null;
function $833559fe574b4225$var$xb(a) {
    a = a.target || a.srcElement || window;
    a.correspondingUseElement && (a = a.correspondingUseElement);
    return 3 === a.nodeType ? a.parentNode : a;
}
var $833559fe574b4225$var$yb = null, $833559fe574b4225$var$zb = null, $833559fe574b4225$var$Ab = null;
function $833559fe574b4225$var$Bb(a) {
    if (a = $833559fe574b4225$var$Cb(a)) {
        if ("function" !== typeof $833559fe574b4225$var$yb) throw Error($833559fe574b4225$var$p(280));
        var b = a.stateNode;
        b && (b = $833559fe574b4225$var$Db(b), $833559fe574b4225$var$yb(a.stateNode, a.type, b));
    }
}
function $833559fe574b4225$var$Eb(a) {
    $833559fe574b4225$var$zb ? $833559fe574b4225$var$Ab ? $833559fe574b4225$var$Ab.push(a) : $833559fe574b4225$var$Ab = [
        a
    ] : $833559fe574b4225$var$zb = a;
}
function $833559fe574b4225$var$Fb() {
    if ($833559fe574b4225$var$zb) {
        var a = $833559fe574b4225$var$zb, b = $833559fe574b4225$var$Ab;
        $833559fe574b4225$var$Ab = $833559fe574b4225$var$zb = null;
        $833559fe574b4225$var$Bb(a);
        if (b) for(a = 0; a < b.length; a++)$833559fe574b4225$var$Bb(b[a]);
    }
}
function $833559fe574b4225$var$Gb(a, b) {
    return a(b);
}
function $833559fe574b4225$var$Hb() {}
var $833559fe574b4225$var$Ib = !1;
function $833559fe574b4225$var$Jb(a, b, c) {
    if ($833559fe574b4225$var$Ib) return a(b, c);
    $833559fe574b4225$var$Ib = !0;
    try {
        return $833559fe574b4225$var$Gb(a, b, c);
    } finally{
        if ($833559fe574b4225$var$Ib = !1, null !== $833559fe574b4225$var$zb || null !== $833559fe574b4225$var$Ab) $833559fe574b4225$var$Hb(), $833559fe574b4225$var$Fb();
    }
}
function $833559fe574b4225$var$Kb(a, b) {
    var c = a.stateNode;
    if (null === c) return null;
    var d = $833559fe574b4225$var$Db(c);
    if (null === d) return null;
    c = d[b];
    a: switch(b){
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
            (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
            a = !d;
            break a;
        default:
            a = !1;
    }
    if (a) return null;
    if (c && "function" !== typeof c) throw Error($833559fe574b4225$var$p(231, b, typeof c));
    return c;
}
var $833559fe574b4225$var$Lb = !1;
if ($833559fe574b4225$var$ia) try {
    var $833559fe574b4225$var$Mb = {};
    Object.defineProperty($833559fe574b4225$var$Mb, "passive", {
        get: function() {
            $833559fe574b4225$var$Lb = !0;
        }
    });
    window.addEventListener("test", $833559fe574b4225$var$Mb, $833559fe574b4225$var$Mb);
    window.removeEventListener("test", $833559fe574b4225$var$Mb, $833559fe574b4225$var$Mb);
} catch (a) {
    $833559fe574b4225$var$Lb = !1;
}
function $833559fe574b4225$var$Nb(a, b, c, d, e, f, g, h, k) {
    var l = Array.prototype.slice.call(arguments, 3);
    try {
        b.apply(c, l);
    } catch (m) {
        this.onError(m);
    }
}
var $833559fe574b4225$var$Ob = !1, $833559fe574b4225$var$Pb = null, $833559fe574b4225$var$Qb = !1, $833559fe574b4225$var$Rb = null, $833559fe574b4225$var$Sb = {
    onError: function(a) {
        $833559fe574b4225$var$Ob = !0;
        $833559fe574b4225$var$Pb = a;
    }
};
function $833559fe574b4225$var$Tb(a, b, c, d, e, f, g, h, k) {
    $833559fe574b4225$var$Ob = !1;
    $833559fe574b4225$var$Pb = null;
    $833559fe574b4225$var$Nb.apply($833559fe574b4225$var$Sb, arguments);
}
function $833559fe574b4225$var$Ub(a, b, c, d, e, f, g, h, k) {
    $833559fe574b4225$var$Tb.apply(this, arguments);
    if ($833559fe574b4225$var$Ob) {
        if ($833559fe574b4225$var$Ob) {
            var l = $833559fe574b4225$var$Pb;
            $833559fe574b4225$var$Ob = !1;
            $833559fe574b4225$var$Pb = null;
        } else throw Error($833559fe574b4225$var$p(198));
        $833559fe574b4225$var$Qb || ($833559fe574b4225$var$Qb = !0, $833559fe574b4225$var$Rb = l);
    }
}
function $833559fe574b4225$var$Vb(a) {
    var b = a, c = a;
    if (a.alternate) for(; b.return;)b = b.return;
    else {
        a = b;
        do b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return;
        while (a);
    }
    return 3 === b.tag ? c : null;
}
function $833559fe574b4225$var$Wb(a) {
    if (13 === a.tag) {
        var b = a.memoizedState;
        null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
        if (null !== b) return b.dehydrated;
    }
    return null;
}
function $833559fe574b4225$var$Xb(a) {
    if ($833559fe574b4225$var$Vb(a) !== a) throw Error($833559fe574b4225$var$p(188));
}
function $833559fe574b4225$var$Yb(a) {
    var b = a.alternate;
    if (!b) {
        b = $833559fe574b4225$var$Vb(a);
        if (null === b) throw Error($833559fe574b4225$var$p(188));
        return b !== a ? null : a;
    }
    for(var c = a, d = b;;){
        var e = c.return;
        if (null === e) break;
        var f = e.alternate;
        if (null === f) {
            d = e.return;
            if (null !== d) {
                c = d;
                continue;
            }
            break;
        }
        if (e.child === f.child) {
            for(f = e.child; f;){
                if (f === c) return $833559fe574b4225$var$Xb(e), a;
                if (f === d) return $833559fe574b4225$var$Xb(e), b;
                f = f.sibling;
            }
            throw Error($833559fe574b4225$var$p(188));
        }
        if (c.return !== d.return) c = e, d = f;
        else {
            for(var g = !1, h = e.child; h;){
                if (h === c) {
                    g = !0;
                    c = e;
                    d = f;
                    break;
                }
                if (h === d) {
                    g = !0;
                    d = e;
                    c = f;
                    break;
                }
                h = h.sibling;
            }
            if (!g) {
                for(h = f.child; h;){
                    if (h === c) {
                        g = !0;
                        c = f;
                        d = e;
                        break;
                    }
                    if (h === d) {
                        g = !0;
                        d = f;
                        c = e;
                        break;
                    }
                    h = h.sibling;
                }
                if (!g) throw Error($833559fe574b4225$var$p(189));
            }
        }
        if (c.alternate !== d) throw Error($833559fe574b4225$var$p(190));
    }
    if (3 !== c.tag) throw Error($833559fe574b4225$var$p(188));
    return c.stateNode.current === c ? a : b;
}
function $833559fe574b4225$var$Zb(a) {
    a = $833559fe574b4225$var$Yb(a);
    return null !== a ? $833559fe574b4225$var$$b(a) : null;
}
function $833559fe574b4225$var$$b(a) {
    if (5 === a.tag || 6 === a.tag) return a;
    for(a = a.child; null !== a;){
        var b = $833559fe574b4225$var$$b(a);
        if (null !== b) return b;
        a = a.sibling;
    }
    return null;
}
var $833559fe574b4225$var$ac = $fw68E.unstable_scheduleCallback, $833559fe574b4225$var$bc = $fw68E.unstable_cancelCallback, $833559fe574b4225$var$cc = $fw68E.unstable_shouldYield, $833559fe574b4225$var$dc = $fw68E.unstable_requestPaint, $833559fe574b4225$var$B = $fw68E.unstable_now, $833559fe574b4225$var$ec = $fw68E.unstable_getCurrentPriorityLevel, $833559fe574b4225$var$fc = $fw68E.unstable_ImmediatePriority, $833559fe574b4225$var$gc = $fw68E.unstable_UserBlockingPriority, $833559fe574b4225$var$hc = $fw68E.unstable_NormalPriority, $833559fe574b4225$var$ic = $fw68E.unstable_LowPriority, $833559fe574b4225$var$jc = $fw68E.unstable_IdlePriority, $833559fe574b4225$var$kc = null, $833559fe574b4225$var$lc = null;
function $833559fe574b4225$var$mc(a) {
    if ($833559fe574b4225$var$lc && "function" === typeof $833559fe574b4225$var$lc.onCommitFiberRoot) try {
        $833559fe574b4225$var$lc.onCommitFiberRoot($833559fe574b4225$var$kc, a, void 0, 128 === (a.current.flags & 128));
    } catch (b) {}
}
var $833559fe574b4225$var$oc = Math.clz32 ? Math.clz32 : $833559fe574b4225$var$nc, $833559fe574b4225$var$pc = Math.log, $833559fe574b4225$var$qc = Math.LN2;
function $833559fe574b4225$var$nc(a) {
    a >>>= 0;
    return 0 === a ? 32 : 31 - ($833559fe574b4225$var$pc(a) / $833559fe574b4225$var$qc | 0) | 0;
}
var $833559fe574b4225$var$rc = 64, $833559fe574b4225$var$sc = 4194304;
function $833559fe574b4225$var$tc(a) {
    switch(a & -a){
        case 1:
            return 1;
        case 2:
            return 2;
        case 4:
            return 4;
        case 8:
            return 8;
        case 16:
            return 16;
        case 32:
            return 32;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
            return a & 4194240;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
            return a & 130023424;
        case 134217728:
            return 134217728;
        case 268435456:
            return 268435456;
        case 536870912:
            return 536870912;
        case 1073741824:
            return 1073741824;
        default:
            return a;
    }
}
function $833559fe574b4225$var$uc(a, b) {
    var c = a.pendingLanes;
    if (0 === c) return 0;
    var d = 0, e = a.suspendedLanes, f = a.pingedLanes, g = c & 268435455;
    if (0 !== g) {
        var h = g & ~e;
        0 !== h ? d = $833559fe574b4225$var$tc(h) : (f &= g, 0 !== f && (d = $833559fe574b4225$var$tc(f)));
    } else g = c & ~e, 0 !== g ? d = $833559fe574b4225$var$tc(g) : 0 !== f && (d = $833559fe574b4225$var$tc(f));
    if (0 === d) return 0;
    if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 16 === e && 0 !== (f & 4194240))) return b;
    0 !== (d & 4) && (d |= c & 16);
    b = a.entangledLanes;
    if (0 !== b) for(a = a.entanglements, b &= d; 0 < b;)c = 31 - $833559fe574b4225$var$oc(b), e = 1 << c, d |= a[c], b &= ~e;
    return d;
}
function $833559fe574b4225$var$vc(a, b) {
    switch(a){
        case 1:
        case 2:
        case 4:
            return b + 250;
        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
            return b + 5E3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
            return -1;
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
            return -1;
        default:
            return -1;
    }
}
function $833559fe574b4225$var$wc(a, b) {
    for(var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f;){
        var g = 31 - $833559fe574b4225$var$oc(f), h = 1 << g, k = e[g];
        if (-1 === k) {
            if (0 === (h & c) || 0 !== (h & d)) e[g] = $833559fe574b4225$var$vc(h, b);
        } else k <= b && (a.expiredLanes |= h);
        f &= ~h;
    }
}
function $833559fe574b4225$var$xc(a) {
    a = a.pendingLanes & -1073741825;
    return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
}
function $833559fe574b4225$var$yc() {
    var a = $833559fe574b4225$var$rc;
    $833559fe574b4225$var$rc <<= 1;
    0 === ($833559fe574b4225$var$rc & 4194240) && ($833559fe574b4225$var$rc = 64);
    return a;
}
function $833559fe574b4225$var$zc(a) {
    for(var b = [], c = 0; 31 > c; c++)b.push(a);
    return b;
}
function $833559fe574b4225$var$Ac(a, b, c) {
    a.pendingLanes |= b;
    536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
    a = a.eventTimes;
    b = 31 - $833559fe574b4225$var$oc(b);
    a[b] = c;
}
function $833559fe574b4225$var$Bc(a, b) {
    var c = a.pendingLanes & ~b;
    a.pendingLanes = b;
    a.suspendedLanes = 0;
    a.pingedLanes = 0;
    a.expiredLanes &= b;
    a.mutableReadLanes &= b;
    a.entangledLanes &= b;
    b = a.entanglements;
    var d = a.eventTimes;
    for(a = a.expirationTimes; 0 < c;){
        var e = 31 - $833559fe574b4225$var$oc(c), f = 1 << e;
        b[e] = 0;
        d[e] = -1;
        a[e] = -1;
        c &= ~f;
    }
}
function $833559fe574b4225$var$Cc(a, b) {
    var c = a.entangledLanes |= b;
    for(a = a.entanglements; c;){
        var d = 31 - $833559fe574b4225$var$oc(c), e = 1 << d;
        e & b | a[d] & b && (a[d] |= b);
        c &= ~e;
    }
}
var $833559fe574b4225$var$C = 0;
function $833559fe574b4225$var$Dc(a) {
    a &= -a;
    return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
}
var $833559fe574b4225$var$Ec, $833559fe574b4225$var$Fc, $833559fe574b4225$var$Gc, $833559fe574b4225$var$Hc, $833559fe574b4225$var$Ic, $833559fe574b4225$var$Jc = !1, $833559fe574b4225$var$Kc = [], $833559fe574b4225$var$Lc = null, $833559fe574b4225$var$Mc = null, $833559fe574b4225$var$Nc = null, $833559fe574b4225$var$Oc = new Map, $833559fe574b4225$var$Pc = new Map, $833559fe574b4225$var$Qc = [], $833559fe574b4225$var$Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
function $833559fe574b4225$var$Sc(a, b) {
    switch(a){
        case "focusin":
        case "focusout":
            $833559fe574b4225$var$Lc = null;
            break;
        case "dragenter":
        case "dragleave":
            $833559fe574b4225$var$Mc = null;
            break;
        case "mouseover":
        case "mouseout":
            $833559fe574b4225$var$Nc = null;
            break;
        case "pointerover":
        case "pointerout":
            $833559fe574b4225$var$Oc.delete(b.pointerId);
            break;
        case "gotpointercapture":
        case "lostpointercapture":
            $833559fe574b4225$var$Pc.delete(b.pointerId);
    }
}
function $833559fe574b4225$var$Tc(a, b, c, d, e, f) {
    if (null === a || a.nativeEvent !== f) return a = {
        blockedOn: b,
        domEventName: c,
        eventSystemFlags: d,
        nativeEvent: f,
        targetContainers: [
            e
        ]
    }, null !== b && (b = $833559fe574b4225$var$Cb(b), null !== b && $833559fe574b4225$var$Fc(b)), a;
    a.eventSystemFlags |= d;
    b = a.targetContainers;
    null !== e && -1 === b.indexOf(e) && b.push(e);
    return a;
}
function $833559fe574b4225$var$Uc(a, b, c, d, e) {
    switch(b){
        case "focusin":
            return $833559fe574b4225$var$Lc = $833559fe574b4225$var$Tc($833559fe574b4225$var$Lc, a, b, c, d, e), !0;
        case "dragenter":
            return $833559fe574b4225$var$Mc = $833559fe574b4225$var$Tc($833559fe574b4225$var$Mc, a, b, c, d, e), !0;
        case "mouseover":
            return $833559fe574b4225$var$Nc = $833559fe574b4225$var$Tc($833559fe574b4225$var$Nc, a, b, c, d, e), !0;
        case "pointerover":
            var f = e.pointerId;
            $833559fe574b4225$var$Oc.set(f, $833559fe574b4225$var$Tc($833559fe574b4225$var$Oc.get(f) || null, a, b, c, d, e));
            return !0;
        case "gotpointercapture":
            return f = e.pointerId, $833559fe574b4225$var$Pc.set(f, $833559fe574b4225$var$Tc($833559fe574b4225$var$Pc.get(f) || null, a, b, c, d, e)), !0;
    }
    return !1;
}
function $833559fe574b4225$var$Vc(a) {
    var b = $833559fe574b4225$var$Wc(a.target);
    if (null !== b) {
        var c = $833559fe574b4225$var$Vb(b);
        if (null !== c) {
            if (b = c.tag, 13 === b) {
                if (b = $833559fe574b4225$var$Wb(c), null !== b) {
                    a.blockedOn = b;
                    $833559fe574b4225$var$Ic(a.priority, function() {
                        $833559fe574b4225$var$Gc(c);
                    });
                    return;
                }
            } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
                a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
                return;
            }
        }
    }
    a.blockedOn = null;
}
function $833559fe574b4225$var$Xc(a) {
    if (null !== a.blockedOn) return !1;
    for(var b = a.targetContainers; 0 < b.length;){
        var c = $833559fe574b4225$var$Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
        if (null === c) {
            c = a.nativeEvent;
            var d = new c.constructor(c.type, c);
            $833559fe574b4225$var$wb = d;
            c.target.dispatchEvent(d);
            $833559fe574b4225$var$wb = null;
        } else return b = $833559fe574b4225$var$Cb(c), null !== b && $833559fe574b4225$var$Fc(b), a.blockedOn = c, !1;
        b.shift();
    }
    return !0;
}
function $833559fe574b4225$var$Zc(a, b, c) {
    $833559fe574b4225$var$Xc(a) && c.delete(b);
}
function $833559fe574b4225$var$$c() {
    $833559fe574b4225$var$Jc = !1;
    null !== $833559fe574b4225$var$Lc && $833559fe574b4225$var$Xc($833559fe574b4225$var$Lc) && ($833559fe574b4225$var$Lc = null);
    null !== $833559fe574b4225$var$Mc && $833559fe574b4225$var$Xc($833559fe574b4225$var$Mc) && ($833559fe574b4225$var$Mc = null);
    null !== $833559fe574b4225$var$Nc && $833559fe574b4225$var$Xc($833559fe574b4225$var$Nc) && ($833559fe574b4225$var$Nc = null);
    $833559fe574b4225$var$Oc.forEach($833559fe574b4225$var$Zc);
    $833559fe574b4225$var$Pc.forEach($833559fe574b4225$var$Zc);
}
function $833559fe574b4225$var$ad(a, b) {
    a.blockedOn === b && (a.blockedOn = null, $833559fe574b4225$var$Jc || ($833559fe574b4225$var$Jc = !0, $fw68E.unstable_scheduleCallback($fw68E.unstable_NormalPriority, $833559fe574b4225$var$$c)));
}
function $833559fe574b4225$var$bd(a) {
    function b(b) {
        return $833559fe574b4225$var$ad(b, a);
    }
    if (0 < $833559fe574b4225$var$Kc.length) {
        $833559fe574b4225$var$ad($833559fe574b4225$var$Kc[0], a);
        for(var c = 1; c < $833559fe574b4225$var$Kc.length; c++){
            var d = $833559fe574b4225$var$Kc[c];
            d.blockedOn === a && (d.blockedOn = null);
        }
    }
    null !== $833559fe574b4225$var$Lc && $833559fe574b4225$var$ad($833559fe574b4225$var$Lc, a);
    null !== $833559fe574b4225$var$Mc && $833559fe574b4225$var$ad($833559fe574b4225$var$Mc, a);
    null !== $833559fe574b4225$var$Nc && $833559fe574b4225$var$ad($833559fe574b4225$var$Nc, a);
    $833559fe574b4225$var$Oc.forEach(b);
    $833559fe574b4225$var$Pc.forEach(b);
    for(c = 0; c < $833559fe574b4225$var$Qc.length; c++)d = $833559fe574b4225$var$Qc[c], d.blockedOn === a && (d.blockedOn = null);
    for(; 0 < $833559fe574b4225$var$Qc.length && (c = $833559fe574b4225$var$Qc[0], null === c.blockedOn);)$833559fe574b4225$var$Vc(c), null === c.blockedOn && $833559fe574b4225$var$Qc.shift();
}
var $833559fe574b4225$var$cd = $833559fe574b4225$var$ua.ReactCurrentBatchConfig, $833559fe574b4225$var$dd = !0;
function $833559fe574b4225$var$ed(a, b, c, d) {
    var e = $833559fe574b4225$var$C, f = $833559fe574b4225$var$cd.transition;
    $833559fe574b4225$var$cd.transition = null;
    try {
        $833559fe574b4225$var$C = 1, $833559fe574b4225$var$fd(a, b, c, d);
    } finally{
        $833559fe574b4225$var$C = e, $833559fe574b4225$var$cd.transition = f;
    }
}
function $833559fe574b4225$var$gd(a, b, c, d) {
    var e = $833559fe574b4225$var$C, f = $833559fe574b4225$var$cd.transition;
    $833559fe574b4225$var$cd.transition = null;
    try {
        $833559fe574b4225$var$C = 4, $833559fe574b4225$var$fd(a, b, c, d);
    } finally{
        $833559fe574b4225$var$C = e, $833559fe574b4225$var$cd.transition = f;
    }
}
function $833559fe574b4225$var$fd(a, b, c, d) {
    if ($833559fe574b4225$var$dd) {
        var e = $833559fe574b4225$var$Yc(a, b, c, d);
        if (null === e) $833559fe574b4225$var$hd(a, b, d, $833559fe574b4225$var$id, c), $833559fe574b4225$var$Sc(a, d);
        else if ($833559fe574b4225$var$Uc(e, a, b, c, d)) d.stopPropagation();
        else if ($833559fe574b4225$var$Sc(a, d), b & 4 && -1 < $833559fe574b4225$var$Rc.indexOf(a)) {
            for(; null !== e;){
                var f = $833559fe574b4225$var$Cb(e);
                null !== f && $833559fe574b4225$var$Ec(f);
                f = $833559fe574b4225$var$Yc(a, b, c, d);
                null === f && $833559fe574b4225$var$hd(a, b, d, $833559fe574b4225$var$id, c);
                if (f === e) break;
                e = f;
            }
            null !== e && d.stopPropagation();
        } else $833559fe574b4225$var$hd(a, b, d, null, c);
    }
}
var $833559fe574b4225$var$id = null;
function $833559fe574b4225$var$Yc(a, b, c, d) {
    $833559fe574b4225$var$id = null;
    a = $833559fe574b4225$var$xb(d);
    a = $833559fe574b4225$var$Wc(a);
    if (null !== a) {
        if (b = $833559fe574b4225$var$Vb(a), null === b) a = null;
        else if (c = b.tag, 13 === c) {
            a = $833559fe574b4225$var$Wb(b);
            if (null !== a) return a;
            a = null;
        } else if (3 === c) {
            if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;
            a = null;
        } else b !== a && (a = null);
    }
    $833559fe574b4225$var$id = a;
    return null;
}
function $833559fe574b4225$var$jd(a) {
    switch(a){
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
            return 1;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
            return 4;
        case "message":
            switch($833559fe574b4225$var$ec()){
                case $833559fe574b4225$var$fc:
                    return 1;
                case $833559fe574b4225$var$gc:
                    return 4;
                case $833559fe574b4225$var$hc:
                case $833559fe574b4225$var$ic:
                    return 16;
                case $833559fe574b4225$var$jc:
                    return 536870912;
                default:
                    return 16;
            }
        default:
            return 16;
    }
}
var $833559fe574b4225$var$kd = null, $833559fe574b4225$var$ld = null, $833559fe574b4225$var$md = null;
function $833559fe574b4225$var$nd() {
    if ($833559fe574b4225$var$md) return $833559fe574b4225$var$md;
    var a, b = $833559fe574b4225$var$ld, c = b.length, d, e = "value" in $833559fe574b4225$var$kd ? $833559fe574b4225$var$kd.value : $833559fe574b4225$var$kd.textContent, f = e.length;
    for(a = 0; a < c && b[a] === e[a]; a++);
    var g = c - a;
    for(d = 1; d <= g && b[c - d] === e[f - d]; d++);
    return $833559fe574b4225$var$md = e.slice(a, 1 < d ? 1 - d : void 0);
}
function $833559fe574b4225$var$od(a) {
    var b = a.keyCode;
    "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
    10 === a && (a = 13);
    return 32 <= a || 13 === a ? a : 0;
}
function $833559fe574b4225$var$pd() {
    return !0;
}
function $833559fe574b4225$var$qd() {
    return !1;
}
function $833559fe574b4225$var$rd(a) {
    function b(b, d, e, f, g) {
        this._reactName = b;
        this._targetInst = e;
        this.type = d;
        this.nativeEvent = f;
        this.target = g;
        this.currentTarget = null;
        for(var c in a)a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);
        this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? $833559fe574b4225$var$pd : $833559fe574b4225$var$qd;
        this.isPropagationStopped = $833559fe574b4225$var$qd;
        return this;
    }
    $833559fe574b4225$var$A(b.prototype, {
        preventDefault: function() {
            this.defaultPrevented = !0;
            var a = this.nativeEvent;
            a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = $833559fe574b4225$var$pd);
        },
        stopPropagation: function() {
            var a = this.nativeEvent;
            a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = $833559fe574b4225$var$pd);
        },
        persist: function() {},
        isPersistent: $833559fe574b4225$var$pd
    });
    return b;
}
var $833559fe574b4225$var$sd = {
    eventPhase: 0,
    bubbles: 0,
    cancelable: 0,
    timeStamp: function(a) {
        return a.timeStamp || Date.now();
    },
    defaultPrevented: 0,
    isTrusted: 0
}, $833559fe574b4225$var$td = $833559fe574b4225$var$rd($833559fe574b4225$var$sd), $833559fe574b4225$var$ud = $833559fe574b4225$var$A({}, $833559fe574b4225$var$sd, {
    view: 0,
    detail: 0
}), $833559fe574b4225$var$vd = $833559fe574b4225$var$rd($833559fe574b4225$var$ud), $833559fe574b4225$var$wd, $833559fe574b4225$var$xd, $833559fe574b4225$var$yd, $833559fe574b4225$var$Ad = $833559fe574b4225$var$A({}, $833559fe574b4225$var$ud, {
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    pageX: 0,
    pageY: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    getModifierState: $833559fe574b4225$var$zd,
    button: 0,
    buttons: 0,
    relatedTarget: function(a) {
        return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    },
    movementX: function(a) {
        if ("movementX" in a) return a.movementX;
        a !== $833559fe574b4225$var$yd && ($833559fe574b4225$var$yd && "mousemove" === a.type ? ($833559fe574b4225$var$wd = a.screenX - $833559fe574b4225$var$yd.screenX, $833559fe574b4225$var$xd = a.screenY - $833559fe574b4225$var$yd.screenY) : $833559fe574b4225$var$xd = $833559fe574b4225$var$wd = 0, $833559fe574b4225$var$yd = a);
        return $833559fe574b4225$var$wd;
    },
    movementY: function(a) {
        return "movementY" in a ? a.movementY : $833559fe574b4225$var$xd;
    }
}), $833559fe574b4225$var$Bd = $833559fe574b4225$var$rd($833559fe574b4225$var$Ad), $833559fe574b4225$var$Cd = $833559fe574b4225$var$A({}, $833559fe574b4225$var$Ad, {
    dataTransfer: 0
}), $833559fe574b4225$var$Dd = $833559fe574b4225$var$rd($833559fe574b4225$var$Cd), $833559fe574b4225$var$Ed = $833559fe574b4225$var$A({}, $833559fe574b4225$var$ud, {
    relatedTarget: 0
}), $833559fe574b4225$var$Fd = $833559fe574b4225$var$rd($833559fe574b4225$var$Ed), $833559fe574b4225$var$Gd = $833559fe574b4225$var$A({}, $833559fe574b4225$var$sd, {
    animationName: 0,
    elapsedTime: 0,
    pseudoElement: 0
}), $833559fe574b4225$var$Hd = $833559fe574b4225$var$rd($833559fe574b4225$var$Gd), $833559fe574b4225$var$Id = $833559fe574b4225$var$A({}, $833559fe574b4225$var$sd, {
    clipboardData: function(a) {
        return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    }
}), $833559fe574b4225$var$Jd = $833559fe574b4225$var$rd($833559fe574b4225$var$Id), $833559fe574b4225$var$Kd = $833559fe574b4225$var$A({}, $833559fe574b4225$var$sd, {
    data: 0
}), $833559fe574b4225$var$Ld = $833559fe574b4225$var$rd($833559fe574b4225$var$Kd), $833559fe574b4225$var$Md = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
}, $833559fe574b4225$var$Nd = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
}, $833559fe574b4225$var$Od = {
    Alt: "altKey",
    Control: "ctrlKey",
    Meta: "metaKey",
    Shift: "shiftKey"
};
function $833559fe574b4225$var$Pd(a) {
    var b = this.nativeEvent;
    return b.getModifierState ? b.getModifierState(a) : (a = $833559fe574b4225$var$Od[a]) ? !!b[a] : !1;
}
function $833559fe574b4225$var$zd() {
    return $833559fe574b4225$var$Pd;
}
var $833559fe574b4225$var$Qd = $833559fe574b4225$var$A({}, $833559fe574b4225$var$ud, {
    key: function(a) {
        if (a.key) {
            var b = $833559fe574b4225$var$Md[a.key] || a.key;
            if ("Unidentified" !== b) return b;
        }
        return "keypress" === a.type ? (a = $833559fe574b4225$var$od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? $833559fe574b4225$var$Nd[a.keyCode] || "Unidentified" : "";
    },
    code: 0,
    location: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    repeat: 0,
    locale: 0,
    getModifierState: $833559fe574b4225$var$zd,
    charCode: function(a) {
        return "keypress" === a.type ? $833559fe574b4225$var$od(a) : 0;
    },
    keyCode: function(a) {
        return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    },
    which: function(a) {
        return "keypress" === a.type ? $833559fe574b4225$var$od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    }
}), $833559fe574b4225$var$Rd = $833559fe574b4225$var$rd($833559fe574b4225$var$Qd), $833559fe574b4225$var$Sd = $833559fe574b4225$var$A({}, $833559fe574b4225$var$Ad, {
    pointerId: 0,
    width: 0,
    height: 0,
    pressure: 0,
    tangentialPressure: 0,
    tiltX: 0,
    tiltY: 0,
    twist: 0,
    pointerType: 0,
    isPrimary: 0
}), $833559fe574b4225$var$Td = $833559fe574b4225$var$rd($833559fe574b4225$var$Sd), $833559fe574b4225$var$Ud = $833559fe574b4225$var$A({}, $833559fe574b4225$var$ud, {
    touches: 0,
    targetTouches: 0,
    changedTouches: 0,
    altKey: 0,
    metaKey: 0,
    ctrlKey: 0,
    shiftKey: 0,
    getModifierState: $833559fe574b4225$var$zd
}), $833559fe574b4225$var$Vd = $833559fe574b4225$var$rd($833559fe574b4225$var$Ud), $833559fe574b4225$var$Wd = $833559fe574b4225$var$A({}, $833559fe574b4225$var$sd, {
    propertyName: 0,
    elapsedTime: 0,
    pseudoElement: 0
}), $833559fe574b4225$var$Xd = $833559fe574b4225$var$rd($833559fe574b4225$var$Wd), $833559fe574b4225$var$Yd = $833559fe574b4225$var$A({}, $833559fe574b4225$var$Ad, {
    deltaX: function(a) {
        return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
    },
    deltaY: function(a) {
        return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
}), $833559fe574b4225$var$Zd = $833559fe574b4225$var$rd($833559fe574b4225$var$Yd), $833559fe574b4225$var$$d = [
    9,
    13,
    27,
    32
], $833559fe574b4225$var$ae = $833559fe574b4225$var$ia && "CompositionEvent" in window, $833559fe574b4225$var$be = null;
$833559fe574b4225$var$ia && "documentMode" in document && ($833559fe574b4225$var$be = document.documentMode);
var $833559fe574b4225$var$ce = $833559fe574b4225$var$ia && "TextEvent" in window && !$833559fe574b4225$var$be, $833559fe574b4225$var$de = $833559fe574b4225$var$ia && (!$833559fe574b4225$var$ae || $833559fe574b4225$var$be && 8 < $833559fe574b4225$var$be && 11 >= $833559fe574b4225$var$be), $833559fe574b4225$var$ee = String.fromCharCode(32), $833559fe574b4225$var$fe = !1;
function $833559fe574b4225$var$ge(a, b) {
    switch(a){
        case "keyup":
            return -1 !== $833559fe574b4225$var$$d.indexOf(b.keyCode);
        case "keydown":
            return 229 !== b.keyCode;
        case "keypress":
        case "mousedown":
        case "focusout":
            return !0;
        default:
            return !1;
    }
}
function $833559fe574b4225$var$he(a) {
    a = a.detail;
    return "object" === typeof a && "data" in a ? a.data : null;
}
var $833559fe574b4225$var$ie = !1;
function $833559fe574b4225$var$je(a, b) {
    switch(a){
        case "compositionend":
            return $833559fe574b4225$var$he(b);
        case "keypress":
            if (32 !== b.which) return null;
            $833559fe574b4225$var$fe = !0;
            return $833559fe574b4225$var$ee;
        case "textInput":
            return a = b.data, a === $833559fe574b4225$var$ee && $833559fe574b4225$var$fe ? null : a;
        default:
            return null;
    }
}
function $833559fe574b4225$var$ke(a, b) {
    if ($833559fe574b4225$var$ie) return "compositionend" === a || !$833559fe574b4225$var$ae && $833559fe574b4225$var$ge(a, b) ? (a = $833559fe574b4225$var$nd(), $833559fe574b4225$var$md = $833559fe574b4225$var$ld = $833559fe574b4225$var$kd = null, $833559fe574b4225$var$ie = !1, a) : null;
    switch(a){
        case "paste":
            return null;
        case "keypress":
            if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
                if (b.char && 1 < b.char.length) return b.char;
                if (b.which) return String.fromCharCode(b.which);
            }
            return null;
        case "compositionend":
            return $833559fe574b4225$var$de && "ko" !== b.locale ? null : b.data;
        default:
            return null;
    }
}
var $833559fe574b4225$var$le = {
    color: !0,
    date: !0,
    datetime: !0,
    "datetime-local": !0,
    email: !0,
    month: !0,
    number: !0,
    password: !0,
    range: !0,
    search: !0,
    tel: !0,
    text: !0,
    time: !0,
    url: !0,
    week: !0
};
function $833559fe574b4225$var$me(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return "input" === b ? !!$833559fe574b4225$var$le[a.type] : "textarea" === b ? !0 : !1;
}
function $833559fe574b4225$var$ne(a, b, c, d) {
    $833559fe574b4225$var$Eb(d);
    b = $833559fe574b4225$var$oe(b, "onChange");
    0 < b.length && (c = new $833559fe574b4225$var$td("onChange", "change", null, c, d), a.push({
        event: c,
        listeners: b
    }));
}
var $833559fe574b4225$var$pe = null, $833559fe574b4225$var$qe = null;
function $833559fe574b4225$var$re(a) {
    $833559fe574b4225$var$se(a, 0);
}
function $833559fe574b4225$var$te(a) {
    var b = $833559fe574b4225$var$ue(a);
    if ($833559fe574b4225$var$Wa(b)) return a;
}
function $833559fe574b4225$var$ve(a, b) {
    if ("change" === a) return b;
}
var $833559fe574b4225$var$we = !1;
if ($833559fe574b4225$var$ia) {
    var $833559fe574b4225$var$xe;
    if ($833559fe574b4225$var$ia) {
        var $833559fe574b4225$var$ye = "oninput" in document;
        if (!$833559fe574b4225$var$ye) {
            var $833559fe574b4225$var$ze = document.createElement("div");
            $833559fe574b4225$var$ze.setAttribute("oninput", "return;");
            $833559fe574b4225$var$ye = "function" === typeof $833559fe574b4225$var$ze.oninput;
        }
        $833559fe574b4225$var$xe = $833559fe574b4225$var$ye;
    } else $833559fe574b4225$var$xe = !1;
    $833559fe574b4225$var$we = $833559fe574b4225$var$xe && (!document.documentMode || 9 < document.documentMode);
}
function $833559fe574b4225$var$Ae() {
    $833559fe574b4225$var$pe && ($833559fe574b4225$var$pe.detachEvent("onpropertychange", $833559fe574b4225$var$Be), $833559fe574b4225$var$qe = $833559fe574b4225$var$pe = null);
}
function $833559fe574b4225$var$Be(a) {
    if ("value" === a.propertyName && $833559fe574b4225$var$te($833559fe574b4225$var$qe)) {
        var b = [];
        $833559fe574b4225$var$ne(b, $833559fe574b4225$var$qe, a, $833559fe574b4225$var$xb(a));
        $833559fe574b4225$var$Jb($833559fe574b4225$var$re, b);
    }
}
function $833559fe574b4225$var$Ce(a, b, c) {
    "focusin" === a ? ($833559fe574b4225$var$Ae(), $833559fe574b4225$var$pe = b, $833559fe574b4225$var$qe = c, $833559fe574b4225$var$pe.attachEvent("onpropertychange", $833559fe574b4225$var$Be)) : "focusout" === a && $833559fe574b4225$var$Ae();
}
function $833559fe574b4225$var$De(a) {
    if ("selectionchange" === a || "keyup" === a || "keydown" === a) return $833559fe574b4225$var$te($833559fe574b4225$var$qe);
}
function $833559fe574b4225$var$Ee(a, b) {
    if ("click" === a) return $833559fe574b4225$var$te(b);
}
function $833559fe574b4225$var$Fe(a, b) {
    if ("input" === a || "change" === a) return $833559fe574b4225$var$te(b);
}
function $833559fe574b4225$var$Ge(a, b) {
    return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
}
var $833559fe574b4225$var$He = "function" === typeof Object.is ? Object.is : $833559fe574b4225$var$Ge;
function $833559fe574b4225$var$Ie(a, b) {
    if ($833559fe574b4225$var$He(a, b)) return !0;
    if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;
    var c = Object.keys(a), d = Object.keys(b);
    if (c.length !== d.length) return !1;
    for(d = 0; d < c.length; d++){
        var e = c[d];
        if (!$833559fe574b4225$var$ja.call(b, e) || !$833559fe574b4225$var$He(a[e], b[e])) return !1;
    }
    return !0;
}
function $833559fe574b4225$var$Je(a) {
    for(; a && a.firstChild;)a = a.firstChild;
    return a;
}
function $833559fe574b4225$var$Ke(a, b) {
    var c = $833559fe574b4225$var$Je(a);
    a = 0;
    for(var d; c;){
        if (3 === c.nodeType) {
            d = a + c.textContent.length;
            if (a <= b && d >= b) return {
                node: c,
                offset: b - a
            };
            a = d;
        }
        a: {
            for(; c;){
                if (c.nextSibling) {
                    c = c.nextSibling;
                    break a;
                }
                c = c.parentNode;
            }
            c = void 0;
        }
        c = $833559fe574b4225$var$Je(c);
    }
}
function $833559fe574b4225$var$Le(a, b) {
    return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? $833559fe574b4225$var$Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
}
function $833559fe574b4225$var$Me() {
    for(var a = window, b = $833559fe574b4225$var$Xa(); b instanceof a.HTMLIFrameElement;){
        try {
            var c = "string" === typeof b.contentWindow.location.href;
        } catch (d) {
            c = !1;
        }
        if (c) a = b.contentWindow;
        else break;
        b = $833559fe574b4225$var$Xa(a.document);
    }
    return b;
}
function $833559fe574b4225$var$Ne(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
}
function $833559fe574b4225$var$Oe(a) {
    var b = $833559fe574b4225$var$Me(), c = a.focusedElem, d = a.selectionRange;
    if (b !== c && c && c.ownerDocument && $833559fe574b4225$var$Le(c.ownerDocument.documentElement, c)) {
        if (null !== d && $833559fe574b4225$var$Ne(c)) {
            if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);
            else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
                a = a.getSelection();
                var e = c.textContent.length, f = Math.min(d.start, e);
                d = void 0 === d.end ? f : Math.min(d.end, e);
                !a.extend && f > d && (e = d, d = f, f = e);
                e = $833559fe574b4225$var$Ke(c, f);
                var g = $833559fe574b4225$var$Ke(c, d);
                e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
            }
        }
        b = [];
        for(a = c; a = a.parentNode;)1 === a.nodeType && b.push({
            element: a,
            left: a.scrollLeft,
            top: a.scrollTop
        });
        "function" === typeof c.focus && c.focus();
        for(c = 0; c < b.length; c++)a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
    }
}
var $833559fe574b4225$var$Pe = $833559fe574b4225$var$ia && "documentMode" in document && 11 >= document.documentMode, $833559fe574b4225$var$Qe = null, $833559fe574b4225$var$Re = null, $833559fe574b4225$var$Se = null, $833559fe574b4225$var$Te = !1;
function $833559fe574b4225$var$Ue(a, b, c) {
    var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
    $833559fe574b4225$var$Te || null == $833559fe574b4225$var$Qe || $833559fe574b4225$var$Qe !== $833559fe574b4225$var$Xa(d) || (d = $833559fe574b4225$var$Qe, "selectionStart" in d && $833559fe574b4225$var$Ne(d) ? d = {
        start: d.selectionStart,
        end: d.selectionEnd
    } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {
        anchorNode: d.anchorNode,
        anchorOffset: d.anchorOffset,
        focusNode: d.focusNode,
        focusOffset: d.focusOffset
    }), $833559fe574b4225$var$Se && $833559fe574b4225$var$Ie($833559fe574b4225$var$Se, d) || ($833559fe574b4225$var$Se = d, d = $833559fe574b4225$var$oe($833559fe574b4225$var$Re, "onSelect"), 0 < d.length && (b = new $833559fe574b4225$var$td("onSelect", "select", null, b, c), a.push({
        event: b,
        listeners: d
    }), b.target = $833559fe574b4225$var$Qe)));
}
function $833559fe574b4225$var$Ve(a, b) {
    var c = {};
    c[a.toLowerCase()] = b.toLowerCase();
    c["Webkit" + a] = "webkit" + b;
    c["Moz" + a] = "moz" + b;
    return c;
}
var $833559fe574b4225$var$We = {
    animationend: $833559fe574b4225$var$Ve("Animation", "AnimationEnd"),
    animationiteration: $833559fe574b4225$var$Ve("Animation", "AnimationIteration"),
    animationstart: $833559fe574b4225$var$Ve("Animation", "AnimationStart"),
    transitionend: $833559fe574b4225$var$Ve("Transition", "TransitionEnd")
}, $833559fe574b4225$var$Xe = {}, $833559fe574b4225$var$Ye = {};
$833559fe574b4225$var$ia && ($833559fe574b4225$var$Ye = document.createElement("div").style, "AnimationEvent" in window || (delete $833559fe574b4225$var$We.animationend.animation, delete $833559fe574b4225$var$We.animationiteration.animation, delete $833559fe574b4225$var$We.animationstart.animation), "TransitionEvent" in window || delete $833559fe574b4225$var$We.transitionend.transition);
function $833559fe574b4225$var$Ze(a) {
    if ($833559fe574b4225$var$Xe[a]) return $833559fe574b4225$var$Xe[a];
    if (!$833559fe574b4225$var$We[a]) return a;
    var b = $833559fe574b4225$var$We[a], c;
    for(c in b)if (b.hasOwnProperty(c) && c in $833559fe574b4225$var$Ye) return $833559fe574b4225$var$Xe[a] = b[c];
    return a;
}
var $833559fe574b4225$var$$e = $833559fe574b4225$var$Ze("animationend"), $833559fe574b4225$var$af = $833559fe574b4225$var$Ze("animationiteration"), $833559fe574b4225$var$bf = $833559fe574b4225$var$Ze("animationstart"), $833559fe574b4225$var$cf = $833559fe574b4225$var$Ze("transitionend"), $833559fe574b4225$var$df = new Map, $833559fe574b4225$var$ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
function $833559fe574b4225$var$ff(a, b) {
    $833559fe574b4225$var$df.set(a, b);
    $833559fe574b4225$var$fa(b, [
        a
    ]);
}
for(var $833559fe574b4225$var$gf = 0; $833559fe574b4225$var$gf < $833559fe574b4225$var$ef.length; $833559fe574b4225$var$gf++){
    var $833559fe574b4225$var$hf = $833559fe574b4225$var$ef[$833559fe574b4225$var$gf], $833559fe574b4225$var$jf = $833559fe574b4225$var$hf.toLowerCase(), $833559fe574b4225$var$kf = $833559fe574b4225$var$hf[0].toUpperCase() + $833559fe574b4225$var$hf.slice(1);
    $833559fe574b4225$var$ff($833559fe574b4225$var$jf, "on" + $833559fe574b4225$var$kf);
}
$833559fe574b4225$var$ff($833559fe574b4225$var$$e, "onAnimationEnd");
$833559fe574b4225$var$ff($833559fe574b4225$var$af, "onAnimationIteration");
$833559fe574b4225$var$ff($833559fe574b4225$var$bf, "onAnimationStart");
$833559fe574b4225$var$ff("dblclick", "onDoubleClick");
$833559fe574b4225$var$ff("focusin", "onFocus");
$833559fe574b4225$var$ff("focusout", "onBlur");
$833559fe574b4225$var$ff($833559fe574b4225$var$cf, "onTransitionEnd");
$833559fe574b4225$var$ha("onMouseEnter", [
    "mouseout",
    "mouseover"
]);
$833559fe574b4225$var$ha("onMouseLeave", [
    "mouseout",
    "mouseover"
]);
$833559fe574b4225$var$ha("onPointerEnter", [
    "pointerout",
    "pointerover"
]);
$833559fe574b4225$var$ha("onPointerLeave", [
    "pointerout",
    "pointerover"
]);
$833559fe574b4225$var$fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
$833559fe574b4225$var$fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
$833559fe574b4225$var$fa("onBeforeInput", [
    "compositionend",
    "keypress",
    "textInput",
    "paste"
]);
$833559fe574b4225$var$fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
$833559fe574b4225$var$fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
$833559fe574b4225$var$fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
var $833559fe574b4225$var$lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), $833559fe574b4225$var$mf = new Set("cancel close invalid load scroll toggle".split(" ").concat($833559fe574b4225$var$lf));
function $833559fe574b4225$var$nf(a, b, c) {
    var d = a.type || "unknown-event";
    a.currentTarget = c;
    $833559fe574b4225$var$Ub(d, b, void 0, a);
    a.currentTarget = null;
}
function $833559fe574b4225$var$se(a, b) {
    b = 0 !== (b & 4);
    for(var c = 0; c < a.length; c++){
        var d = a[c], e = d.event;
        d = d.listeners;
        a: {
            var f = void 0;
            if (b) for(var g = d.length - 1; 0 <= g; g--){
                var h = d[g], k = h.instance, l = h.currentTarget;
                h = h.listener;
                if (k !== f && e.isPropagationStopped()) break a;
                $833559fe574b4225$var$nf(e, h, l);
                f = k;
            }
            else for(g = 0; g < d.length; g++){
                h = d[g];
                k = h.instance;
                l = h.currentTarget;
                h = h.listener;
                if (k !== f && e.isPropagationStopped()) break a;
                $833559fe574b4225$var$nf(e, h, l);
                f = k;
            }
        }
    }
    if ($833559fe574b4225$var$Qb) throw a = $833559fe574b4225$var$Rb, $833559fe574b4225$var$Qb = !1, $833559fe574b4225$var$Rb = null, a;
}
function $833559fe574b4225$var$D(a, b) {
    var c = b[$833559fe574b4225$var$of];
    void 0 === c && (c = b[$833559fe574b4225$var$of] = new Set);
    var d = a + "__bubble";
    c.has(d) || ($833559fe574b4225$var$pf(b, a, 2, !1), c.add(d));
}
function $833559fe574b4225$var$qf(a, b, c) {
    var d = 0;
    b && (d |= 4);
    $833559fe574b4225$var$pf(c, a, d, b);
}
var $833559fe574b4225$var$rf = "_reactListening" + Math.random().toString(36).slice(2);
function $833559fe574b4225$var$sf(a) {
    if (!a[$833559fe574b4225$var$rf]) {
        a[$833559fe574b4225$var$rf] = !0;
        $833559fe574b4225$var$da.forEach(function(b) {
            "selectionchange" !== b && ($833559fe574b4225$var$mf.has(b) || $833559fe574b4225$var$qf(b, !1, a), $833559fe574b4225$var$qf(b, !0, a));
        });
        var b = 9 === a.nodeType ? a : a.ownerDocument;
        null === b || b[$833559fe574b4225$var$rf] || (b[$833559fe574b4225$var$rf] = !0, $833559fe574b4225$var$qf("selectionchange", !1, b));
    }
}
function $833559fe574b4225$var$pf(a, b, c, d) {
    switch($833559fe574b4225$var$jd(b)){
        case 1:
            var e = $833559fe574b4225$var$ed;
            break;
        case 4:
            e = $833559fe574b4225$var$gd;
            break;
        default:
            e = $833559fe574b4225$var$fd;
    }
    c = e.bind(null, b, c, a);
    e = void 0;
    !$833559fe574b4225$var$Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);
    d ? void 0 !== e ? a.addEventListener(b, c, {
        capture: !0,
        passive: e
    }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {
        passive: e
    }) : a.addEventListener(b, c, !1);
}
function $833559fe574b4225$var$hd(a, b, c, d, e) {
    var f = d;
    if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for(;;){
        if (null === d) return;
        var g = d.tag;
        if (3 === g || 4 === g) {
            var h = d.stateNode.containerInfo;
            if (h === e || 8 === h.nodeType && h.parentNode === e) break;
            if (4 === g) for(g = d.return; null !== g;){
                var k = g.tag;
                if (3 === k || 4 === k) {
                    if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
                }
                g = g.return;
            }
            for(; null !== h;){
                g = $833559fe574b4225$var$Wc(h);
                if (null === g) return;
                k = g.tag;
                if (5 === k || 6 === k) {
                    d = f = g;
                    continue a;
                }
                h = h.parentNode;
            }
        }
        d = d.return;
    }
    $833559fe574b4225$var$Jb(function() {
        var d = f, e = $833559fe574b4225$var$xb(c), g = [];
        a: {
            var h = $833559fe574b4225$var$df.get(a);
            if (void 0 !== h) {
                var k = $833559fe574b4225$var$td, n = a;
                switch(a){
                    case "keypress":
                        if (0 === $833559fe574b4225$var$od(c)) break a;
                    case "keydown":
                    case "keyup":
                        k = $833559fe574b4225$var$Rd;
                        break;
                    case "focusin":
                        n = "focus";
                        k = $833559fe574b4225$var$Fd;
                        break;
                    case "focusout":
                        n = "blur";
                        k = $833559fe574b4225$var$Fd;
                        break;
                    case "beforeblur":
                    case "afterblur":
                        k = $833559fe574b4225$var$Fd;
                        break;
                    case "click":
                        if (2 === c.button) break a;
                    case "auxclick":
                    case "dblclick":
                    case "mousedown":
                    case "mousemove":
                    case "mouseup":
                    case "mouseout":
                    case "mouseover":
                    case "contextmenu":
                        k = $833559fe574b4225$var$Bd;
                        break;
                    case "drag":
                    case "dragend":
                    case "dragenter":
                    case "dragexit":
                    case "dragleave":
                    case "dragover":
                    case "dragstart":
                    case "drop":
                        k = $833559fe574b4225$var$Dd;
                        break;
                    case "touchcancel":
                    case "touchend":
                    case "touchmove":
                    case "touchstart":
                        k = $833559fe574b4225$var$Vd;
                        break;
                    case $833559fe574b4225$var$$e:
                    case $833559fe574b4225$var$af:
                    case $833559fe574b4225$var$bf:
                        k = $833559fe574b4225$var$Hd;
                        break;
                    case $833559fe574b4225$var$cf:
                        k = $833559fe574b4225$var$Xd;
                        break;
                    case "scroll":
                        k = $833559fe574b4225$var$vd;
                        break;
                    case "wheel":
                        k = $833559fe574b4225$var$Zd;
                        break;
                    case "copy":
                    case "cut":
                    case "paste":
                        k = $833559fe574b4225$var$Jd;
                        break;
                    case "gotpointercapture":
                    case "lostpointercapture":
                    case "pointercancel":
                    case "pointerdown":
                    case "pointermove":
                    case "pointerout":
                    case "pointerover":
                    case "pointerup":
                        k = $833559fe574b4225$var$Td;
                }
                var t = 0 !== (b & 4), J = !t && "scroll" === a, x = t ? null !== h ? h + "Capture" : null : h;
                t = [];
                for(var w = d, u; null !== w;){
                    u = w;
                    var F = u.stateNode;
                    5 === u.tag && null !== F && (u = F, null !== x && (F = $833559fe574b4225$var$Kb(w, x), null != F && t.push($833559fe574b4225$var$tf(w, F, u))));
                    if (J) break;
                    w = w.return;
                }
                0 < t.length && (h = new k(h, n, null, c, e), g.push({
                    event: h,
                    listeners: t
                }));
            }
        }
        if (0 === (b & 7)) {
            a: {
                h = "mouseover" === a || "pointerover" === a;
                k = "mouseout" === a || "pointerout" === a;
                if (h && c !== $833559fe574b4225$var$wb && (n = c.relatedTarget || c.fromElement) && ($833559fe574b4225$var$Wc(n) || n[$833559fe574b4225$var$uf])) break a;
                if (k || h) {
                    h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;
                    if (k) {
                        if (n = c.relatedTarget || c.toElement, k = d, n = n ? $833559fe574b4225$var$Wc(n) : null, null !== n && (J = $833559fe574b4225$var$Vb(n), n !== J || 5 !== n.tag && 6 !== n.tag)) n = null;
                    } else k = null, n = d;
                    if (k !== n) {
                        t = $833559fe574b4225$var$Bd;
                        F = "onMouseLeave";
                        x = "onMouseEnter";
                        w = "mouse";
                        if ("pointerout" === a || "pointerover" === a) t = $833559fe574b4225$var$Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer";
                        J = null == k ? h : $833559fe574b4225$var$ue(k);
                        u = null == n ? h : $833559fe574b4225$var$ue(n);
                        h = new t(F, w + "leave", k, c, e);
                        h.target = J;
                        h.relatedTarget = u;
                        F = null;
                        $833559fe574b4225$var$Wc(e) === d && (t = new t(x, w + "enter", n, c, e), t.target = u, t.relatedTarget = J, F = t);
                        J = F;
                        if (k && n) b: {
                            t = k;
                            x = n;
                            w = 0;
                            for(u = t; u; u = $833559fe574b4225$var$vf(u))w++;
                            u = 0;
                            for(F = x; F; F = $833559fe574b4225$var$vf(F))u++;
                            for(; 0 < w - u;)t = $833559fe574b4225$var$vf(t), w--;
                            for(; 0 < u - w;)x = $833559fe574b4225$var$vf(x), u--;
                            for(; w--;){
                                if (t === x || null !== x && t === x.alternate) break b;
                                t = $833559fe574b4225$var$vf(t);
                                x = $833559fe574b4225$var$vf(x);
                            }
                            t = null;
                        }
                        else t = null;
                        null !== k && $833559fe574b4225$var$wf(g, h, k, t, !1);
                        null !== n && null !== J && $833559fe574b4225$var$wf(g, J, n, t, !0);
                    }
                }
            }
            a: {
                h = d ? $833559fe574b4225$var$ue(d) : window;
                k = h.nodeName && h.nodeName.toLowerCase();
                if ("select" === k || "input" === k && "file" === h.type) var na = $833559fe574b4225$var$ve;
                else if ($833559fe574b4225$var$me(h)) {
                    if ($833559fe574b4225$var$we) na = $833559fe574b4225$var$Fe;
                    else {
                        na = $833559fe574b4225$var$De;
                        var xa = $833559fe574b4225$var$Ce;
                    }
                } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (na = $833559fe574b4225$var$Ee);
                if (na && (na = na(a, d))) {
                    $833559fe574b4225$var$ne(g, na, c, e);
                    break a;
                }
                xa && xa(a, h, d);
                "focusout" === a && (xa = h._wrapperState) && xa.controlled && "number" === h.type && $833559fe574b4225$var$cb(h, "number", h.value);
            }
            xa = d ? $833559fe574b4225$var$ue(d) : window;
            switch(a){
                case "focusin":
                    if ($833559fe574b4225$var$me(xa) || "true" === xa.contentEditable) $833559fe574b4225$var$Qe = xa, $833559fe574b4225$var$Re = d, $833559fe574b4225$var$Se = null;
                    break;
                case "focusout":
                    $833559fe574b4225$var$Se = $833559fe574b4225$var$Re = $833559fe574b4225$var$Qe = null;
                    break;
                case "mousedown":
                    $833559fe574b4225$var$Te = !0;
                    break;
                case "contextmenu":
                case "mouseup":
                case "dragend":
                    $833559fe574b4225$var$Te = !1;
                    $833559fe574b4225$var$Ue(g, c, e);
                    break;
                case "selectionchange":
                    if ($833559fe574b4225$var$Pe) break;
                case "keydown":
                case "keyup":
                    $833559fe574b4225$var$Ue(g, c, e);
            }
            var $a;
            if ($833559fe574b4225$var$ae) b: {
                switch(a){
                    case "compositionstart":
                        var ba = "onCompositionStart";
                        break b;
                    case "compositionend":
                        ba = "onCompositionEnd";
                        break b;
                    case "compositionupdate":
                        ba = "onCompositionUpdate";
                        break b;
                }
                ba = void 0;
            }
            else $833559fe574b4225$var$ie ? $833559fe574b4225$var$ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
            ba && ($833559fe574b4225$var$de && "ko" !== c.locale && ($833559fe574b4225$var$ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && $833559fe574b4225$var$ie && ($a = $833559fe574b4225$var$nd()) : ($833559fe574b4225$var$kd = e, $833559fe574b4225$var$ld = "value" in $833559fe574b4225$var$kd ? $833559fe574b4225$var$kd.value : $833559fe574b4225$var$kd.textContent, $833559fe574b4225$var$ie = !0)), xa = $833559fe574b4225$var$oe(d, ba), 0 < xa.length && (ba = new $833559fe574b4225$var$Ld(ba, a, null, c, e), g.push({
                event: ba,
                listeners: xa
            }), $a ? ba.data = $a : ($a = $833559fe574b4225$var$he(c), null !== $a && (ba.data = $a))));
            if ($a = $833559fe574b4225$var$ce ? $833559fe574b4225$var$je(a, c) : $833559fe574b4225$var$ke(a, c)) d = $833559fe574b4225$var$oe(d, "onBeforeInput"), 0 < d.length && (e = new $833559fe574b4225$var$Ld("onBeforeInput", "beforeinput", null, c, e), g.push({
                event: e,
                listeners: d
            }), e.data = $a);
        }
        $833559fe574b4225$var$se(g, b);
    });
}
function $833559fe574b4225$var$tf(a, b, c) {
    return {
        instance: a,
        listener: b,
        currentTarget: c
    };
}
function $833559fe574b4225$var$oe(a, b) {
    for(var c = b + "Capture", d = []; null !== a;){
        var e = a, f = e.stateNode;
        5 === e.tag && null !== f && (e = f, f = $833559fe574b4225$var$Kb(a, c), null != f && d.unshift($833559fe574b4225$var$tf(a, f, e)), f = $833559fe574b4225$var$Kb(a, b), null != f && d.push($833559fe574b4225$var$tf(a, f, e)));
        a = a.return;
    }
    return d;
}
function $833559fe574b4225$var$vf(a) {
    if (null === a) return null;
    do a = a.return;
    while (a && 5 !== a.tag);
    return a ? a : null;
}
function $833559fe574b4225$var$wf(a, b, c, d, e) {
    for(var f = b._reactName, g = []; null !== c && c !== d;){
        var h = c, k = h.alternate, l = h.stateNode;
        if (null !== k && k === d) break;
        5 === h.tag && null !== l && (h = l, e ? (k = $833559fe574b4225$var$Kb(c, f), null != k && g.unshift($833559fe574b4225$var$tf(c, k, h))) : e || (k = $833559fe574b4225$var$Kb(c, f), null != k && g.push($833559fe574b4225$var$tf(c, k, h))));
        c = c.return;
    }
    0 !== g.length && a.push({
        event: b,
        listeners: g
    });
}
var $833559fe574b4225$var$xf = /\r\n?/g, $833559fe574b4225$var$yf = /\u0000|\uFFFD/g;
function $833559fe574b4225$var$zf(a) {
    return ("string" === typeof a ? a : "" + a).replace($833559fe574b4225$var$xf, "\n").replace($833559fe574b4225$var$yf, "");
}
function $833559fe574b4225$var$Af(a, b, c) {
    b = $833559fe574b4225$var$zf(b);
    if ($833559fe574b4225$var$zf(a) !== b && c) throw Error($833559fe574b4225$var$p(425));
}
function $833559fe574b4225$var$Bf() {}
var $833559fe574b4225$var$Cf = null, $833559fe574b4225$var$Df = null;
function $833559fe574b4225$var$Ef(a, b) {
    return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
}
var $833559fe574b4225$var$Ff = "function" === typeof setTimeout ? setTimeout : void 0, $833559fe574b4225$var$Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, $833559fe574b4225$var$Hf = "function" === typeof Promise ? Promise : void 0, $833559fe574b4225$var$Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof $833559fe574b4225$var$Hf ? function(a) {
    return $833559fe574b4225$var$Hf.resolve(null).then(a).catch($833559fe574b4225$var$If);
} : $833559fe574b4225$var$Ff;
function $833559fe574b4225$var$If(a) {
    setTimeout(function() {
        throw a;
    });
}
function $833559fe574b4225$var$Kf(a, b) {
    var c = b, d = 0;
    do {
        var e = c.nextSibling;
        a.removeChild(c);
        if (e && 8 === e.nodeType) {
            if (c = e.data, "/$" === c) {
                if (0 === d) {
                    a.removeChild(e);
                    $833559fe574b4225$var$bd(b);
                    return;
                }
                d--;
            } else "$" !== c && "$?" !== c && "$!" !== c || d++;
        }
        c = e;
    }while (c);
    $833559fe574b4225$var$bd(b);
}
function $833559fe574b4225$var$Lf(a) {
    for(; null != a; a = a.nextSibling){
        var b = a.nodeType;
        if (1 === b || 3 === b) break;
        if (8 === b) {
            b = a.data;
            if ("$" === b || "$!" === b || "$?" === b) break;
            if ("/$" === b) return null;
        }
    }
    return a;
}
function $833559fe574b4225$var$Mf(a) {
    a = a.previousSibling;
    for(var b = 0; a;){
        if (8 === a.nodeType) {
            var c = a.data;
            if ("$" === c || "$!" === c || "$?" === c) {
                if (0 === b) return a;
                b--;
            } else "/$" === c && b++;
        }
        a = a.previousSibling;
    }
    return null;
}
var $833559fe574b4225$var$Nf = Math.random().toString(36).slice(2), $833559fe574b4225$var$Of = "__reactFiber$" + $833559fe574b4225$var$Nf, $833559fe574b4225$var$Pf = "__reactProps$" + $833559fe574b4225$var$Nf, $833559fe574b4225$var$uf = "__reactContainer$" + $833559fe574b4225$var$Nf, $833559fe574b4225$var$of = "__reactEvents$" + $833559fe574b4225$var$Nf, $833559fe574b4225$var$Qf = "__reactListeners$" + $833559fe574b4225$var$Nf, $833559fe574b4225$var$Rf = "__reactHandles$" + $833559fe574b4225$var$Nf;
function $833559fe574b4225$var$Wc(a) {
    var b = a[$833559fe574b4225$var$Of];
    if (b) return b;
    for(var c = a.parentNode; c;){
        if (b = c[$833559fe574b4225$var$uf] || c[$833559fe574b4225$var$Of]) {
            c = b.alternate;
            if (null !== b.child || null !== c && null !== c.child) for(a = $833559fe574b4225$var$Mf(a); null !== a;){
                if (c = a[$833559fe574b4225$var$Of]) return c;
                a = $833559fe574b4225$var$Mf(a);
            }
            return b;
        }
        a = c;
        c = a.parentNode;
    }
    return null;
}
function $833559fe574b4225$var$Cb(a) {
    a = a[$833559fe574b4225$var$Of] || a[$833559fe574b4225$var$uf];
    return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
}
function $833559fe574b4225$var$ue(a) {
    if (5 === a.tag || 6 === a.tag) return a.stateNode;
    throw Error($833559fe574b4225$var$p(33));
}
function $833559fe574b4225$var$Db(a) {
    return a[$833559fe574b4225$var$Pf] || null;
}
var $833559fe574b4225$var$Sf = [], $833559fe574b4225$var$Tf = -1;
function $833559fe574b4225$var$Uf(a) {
    return {
        current: a
    };
}
function $833559fe574b4225$var$E(a) {
    0 > $833559fe574b4225$var$Tf || (a.current = $833559fe574b4225$var$Sf[$833559fe574b4225$var$Tf], $833559fe574b4225$var$Sf[$833559fe574b4225$var$Tf] = null, $833559fe574b4225$var$Tf--);
}
function $833559fe574b4225$var$G(a, b) {
    $833559fe574b4225$var$Tf++;
    $833559fe574b4225$var$Sf[$833559fe574b4225$var$Tf] = a.current;
    a.current = b;
}
var $833559fe574b4225$var$Vf = {}, $833559fe574b4225$var$H = $833559fe574b4225$var$Uf($833559fe574b4225$var$Vf), $833559fe574b4225$var$Wf = $833559fe574b4225$var$Uf(!1), $833559fe574b4225$var$Xf = $833559fe574b4225$var$Vf;
function $833559fe574b4225$var$Yf(a, b) {
    var c = a.type.contextTypes;
    if (!c) return $833559fe574b4225$var$Vf;
    var d = a.stateNode;
    if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
    var e = {}, f;
    for(f in c)e[f] = b[f];
    d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
    return e;
}
function $833559fe574b4225$var$Zf(a) {
    a = a.childContextTypes;
    return null !== a && void 0 !== a;
}
function $833559fe574b4225$var$$f() {
    $833559fe574b4225$var$E($833559fe574b4225$var$Wf);
    $833559fe574b4225$var$E($833559fe574b4225$var$H);
}
function $833559fe574b4225$var$ag(a, b, c) {
    if ($833559fe574b4225$var$H.current !== $833559fe574b4225$var$Vf) throw Error($833559fe574b4225$var$p(168));
    $833559fe574b4225$var$G($833559fe574b4225$var$H, b);
    $833559fe574b4225$var$G($833559fe574b4225$var$Wf, c);
}
function $833559fe574b4225$var$bg(a, b, c) {
    var d = a.stateNode;
    b = b.childContextTypes;
    if ("function" !== typeof d.getChildContext) return c;
    d = d.getChildContext();
    for(var e in d)if (!(e in b)) throw Error($833559fe574b4225$var$p(108, $833559fe574b4225$var$Ra(a) || "Unknown", e));
    return $833559fe574b4225$var$A({}, c, d);
}
function $833559fe574b4225$var$cg(a) {
    a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || $833559fe574b4225$var$Vf;
    $833559fe574b4225$var$Xf = $833559fe574b4225$var$H.current;
    $833559fe574b4225$var$G($833559fe574b4225$var$H, a);
    $833559fe574b4225$var$G($833559fe574b4225$var$Wf, $833559fe574b4225$var$Wf.current);
    return !0;
}
function $833559fe574b4225$var$dg(a, b, c) {
    var d = a.stateNode;
    if (!d) throw Error($833559fe574b4225$var$p(169));
    c ? (a = $833559fe574b4225$var$bg(a, b, $833559fe574b4225$var$Xf), d.__reactInternalMemoizedMergedChildContext = a, $833559fe574b4225$var$E($833559fe574b4225$var$Wf), $833559fe574b4225$var$E($833559fe574b4225$var$H), $833559fe574b4225$var$G($833559fe574b4225$var$H, a)) : $833559fe574b4225$var$E($833559fe574b4225$var$Wf);
    $833559fe574b4225$var$G($833559fe574b4225$var$Wf, c);
}
var $833559fe574b4225$var$eg = null, $833559fe574b4225$var$fg = !1, $833559fe574b4225$var$gg = !1;
function $833559fe574b4225$var$hg(a) {
    null === $833559fe574b4225$var$eg ? $833559fe574b4225$var$eg = [
        a
    ] : $833559fe574b4225$var$eg.push(a);
}
function $833559fe574b4225$var$ig(a) {
    $833559fe574b4225$var$fg = !0;
    $833559fe574b4225$var$hg(a);
}
function $833559fe574b4225$var$jg() {
    if (!$833559fe574b4225$var$gg && null !== $833559fe574b4225$var$eg) {
        $833559fe574b4225$var$gg = !0;
        var a = 0, b = $833559fe574b4225$var$C;
        try {
            var c = $833559fe574b4225$var$eg;
            for($833559fe574b4225$var$C = 1; a < c.length; a++){
                var d = c[a];
                do d = d(!0);
                while (null !== d);
            }
            $833559fe574b4225$var$eg = null;
            $833559fe574b4225$var$fg = !1;
        } catch (e) {
            throw null !== $833559fe574b4225$var$eg && ($833559fe574b4225$var$eg = $833559fe574b4225$var$eg.slice(a + 1)), $833559fe574b4225$var$ac($833559fe574b4225$var$fc, $833559fe574b4225$var$jg), e;
        } finally{
            $833559fe574b4225$var$C = b, $833559fe574b4225$var$gg = !1;
        }
    }
    return null;
}
var $833559fe574b4225$var$kg = [], $833559fe574b4225$var$lg = 0, $833559fe574b4225$var$mg = null, $833559fe574b4225$var$ng = 0, $833559fe574b4225$var$og = [], $833559fe574b4225$var$pg = 0, $833559fe574b4225$var$qg = null, $833559fe574b4225$var$rg = 1, $833559fe574b4225$var$sg = "";
function $833559fe574b4225$var$tg(a, b) {
    $833559fe574b4225$var$kg[$833559fe574b4225$var$lg++] = $833559fe574b4225$var$ng;
    $833559fe574b4225$var$kg[$833559fe574b4225$var$lg++] = $833559fe574b4225$var$mg;
    $833559fe574b4225$var$mg = a;
    $833559fe574b4225$var$ng = b;
}
function $833559fe574b4225$var$ug(a, b, c) {
    $833559fe574b4225$var$og[$833559fe574b4225$var$pg++] = $833559fe574b4225$var$rg;
    $833559fe574b4225$var$og[$833559fe574b4225$var$pg++] = $833559fe574b4225$var$sg;
    $833559fe574b4225$var$og[$833559fe574b4225$var$pg++] = $833559fe574b4225$var$qg;
    $833559fe574b4225$var$qg = a;
    var d = $833559fe574b4225$var$rg;
    a = $833559fe574b4225$var$sg;
    var e = 32 - $833559fe574b4225$var$oc(d) - 1;
    d &= ~(1 << e);
    c += 1;
    var f = 32 - $833559fe574b4225$var$oc(b) + e;
    if (30 < f) {
        var g = e - e % 5;
        f = (d & (1 << g) - 1).toString(32);
        d >>= g;
        e -= g;
        $833559fe574b4225$var$rg = 1 << 32 - $833559fe574b4225$var$oc(b) + e | c << e | d;
        $833559fe574b4225$var$sg = f + a;
    } else $833559fe574b4225$var$rg = 1 << f | c << e | d, $833559fe574b4225$var$sg = a;
}
function $833559fe574b4225$var$vg(a) {
    null !== a.return && ($833559fe574b4225$var$tg(a, 1), $833559fe574b4225$var$ug(a, 1, 0));
}
function $833559fe574b4225$var$wg(a) {
    for(; a === $833559fe574b4225$var$mg;)$833559fe574b4225$var$mg = $833559fe574b4225$var$kg[--$833559fe574b4225$var$lg], $833559fe574b4225$var$kg[$833559fe574b4225$var$lg] = null, $833559fe574b4225$var$ng = $833559fe574b4225$var$kg[--$833559fe574b4225$var$lg], $833559fe574b4225$var$kg[$833559fe574b4225$var$lg] = null;
    for(; a === $833559fe574b4225$var$qg;)$833559fe574b4225$var$qg = $833559fe574b4225$var$og[--$833559fe574b4225$var$pg], $833559fe574b4225$var$og[$833559fe574b4225$var$pg] = null, $833559fe574b4225$var$sg = $833559fe574b4225$var$og[--$833559fe574b4225$var$pg], $833559fe574b4225$var$og[$833559fe574b4225$var$pg] = null, $833559fe574b4225$var$rg = $833559fe574b4225$var$og[--$833559fe574b4225$var$pg], $833559fe574b4225$var$og[$833559fe574b4225$var$pg] = null;
}
var $833559fe574b4225$var$xg = null, $833559fe574b4225$var$yg = null, $833559fe574b4225$var$I = !1, $833559fe574b4225$var$zg = null;
function $833559fe574b4225$var$Ag(a, b) {
    var c = $833559fe574b4225$var$Bg(5, null, null, 0);
    c.elementType = "DELETED";
    c.stateNode = b;
    c.return = a;
    b = a.deletions;
    null === b ? (a.deletions = [
        c
    ], a.flags |= 16) : b.push(c);
}
function $833559fe574b4225$var$Cg(a, b) {
    switch(a.tag){
        case 5:
            var c = a.type;
            b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
            return null !== b ? (a.stateNode = b, $833559fe574b4225$var$xg = a, $833559fe574b4225$var$yg = $833559fe574b4225$var$Lf(b.firstChild), !0) : !1;
        case 6:
            return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, $833559fe574b4225$var$xg = a, $833559fe574b4225$var$yg = null, !0) : !1;
        case 13:
            return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== $833559fe574b4225$var$qg ? {
                id: $833559fe574b4225$var$rg,
                overflow: $833559fe574b4225$var$sg
            } : null, a.memoizedState = {
                dehydrated: b,
                treeContext: c,
                retryLane: 1073741824
            }, c = $833559fe574b4225$var$Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, $833559fe574b4225$var$xg = a, $833559fe574b4225$var$yg = null, !0) : !1;
        default:
            return !1;
    }
}
function $833559fe574b4225$var$Dg(a) {
    return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
}
function $833559fe574b4225$var$Eg(a) {
    if ($833559fe574b4225$var$I) {
        var b = $833559fe574b4225$var$yg;
        if (b) {
            var c = b;
            if (!$833559fe574b4225$var$Cg(a, b)) {
                if ($833559fe574b4225$var$Dg(a)) throw Error($833559fe574b4225$var$p(418));
                b = $833559fe574b4225$var$Lf(c.nextSibling);
                var d = $833559fe574b4225$var$xg;
                b && $833559fe574b4225$var$Cg(a, b) ? $833559fe574b4225$var$Ag(d, c) : (a.flags = a.flags & -4097 | 2, $833559fe574b4225$var$I = !1, $833559fe574b4225$var$xg = a);
            }
        } else {
            if ($833559fe574b4225$var$Dg(a)) throw Error($833559fe574b4225$var$p(418));
            a.flags = a.flags & -4097 | 2;
            $833559fe574b4225$var$I = !1;
            $833559fe574b4225$var$xg = a;
        }
    }
}
function $833559fe574b4225$var$Fg(a) {
    for(a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;)a = a.return;
    $833559fe574b4225$var$xg = a;
}
function $833559fe574b4225$var$Gg(a) {
    if (a !== $833559fe574b4225$var$xg) return !1;
    if (!$833559fe574b4225$var$I) return $833559fe574b4225$var$Fg(a), $833559fe574b4225$var$I = !0, !1;
    var b;
    (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !$833559fe574b4225$var$Ef(a.type, a.memoizedProps));
    if (b && (b = $833559fe574b4225$var$yg)) {
        if ($833559fe574b4225$var$Dg(a)) throw $833559fe574b4225$var$Hg(), Error($833559fe574b4225$var$p(418));
        for(; b;)$833559fe574b4225$var$Ag(a, b), b = $833559fe574b4225$var$Lf(b.nextSibling);
    }
    $833559fe574b4225$var$Fg(a);
    if (13 === a.tag) {
        a = a.memoizedState;
        a = null !== a ? a.dehydrated : null;
        if (!a) throw Error($833559fe574b4225$var$p(317));
        a: {
            a = a.nextSibling;
            for(b = 0; a;){
                if (8 === a.nodeType) {
                    var c = a.data;
                    if ("/$" === c) {
                        if (0 === b) {
                            $833559fe574b4225$var$yg = $833559fe574b4225$var$Lf(a.nextSibling);
                            break a;
                        }
                        b--;
                    } else "$" !== c && "$!" !== c && "$?" !== c || b++;
                }
                a = a.nextSibling;
            }
            $833559fe574b4225$var$yg = null;
        }
    } else $833559fe574b4225$var$yg = $833559fe574b4225$var$xg ? $833559fe574b4225$var$Lf(a.stateNode.nextSibling) : null;
    return !0;
}
function $833559fe574b4225$var$Hg() {
    for(var a = $833559fe574b4225$var$yg; a;)a = $833559fe574b4225$var$Lf(a.nextSibling);
}
function $833559fe574b4225$var$Ig() {
    $833559fe574b4225$var$yg = $833559fe574b4225$var$xg = null;
    $833559fe574b4225$var$I = !1;
}
function $833559fe574b4225$var$Jg(a) {
    null === $833559fe574b4225$var$zg ? $833559fe574b4225$var$zg = [
        a
    ] : $833559fe574b4225$var$zg.push(a);
}
var $833559fe574b4225$var$Kg = $833559fe574b4225$var$ua.ReactCurrentBatchConfig;
function $833559fe574b4225$var$Lg(a, b) {
    if (a && a.defaultProps) {
        b = $833559fe574b4225$var$A({}, b);
        a = a.defaultProps;
        for(var c in a)void 0 === b[c] && (b[c] = a[c]);
        return b;
    }
    return b;
}
var $833559fe574b4225$var$Mg = $833559fe574b4225$var$Uf(null), $833559fe574b4225$var$Ng = null, $833559fe574b4225$var$Og = null, $833559fe574b4225$var$Pg = null;
function $833559fe574b4225$var$Qg() {
    $833559fe574b4225$var$Pg = $833559fe574b4225$var$Og = $833559fe574b4225$var$Ng = null;
}
function $833559fe574b4225$var$Rg(a) {
    var b = $833559fe574b4225$var$Mg.current;
    $833559fe574b4225$var$E($833559fe574b4225$var$Mg);
    a._currentValue = b;
}
function $833559fe574b4225$var$Sg(a, b, c) {
    for(; null !== a;){
        var d = a.alternate;
        (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
        if (a === c) break;
        a = a.return;
    }
}
function $833559fe574b4225$var$Tg(a, b) {
    $833559fe574b4225$var$Ng = a;
    $833559fe574b4225$var$Pg = $833559fe574b4225$var$Og = null;
    a = a.dependencies;
    null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && ($833559fe574b4225$var$Ug = !0), a.firstContext = null);
}
function $833559fe574b4225$var$Vg(a) {
    var b = a._currentValue;
    if ($833559fe574b4225$var$Pg !== a) {
        if (a = {
            context: a,
            memoizedValue: b,
            next: null
        }, null === $833559fe574b4225$var$Og) {
            if (null === $833559fe574b4225$var$Ng) throw Error($833559fe574b4225$var$p(308));
            $833559fe574b4225$var$Og = a;
            $833559fe574b4225$var$Ng.dependencies = {
                lanes: 0,
                firstContext: a
            };
        } else $833559fe574b4225$var$Og = $833559fe574b4225$var$Og.next = a;
    }
    return b;
}
var $833559fe574b4225$var$Wg = null;
function $833559fe574b4225$var$Xg(a) {
    null === $833559fe574b4225$var$Wg ? $833559fe574b4225$var$Wg = [
        a
    ] : $833559fe574b4225$var$Wg.push(a);
}
function $833559fe574b4225$var$Yg(a, b, c, d) {
    var e = b.interleaved;
    null === e ? (c.next = c, $833559fe574b4225$var$Xg(b)) : (c.next = e.next, e.next = c);
    b.interleaved = c;
    return $833559fe574b4225$var$Zg(a, d);
}
function $833559fe574b4225$var$Zg(a, b) {
    a.lanes |= b;
    var c = a.alternate;
    null !== c && (c.lanes |= b);
    c = a;
    for(a = a.return; null !== a;)a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
    return 3 === c.tag ? c.stateNode : null;
}
var $833559fe574b4225$var$$g = !1;
function $833559fe574b4225$var$ah(a) {
    a.updateQueue = {
        baseState: a.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
            pending: null,
            interleaved: null,
            lanes: 0
        },
        effects: null
    };
}
function $833559fe574b4225$var$bh(a, b) {
    a = a.updateQueue;
    b.updateQueue === a && (b.updateQueue = {
        baseState: a.baseState,
        firstBaseUpdate: a.firstBaseUpdate,
        lastBaseUpdate: a.lastBaseUpdate,
        shared: a.shared,
        effects: a.effects
    });
}
function $833559fe574b4225$var$ch(a, b) {
    return {
        eventTime: a,
        lane: b,
        tag: 0,
        payload: null,
        callback: null,
        next: null
    };
}
function $833559fe574b4225$var$dh(a, b, c) {
    var d = a.updateQueue;
    if (null === d) return null;
    d = d.shared;
    if (0 !== ($833559fe574b4225$var$K & 2)) {
        var e = d.pending;
        null === e ? b.next = b : (b.next = e.next, e.next = b);
        d.pending = b;
        return $833559fe574b4225$var$Zg(a, c);
    }
    e = d.interleaved;
    null === e ? (b.next = b, $833559fe574b4225$var$Xg(d)) : (b.next = e.next, e.next = b);
    d.interleaved = b;
    return $833559fe574b4225$var$Zg(a, c);
}
function $833559fe574b4225$var$eh(a, b, c) {
    b = b.updateQueue;
    if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {
        var d = b.lanes;
        d &= a.pendingLanes;
        c |= d;
        b.lanes = c;
        $833559fe574b4225$var$Cc(a, c);
    }
}
function $833559fe574b4225$var$fh(a, b) {
    var c = a.updateQueue, d = a.alternate;
    if (null !== d && (d = d.updateQueue, c === d)) {
        var e = null, f = null;
        c = c.firstBaseUpdate;
        if (null !== c) {
            do {
                var g = {
                    eventTime: c.eventTime,
                    lane: c.lane,
                    tag: c.tag,
                    payload: c.payload,
                    callback: c.callback,
                    next: null
                };
                null === f ? e = f = g : f = f.next = g;
                c = c.next;
            }while (null !== c);
            null === f ? e = f = b : f = f.next = b;
        } else e = f = b;
        c = {
            baseState: d.baseState,
            firstBaseUpdate: e,
            lastBaseUpdate: f,
            shared: d.shared,
            effects: d.effects
        };
        a.updateQueue = c;
        return;
    }
    a = c.lastBaseUpdate;
    null === a ? c.firstBaseUpdate = b : a.next = b;
    c.lastBaseUpdate = b;
}
function $833559fe574b4225$var$gh(a, b, c, d) {
    var e = a.updateQueue;
    $833559fe574b4225$var$$g = !1;
    var f = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
    if (null !== h) {
        e.shared.pending = null;
        var k = h, l = k.next;
        k.next = null;
        null === g ? f = l : g.next = l;
        g = k;
        var m = a.alternate;
        null !== m && (m = m.updateQueue, h = m.lastBaseUpdate, h !== g && (null === h ? m.firstBaseUpdate = l : h.next = l, m.lastBaseUpdate = k));
    }
    if (null !== f) {
        var q = e.baseState;
        g = 0;
        m = l = k = null;
        h = f;
        do {
            var r = h.lane, y = h.eventTime;
            if ((d & r) === r) {
                null !== m && (m = m.next = {
                    eventTime: y,
                    lane: 0,
                    tag: h.tag,
                    payload: h.payload,
                    callback: h.callback,
                    next: null
                });
                a: {
                    var n = a, t = h;
                    r = b;
                    y = c;
                    switch(t.tag){
                        case 1:
                            n = t.payload;
                            if ("function" === typeof n) {
                                q = n.call(y, q, r);
                                break a;
                            }
                            q = n;
                            break a;
                        case 3:
                            n.flags = n.flags & -65537 | 128;
                        case 0:
                            n = t.payload;
                            r = "function" === typeof n ? n.call(y, q, r) : n;
                            if (null === r || void 0 === r) break a;
                            q = $833559fe574b4225$var$A({}, q, r);
                            break a;
                        case 2:
                            $833559fe574b4225$var$$g = !0;
                    }
                }
                null !== h.callback && 0 !== h.lane && (a.flags |= 64, r = e.effects, null === r ? e.effects = [
                    h
                ] : r.push(h));
            } else y = {
                eventTime: y,
                lane: r,
                tag: h.tag,
                payload: h.payload,
                callback: h.callback,
                next: null
            }, null === m ? (l = m = y, k = q) : m = m.next = y, g |= r;
            h = h.next;
            if (null === h) {
                if (h = e.shared.pending, null === h) break;
                else r = h, h = r.next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;
            }
        }while (1);
        null === m && (k = q);
        e.baseState = k;
        e.firstBaseUpdate = l;
        e.lastBaseUpdate = m;
        b = e.shared.interleaved;
        if (null !== b) {
            e = b;
            do g |= e.lane, e = e.next;
            while (e !== b);
        } else null === f && (e.shared.lanes = 0);
        $833559fe574b4225$var$hh |= g;
        a.lanes = g;
        a.memoizedState = q;
    }
}
function $833559fe574b4225$var$ih(a, b, c) {
    a = b.effects;
    b.effects = null;
    if (null !== a) for(b = 0; b < a.length; b++){
        var d = a[b], e = d.callback;
        if (null !== e) {
            d.callback = null;
            d = c;
            if ("function" !== typeof e) throw Error($833559fe574b4225$var$p(191, e));
            e.call(d);
        }
    }
}
var $833559fe574b4225$var$jh = (new $d4J5n.Component).refs;
function $833559fe574b4225$var$kh(a, b, c, d) {
    b = a.memoizedState;
    c = c(d, b);
    c = null === c || void 0 === c ? b : $833559fe574b4225$var$A({}, b, c);
    a.memoizedState = c;
    0 === a.lanes && (a.updateQueue.baseState = c);
}
var $833559fe574b4225$var$nh = {
    isMounted: function(a) {
        return (a = a._reactInternals) ? $833559fe574b4225$var$Vb(a) === a : !1;
    },
    enqueueSetState: function(a, b, c) {
        a = a._reactInternals;
        var d = $833559fe574b4225$var$L(), e = $833559fe574b4225$var$lh(a), f = $833559fe574b4225$var$ch(d, e);
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        b = $833559fe574b4225$var$dh(a, f, e);
        null !== b && ($833559fe574b4225$var$mh(b, a, e, d), $833559fe574b4225$var$eh(b, a, e));
    },
    enqueueReplaceState: function(a, b, c) {
        a = a._reactInternals;
        var d = $833559fe574b4225$var$L(), e = $833559fe574b4225$var$lh(a), f = $833559fe574b4225$var$ch(d, e);
        f.tag = 1;
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        b = $833559fe574b4225$var$dh(a, f, e);
        null !== b && ($833559fe574b4225$var$mh(b, a, e, d), $833559fe574b4225$var$eh(b, a, e));
    },
    enqueueForceUpdate: function(a, b) {
        a = a._reactInternals;
        var c = $833559fe574b4225$var$L(), d = $833559fe574b4225$var$lh(a), e = $833559fe574b4225$var$ch(c, d);
        e.tag = 2;
        void 0 !== b && null !== b && (e.callback = b);
        b = $833559fe574b4225$var$dh(a, e, d);
        null !== b && ($833559fe574b4225$var$mh(b, a, d, c), $833559fe574b4225$var$eh(b, a, d));
    }
};
function $833559fe574b4225$var$oh(a, b, c, d, e, f, g) {
    a = a.stateNode;
    return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !$833559fe574b4225$var$Ie(c, d) || !$833559fe574b4225$var$Ie(e, f) : !0;
}
function $833559fe574b4225$var$ph(a, b, c) {
    var d = !1, e = $833559fe574b4225$var$Vf;
    var f = b.contextType;
    "object" === typeof f && null !== f ? f = $833559fe574b4225$var$Vg(f) : (e = $833559fe574b4225$var$Zf(b) ? $833559fe574b4225$var$Xf : $833559fe574b4225$var$H.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? $833559fe574b4225$var$Yf(a, e) : $833559fe574b4225$var$Vf);
    b = new b(c, f);
    a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
    b.updater = $833559fe574b4225$var$nh;
    a.stateNode = b;
    b._reactInternals = a;
    d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
    return b;
}
function $833559fe574b4225$var$qh(a, b, c, d) {
    a = b.state;
    "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
    "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
    b.state !== a && $833559fe574b4225$var$nh.enqueueReplaceState(b, b.state, null);
}
function $833559fe574b4225$var$rh(a, b, c, d) {
    var e = a.stateNode;
    e.props = c;
    e.state = a.memoizedState;
    e.refs = $833559fe574b4225$var$jh;
    $833559fe574b4225$var$ah(a);
    var f = b.contextType;
    "object" === typeof f && null !== f ? e.context = $833559fe574b4225$var$Vg(f) : (f = $833559fe574b4225$var$Zf(b) ? $833559fe574b4225$var$Xf : $833559fe574b4225$var$H.current, e.context = $833559fe574b4225$var$Yf(a, f));
    e.state = a.memoizedState;
    f = b.getDerivedStateFromProps;
    "function" === typeof f && ($833559fe574b4225$var$kh(a, b, f, c), e.state = a.memoizedState);
    "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && $833559fe574b4225$var$nh.enqueueReplaceState(e, e.state, null), $833559fe574b4225$var$gh(a, c, e, d), e.state = a.memoizedState);
    "function" === typeof e.componentDidMount && (a.flags |= 4194308);
}
function $833559fe574b4225$var$sh(a, b, c) {
    a = c.ref;
    if (null !== a && "function" !== typeof a && "object" !== typeof a) {
        if (c._owner) {
            c = c._owner;
            if (c) {
                if (1 !== c.tag) throw Error($833559fe574b4225$var$p(309));
                var d = c.stateNode;
            }
            if (!d) throw Error($833559fe574b4225$var$p(147, a));
            var e = d, f = "" + a;
            if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f) return b.ref;
            b = function(a) {
                var b = e.refs;
                b === $833559fe574b4225$var$jh && (b = e.refs = {});
                null === a ? delete b[f] : b[f] = a;
            };
            b._stringRef = f;
            return b;
        }
        if ("string" !== typeof a) throw Error($833559fe574b4225$var$p(284));
        if (!c._owner) throw Error($833559fe574b4225$var$p(290, a));
    }
    return a;
}
function $833559fe574b4225$var$th(a, b) {
    a = Object.prototype.toString.call(b);
    throw Error($833559fe574b4225$var$p(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
}
function $833559fe574b4225$var$uh(a) {
    var b = a._init;
    return b(a._payload);
}
function $833559fe574b4225$var$vh(a) {
    function b(b, c) {
        if (a) {
            var d = b.deletions;
            null === d ? (b.deletions = [
                c
            ], b.flags |= 16) : d.push(c);
        }
    }
    function c(c, d) {
        if (!a) return null;
        for(; null !== d;)b(c, d), d = d.sibling;
        return null;
    }
    function d(a, b) {
        for(a = new Map; null !== b;)null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
        return a;
    }
    function e(a, b) {
        a = $833559fe574b4225$var$wh(a, b);
        a.index = 0;
        a.sibling = null;
        return a;
    }
    function f(b, c, d) {
        b.index = d;
        if (!a) return b.flags |= 1048576, c;
        d = b.alternate;
        if (null !== d) return d = d.index, d < c ? (b.flags |= 2, c) : d;
        b.flags |= 2;
        return c;
    }
    function g(b) {
        a && null === b.alternate && (b.flags |= 2);
        return b;
    }
    function h(a, b, c, d) {
        if (null === b || 6 !== b.tag) return b = $833559fe574b4225$var$xh(c, a.mode, d), b.return = a, b;
        b = e(b, c);
        b.return = a;
        return b;
    }
    function k(a, b, c, d) {
        var f = c.type;
        if (f === $833559fe574b4225$var$ya) return m(a, b, c.props.children, d, c.key);
        if (null !== b && (b.elementType === f || "object" === typeof f && null !== f && f.$$typeof === $833559fe574b4225$var$Ha && $833559fe574b4225$var$uh(f) === b.type)) return d = e(b, c.props), d.ref = $833559fe574b4225$var$sh(a, b, c), d.return = a, d;
        d = $833559fe574b4225$var$yh(c.type, c.key, c.props, null, a.mode, d);
        d.ref = $833559fe574b4225$var$sh(a, b, c);
        d.return = a;
        return d;
    }
    function l(a, b, c, d) {
        if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = $833559fe574b4225$var$zh(c, a.mode, d), b.return = a, b;
        b = e(b, c.children || []);
        b.return = a;
        return b;
    }
    function m(a, b, c, d, f) {
        if (null === b || 7 !== b.tag) return b = $833559fe574b4225$var$Ah(c, a.mode, d, f), b.return = a, b;
        b = e(b, c);
        b.return = a;
        return b;
    }
    function q(a, b, c) {
        if ("string" === typeof b && "" !== b || "number" === typeof b) return b = $833559fe574b4225$var$xh("" + b, a.mode, c), b.return = a, b;
        if ("object" === typeof b && null !== b) {
            switch(b.$$typeof){
                case $833559fe574b4225$var$va:
                    return c = $833559fe574b4225$var$yh(b.type, b.key, b.props, null, a.mode, c), c.ref = $833559fe574b4225$var$sh(a, null, b), c.return = a, c;
                case $833559fe574b4225$var$wa:
                    return b = $833559fe574b4225$var$zh(b, a.mode, c), b.return = a, b;
                case $833559fe574b4225$var$Ha:
                    var d = b._init;
                    return q(a, d(b._payload), c);
            }
            if ($833559fe574b4225$var$eb(b) || $833559fe574b4225$var$Ka(b)) return b = $833559fe574b4225$var$Ah(b, a.mode, c, null), b.return = a, b;
            $833559fe574b4225$var$th(a, b);
        }
        return null;
    }
    function r(a, b, c, d) {
        var e = null !== b ? b.key : null;
        if ("string" === typeof c && "" !== c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);
        if ("object" === typeof c && null !== c) {
            switch(c.$$typeof){
                case $833559fe574b4225$var$va:
                    return c.key === e ? k(a, b, c, d) : null;
                case $833559fe574b4225$var$wa:
                    return c.key === e ? l(a, b, c, d) : null;
                case $833559fe574b4225$var$Ha:
                    return e = c._init, r(a, b, e(c._payload), d);
            }
            if ($833559fe574b4225$var$eb(c) || $833559fe574b4225$var$Ka(c)) return null !== e ? null : m(a, b, c, d, null);
            $833559fe574b4225$var$th(a, c);
        }
        return null;
    }
    function y(a, b, c, d, e) {
        if ("string" === typeof d && "" !== d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);
        if ("object" === typeof d && null !== d) {
            switch(d.$$typeof){
                case $833559fe574b4225$var$va:
                    return a = a.get(null === d.key ? c : d.key) || null, k(b, a, d, e);
                case $833559fe574b4225$var$wa:
                    return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);
                case $833559fe574b4225$var$Ha:
                    var f = d._init;
                    return y(a, b, c, f(d._payload), e);
            }
            if ($833559fe574b4225$var$eb(d) || $833559fe574b4225$var$Ka(d)) return a = a.get(c) || null, m(b, a, d, e, null);
            $833559fe574b4225$var$th(b, d);
        }
        return null;
    }
    function n(e, g, h, k) {
        for(var l = null, m = null, u = g, w = g = 0, x = null; null !== u && w < h.length; w++){
            u.index > w ? (x = u, u = null) : x = u.sibling;
            var n = r(e, u, h[w], k);
            if (null === n) {
                null === u && (u = x);
                break;
            }
            a && u && null === n.alternate && b(e, u);
            g = f(n, g, w);
            null === m ? l = n : m.sibling = n;
            m = n;
            u = x;
        }
        if (w === h.length) return c(e, u), $833559fe574b4225$var$I && $833559fe574b4225$var$tg(e, w), l;
        if (null === u) {
            for(; w < h.length; w++)u = q(e, h[w], k), null !== u && (g = f(u, g, w), null === m ? l = u : m.sibling = u, m = u);
            $833559fe574b4225$var$I && $833559fe574b4225$var$tg(e, w);
            return l;
        }
        for(u = d(e, u); w < h.length; w++)x = y(u, e, w, h[w], k), null !== x && (a && null !== x.alternate && u.delete(null === x.key ? w : x.key), g = f(x, g, w), null === m ? l = x : m.sibling = x, m = x);
        a && u.forEach(function(a) {
            return b(e, a);
        });
        $833559fe574b4225$var$I && $833559fe574b4225$var$tg(e, w);
        return l;
    }
    function t(e, g, h, k) {
        var l = $833559fe574b4225$var$Ka(h);
        if ("function" !== typeof l) throw Error($833559fe574b4225$var$p(150));
        h = l.call(h);
        if (null == h) throw Error($833559fe574b4225$var$p(151));
        for(var u = l = null, m = g, w = g = 0, x = null, n = h.next(); null !== m && !n.done; w++, n = h.next()){
            m.index > w ? (x = m, m = null) : x = m.sibling;
            var t = r(e, m, n.value, k);
            if (null === t) {
                null === m && (m = x);
                break;
            }
            a && m && null === t.alternate && b(e, m);
            g = f(t, g, w);
            null === u ? l = t : u.sibling = t;
            u = t;
            m = x;
        }
        if (n.done) return c(e, m), $833559fe574b4225$var$I && $833559fe574b4225$var$tg(e, w), l;
        if (null === m) {
            for(; !n.done; w++, n = h.next())n = q(e, n.value, k), null !== n && (g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);
            $833559fe574b4225$var$I && $833559fe574b4225$var$tg(e, w);
            return l;
        }
        for(m = d(e, m); !n.done; w++, n = h.next())n = y(m, e, w, n.value, k), null !== n && (a && null !== n.alternate && m.delete(null === n.key ? w : n.key), g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);
        a && m.forEach(function(a) {
            return b(e, a);
        });
        $833559fe574b4225$var$I && $833559fe574b4225$var$tg(e, w);
        return l;
    }
    function J(a, d, f, h) {
        "object" === typeof f && null !== f && f.type === $833559fe574b4225$var$ya && null === f.key && (f = f.props.children);
        if ("object" === typeof f && null !== f) {
            switch(f.$$typeof){
                case $833559fe574b4225$var$va:
                    a: {
                        for(var k = f.key, l = d; null !== l;){
                            if (l.key === k) {
                                k = f.type;
                                if (k === $833559fe574b4225$var$ya) {
                                    if (7 === l.tag) {
                                        c(a, l.sibling);
                                        d = e(l, f.props.children);
                                        d.return = a;
                                        a = d;
                                        break a;
                                    }
                                } else if (l.elementType === k || "object" === typeof k && null !== k && k.$$typeof === $833559fe574b4225$var$Ha && $833559fe574b4225$var$uh(k) === l.type) {
                                    c(a, l.sibling);
                                    d = e(l, f.props);
                                    d.ref = $833559fe574b4225$var$sh(a, l, f);
                                    d.return = a;
                                    a = d;
                                    break a;
                                }
                                c(a, l);
                                break;
                            } else b(a, l);
                            l = l.sibling;
                        }
                        f.type === $833559fe574b4225$var$ya ? (d = $833559fe574b4225$var$Ah(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = $833559fe574b4225$var$yh(f.type, f.key, f.props, null, a.mode, h), h.ref = $833559fe574b4225$var$sh(a, d, f), h.return = a, a = h);
                    }
                    return g(a);
                case $833559fe574b4225$var$wa:
                    a: {
                        for(l = f.key; null !== d;){
                            if (d.key === l) {
                                if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
                                    c(a, d.sibling);
                                    d = e(d, f.children || []);
                                    d.return = a;
                                    a = d;
                                    break a;
                                } else {
                                    c(a, d);
                                    break;
                                }
                            } else b(a, d);
                            d = d.sibling;
                        }
                        d = $833559fe574b4225$var$zh(f, a.mode, h);
                        d.return = a;
                        a = d;
                    }
                    return g(a);
                case $833559fe574b4225$var$Ha:
                    return l = f._init, J(a, d, l(f._payload), h);
            }
            if ($833559fe574b4225$var$eb(f)) return n(a, d, f, h);
            if ($833559fe574b4225$var$Ka(f)) return t(a, d, f, h);
            $833559fe574b4225$var$th(a, f);
        }
        return "string" === typeof f && "" !== f || "number" === typeof f ? (f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = $833559fe574b4225$var$xh(f, a.mode, h), d.return = a, a = d), g(a)) : c(a, d);
    }
    return J;
}
var $833559fe574b4225$var$Bh = $833559fe574b4225$var$vh(!0), $833559fe574b4225$var$Ch = $833559fe574b4225$var$vh(!1), $833559fe574b4225$var$Dh = {}, $833559fe574b4225$var$Eh = $833559fe574b4225$var$Uf($833559fe574b4225$var$Dh), $833559fe574b4225$var$Fh = $833559fe574b4225$var$Uf($833559fe574b4225$var$Dh), $833559fe574b4225$var$Gh = $833559fe574b4225$var$Uf($833559fe574b4225$var$Dh);
function $833559fe574b4225$var$Hh(a) {
    if (a === $833559fe574b4225$var$Dh) throw Error($833559fe574b4225$var$p(174));
    return a;
}
function $833559fe574b4225$var$Ih(a, b) {
    $833559fe574b4225$var$G($833559fe574b4225$var$Gh, b);
    $833559fe574b4225$var$G($833559fe574b4225$var$Fh, a);
    $833559fe574b4225$var$G($833559fe574b4225$var$Eh, $833559fe574b4225$var$Dh);
    a = b.nodeType;
    switch(a){
        case 9:
        case 11:
            b = (b = b.documentElement) ? b.namespaceURI : $833559fe574b4225$var$lb(null, "");
            break;
        default:
            a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = $833559fe574b4225$var$lb(b, a);
    }
    $833559fe574b4225$var$E($833559fe574b4225$var$Eh);
    $833559fe574b4225$var$G($833559fe574b4225$var$Eh, b);
}
function $833559fe574b4225$var$Jh() {
    $833559fe574b4225$var$E($833559fe574b4225$var$Eh);
    $833559fe574b4225$var$E($833559fe574b4225$var$Fh);
    $833559fe574b4225$var$E($833559fe574b4225$var$Gh);
}
function $833559fe574b4225$var$Kh(a) {
    $833559fe574b4225$var$Hh($833559fe574b4225$var$Gh.current);
    var b = $833559fe574b4225$var$Hh($833559fe574b4225$var$Eh.current);
    var c = $833559fe574b4225$var$lb(b, a.type);
    b !== c && ($833559fe574b4225$var$G($833559fe574b4225$var$Fh, a), $833559fe574b4225$var$G($833559fe574b4225$var$Eh, c));
}
function $833559fe574b4225$var$Lh(a) {
    $833559fe574b4225$var$Fh.current === a && ($833559fe574b4225$var$E($833559fe574b4225$var$Eh), $833559fe574b4225$var$E($833559fe574b4225$var$Fh));
}
var $833559fe574b4225$var$M = $833559fe574b4225$var$Uf(0);
function $833559fe574b4225$var$Mh(a) {
    for(var b = a; null !== b;){
        if (13 === b.tag) {
            var c = b.memoizedState;
            if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
        } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
            if (0 !== (b.flags & 128)) return b;
        } else if (null !== b.child) {
            b.child.return = b;
            b = b.child;
            continue;
        }
        if (b === a) break;
        for(; null === b.sibling;){
            if (null === b.return || b.return === a) return null;
            b = b.return;
        }
        b.sibling.return = b.return;
        b = b.sibling;
    }
    return null;
}
var $833559fe574b4225$var$Nh = [];
function $833559fe574b4225$var$Oh() {
    for(var a = 0; a < $833559fe574b4225$var$Nh.length; a++)$833559fe574b4225$var$Nh[a]._workInProgressVersionPrimary = null;
    $833559fe574b4225$var$Nh.length = 0;
}
var $833559fe574b4225$var$Ph = $833559fe574b4225$var$ua.ReactCurrentDispatcher, $833559fe574b4225$var$Qh = $833559fe574b4225$var$ua.ReactCurrentBatchConfig, $833559fe574b4225$var$Rh = 0, $833559fe574b4225$var$N = null, $833559fe574b4225$var$O = null, $833559fe574b4225$var$P = null, $833559fe574b4225$var$Sh = !1, $833559fe574b4225$var$Th = !1, $833559fe574b4225$var$Uh = 0, $833559fe574b4225$var$Vh = 0;
function $833559fe574b4225$var$Q() {
    throw Error($833559fe574b4225$var$p(321));
}
function $833559fe574b4225$var$Wh(a, b) {
    if (null === b) return !1;
    for(var c = 0; c < b.length && c < a.length; c++)if (!$833559fe574b4225$var$He(a[c], b[c])) return !1;
    return !0;
}
function $833559fe574b4225$var$Xh(a, b, c, d, e, f) {
    $833559fe574b4225$var$Rh = f;
    $833559fe574b4225$var$N = b;
    b.memoizedState = null;
    b.updateQueue = null;
    b.lanes = 0;
    $833559fe574b4225$var$Ph.current = null === a || null === a.memoizedState ? $833559fe574b4225$var$Yh : $833559fe574b4225$var$Zh;
    a = c(d, e);
    if ($833559fe574b4225$var$Th) {
        f = 0;
        do {
            $833559fe574b4225$var$Th = !1;
            $833559fe574b4225$var$Uh = 0;
            if (25 <= f) throw Error($833559fe574b4225$var$p(301));
            f += 1;
            $833559fe574b4225$var$P = $833559fe574b4225$var$O = null;
            b.updateQueue = null;
            $833559fe574b4225$var$Ph.current = $833559fe574b4225$var$$h;
            a = c(d, e);
        }while ($833559fe574b4225$var$Th);
    }
    $833559fe574b4225$var$Ph.current = $833559fe574b4225$var$ai;
    b = null !== $833559fe574b4225$var$O && null !== $833559fe574b4225$var$O.next;
    $833559fe574b4225$var$Rh = 0;
    $833559fe574b4225$var$P = $833559fe574b4225$var$O = $833559fe574b4225$var$N = null;
    $833559fe574b4225$var$Sh = !1;
    if (b) throw Error($833559fe574b4225$var$p(300));
    return a;
}
function $833559fe574b4225$var$bi() {
    var a = 0 !== $833559fe574b4225$var$Uh;
    $833559fe574b4225$var$Uh = 0;
    return a;
}
function $833559fe574b4225$var$ci() {
    var a = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
    };
    null === $833559fe574b4225$var$P ? $833559fe574b4225$var$N.memoizedState = $833559fe574b4225$var$P = a : $833559fe574b4225$var$P = $833559fe574b4225$var$P.next = a;
    return $833559fe574b4225$var$P;
}
function $833559fe574b4225$var$di() {
    if (null === $833559fe574b4225$var$O) {
        var a = $833559fe574b4225$var$N.alternate;
        a = null !== a ? a.memoizedState : null;
    } else a = $833559fe574b4225$var$O.next;
    var b = null === $833559fe574b4225$var$P ? $833559fe574b4225$var$N.memoizedState : $833559fe574b4225$var$P.next;
    if (null !== b) $833559fe574b4225$var$P = b, $833559fe574b4225$var$O = a;
    else {
        if (null === a) throw Error($833559fe574b4225$var$p(310));
        $833559fe574b4225$var$O = a;
        a = {
            memoizedState: $833559fe574b4225$var$O.memoizedState,
            baseState: $833559fe574b4225$var$O.baseState,
            baseQueue: $833559fe574b4225$var$O.baseQueue,
            queue: $833559fe574b4225$var$O.queue,
            next: null
        };
        null === $833559fe574b4225$var$P ? $833559fe574b4225$var$N.memoizedState = $833559fe574b4225$var$P = a : $833559fe574b4225$var$P = $833559fe574b4225$var$P.next = a;
    }
    return $833559fe574b4225$var$P;
}
function $833559fe574b4225$var$ei(a, b) {
    return "function" === typeof b ? b(a) : b;
}
function $833559fe574b4225$var$fi(a) {
    var b = $833559fe574b4225$var$di(), c = b.queue;
    if (null === c) throw Error($833559fe574b4225$var$p(311));
    c.lastRenderedReducer = a;
    var d = $833559fe574b4225$var$O, e = d.baseQueue, f = c.pending;
    if (null !== f) {
        if (null !== e) {
            var g = e.next;
            e.next = f.next;
            f.next = g;
        }
        d.baseQueue = e = f;
        c.pending = null;
    }
    if (null !== e) {
        f = e.next;
        d = d.baseState;
        var h = g = null, k = null, l = f;
        do {
            var m = l.lane;
            if (($833559fe574b4225$var$Rh & m) === m) null !== k && (k = k.next = {
                lane: 0,
                action: l.action,
                hasEagerState: l.hasEagerState,
                eagerState: l.eagerState,
                next: null
            }), d = l.hasEagerState ? l.eagerState : a(d, l.action);
            else {
                var q = {
                    lane: m,
                    action: l.action,
                    hasEagerState: l.hasEagerState,
                    eagerState: l.eagerState,
                    next: null
                };
                null === k ? (h = k = q, g = d) : k = k.next = q;
                $833559fe574b4225$var$N.lanes |= m;
                $833559fe574b4225$var$hh |= m;
            }
            l = l.next;
        }while (null !== l && l !== f);
        null === k ? g = d : k.next = h;
        $833559fe574b4225$var$He(d, b.memoizedState) || ($833559fe574b4225$var$Ug = !0);
        b.memoizedState = d;
        b.baseState = g;
        b.baseQueue = k;
        c.lastRenderedState = d;
    }
    a = c.interleaved;
    if (null !== a) {
        e = a;
        do f = e.lane, $833559fe574b4225$var$N.lanes |= f, $833559fe574b4225$var$hh |= f, e = e.next;
        while (e !== a);
    } else null === e && (c.lanes = 0);
    return [
        b.memoizedState,
        c.dispatch
    ];
}
function $833559fe574b4225$var$gi(a) {
    var b = $833559fe574b4225$var$di(), c = b.queue;
    if (null === c) throw Error($833559fe574b4225$var$p(311));
    c.lastRenderedReducer = a;
    var d = c.dispatch, e = c.pending, f = b.memoizedState;
    if (null !== e) {
        c.pending = null;
        var g = e = e.next;
        do f = a(f, g.action), g = g.next;
        while (g !== e);
        $833559fe574b4225$var$He(f, b.memoizedState) || ($833559fe574b4225$var$Ug = !0);
        b.memoizedState = f;
        null === b.baseQueue && (b.baseState = f);
        c.lastRenderedState = f;
    }
    return [
        f,
        d
    ];
}
function $833559fe574b4225$var$hi() {}
function $833559fe574b4225$var$ii(a, b) {
    var c = $833559fe574b4225$var$N, d = $833559fe574b4225$var$di(), e = b(), f = !$833559fe574b4225$var$He(d.memoizedState, e);
    f && (d.memoizedState = e, $833559fe574b4225$var$Ug = !0);
    d = d.queue;
    $833559fe574b4225$var$ji($833559fe574b4225$var$ki.bind(null, c, d, a), [
        a
    ]);
    if (d.getSnapshot !== b || f || null !== $833559fe574b4225$var$P && $833559fe574b4225$var$P.memoizedState.tag & 1) {
        c.flags |= 2048;
        $833559fe574b4225$var$li(9, $833559fe574b4225$var$mi.bind(null, c, d, e, b), void 0, null);
        if (null === $833559fe574b4225$var$R) throw Error($833559fe574b4225$var$p(349));
        0 !== ($833559fe574b4225$var$Rh & 30) || $833559fe574b4225$var$ni(c, b, e);
    }
    return e;
}
function $833559fe574b4225$var$ni(a, b, c) {
    a.flags |= 16384;
    a = {
        getSnapshot: b,
        value: c
    };
    b = $833559fe574b4225$var$N.updateQueue;
    null === b ? (b = {
        lastEffect: null,
        stores: null
    }, $833559fe574b4225$var$N.updateQueue = b, b.stores = [
        a
    ]) : (c = b.stores, null === c ? b.stores = [
        a
    ] : c.push(a));
}
function $833559fe574b4225$var$mi(a, b, c, d) {
    b.value = c;
    b.getSnapshot = d;
    $833559fe574b4225$var$oi(b) && $833559fe574b4225$var$pi(a);
}
function $833559fe574b4225$var$ki(a, b, c) {
    return c(function() {
        $833559fe574b4225$var$oi(b) && $833559fe574b4225$var$pi(a);
    });
}
function $833559fe574b4225$var$oi(a) {
    var b = a.getSnapshot;
    a = a.value;
    try {
        var c = b();
        return !$833559fe574b4225$var$He(a, c);
    } catch (d) {
        return !0;
    }
}
function $833559fe574b4225$var$pi(a) {
    var b = $833559fe574b4225$var$Zg(a, 1);
    null !== b && $833559fe574b4225$var$mh(b, a, 1, -1);
}
function $833559fe574b4225$var$qi(a) {
    var b = $833559fe574b4225$var$ci();
    "function" === typeof a && (a = a());
    b.memoizedState = b.baseState = a;
    a = {
        pending: null,
        interleaved: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: $833559fe574b4225$var$ei,
        lastRenderedState: a
    };
    b.queue = a;
    a = a.dispatch = $833559fe574b4225$var$ri.bind(null, $833559fe574b4225$var$N, a);
    return [
        b.memoizedState,
        a
    ];
}
function $833559fe574b4225$var$li(a, b, c, d) {
    a = {
        tag: a,
        create: b,
        destroy: c,
        deps: d,
        next: null
    };
    b = $833559fe574b4225$var$N.updateQueue;
    null === b ? (b = {
        lastEffect: null,
        stores: null
    }, $833559fe574b4225$var$N.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
    return a;
}
function $833559fe574b4225$var$si() {
    return $833559fe574b4225$var$di().memoizedState;
}
function $833559fe574b4225$var$ti(a, b, c, d) {
    var e = $833559fe574b4225$var$ci();
    $833559fe574b4225$var$N.flags |= a;
    e.memoizedState = $833559fe574b4225$var$li(1 | b, c, void 0, void 0 === d ? null : d);
}
function $833559fe574b4225$var$ui(a, b, c, d) {
    var e = $833559fe574b4225$var$di();
    d = void 0 === d ? null : d;
    var f = void 0;
    if (null !== $833559fe574b4225$var$O) {
        var g = $833559fe574b4225$var$O.memoizedState;
        f = g.destroy;
        if (null !== d && $833559fe574b4225$var$Wh(d, g.deps)) {
            e.memoizedState = $833559fe574b4225$var$li(b, c, f, d);
            return;
        }
    }
    $833559fe574b4225$var$N.flags |= a;
    e.memoizedState = $833559fe574b4225$var$li(1 | b, c, f, d);
}
function $833559fe574b4225$var$vi(a, b) {
    return $833559fe574b4225$var$ti(8390656, 8, a, b);
}
function $833559fe574b4225$var$ji(a, b) {
    return $833559fe574b4225$var$ui(2048, 8, a, b);
}
function $833559fe574b4225$var$wi(a, b) {
    return $833559fe574b4225$var$ui(4, 2, a, b);
}
function $833559fe574b4225$var$xi(a, b) {
    return $833559fe574b4225$var$ui(4, 4, a, b);
}
function $833559fe574b4225$var$yi(a, b) {
    if ("function" === typeof b) return a = a(), b(a), function() {
        b(null);
    };
    if (null !== b && void 0 !== b) return a = a(), b.current = a, function() {
        b.current = null;
    };
}
function $833559fe574b4225$var$zi(a, b, c) {
    c = null !== c && void 0 !== c ? c.concat([
        a
    ]) : null;
    return $833559fe574b4225$var$ui(4, 4, $833559fe574b4225$var$yi.bind(null, b, a), c);
}
function $833559fe574b4225$var$Ai() {}
function $833559fe574b4225$var$Bi(a, b) {
    var c = $833559fe574b4225$var$di();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && $833559fe574b4225$var$Wh(b, d[1])) return d[0];
    c.memoizedState = [
        a,
        b
    ];
    return a;
}
function $833559fe574b4225$var$Ci(a, b) {
    var c = $833559fe574b4225$var$di();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    if (null !== d && null !== b && $833559fe574b4225$var$Wh(b, d[1])) return d[0];
    a = a();
    c.memoizedState = [
        a,
        b
    ];
    return a;
}
function $833559fe574b4225$var$Di(a, b, c) {
    if (0 === ($833559fe574b4225$var$Rh & 21)) return a.baseState && (a.baseState = !1, $833559fe574b4225$var$Ug = !0), a.memoizedState = c;
    $833559fe574b4225$var$He(c, b) || (c = $833559fe574b4225$var$yc(), $833559fe574b4225$var$N.lanes |= c, $833559fe574b4225$var$hh |= c, a.baseState = !0);
    return b;
}
function $833559fe574b4225$var$Ei(a, b) {
    var c = $833559fe574b4225$var$C;
    $833559fe574b4225$var$C = 0 !== c && 4 > c ? c : 4;
    a(!0);
    var d = $833559fe574b4225$var$Qh.transition;
    $833559fe574b4225$var$Qh.transition = {};
    try {
        a(!1), b();
    } finally{
        $833559fe574b4225$var$C = c, $833559fe574b4225$var$Qh.transition = d;
    }
}
function $833559fe574b4225$var$Fi() {
    return $833559fe574b4225$var$di().memoizedState;
}
function $833559fe574b4225$var$Gi(a, b, c) {
    var d = $833559fe574b4225$var$lh(a);
    c = {
        lane: d,
        action: c,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    if ($833559fe574b4225$var$Hi(a)) $833559fe574b4225$var$Ii(b, c);
    else if (c = $833559fe574b4225$var$Yg(a, b, c, d), null !== c) {
        var e = $833559fe574b4225$var$L();
        $833559fe574b4225$var$mh(c, a, d, e);
        $833559fe574b4225$var$Ji(c, b, d);
    }
}
function $833559fe574b4225$var$ri(a, b, c) {
    var d = $833559fe574b4225$var$lh(a), e = {
        lane: d,
        action: c,
        hasEagerState: !1,
        eagerState: null,
        next: null
    };
    if ($833559fe574b4225$var$Hi(a)) $833559fe574b4225$var$Ii(b, e);
    else {
        var f = a.alternate;
        if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f)) try {
            var g = b.lastRenderedState, h = f(g, c);
            e.hasEagerState = !0;
            e.eagerState = h;
            if ($833559fe574b4225$var$He(h, g)) {
                var k = b.interleaved;
                null === k ? (e.next = e, $833559fe574b4225$var$Xg(b)) : (e.next = k.next, k.next = e);
                b.interleaved = e;
                return;
            }
        } catch (l) {} finally{}
        c = $833559fe574b4225$var$Yg(a, b, e, d);
        null !== c && (e = $833559fe574b4225$var$L(), $833559fe574b4225$var$mh(c, a, d, e), $833559fe574b4225$var$Ji(c, b, d));
    }
}
function $833559fe574b4225$var$Hi(a) {
    var b = a.alternate;
    return a === $833559fe574b4225$var$N || null !== b && b === $833559fe574b4225$var$N;
}
function $833559fe574b4225$var$Ii(a, b) {
    $833559fe574b4225$var$Th = $833559fe574b4225$var$Sh = !0;
    var c = a.pending;
    null === c ? b.next = b : (b.next = c.next, c.next = b);
    a.pending = b;
}
function $833559fe574b4225$var$Ji(a, b, c) {
    if (0 !== (c & 4194240)) {
        var d = b.lanes;
        d &= a.pendingLanes;
        c |= d;
        b.lanes = c;
        $833559fe574b4225$var$Cc(a, c);
    }
}
var $833559fe574b4225$var$ai = {
    readContext: $833559fe574b4225$var$Vg,
    useCallback: $833559fe574b4225$var$Q,
    useContext: $833559fe574b4225$var$Q,
    useEffect: $833559fe574b4225$var$Q,
    useImperativeHandle: $833559fe574b4225$var$Q,
    useInsertionEffect: $833559fe574b4225$var$Q,
    useLayoutEffect: $833559fe574b4225$var$Q,
    useMemo: $833559fe574b4225$var$Q,
    useReducer: $833559fe574b4225$var$Q,
    useRef: $833559fe574b4225$var$Q,
    useState: $833559fe574b4225$var$Q,
    useDebugValue: $833559fe574b4225$var$Q,
    useDeferredValue: $833559fe574b4225$var$Q,
    useTransition: $833559fe574b4225$var$Q,
    useMutableSource: $833559fe574b4225$var$Q,
    useSyncExternalStore: $833559fe574b4225$var$Q,
    useId: $833559fe574b4225$var$Q,
    unstable_isNewReconciler: !1
}, $833559fe574b4225$var$Yh = {
    readContext: $833559fe574b4225$var$Vg,
    useCallback: function(a, b) {
        $833559fe574b4225$var$ci().memoizedState = [
            a,
            void 0 === b ? null : b
        ];
        return a;
    },
    useContext: $833559fe574b4225$var$Vg,
    useEffect: $833559fe574b4225$var$vi,
    useImperativeHandle: function(a, b, c) {
        c = null !== c && void 0 !== c ? c.concat([
            a
        ]) : null;
        return $833559fe574b4225$var$ti(4194308, 4, $833559fe574b4225$var$yi.bind(null, b, a), c);
    },
    useLayoutEffect: function(a, b) {
        return $833559fe574b4225$var$ti(4194308, 4, a, b);
    },
    useInsertionEffect: function(a, b) {
        return $833559fe574b4225$var$ti(4, 2, a, b);
    },
    useMemo: function(a, b) {
        var c = $833559fe574b4225$var$ci();
        b = void 0 === b ? null : b;
        a = a();
        c.memoizedState = [
            a,
            b
        ];
        return a;
    },
    useReducer: function(a, b, c) {
        var d = $833559fe574b4225$var$ci();
        b = void 0 !== c ? c(b) : b;
        d.memoizedState = d.baseState = b;
        a = {
            pending: null,
            interleaved: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: a,
            lastRenderedState: b
        };
        d.queue = a;
        a = a.dispatch = $833559fe574b4225$var$Gi.bind(null, $833559fe574b4225$var$N, a);
        return [
            d.memoizedState,
            a
        ];
    },
    useRef: function(a) {
        var b = $833559fe574b4225$var$ci();
        a = {
            current: a
        };
        return b.memoizedState = a;
    },
    useState: $833559fe574b4225$var$qi,
    useDebugValue: $833559fe574b4225$var$Ai,
    useDeferredValue: function(a) {
        return $833559fe574b4225$var$ci().memoizedState = a;
    },
    useTransition: function() {
        var a = $833559fe574b4225$var$qi(!1), b = a[0];
        a = $833559fe574b4225$var$Ei.bind(null, a[1]);
        $833559fe574b4225$var$ci().memoizedState = a;
        return [
            b,
            a
        ];
    },
    useMutableSource: function() {},
    useSyncExternalStore: function(a, b, c) {
        var d = $833559fe574b4225$var$N, e = $833559fe574b4225$var$ci();
        if ($833559fe574b4225$var$I) {
            if (void 0 === c) throw Error($833559fe574b4225$var$p(407));
            c = c();
        } else {
            c = b();
            if (null === $833559fe574b4225$var$R) throw Error($833559fe574b4225$var$p(349));
            0 !== ($833559fe574b4225$var$Rh & 30) || $833559fe574b4225$var$ni(d, b, c);
        }
        e.memoizedState = c;
        var f = {
            value: c,
            getSnapshot: b
        };
        e.queue = f;
        $833559fe574b4225$var$vi($833559fe574b4225$var$ki.bind(null, d, f, a), [
            a
        ]);
        d.flags |= 2048;
        $833559fe574b4225$var$li(9, $833559fe574b4225$var$mi.bind(null, d, f, c, b), void 0, null);
        return c;
    },
    useId: function() {
        var a = $833559fe574b4225$var$ci(), b = $833559fe574b4225$var$R.identifierPrefix;
        if ($833559fe574b4225$var$I) {
            var c = $833559fe574b4225$var$sg;
            var d = $833559fe574b4225$var$rg;
            c = (d & ~(1 << 32 - $833559fe574b4225$var$oc(d) - 1)).toString(32) + c;
            b = ":" + b + "R" + c;
            c = $833559fe574b4225$var$Uh++;
            0 < c && (b += "H" + c.toString(32));
            b += ":";
        } else c = $833559fe574b4225$var$Vh++, b = ":" + b + "r" + c.toString(32) + ":";
        return a.memoizedState = b;
    },
    unstable_isNewReconciler: !1
}, $833559fe574b4225$var$Zh = {
    readContext: $833559fe574b4225$var$Vg,
    useCallback: $833559fe574b4225$var$Bi,
    useContext: $833559fe574b4225$var$Vg,
    useEffect: $833559fe574b4225$var$ji,
    useImperativeHandle: $833559fe574b4225$var$zi,
    useInsertionEffect: $833559fe574b4225$var$wi,
    useLayoutEffect: $833559fe574b4225$var$xi,
    useMemo: $833559fe574b4225$var$Ci,
    useReducer: $833559fe574b4225$var$fi,
    useRef: $833559fe574b4225$var$si,
    useState: function() {
        return $833559fe574b4225$var$fi($833559fe574b4225$var$ei);
    },
    useDebugValue: $833559fe574b4225$var$Ai,
    useDeferredValue: function(a) {
        var b = $833559fe574b4225$var$di();
        return $833559fe574b4225$var$Di(b, $833559fe574b4225$var$O.memoizedState, a);
    },
    useTransition: function() {
        var a = $833559fe574b4225$var$fi($833559fe574b4225$var$ei)[0], b = $833559fe574b4225$var$di().memoizedState;
        return [
            a,
            b
        ];
    },
    useMutableSource: $833559fe574b4225$var$hi,
    useSyncExternalStore: $833559fe574b4225$var$ii,
    useId: $833559fe574b4225$var$Fi,
    unstable_isNewReconciler: !1
}, $833559fe574b4225$var$$h = {
    readContext: $833559fe574b4225$var$Vg,
    useCallback: $833559fe574b4225$var$Bi,
    useContext: $833559fe574b4225$var$Vg,
    useEffect: $833559fe574b4225$var$ji,
    useImperativeHandle: $833559fe574b4225$var$zi,
    useInsertionEffect: $833559fe574b4225$var$wi,
    useLayoutEffect: $833559fe574b4225$var$xi,
    useMemo: $833559fe574b4225$var$Ci,
    useReducer: $833559fe574b4225$var$gi,
    useRef: $833559fe574b4225$var$si,
    useState: function() {
        return $833559fe574b4225$var$gi($833559fe574b4225$var$ei);
    },
    useDebugValue: $833559fe574b4225$var$Ai,
    useDeferredValue: function(a) {
        var b = $833559fe574b4225$var$di();
        return null === $833559fe574b4225$var$O ? b.memoizedState = a : $833559fe574b4225$var$Di(b, $833559fe574b4225$var$O.memoizedState, a);
    },
    useTransition: function() {
        var a = $833559fe574b4225$var$gi($833559fe574b4225$var$ei)[0], b = $833559fe574b4225$var$di().memoizedState;
        return [
            a,
            b
        ];
    },
    useMutableSource: $833559fe574b4225$var$hi,
    useSyncExternalStore: $833559fe574b4225$var$ii,
    useId: $833559fe574b4225$var$Fi,
    unstable_isNewReconciler: !1
};
function $833559fe574b4225$var$Ki(a, b) {
    try {
        var c = "", d = b;
        do c += $833559fe574b4225$var$Pa(d), d = d.return;
        while (d);
        var e = c;
    } catch (f) {
        e = "\nError generating stack: " + f.message + "\n" + f.stack;
    }
    return {
        value: a,
        source: b,
        stack: e,
        digest: null
    };
}
function $833559fe574b4225$var$Li(a, b, c) {
    return {
        value: a,
        source: null,
        stack: null != c ? c : null,
        digest: null != b ? b : null
    };
}
function $833559fe574b4225$var$Mi(a, b) {
    try {
        console.error(b.value);
    } catch (c) {
        setTimeout(function() {
            throw c;
        });
    }
}
var $833559fe574b4225$var$Ni = "function" === typeof WeakMap ? WeakMap : Map;
function $833559fe574b4225$var$Oi(a, b, c) {
    c = $833559fe574b4225$var$ch(-1, c);
    c.tag = 3;
    c.payload = {
        element: null
    };
    var d = b.value;
    c.callback = function() {
        $833559fe574b4225$var$Pi || ($833559fe574b4225$var$Pi = !0, $833559fe574b4225$var$Qi = d);
        $833559fe574b4225$var$Mi(a, b);
    };
    return c;
}
function $833559fe574b4225$var$Ri(a, b, c) {
    c = $833559fe574b4225$var$ch(-1, c);
    c.tag = 3;
    var d = a.type.getDerivedStateFromError;
    if ("function" === typeof d) {
        var e = b.value;
        c.payload = function() {
            return d(e);
        };
        c.callback = function() {
            $833559fe574b4225$var$Mi(a, b);
        };
    }
    var f = a.stateNode;
    null !== f && "function" === typeof f.componentDidCatch && (c.callback = function() {
        $833559fe574b4225$var$Mi(a, b);
        "function" !== typeof d && (null === $833559fe574b4225$var$Si ? $833559fe574b4225$var$Si = new Set([
            this
        ]) : $833559fe574b4225$var$Si.add(this));
        var c = b.stack;
        this.componentDidCatch(b.value, {
            componentStack: null !== c ? c : ""
        });
    });
    return c;
}
function $833559fe574b4225$var$Ti(a, b, c) {
    var d = a.pingCache;
    if (null === d) {
        d = a.pingCache = new $833559fe574b4225$var$Ni;
        var e = new Set;
        d.set(b, e);
    } else e = d.get(b), void 0 === e && (e = new Set, d.set(b, e));
    e.has(c) || (e.add(c), a = $833559fe574b4225$var$Ui.bind(null, a, b, c), b.then(a, a));
}
function $833559fe574b4225$var$Vi(a) {
    do {
        var b;
        if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? !0 : !1 : !0;
        if (b) return a;
        a = a.return;
    }while (null !== a);
    return null;
}
function $833559fe574b4225$var$Wi(a, b, c, d, e) {
    if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = $833559fe574b4225$var$ch(-1, 1), b.tag = 2, $833559fe574b4225$var$dh(c, b, 1))), c.lanes |= 1), a;
    a.flags |= 65536;
    a.lanes = e;
    return a;
}
var $833559fe574b4225$var$Xi = $833559fe574b4225$var$ua.ReactCurrentOwner, $833559fe574b4225$var$Ug = !1;
function $833559fe574b4225$var$Yi(a, b, c, d) {
    b.child = null === a ? $833559fe574b4225$var$Ch(b, null, c, d) : $833559fe574b4225$var$Bh(b, a.child, c, d);
}
function $833559fe574b4225$var$Zi(a, b, c, d, e) {
    c = c.render;
    var f = b.ref;
    $833559fe574b4225$var$Tg(b, e);
    d = $833559fe574b4225$var$Xh(a, b, c, d, f, e);
    c = $833559fe574b4225$var$bi();
    if (null !== a && !$833559fe574b4225$var$Ug) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $833559fe574b4225$var$$i(a, b, e);
    $833559fe574b4225$var$I && c && $833559fe574b4225$var$vg(b);
    b.flags |= 1;
    $833559fe574b4225$var$Yi(a, b, d, e);
    return b.child;
}
function $833559fe574b4225$var$aj(a, b, c, d, e) {
    if (null === a) {
        var f = c.type;
        if ("function" === typeof f && !$833559fe574b4225$var$bj(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f, $833559fe574b4225$var$cj(a, b, f, d, e);
        a = $833559fe574b4225$var$yh(c.type, null, d, b, b.mode, e);
        a.ref = b.ref;
        a.return = b;
        return b.child = a;
    }
    f = a.child;
    if (0 === (a.lanes & e)) {
        var g = f.memoizedProps;
        c = c.compare;
        c = null !== c ? c : $833559fe574b4225$var$Ie;
        if (c(g, d) && a.ref === b.ref) return $833559fe574b4225$var$$i(a, b, e);
    }
    b.flags |= 1;
    a = $833559fe574b4225$var$wh(f, d);
    a.ref = b.ref;
    a.return = b;
    return b.child = a;
}
function $833559fe574b4225$var$cj(a, b, c, d, e) {
    if (null !== a) {
        var f = a.memoizedProps;
        if ($833559fe574b4225$var$Ie(f, d) && a.ref === b.ref) {
            if ($833559fe574b4225$var$Ug = !1, b.pendingProps = d = f, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && ($833559fe574b4225$var$Ug = !0);
            else return b.lanes = a.lanes, $833559fe574b4225$var$$i(a, b, e);
        }
    }
    return $833559fe574b4225$var$dj(a, b, c, d, e);
}
function $833559fe574b4225$var$ej(a, b, c) {
    var d = b.pendingProps, e = d.children, f = null !== a ? a.memoizedState : null;
    if ("hidden" === d.mode) {
        if (0 === (b.mode & 1)) b.memoizedState = {
            baseLanes: 0,
            cachePool: null,
            transitions: null
        }, $833559fe574b4225$var$G($833559fe574b4225$var$fj, $833559fe574b4225$var$gj), $833559fe574b4225$var$gj |= c;
        else {
            if (0 === (c & 1073741824)) return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {
                baseLanes: a,
                cachePool: null,
                transitions: null
            }, b.updateQueue = null, $833559fe574b4225$var$G($833559fe574b4225$var$fj, $833559fe574b4225$var$gj), $833559fe574b4225$var$gj |= a, null;
            b.memoizedState = {
                baseLanes: 0,
                cachePool: null,
                transitions: null
            };
            d = null !== f ? f.baseLanes : c;
            $833559fe574b4225$var$G($833559fe574b4225$var$fj, $833559fe574b4225$var$gj);
            $833559fe574b4225$var$gj |= d;
        }
    } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, $833559fe574b4225$var$G($833559fe574b4225$var$fj, $833559fe574b4225$var$gj), $833559fe574b4225$var$gj |= d;
    $833559fe574b4225$var$Yi(a, b, e, c);
    return b.child;
}
function $833559fe574b4225$var$hj(a, b) {
    var c = b.ref;
    if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;
}
function $833559fe574b4225$var$dj(a, b, c, d, e) {
    var f = $833559fe574b4225$var$Zf(c) ? $833559fe574b4225$var$Xf : $833559fe574b4225$var$H.current;
    f = $833559fe574b4225$var$Yf(b, f);
    $833559fe574b4225$var$Tg(b, e);
    c = $833559fe574b4225$var$Xh(a, b, c, d, f, e);
    d = $833559fe574b4225$var$bi();
    if (null !== a && !$833559fe574b4225$var$Ug) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $833559fe574b4225$var$$i(a, b, e);
    $833559fe574b4225$var$I && d && $833559fe574b4225$var$vg(b);
    b.flags |= 1;
    $833559fe574b4225$var$Yi(a, b, c, e);
    return b.child;
}
function $833559fe574b4225$var$ij(a, b, c, d, e) {
    if ($833559fe574b4225$var$Zf(c)) {
        var f = !0;
        $833559fe574b4225$var$cg(b);
    } else f = !1;
    $833559fe574b4225$var$Tg(b, e);
    if (null === b.stateNode) $833559fe574b4225$var$jj(a, b), $833559fe574b4225$var$ph(b, c, d), $833559fe574b4225$var$rh(b, c, d, e), d = !0;
    else if (null === a) {
        var g = b.stateNode, h = b.memoizedProps;
        g.props = h;
        var k = g.context, l = c.contextType;
        "object" === typeof l && null !== l ? l = $833559fe574b4225$var$Vg(l) : (l = $833559fe574b4225$var$Zf(c) ? $833559fe574b4225$var$Xf : $833559fe574b4225$var$H.current, l = $833559fe574b4225$var$Yf(b, l));
        var m = c.getDerivedStateFromProps, q = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;
        q || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && $833559fe574b4225$var$qh(b, g, d, l);
        $833559fe574b4225$var$$g = !1;
        var r = b.memoizedState;
        g.state = r;
        $833559fe574b4225$var$gh(b, d, g, e);
        k = b.memoizedState;
        h !== d || r !== k || $833559fe574b4225$var$Wf.current || $833559fe574b4225$var$$g ? ("function" === typeof m && ($833559fe574b4225$var$kh(b, c, m, d), k = b.memoizedState), (h = $833559fe574b4225$var$$g || $833559fe574b4225$var$oh(b, c, h, d, r, k, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = !1);
    } else {
        g = b.stateNode;
        $833559fe574b4225$var$bh(a, b);
        h = b.memoizedProps;
        l = b.type === b.elementType ? h : $833559fe574b4225$var$Lg(b.type, h);
        g.props = l;
        q = b.pendingProps;
        r = g.context;
        k = c.contextType;
        "object" === typeof k && null !== k ? k = $833559fe574b4225$var$Vg(k) : (k = $833559fe574b4225$var$Zf(c) ? $833559fe574b4225$var$Xf : $833559fe574b4225$var$H.current, k = $833559fe574b4225$var$Yf(b, k));
        var y = c.getDerivedStateFromProps;
        (m = "function" === typeof y || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q || r !== k) && $833559fe574b4225$var$qh(b, g, d, k);
        $833559fe574b4225$var$$g = !1;
        r = b.memoizedState;
        g.state = r;
        $833559fe574b4225$var$gh(b, d, g, e);
        var n = b.memoizedState;
        h !== q || r !== n || $833559fe574b4225$var$Wf.current || $833559fe574b4225$var$$g ? ("function" === typeof y && ($833559fe574b4225$var$kh(b, c, y, d), n = b.memoizedState), (l = $833559fe574b4225$var$$g || $833559fe574b4225$var$oh(b, c, l, d, r, n, k) || !1) ? (m || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n), g.props = d, g.state = n, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), d = !1);
    }
    return $833559fe574b4225$var$kj(a, b, c, d, f, e);
}
function $833559fe574b4225$var$kj(a, b, c, d, e, f) {
    $833559fe574b4225$var$hj(a, b);
    var g = 0 !== (b.flags & 128);
    if (!d && !g) return e && $833559fe574b4225$var$dg(b, c, !1), $833559fe574b4225$var$$i(a, b, f);
    d = b.stateNode;
    $833559fe574b4225$var$Xi.current = b;
    var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
    b.flags |= 1;
    null !== a && g ? (b.child = $833559fe574b4225$var$Bh(b, a.child, null, f), b.child = $833559fe574b4225$var$Bh(b, null, h, f)) : $833559fe574b4225$var$Yi(a, b, h, f);
    b.memoizedState = d.state;
    e && $833559fe574b4225$var$dg(b, c, !0);
    return b.child;
}
function $833559fe574b4225$var$lj(a) {
    var b = a.stateNode;
    b.pendingContext ? $833559fe574b4225$var$ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && $833559fe574b4225$var$ag(a, b.context, !1);
    $833559fe574b4225$var$Ih(a, b.containerInfo);
}
function $833559fe574b4225$var$mj(a, b, c, d, e) {
    $833559fe574b4225$var$Ig();
    $833559fe574b4225$var$Jg(e);
    b.flags |= 256;
    $833559fe574b4225$var$Yi(a, b, c, d);
    return b.child;
}
var $833559fe574b4225$var$nj = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0
};
function $833559fe574b4225$var$oj(a) {
    return {
        baseLanes: a,
        cachePool: null,
        transitions: null
    };
}
function $833559fe574b4225$var$pj(a, b, c) {
    var d = b.pendingProps, e = $833559fe574b4225$var$M.current, f = !1, g = 0 !== (b.flags & 128), h;
    (h = g) || (h = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));
    if (h) f = !0, b.flags &= -129;
    else if (null === a || null !== a.memoizedState) e |= 1;
    $833559fe574b4225$var$G($833559fe574b4225$var$M, e & 1);
    if (null === a) {
        $833559fe574b4225$var$Eg(b);
        a = b.memoizedState;
        if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;
        g = d.children;
        a = d.fallback;
        return f ? (d = b.mode, f = b.child, g = {
            mode: "hidden",
            children: g
        }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = $833559fe574b4225$var$qj(g, d, 0, null), a = $833559fe574b4225$var$Ah(a, d, c, null), f.return = b, a.return = b, f.sibling = a, b.child = f, b.child.memoizedState = $833559fe574b4225$var$oj(c), b.memoizedState = $833559fe574b4225$var$nj, a) : $833559fe574b4225$var$rj(b, g);
    }
    e = a.memoizedState;
    if (null !== e && (h = e.dehydrated, null !== h)) return $833559fe574b4225$var$sj(a, b, g, d, h, e, c);
    if (f) {
        f = d.fallback;
        g = b.mode;
        e = a.child;
        h = e.sibling;
        var k = {
            mode: "hidden",
            children: d.children
        };
        0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = $833559fe574b4225$var$wh(e, k), d.subtreeFlags = e.subtreeFlags & 14680064);
        null !== h ? f = $833559fe574b4225$var$wh(h, f) : (f = $833559fe574b4225$var$Ah(f, g, c, null), f.flags |= 2);
        f.return = b;
        d.return = b;
        d.sibling = f;
        b.child = d;
        d = f;
        f = b.child;
        g = a.child.memoizedState;
        g = null === g ? $833559fe574b4225$var$oj(c) : {
            baseLanes: g.baseLanes | c,
            cachePool: null,
            transitions: g.transitions
        };
        f.memoizedState = g;
        f.childLanes = a.childLanes & ~c;
        b.memoizedState = $833559fe574b4225$var$nj;
        return d;
    }
    f = a.child;
    a = f.sibling;
    d = $833559fe574b4225$var$wh(f, {
        mode: "visible",
        children: d.children
    });
    0 === (b.mode & 1) && (d.lanes = c);
    d.return = b;
    d.sibling = null;
    null !== a && (c = b.deletions, null === c ? (b.deletions = [
        a
    ], b.flags |= 16) : c.push(a));
    b.child = d;
    b.memoizedState = null;
    return d;
}
function $833559fe574b4225$var$rj(a, b) {
    b = $833559fe574b4225$var$qj({
        mode: "visible",
        children: b
    }, a.mode, 0, null);
    b.return = a;
    return a.child = b;
}
function $833559fe574b4225$var$tj(a, b, c, d) {
    null !== d && $833559fe574b4225$var$Jg(d);
    $833559fe574b4225$var$Bh(b, a.child, null, c);
    a = $833559fe574b4225$var$rj(b, b.pendingProps.children);
    a.flags |= 2;
    b.memoizedState = null;
    return a;
}
function $833559fe574b4225$var$sj(a, b, c, d, e, f, g) {
    if (c) {
        if (b.flags & 256) return b.flags &= -257, d = $833559fe574b4225$var$Li(Error($833559fe574b4225$var$p(422))), $833559fe574b4225$var$tj(a, b, g, d);
        if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;
        f = d.fallback;
        e = b.mode;
        d = $833559fe574b4225$var$qj({
            mode: "visible",
            children: d.children
        }, e, 0, null);
        f = $833559fe574b4225$var$Ah(f, e, g, null);
        f.flags |= 2;
        d.return = b;
        f.return = b;
        d.sibling = f;
        b.child = d;
        0 !== (b.mode & 1) && $833559fe574b4225$var$Bh(b, a.child, null, g);
        b.child.memoizedState = $833559fe574b4225$var$oj(g);
        b.memoizedState = $833559fe574b4225$var$nj;
        return f;
    }
    if (0 === (b.mode & 1)) return $833559fe574b4225$var$tj(a, b, g, null);
    if ("$!" === e.data) {
        d = e.nextSibling && e.nextSibling.dataset;
        if (d) var h = d.dgst;
        d = h;
        f = Error($833559fe574b4225$var$p(419));
        d = $833559fe574b4225$var$Li(f, d, void 0);
        return $833559fe574b4225$var$tj(a, b, g, d);
    }
    h = 0 !== (g & a.childLanes);
    if ($833559fe574b4225$var$Ug || h) {
        d = $833559fe574b4225$var$R;
        if (null !== d) {
            switch(g & -g){
                case 4:
                    e = 2;
                    break;
                case 16:
                    e = 8;
                    break;
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                case 4096:
                case 8192:
                case 16384:
                case 32768:
                case 65536:
                case 131072:
                case 262144:
                case 524288:
                case 1048576:
                case 2097152:
                case 4194304:
                case 8388608:
                case 16777216:
                case 33554432:
                case 67108864:
                    e = 32;
                    break;
                case 536870912:
                    e = 268435456;
                    break;
                default:
                    e = 0;
            }
            e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
            0 !== e && e !== f.retryLane && (f.retryLane = e, $833559fe574b4225$var$Zg(a, e), $833559fe574b4225$var$mh(d, a, e, -1));
        }
        $833559fe574b4225$var$uj();
        d = $833559fe574b4225$var$Li(Error($833559fe574b4225$var$p(421)));
        return $833559fe574b4225$var$tj(a, b, g, d);
    }
    if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = $833559fe574b4225$var$vj.bind(null, a), e._reactRetry = b, null;
    a = f.treeContext;
    $833559fe574b4225$var$yg = $833559fe574b4225$var$Lf(e.nextSibling);
    $833559fe574b4225$var$xg = b;
    $833559fe574b4225$var$I = !0;
    $833559fe574b4225$var$zg = null;
    null !== a && ($833559fe574b4225$var$og[$833559fe574b4225$var$pg++] = $833559fe574b4225$var$rg, $833559fe574b4225$var$og[$833559fe574b4225$var$pg++] = $833559fe574b4225$var$sg, $833559fe574b4225$var$og[$833559fe574b4225$var$pg++] = $833559fe574b4225$var$qg, $833559fe574b4225$var$rg = a.id, $833559fe574b4225$var$sg = a.overflow, $833559fe574b4225$var$qg = b);
    b = $833559fe574b4225$var$rj(b, d.children);
    b.flags |= 4096;
    return b;
}
function $833559fe574b4225$var$wj(a, b, c) {
    a.lanes |= b;
    var d = a.alternate;
    null !== d && (d.lanes |= b);
    $833559fe574b4225$var$Sg(a.return, b, c);
}
function $833559fe574b4225$var$xj(a, b, c, d, e) {
    var f = a.memoizedState;
    null === f ? a.memoizedState = {
        isBackwards: b,
        rendering: null,
        renderingStartTime: 0,
        last: d,
        tail: c,
        tailMode: e
    } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
}
function $833559fe574b4225$var$yj(a, b, c) {
    var d = b.pendingProps, e = d.revealOrder, f = d.tail;
    $833559fe574b4225$var$Yi(a, b, d.children, c);
    d = $833559fe574b4225$var$M.current;
    if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;
    else {
        if (null !== a && 0 !== (a.flags & 128)) a: for(a = b.child; null !== a;){
            if (13 === a.tag) null !== a.memoizedState && $833559fe574b4225$var$wj(a, c, b);
            else if (19 === a.tag) $833559fe574b4225$var$wj(a, c, b);
            else if (null !== a.child) {
                a.child.return = a;
                a = a.child;
                continue;
            }
            if (a === b) break a;
            for(; null === a.sibling;){
                if (null === a.return || a.return === b) break a;
                a = a.return;
            }
            a.sibling.return = a.return;
            a = a.sibling;
        }
        d &= 1;
    }
    $833559fe574b4225$var$G($833559fe574b4225$var$M, d);
    if (0 === (b.mode & 1)) b.memoizedState = null;
    else switch(e){
        case "forwards":
            c = b.child;
            for(e = null; null !== c;)a = c.alternate, null !== a && null === $833559fe574b4225$var$Mh(a) && (e = c), c = c.sibling;
            c = e;
            null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
            $833559fe574b4225$var$xj(b, !1, e, c, f);
            break;
        case "backwards":
            c = null;
            e = b.child;
            for(b.child = null; null !== e;){
                a = e.alternate;
                if (null !== a && null === $833559fe574b4225$var$Mh(a)) {
                    b.child = e;
                    break;
                }
                a = e.sibling;
                e.sibling = c;
                c = e;
                e = a;
            }
            $833559fe574b4225$var$xj(b, !0, c, null, f);
            break;
        case "together":
            $833559fe574b4225$var$xj(b, !1, null, null, void 0);
            break;
        default:
            b.memoizedState = null;
    }
    return b.child;
}
function $833559fe574b4225$var$jj(a, b) {
    0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
}
function $833559fe574b4225$var$$i(a, b, c) {
    null !== a && (b.dependencies = a.dependencies);
    $833559fe574b4225$var$hh |= b.lanes;
    if (0 === (c & b.childLanes)) return null;
    if (null !== a && b.child !== a.child) throw Error($833559fe574b4225$var$p(153));
    if (null !== b.child) {
        a = b.child;
        c = $833559fe574b4225$var$wh(a, a.pendingProps);
        b.child = c;
        for(c.return = b; null !== a.sibling;)a = a.sibling, c = c.sibling = $833559fe574b4225$var$wh(a, a.pendingProps), c.return = b;
        c.sibling = null;
    }
    return b.child;
}
function $833559fe574b4225$var$zj(a, b, c) {
    switch(b.tag){
        case 3:
            $833559fe574b4225$var$lj(b);
            $833559fe574b4225$var$Ig();
            break;
        case 5:
            $833559fe574b4225$var$Kh(b);
            break;
        case 1:
            $833559fe574b4225$var$Zf(b.type) && $833559fe574b4225$var$cg(b);
            break;
        case 4:
            $833559fe574b4225$var$Ih(b, b.stateNode.containerInfo);
            break;
        case 10:
            var d = b.type._context, e = b.memoizedProps.value;
            $833559fe574b4225$var$G($833559fe574b4225$var$Mg, d._currentValue);
            d._currentValue = e;
            break;
        case 13:
            d = b.memoizedState;
            if (null !== d) {
                if (null !== d.dehydrated) return $833559fe574b4225$var$G($833559fe574b4225$var$M, $833559fe574b4225$var$M.current & 1), b.flags |= 128, null;
                if (0 !== (c & b.child.childLanes)) return $833559fe574b4225$var$pj(a, b, c);
                $833559fe574b4225$var$G($833559fe574b4225$var$M, $833559fe574b4225$var$M.current & 1);
                a = $833559fe574b4225$var$$i(a, b, c);
                return null !== a ? a.sibling : null;
            }
            $833559fe574b4225$var$G($833559fe574b4225$var$M, $833559fe574b4225$var$M.current & 1);
            break;
        case 19:
            d = 0 !== (c & b.childLanes);
            if (0 !== (a.flags & 128)) {
                if (d) return $833559fe574b4225$var$yj(a, b, c);
                b.flags |= 128;
            }
            e = b.memoizedState;
            null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
            $833559fe574b4225$var$G($833559fe574b4225$var$M, $833559fe574b4225$var$M.current);
            if (d) break;
            else return null;
        case 22:
        case 23:
            return b.lanes = 0, $833559fe574b4225$var$ej(a, b, c);
    }
    return $833559fe574b4225$var$$i(a, b, c);
}
var $833559fe574b4225$var$Aj, $833559fe574b4225$var$Bj, $833559fe574b4225$var$Cj, $833559fe574b4225$var$Dj;
$833559fe574b4225$var$Aj = function(a, b) {
    for(var c = b.child; null !== c;){
        if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);
        else if (4 !== c.tag && null !== c.child) {
            c.child.return = c;
            c = c.child;
            continue;
        }
        if (c === b) break;
        for(; null === c.sibling;){
            if (null === c.return || c.return === b) return;
            c = c.return;
        }
        c.sibling.return = c.return;
        c = c.sibling;
    }
};
$833559fe574b4225$var$Bj = function() {};
$833559fe574b4225$var$Cj = function(a, b, c, d) {
    var e = a.memoizedProps;
    if (e !== d) {
        a = b.stateNode;
        $833559fe574b4225$var$Hh($833559fe574b4225$var$Eh.current);
        var f = null;
        switch(c){
            case "input":
                e = $833559fe574b4225$var$Ya(a, e);
                d = $833559fe574b4225$var$Ya(a, d);
                f = [];
                break;
            case "select":
                e = $833559fe574b4225$var$A({}, e, {
                    value: void 0
                });
                d = $833559fe574b4225$var$A({}, d, {
                    value: void 0
                });
                f = [];
                break;
            case "textarea":
                e = $833559fe574b4225$var$gb(a, e);
                d = $833559fe574b4225$var$gb(a, d);
                f = [];
                break;
            default:
                "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = $833559fe574b4225$var$Bf);
        }
        $833559fe574b4225$var$ub(c, d);
        var g;
        c = null;
        for(l in e)if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) {
            if ("style" === l) {
                var h = e[l];
                for(g in h)h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
            } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && ($833559fe574b4225$var$ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
        }
        for(l in d){
            var k = d[l];
            h = null != e ? e[l] : void 0;
            if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) {
                if ("style" === l) {
                    if (h) {
                        for(g in h)!h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
                        for(g in k)k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
                    } else c || (f || (f = []), f.push(l, c)), c = k;
                } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && ($833559fe574b4225$var$ea.hasOwnProperty(l) ? (null != k && "onScroll" === l && $833559fe574b4225$var$D("scroll", a), f || h === k || (f = [])) : (f = f || []).push(l, k));
            }
        }
        c && (f = f || []).push("style", c);
        var l = f;
        if (b.updateQueue = l) b.flags |= 4;
    }
};
$833559fe574b4225$var$Dj = function(a, b, c, d) {
    c !== d && (b.flags |= 4);
};
function $833559fe574b4225$var$Ej(a, b) {
    if (!$833559fe574b4225$var$I) switch(a.tailMode){
        case "hidden":
            b = a.tail;
            for(var c = null; null !== b;)null !== b.alternate && (c = b), b = b.sibling;
            null === c ? a.tail = null : c.sibling = null;
            break;
        case "collapsed":
            c = a.tail;
            for(var d = null; null !== c;)null !== c.alternate && (d = c), c = c.sibling;
            null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
    }
}
function $833559fe574b4225$var$S(a) {
    var b = null !== a.alternate && a.alternate.child === a.child, c = 0, d = 0;
    if (b) for(var e = a.child; null !== e;)c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;
    else for(e = a.child; null !== e;)c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
    a.subtreeFlags |= d;
    a.childLanes = c;
    return b;
}
function $833559fe574b4225$var$Fj(a, b, c) {
    var d = b.pendingProps;
    $833559fe574b4225$var$wg(b);
    switch(b.tag){
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
            return $833559fe574b4225$var$S(b), null;
        case 1:
            return $833559fe574b4225$var$Zf(b.type) && $833559fe574b4225$var$$f(), $833559fe574b4225$var$S(b), null;
        case 3:
            d = b.stateNode;
            $833559fe574b4225$var$Jh();
            $833559fe574b4225$var$E($833559fe574b4225$var$Wf);
            $833559fe574b4225$var$E($833559fe574b4225$var$H);
            $833559fe574b4225$var$Oh();
            d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
            if (null === a || null === a.child) $833559fe574b4225$var$Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== $833559fe574b4225$var$zg && ($833559fe574b4225$var$Gj($833559fe574b4225$var$zg), $833559fe574b4225$var$zg = null));
            $833559fe574b4225$var$Bj(a, b);
            $833559fe574b4225$var$S(b);
            return null;
        case 5:
            $833559fe574b4225$var$Lh(b);
            var e = $833559fe574b4225$var$Hh($833559fe574b4225$var$Gh.current);
            c = b.type;
            if (null !== a && null != b.stateNode) $833559fe574b4225$var$Cj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);
            else {
                if (!d) {
                    if (null === b.stateNode) throw Error($833559fe574b4225$var$p(166));
                    $833559fe574b4225$var$S(b);
                    return null;
                }
                a = $833559fe574b4225$var$Hh($833559fe574b4225$var$Eh.current);
                if ($833559fe574b4225$var$Gg(b)) {
                    d = b.stateNode;
                    c = b.type;
                    var f = b.memoizedProps;
                    d[$833559fe574b4225$var$Of] = b;
                    d[$833559fe574b4225$var$Pf] = f;
                    a = 0 !== (b.mode & 1);
                    switch(c){
                        case "dialog":
                            $833559fe574b4225$var$D("cancel", d);
                            $833559fe574b4225$var$D("close", d);
                            break;
                        case "iframe":
                        case "object":
                        case "embed":
                            $833559fe574b4225$var$D("load", d);
                            break;
                        case "video":
                        case "audio":
                            for(e = 0; e < $833559fe574b4225$var$lf.length; e++)$833559fe574b4225$var$D($833559fe574b4225$var$lf[e], d);
                            break;
                        case "source":
                            $833559fe574b4225$var$D("error", d);
                            break;
                        case "img":
                        case "image":
                        case "link":
                            $833559fe574b4225$var$D("error", d);
                            $833559fe574b4225$var$D("load", d);
                            break;
                        case "details":
                            $833559fe574b4225$var$D("toggle", d);
                            break;
                        case "input":
                            $833559fe574b4225$var$Za(d, f);
                            $833559fe574b4225$var$D("invalid", d);
                            break;
                        case "select":
                            d._wrapperState = {
                                wasMultiple: !!f.multiple
                            };
                            $833559fe574b4225$var$D("invalid", d);
                            break;
                        case "textarea":
                            $833559fe574b4225$var$hb(d, f), $833559fe574b4225$var$D("invalid", d);
                    }
                    $833559fe574b4225$var$ub(c, f);
                    e = null;
                    for(var g in f)if (f.hasOwnProperty(g)) {
                        var h = f[g];
                        "children" === g ? "string" === typeof h ? d.textContent !== h && (!0 !== f.suppressHydrationWarning && $833559fe574b4225$var$Af(d.textContent, h, a), e = [
                            "children",
                            h
                        ]) : "number" === typeof h && d.textContent !== "" + h && (!0 !== f.suppressHydrationWarning && $833559fe574b4225$var$Af(d.textContent, h, a), e = [
                            "children",
                            "" + h
                        ]) : $833559fe574b4225$var$ea.hasOwnProperty(g) && null != h && "onScroll" === g && $833559fe574b4225$var$D("scroll", d);
                    }
                    switch(c){
                        case "input":
                            $833559fe574b4225$var$Va(d);
                            $833559fe574b4225$var$db(d, f, !0);
                            break;
                        case "textarea":
                            $833559fe574b4225$var$Va(d);
                            $833559fe574b4225$var$jb(d);
                            break;
                        case "select":
                        case "option":
                            break;
                        default:
                            "function" === typeof f.onClick && (d.onclick = $833559fe574b4225$var$Bf);
                    }
                    d = e;
                    b.updateQueue = d;
                    null !== d && (b.flags |= 4);
                } else {
                    g = 9 === e.nodeType ? e : e.ownerDocument;
                    "http://www.w3.org/1999/xhtml" === a && (a = $833559fe574b4225$var$kb(c));
                    "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script></script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {
                        is: d.is
                    }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
                    a[$833559fe574b4225$var$Of] = b;
                    a[$833559fe574b4225$var$Pf] = d;
                    $833559fe574b4225$var$Aj(a, b, !1, !1);
                    b.stateNode = a;
                    a: {
                        g = $833559fe574b4225$var$vb(c, d);
                        switch(c){
                            case "dialog":
                                $833559fe574b4225$var$D("cancel", a);
                                $833559fe574b4225$var$D("close", a);
                                e = d;
                                break;
                            case "iframe":
                            case "object":
                            case "embed":
                                $833559fe574b4225$var$D("load", a);
                                e = d;
                                break;
                            case "video":
                            case "audio":
                                for(e = 0; e < $833559fe574b4225$var$lf.length; e++)$833559fe574b4225$var$D($833559fe574b4225$var$lf[e], a);
                                e = d;
                                break;
                            case "source":
                                $833559fe574b4225$var$D("error", a);
                                e = d;
                                break;
                            case "img":
                            case "image":
                            case "link":
                                $833559fe574b4225$var$D("error", a);
                                $833559fe574b4225$var$D("load", a);
                                e = d;
                                break;
                            case "details":
                                $833559fe574b4225$var$D("toggle", a);
                                e = d;
                                break;
                            case "input":
                                $833559fe574b4225$var$Za(a, d);
                                e = $833559fe574b4225$var$Ya(a, d);
                                $833559fe574b4225$var$D("invalid", a);
                                break;
                            case "option":
                                e = d;
                                break;
                            case "select":
                                a._wrapperState = {
                                    wasMultiple: !!d.multiple
                                };
                                e = $833559fe574b4225$var$A({}, d, {
                                    value: void 0
                                });
                                $833559fe574b4225$var$D("invalid", a);
                                break;
                            case "textarea":
                                $833559fe574b4225$var$hb(a, d);
                                e = $833559fe574b4225$var$gb(a, d);
                                $833559fe574b4225$var$D("invalid", a);
                                break;
                            default:
                                e = d;
                        }
                        $833559fe574b4225$var$ub(c, e);
                        h = e;
                        for(f in h)if (h.hasOwnProperty(f)) {
                            var k = h[f];
                            "style" === f ? $833559fe574b4225$var$sb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && $833559fe574b4225$var$nb(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && $833559fe574b4225$var$ob(a, k) : "number" === typeof k && $833559fe574b4225$var$ob(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && ($833559fe574b4225$var$ea.hasOwnProperty(f) ? null != k && "onScroll" === f && $833559fe574b4225$var$D("scroll", a) : null != k && $833559fe574b4225$var$ta(a, f, k, g));
                        }
                        switch(c){
                            case "input":
                                $833559fe574b4225$var$Va(a);
                                $833559fe574b4225$var$db(a, d, !1);
                                break;
                            case "textarea":
                                $833559fe574b4225$var$Va(a);
                                $833559fe574b4225$var$jb(a);
                                break;
                            case "option":
                                null != d.value && a.setAttribute("value", "" + $833559fe574b4225$var$Sa(d.value));
                                break;
                            case "select":
                                a.multiple = !!d.multiple;
                                f = d.value;
                                null != f ? $833559fe574b4225$var$fb(a, !!d.multiple, f, !1) : null != d.defaultValue && $833559fe574b4225$var$fb(a, !!d.multiple, d.defaultValue, !0);
                                break;
                            default:
                                "function" === typeof e.onClick && (a.onclick = $833559fe574b4225$var$Bf);
                        }
                        switch(c){
                            case "button":
                            case "input":
                            case "select":
                            case "textarea":
                                d = !!d.autoFocus;
                                break a;
                            case "img":
                                d = !0;
                                break a;
                            default:
                                d = !1;
                        }
                    }
                    d && (b.flags |= 4);
                }
                null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
            }
            $833559fe574b4225$var$S(b);
            return null;
        case 6:
            if (a && null != b.stateNode) $833559fe574b4225$var$Dj(a, b, a.memoizedProps, d);
            else {
                if ("string" !== typeof d && null === b.stateNode) throw Error($833559fe574b4225$var$p(166));
                c = $833559fe574b4225$var$Hh($833559fe574b4225$var$Gh.current);
                $833559fe574b4225$var$Hh($833559fe574b4225$var$Eh.current);
                if ($833559fe574b4225$var$Gg(b)) {
                    d = b.stateNode;
                    c = b.memoizedProps;
                    d[$833559fe574b4225$var$Of] = b;
                    if (f = d.nodeValue !== c) {
                        if (a = $833559fe574b4225$var$xg, null !== a) switch(a.tag){
                            case 3:
                                $833559fe574b4225$var$Af(d.nodeValue, c, 0 !== (a.mode & 1));
                                break;
                            case 5:
                                !0 !== a.memoizedProps.suppressHydrationWarning && $833559fe574b4225$var$Af(d.nodeValue, c, 0 !== (a.mode & 1));
                        }
                    }
                    f && (b.flags |= 4);
                } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[$833559fe574b4225$var$Of] = b, b.stateNode = d;
            }
            $833559fe574b4225$var$S(b);
            return null;
        case 13:
            $833559fe574b4225$var$E($833559fe574b4225$var$M);
            d = b.memoizedState;
            if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
                if ($833559fe574b4225$var$I && null !== $833559fe574b4225$var$yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) $833559fe574b4225$var$Hg(), $833559fe574b4225$var$Ig(), b.flags |= 98560, f = !1;
                else if (f = $833559fe574b4225$var$Gg(b), null !== d && null !== d.dehydrated) {
                    if (null === a) {
                        if (!f) throw Error($833559fe574b4225$var$p(318));
                        f = b.memoizedState;
                        f = null !== f ? f.dehydrated : null;
                        if (!f) throw Error($833559fe574b4225$var$p(317));
                        f[$833559fe574b4225$var$Of] = b;
                    } else $833559fe574b4225$var$Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
                    $833559fe574b4225$var$S(b);
                    f = !1;
                } else null !== $833559fe574b4225$var$zg && ($833559fe574b4225$var$Gj($833559fe574b4225$var$zg), $833559fe574b4225$var$zg = null), f = !0;
                if (!f) return b.flags & 65536 ? b : null;
            }
            if (0 !== (b.flags & 128)) return b.lanes = c, b;
            d = null !== d;
            d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== ($833559fe574b4225$var$M.current & 1) ? 0 === $833559fe574b4225$var$T && ($833559fe574b4225$var$T = 3) : $833559fe574b4225$var$uj()));
            null !== b.updateQueue && (b.flags |= 4);
            $833559fe574b4225$var$S(b);
            return null;
        case 4:
            return $833559fe574b4225$var$Jh(), $833559fe574b4225$var$Bj(a, b), null === a && $833559fe574b4225$var$sf(b.stateNode.containerInfo), $833559fe574b4225$var$S(b), null;
        case 10:
            return $833559fe574b4225$var$Rg(b.type._context), $833559fe574b4225$var$S(b), null;
        case 17:
            return $833559fe574b4225$var$Zf(b.type) && $833559fe574b4225$var$$f(), $833559fe574b4225$var$S(b), null;
        case 19:
            $833559fe574b4225$var$E($833559fe574b4225$var$M);
            f = b.memoizedState;
            if (null === f) return $833559fe574b4225$var$S(b), null;
            d = 0 !== (b.flags & 128);
            g = f.rendering;
            if (null === g) {
                if (d) $833559fe574b4225$var$Ej(f, !1);
                else {
                    if (0 !== $833559fe574b4225$var$T || null !== a && 0 !== (a.flags & 128)) for(a = b.child; null !== a;){
                        g = $833559fe574b4225$var$Mh(a);
                        if (null !== g) {
                            b.flags |= 128;
                            $833559fe574b4225$var$Ej(f, !1);
                            d = g.updateQueue;
                            null !== d && (b.updateQueue = d, b.flags |= 4);
                            b.subtreeFlags = 0;
                            d = c;
                            for(c = b.child; null !== c;)f = c, a = d, f.flags &= 14680066, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {
                                lanes: a.lanes,
                                firstContext: a.firstContext
                            }), c = c.sibling;
                            $833559fe574b4225$var$G($833559fe574b4225$var$M, $833559fe574b4225$var$M.current & 1 | 2);
                            return b.child;
                        }
                        a = a.sibling;
                    }
                    null !== f.tail && $833559fe574b4225$var$B() > $833559fe574b4225$var$Hj && (b.flags |= 128, d = !0, $833559fe574b4225$var$Ej(f, !1), b.lanes = 4194304);
                }
            } else {
                if (!d) {
                    if (a = $833559fe574b4225$var$Mh(g), null !== a) {
                        if (b.flags |= 128, d = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), $833559fe574b4225$var$Ej(f, !0), null === f.tail && "hidden" === f.tailMode && !g.alternate && !$833559fe574b4225$var$I) return $833559fe574b4225$var$S(b), null;
                    } else 2 * $833559fe574b4225$var$B() - f.renderingStartTime > $833559fe574b4225$var$Hj && 1073741824 !== c && (b.flags |= 128, d = !0, $833559fe574b4225$var$Ej(f, !1), b.lanes = 4194304);
                }
                f.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f.last, null !== c ? c.sibling = g : b.child = g, f.last = g);
            }
            if (null !== f.tail) return b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = $833559fe574b4225$var$B(), b.sibling = null, c = $833559fe574b4225$var$M.current, $833559fe574b4225$var$G($833559fe574b4225$var$M, d ? c & 1 | 2 : c & 1), b;
            $833559fe574b4225$var$S(b);
            return null;
        case 22:
        case 23:
            return $833559fe574b4225$var$Ij(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== ($833559fe574b4225$var$gj & 1073741824) && ($833559fe574b4225$var$S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : $833559fe574b4225$var$S(b), null;
        case 24:
            return null;
        case 25:
            return null;
    }
    throw Error($833559fe574b4225$var$p(156, b.tag));
}
function $833559fe574b4225$var$Jj(a, b) {
    $833559fe574b4225$var$wg(b);
    switch(b.tag){
        case 1:
            return $833559fe574b4225$var$Zf(b.type) && $833559fe574b4225$var$$f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
        case 3:
            return $833559fe574b4225$var$Jh(), $833559fe574b4225$var$E($833559fe574b4225$var$Wf), $833559fe574b4225$var$E($833559fe574b4225$var$H), $833559fe574b4225$var$Oh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
        case 5:
            return $833559fe574b4225$var$Lh(b), null;
        case 13:
            $833559fe574b4225$var$E($833559fe574b4225$var$M);
            a = b.memoizedState;
            if (null !== a && null !== a.dehydrated) {
                if (null === b.alternate) throw Error($833559fe574b4225$var$p(340));
                $833559fe574b4225$var$Ig();
            }
            a = b.flags;
            return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
        case 19:
            return $833559fe574b4225$var$E($833559fe574b4225$var$M), null;
        case 4:
            return $833559fe574b4225$var$Jh(), null;
        case 10:
            return $833559fe574b4225$var$Rg(b.type._context), null;
        case 22:
        case 23:
            return $833559fe574b4225$var$Ij(), null;
        case 24:
            return null;
        default:
            return null;
    }
}
var $833559fe574b4225$var$Kj = !1, $833559fe574b4225$var$U = !1, $833559fe574b4225$var$Lj = "function" === typeof WeakSet ? WeakSet : Set, $833559fe574b4225$var$V = null;
function $833559fe574b4225$var$Mj(a, b) {
    var c = a.ref;
    if (null !== c) {
        if ("function" === typeof c) try {
            c(null);
        } catch (d) {
            $833559fe574b4225$var$W(a, b, d);
        }
        else c.current = null;
    }
}
function $833559fe574b4225$var$Nj(a, b, c) {
    try {
        c();
    } catch (d) {
        $833559fe574b4225$var$W(a, b, d);
    }
}
var $833559fe574b4225$var$Oj = !1;
function $833559fe574b4225$var$Pj(a, b) {
    $833559fe574b4225$var$Cf = $833559fe574b4225$var$dd;
    a = $833559fe574b4225$var$Me();
    if ($833559fe574b4225$var$Ne(a)) {
        if ("selectionStart" in a) var c = {
            start: a.selectionStart,
            end: a.selectionEnd
        };
        else a: {
            c = (c = a.ownerDocument) && c.defaultView || window;
            var d = c.getSelection && c.getSelection();
            if (d && 0 !== d.rangeCount) {
                c = d.anchorNode;
                var e = d.anchorOffset, f = d.focusNode;
                d = d.focusOffset;
                try {
                    c.nodeType, f.nodeType;
                } catch (F) {
                    c = null;
                    break a;
                }
                var g = 0, h = -1, k = -1, l = 0, m = 0, q = a, r = null;
                b: for(;;){
                    for(var y;;){
                        q !== c || 0 !== e && 3 !== q.nodeType || (h = g + e);
                        q !== f || 0 !== d && 3 !== q.nodeType || (k = g + d);
                        3 === q.nodeType && (g += q.nodeValue.length);
                        if (null === (y = q.firstChild)) break;
                        r = q;
                        q = y;
                    }
                    for(;;){
                        if (q === a) break b;
                        r === c && ++l === e && (h = g);
                        r === f && ++m === d && (k = g);
                        if (null !== (y = q.nextSibling)) break;
                        q = r;
                        r = q.parentNode;
                    }
                    q = y;
                }
                c = -1 === h || -1 === k ? null : {
                    start: h,
                    end: k
                };
            } else c = null;
        }
        c = c || {
            start: 0,
            end: 0
        };
    } else c = null;
    $833559fe574b4225$var$Df = {
        focusedElem: a,
        selectionRange: c
    };
    $833559fe574b4225$var$dd = !1;
    for($833559fe574b4225$var$V = b; null !== $833559fe574b4225$var$V;)if (b = $833559fe574b4225$var$V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a.return = b, $833559fe574b4225$var$V = a;
    else for(; null !== $833559fe574b4225$var$V;){
        b = $833559fe574b4225$var$V;
        try {
            var n = b.alternate;
            if (0 !== (b.flags & 1024)) switch(b.tag){
                case 0:
                case 11:
                case 15:
                    break;
                case 1:
                    if (null !== n) {
                        var t = n.memoizedProps, J = n.memoizedState, x = b.stateNode, w = x.getSnapshotBeforeUpdate(b.elementType === b.type ? t : $833559fe574b4225$var$Lg(b.type, t), J);
                        x.__reactInternalSnapshotBeforeUpdate = w;
                    }
                    break;
                case 3:
                    var u = b.stateNode.containerInfo;
                    1 === u.nodeType ? u.textContent = "" : 9 === u.nodeType && u.documentElement && u.removeChild(u.documentElement);
                    break;
                case 5:
                case 6:
                case 4:
                case 17:
                    break;
                default:
                    throw Error($833559fe574b4225$var$p(163));
            }
        } catch (F) {
            $833559fe574b4225$var$W(b, b.return, F);
        }
        a = b.sibling;
        if (null !== a) {
            a.return = b.return;
            $833559fe574b4225$var$V = a;
            break;
        }
        $833559fe574b4225$var$V = b.return;
    }
    n = $833559fe574b4225$var$Oj;
    $833559fe574b4225$var$Oj = !1;
    return n;
}
function $833559fe574b4225$var$Qj(a, b, c) {
    var d = b.updateQueue;
    d = null !== d ? d.lastEffect : null;
    if (null !== d) {
        var e = d = d.next;
        do {
            if ((e.tag & a) === a) {
                var f = e.destroy;
                e.destroy = void 0;
                void 0 !== f && $833559fe574b4225$var$Nj(b, c, f);
            }
            e = e.next;
        }while (e !== d);
    }
}
function $833559fe574b4225$var$Rj(a, b) {
    b = b.updateQueue;
    b = null !== b ? b.lastEffect : null;
    if (null !== b) {
        var c = b = b.next;
        do {
            if ((c.tag & a) === a) {
                var d = c.create;
                c.destroy = d();
            }
            c = c.next;
        }while (c !== b);
    }
}
function $833559fe574b4225$var$Sj(a) {
    var b = a.ref;
    if (null !== b) {
        var c = a.stateNode;
        switch(a.tag){
            case 5:
                a = c;
                break;
            default:
                a = c;
        }
        "function" === typeof b ? b(a) : b.current = a;
    }
}
function $833559fe574b4225$var$Tj(a) {
    var b = a.alternate;
    null !== b && (a.alternate = null, $833559fe574b4225$var$Tj(b));
    a.child = null;
    a.deletions = null;
    a.sibling = null;
    5 === a.tag && (b = a.stateNode, null !== b && (delete b[$833559fe574b4225$var$Of], delete b[$833559fe574b4225$var$Pf], delete b[$833559fe574b4225$var$of], delete b[$833559fe574b4225$var$Qf], delete b[$833559fe574b4225$var$Rf]));
    a.stateNode = null;
    a.return = null;
    a.dependencies = null;
    a.memoizedProps = null;
    a.memoizedState = null;
    a.pendingProps = null;
    a.stateNode = null;
    a.updateQueue = null;
}
function $833559fe574b4225$var$Uj(a) {
    return 5 === a.tag || 3 === a.tag || 4 === a.tag;
}
function $833559fe574b4225$var$Vj(a) {
    a: for(;;){
        for(; null === a.sibling;){
            if (null === a.return || $833559fe574b4225$var$Uj(a.return)) return null;
            a = a.return;
        }
        a.sibling.return = a.return;
        for(a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag;){
            if (a.flags & 2) continue a;
            if (null === a.child || 4 === a.tag) continue a;
            else a.child.return = a, a = a.child;
        }
        if (!(a.flags & 2)) return a.stateNode;
    }
}
function $833559fe574b4225$var$Wj(a, b, c) {
    var d = a.tag;
    if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = $833559fe574b4225$var$Bf));
    else if (4 !== d && (a = a.child, null !== a)) for($833559fe574b4225$var$Wj(a, b, c), a = a.sibling; null !== a;)$833559fe574b4225$var$Wj(a, b, c), a = a.sibling;
}
function $833559fe574b4225$var$Xj(a, b, c) {
    var d = a.tag;
    if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);
    else if (4 !== d && (a = a.child, null !== a)) for($833559fe574b4225$var$Xj(a, b, c), a = a.sibling; null !== a;)$833559fe574b4225$var$Xj(a, b, c), a = a.sibling;
}
var $833559fe574b4225$var$X = null, $833559fe574b4225$var$Yj = !1;
function $833559fe574b4225$var$Zj(a, b, c) {
    for(c = c.child; null !== c;)$833559fe574b4225$var$ak(a, b, c), c = c.sibling;
}
function $833559fe574b4225$var$ak(a, b, c) {
    if ($833559fe574b4225$var$lc && "function" === typeof $833559fe574b4225$var$lc.onCommitFiberUnmount) try {
        $833559fe574b4225$var$lc.onCommitFiberUnmount($833559fe574b4225$var$kc, c);
    } catch (h) {}
    switch(c.tag){
        case 5:
            $833559fe574b4225$var$U || $833559fe574b4225$var$Mj(c, b);
        case 6:
            var d = $833559fe574b4225$var$X, e = $833559fe574b4225$var$Yj;
            $833559fe574b4225$var$X = null;
            $833559fe574b4225$var$Zj(a, b, c);
            $833559fe574b4225$var$X = d;
            $833559fe574b4225$var$Yj = e;
            null !== $833559fe574b4225$var$X && ($833559fe574b4225$var$Yj ? (a = $833559fe574b4225$var$X, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : $833559fe574b4225$var$X.removeChild(c.stateNode));
            break;
        case 18:
            null !== $833559fe574b4225$var$X && ($833559fe574b4225$var$Yj ? (a = $833559fe574b4225$var$X, c = c.stateNode, 8 === a.nodeType ? $833559fe574b4225$var$Kf(a.parentNode, c) : 1 === a.nodeType && $833559fe574b4225$var$Kf(a, c), $833559fe574b4225$var$bd(a)) : $833559fe574b4225$var$Kf($833559fe574b4225$var$X, c.stateNode));
            break;
        case 4:
            d = $833559fe574b4225$var$X;
            e = $833559fe574b4225$var$Yj;
            $833559fe574b4225$var$X = c.stateNode.containerInfo;
            $833559fe574b4225$var$Yj = !0;
            $833559fe574b4225$var$Zj(a, b, c);
            $833559fe574b4225$var$X = d;
            $833559fe574b4225$var$Yj = e;
            break;
        case 0:
        case 11:
        case 14:
        case 15:
            if (!$833559fe574b4225$var$U && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
                e = d = d.next;
                do {
                    var f = e, g = f.destroy;
                    f = f.tag;
                    void 0 !== g && (0 !== (f & 2) ? $833559fe574b4225$var$Nj(c, b, g) : 0 !== (f & 4) && $833559fe574b4225$var$Nj(c, b, g));
                    e = e.next;
                }while (e !== d);
            }
            $833559fe574b4225$var$Zj(a, b, c);
            break;
        case 1:
            if (!$833559fe574b4225$var$U && ($833559fe574b4225$var$Mj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {
                d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
            } catch (h) {
                $833559fe574b4225$var$W(c, b, h);
            }
            $833559fe574b4225$var$Zj(a, b, c);
            break;
        case 21:
            $833559fe574b4225$var$Zj(a, b, c);
            break;
        case 22:
            c.mode & 1 ? ($833559fe574b4225$var$U = (d = $833559fe574b4225$var$U) || null !== c.memoizedState, $833559fe574b4225$var$Zj(a, b, c), $833559fe574b4225$var$U = d) : $833559fe574b4225$var$Zj(a, b, c);
            break;
        default:
            $833559fe574b4225$var$Zj(a, b, c);
    }
}
function $833559fe574b4225$var$bk(a) {
    var b = a.updateQueue;
    if (null !== b) {
        a.updateQueue = null;
        var c = a.stateNode;
        null === c && (c = a.stateNode = new $833559fe574b4225$var$Lj);
        b.forEach(function(b) {
            var d = $833559fe574b4225$var$ck.bind(null, a, b);
            c.has(b) || (c.add(b), b.then(d, d));
        });
    }
}
function $833559fe574b4225$var$dk(a, b) {
    var c = b.deletions;
    if (null !== c) for(var d = 0; d < c.length; d++){
        var e = c[d];
        try {
            var f = a, g = b, h = g;
            a: for(; null !== h;){
                switch(h.tag){
                    case 5:
                        $833559fe574b4225$var$X = h.stateNode;
                        $833559fe574b4225$var$Yj = !1;
                        break a;
                    case 3:
                        $833559fe574b4225$var$X = h.stateNode.containerInfo;
                        $833559fe574b4225$var$Yj = !0;
                        break a;
                    case 4:
                        $833559fe574b4225$var$X = h.stateNode.containerInfo;
                        $833559fe574b4225$var$Yj = !0;
                        break a;
                }
                h = h.return;
            }
            if (null === $833559fe574b4225$var$X) throw Error($833559fe574b4225$var$p(160));
            $833559fe574b4225$var$ak(f, g, e);
            $833559fe574b4225$var$X = null;
            $833559fe574b4225$var$Yj = !1;
            var k = e.alternate;
            null !== k && (k.return = null);
            e.return = null;
        } catch (l) {
            $833559fe574b4225$var$W(e, b, l);
        }
    }
    if (b.subtreeFlags & 12854) for(b = b.child; null !== b;)$833559fe574b4225$var$ek(b, a), b = b.sibling;
}
function $833559fe574b4225$var$ek(a, b) {
    var c = a.alternate, d = a.flags;
    switch(a.tag){
        case 0:
        case 11:
        case 14:
        case 15:
            $833559fe574b4225$var$dk(b, a);
            $833559fe574b4225$var$fk(a);
            if (d & 4) {
                try {
                    $833559fe574b4225$var$Qj(3, a, a.return), $833559fe574b4225$var$Rj(3, a);
                } catch (t) {
                    $833559fe574b4225$var$W(a, a.return, t);
                }
                try {
                    $833559fe574b4225$var$Qj(5, a, a.return);
                } catch (t) {
                    $833559fe574b4225$var$W(a, a.return, t);
                }
            }
            break;
        case 1:
            $833559fe574b4225$var$dk(b, a);
            $833559fe574b4225$var$fk(a);
            d & 512 && null !== c && $833559fe574b4225$var$Mj(c, c.return);
            break;
        case 5:
            $833559fe574b4225$var$dk(b, a);
            $833559fe574b4225$var$fk(a);
            d & 512 && null !== c && $833559fe574b4225$var$Mj(c, c.return);
            if (a.flags & 32) {
                var e = a.stateNode;
                try {
                    $833559fe574b4225$var$ob(e, "");
                } catch (t) {
                    $833559fe574b4225$var$W(a, a.return, t);
                }
            }
            if (d & 4 && (e = a.stateNode, null != e)) {
                var f = a.memoizedProps, g = null !== c ? c.memoizedProps : f, h = a.type, k = a.updateQueue;
                a.updateQueue = null;
                if (null !== k) try {
                    "input" === h && "radio" === f.type && null != f.name && $833559fe574b4225$var$ab(e, f);
                    $833559fe574b4225$var$vb(h, g);
                    var l = $833559fe574b4225$var$vb(h, f);
                    for(g = 0; g < k.length; g += 2){
                        var m = k[g], q = k[g + 1];
                        "style" === m ? $833559fe574b4225$var$sb(e, q) : "dangerouslySetInnerHTML" === m ? $833559fe574b4225$var$nb(e, q) : "children" === m ? $833559fe574b4225$var$ob(e, q) : $833559fe574b4225$var$ta(e, m, q, l);
                    }
                    switch(h){
                        case "input":
                            $833559fe574b4225$var$bb(e, f);
                            break;
                        case "textarea":
                            $833559fe574b4225$var$ib(e, f);
                            break;
                        case "select":
                            var r = e._wrapperState.wasMultiple;
                            e._wrapperState.wasMultiple = !!f.multiple;
                            var y = f.value;
                            null != y ? $833559fe574b4225$var$fb(e, !!f.multiple, y, !1) : r !== !!f.multiple && (null != f.defaultValue ? $833559fe574b4225$var$fb(e, !!f.multiple, f.defaultValue, !0) : $833559fe574b4225$var$fb(e, !!f.multiple, f.multiple ? [] : "", !1));
                    }
                    e[$833559fe574b4225$var$Pf] = f;
                } catch (t) {
                    $833559fe574b4225$var$W(a, a.return, t);
                }
            }
            break;
        case 6:
            $833559fe574b4225$var$dk(b, a);
            $833559fe574b4225$var$fk(a);
            if (d & 4) {
                if (null === a.stateNode) throw Error($833559fe574b4225$var$p(162));
                e = a.stateNode;
                f = a.memoizedProps;
                try {
                    e.nodeValue = f;
                } catch (t) {
                    $833559fe574b4225$var$W(a, a.return, t);
                }
            }
            break;
        case 3:
            $833559fe574b4225$var$dk(b, a);
            $833559fe574b4225$var$fk(a);
            if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {
                $833559fe574b4225$var$bd(b.containerInfo);
            } catch (t) {
                $833559fe574b4225$var$W(a, a.return, t);
            }
            break;
        case 4:
            $833559fe574b4225$var$dk(b, a);
            $833559fe574b4225$var$fk(a);
            break;
        case 13:
            $833559fe574b4225$var$dk(b, a);
            $833559fe574b4225$var$fk(a);
            e = a.child;
            e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || ($833559fe574b4225$var$gk = $833559fe574b4225$var$B()));
            d & 4 && $833559fe574b4225$var$bk(a);
            break;
        case 22:
            m = null !== c && null !== c.memoizedState;
            a.mode & 1 ? ($833559fe574b4225$var$U = (l = $833559fe574b4225$var$U) || m, $833559fe574b4225$var$dk(b, a), $833559fe574b4225$var$U = l) : $833559fe574b4225$var$dk(b, a);
            $833559fe574b4225$var$fk(a);
            if (d & 8192) {
                l = null !== a.memoizedState;
                if ((a.stateNode.isHidden = l) && !m && 0 !== (a.mode & 1)) for($833559fe574b4225$var$V = a, m = a.child; null !== m;){
                    for(q = $833559fe574b4225$var$V = m; null !== $833559fe574b4225$var$V;){
                        r = $833559fe574b4225$var$V;
                        y = r.child;
                        switch(r.tag){
                            case 0:
                            case 11:
                            case 14:
                            case 15:
                                $833559fe574b4225$var$Qj(4, r, r.return);
                                break;
                            case 1:
                                $833559fe574b4225$var$Mj(r, r.return);
                                var n = r.stateNode;
                                if ("function" === typeof n.componentWillUnmount) {
                                    d = r;
                                    c = r.return;
                                    try {
                                        b = d, n.props = b.memoizedProps, n.state = b.memoizedState, n.componentWillUnmount();
                                    } catch (t) {
                                        $833559fe574b4225$var$W(d, c, t);
                                    }
                                }
                                break;
                            case 5:
                                $833559fe574b4225$var$Mj(r, r.return);
                                break;
                            case 22:
                                if (null !== r.memoizedState) {
                                    $833559fe574b4225$var$hk(q);
                                    continue;
                                }
                        }
                        null !== y ? (y.return = r, $833559fe574b4225$var$V = y) : $833559fe574b4225$var$hk(q);
                    }
                    m = m.sibling;
                }
                a: for(m = null, q = a;;){
                    if (5 === q.tag) {
                        if (null === m) {
                            m = q;
                            try {
                                e = q.stateNode, l ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q.stateNode, k = q.memoizedProps.style, g = void 0 !== k && null !== k && k.hasOwnProperty("display") ? k.display : null, h.style.display = $833559fe574b4225$var$rb("display", g));
                            } catch (t) {
                                $833559fe574b4225$var$W(a, a.return, t);
                            }
                        }
                    } else if (6 === q.tag) {
                        if (null === m) try {
                            q.stateNode.nodeValue = l ? "" : q.memoizedProps;
                        } catch (t) {
                            $833559fe574b4225$var$W(a, a.return, t);
                        }
                    } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a) && null !== q.child) {
                        q.child.return = q;
                        q = q.child;
                        continue;
                    }
                    if (q === a) break a;
                    for(; null === q.sibling;){
                        if (null === q.return || q.return === a) break a;
                        m === q && (m = null);
                        q = q.return;
                    }
                    m === q && (m = null);
                    q.sibling.return = q.return;
                    q = q.sibling;
                }
            }
            break;
        case 19:
            $833559fe574b4225$var$dk(b, a);
            $833559fe574b4225$var$fk(a);
            d & 4 && $833559fe574b4225$var$bk(a);
            break;
        case 21:
            break;
        default:
            $833559fe574b4225$var$dk(b, a), $833559fe574b4225$var$fk(a);
    }
}
function $833559fe574b4225$var$fk(a) {
    var b = a.flags;
    if (b & 2) {
        try {
            a: {
                for(var c = a.return; null !== c;){
                    if ($833559fe574b4225$var$Uj(c)) {
                        var d = c;
                        break a;
                    }
                    c = c.return;
                }
                throw Error($833559fe574b4225$var$p(160));
            }
            switch(d.tag){
                case 5:
                    var e = d.stateNode;
                    d.flags & 32 && ($833559fe574b4225$var$ob(e, ""), d.flags &= -33);
                    var f = $833559fe574b4225$var$Vj(a);
                    $833559fe574b4225$var$Xj(a, f, e);
                    break;
                case 3:
                case 4:
                    var g = d.stateNode.containerInfo, h = $833559fe574b4225$var$Vj(a);
                    $833559fe574b4225$var$Wj(a, h, g);
                    break;
                default:
                    throw Error($833559fe574b4225$var$p(161));
            }
        } catch (k) {
            $833559fe574b4225$var$W(a, a.return, k);
        }
        a.flags &= -3;
    }
    b & 4096 && (a.flags &= -4097);
}
function $833559fe574b4225$var$ik(a, b, c) {
    $833559fe574b4225$var$V = a;
    $833559fe574b4225$var$jk(a, b, c);
}
function $833559fe574b4225$var$jk(a, b, c) {
    for(var d = 0 !== (a.mode & 1); null !== $833559fe574b4225$var$V;){
        var e = $833559fe574b4225$var$V, f = e.child;
        if (22 === e.tag && d) {
            var g = null !== e.memoizedState || $833559fe574b4225$var$Kj;
            if (!g) {
                var h = e.alternate, k = null !== h && null !== h.memoizedState || $833559fe574b4225$var$U;
                h = $833559fe574b4225$var$Kj;
                var l = $833559fe574b4225$var$U;
                $833559fe574b4225$var$Kj = g;
                if (($833559fe574b4225$var$U = k) && !l) for($833559fe574b4225$var$V = e; null !== $833559fe574b4225$var$V;)g = $833559fe574b4225$var$V, k = g.child, 22 === g.tag && null !== g.memoizedState ? $833559fe574b4225$var$kk(e) : null !== k ? (k.return = g, $833559fe574b4225$var$V = k) : $833559fe574b4225$var$kk(e);
                for(; null !== f;)$833559fe574b4225$var$V = f, $833559fe574b4225$var$jk(f, b, c), f = f.sibling;
                $833559fe574b4225$var$V = e;
                $833559fe574b4225$var$Kj = h;
                $833559fe574b4225$var$U = l;
            }
            $833559fe574b4225$var$lk(a, b, c);
        } else 0 !== (e.subtreeFlags & 8772) && null !== f ? (f.return = e, $833559fe574b4225$var$V = f) : $833559fe574b4225$var$lk(a, b, c);
    }
}
function $833559fe574b4225$var$lk(a) {
    for(; null !== $833559fe574b4225$var$V;){
        var b = $833559fe574b4225$var$V;
        if (0 !== (b.flags & 8772)) {
            var c = b.alternate;
            try {
                if (0 !== (b.flags & 8772)) switch(b.tag){
                    case 0:
                    case 11:
                    case 15:
                        $833559fe574b4225$var$U || $833559fe574b4225$var$Rj(5, b);
                        break;
                    case 1:
                        var d = b.stateNode;
                        if (b.flags & 4 && !$833559fe574b4225$var$U) {
                            if (null === c) d.componentDidMount();
                            else {
                                var e = b.elementType === b.type ? c.memoizedProps : $833559fe574b4225$var$Lg(b.type, c.memoizedProps);
                                d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
                            }
                        }
                        var f = b.updateQueue;
                        null !== f && $833559fe574b4225$var$ih(b, f, d);
                        break;
                    case 3:
                        var g = b.updateQueue;
                        if (null !== g) {
                            c = null;
                            if (null !== b.child) switch(b.child.tag){
                                case 5:
                                    c = b.child.stateNode;
                                    break;
                                case 1:
                                    c = b.child.stateNode;
                            }
                            $833559fe574b4225$var$ih(b, g, c);
                        }
                        break;
                    case 5:
                        var h = b.stateNode;
                        if (null === c && b.flags & 4) {
                            c = h;
                            var k = b.memoizedProps;
                            switch(b.type){
                                case "button":
                                case "input":
                                case "select":
                                case "textarea":
                                    k.autoFocus && c.focus();
                                    break;
                                case "img":
                                    k.src && (c.src = k.src);
                            }
                        }
                        break;
                    case 6:
                        break;
                    case 4:
                        break;
                    case 12:
                        break;
                    case 13:
                        if (null === b.memoizedState) {
                            var l = b.alternate;
                            if (null !== l) {
                                var m = l.memoizedState;
                                if (null !== m) {
                                    var q = m.dehydrated;
                                    null !== q && $833559fe574b4225$var$bd(q);
                                }
                            }
                        }
                        break;
                    case 19:
                    case 17:
                    case 21:
                    case 22:
                    case 23:
                    case 25:
                        break;
                    default:
                        throw Error($833559fe574b4225$var$p(163));
                }
                $833559fe574b4225$var$U || b.flags & 512 && $833559fe574b4225$var$Sj(b);
            } catch (r) {
                $833559fe574b4225$var$W(b, b.return, r);
            }
        }
        if (b === a) {
            $833559fe574b4225$var$V = null;
            break;
        }
        c = b.sibling;
        if (null !== c) {
            c.return = b.return;
            $833559fe574b4225$var$V = c;
            break;
        }
        $833559fe574b4225$var$V = b.return;
    }
}
function $833559fe574b4225$var$hk(a) {
    for(; null !== $833559fe574b4225$var$V;){
        var b = $833559fe574b4225$var$V;
        if (b === a) {
            $833559fe574b4225$var$V = null;
            break;
        }
        var c = b.sibling;
        if (null !== c) {
            c.return = b.return;
            $833559fe574b4225$var$V = c;
            break;
        }
        $833559fe574b4225$var$V = b.return;
    }
}
function $833559fe574b4225$var$kk(a) {
    for(; null !== $833559fe574b4225$var$V;){
        var b = $833559fe574b4225$var$V;
        try {
            switch(b.tag){
                case 0:
                case 11:
                case 15:
                    var c = b.return;
                    try {
                        $833559fe574b4225$var$Rj(4, b);
                    } catch (k) {
                        $833559fe574b4225$var$W(b, c, k);
                    }
                    break;
                case 1:
                    var d = b.stateNode;
                    if ("function" === typeof d.componentDidMount) {
                        var e = b.return;
                        try {
                            d.componentDidMount();
                        } catch (k) {
                            $833559fe574b4225$var$W(b, e, k);
                        }
                    }
                    var f = b.return;
                    try {
                        $833559fe574b4225$var$Sj(b);
                    } catch (k) {
                        $833559fe574b4225$var$W(b, f, k);
                    }
                    break;
                case 5:
                    var g = b.return;
                    try {
                        $833559fe574b4225$var$Sj(b);
                    } catch (k) {
                        $833559fe574b4225$var$W(b, g, k);
                    }
            }
        } catch (k) {
            $833559fe574b4225$var$W(b, b.return, k);
        }
        if (b === a) {
            $833559fe574b4225$var$V = null;
            break;
        }
        var h = b.sibling;
        if (null !== h) {
            h.return = b.return;
            $833559fe574b4225$var$V = h;
            break;
        }
        $833559fe574b4225$var$V = b.return;
    }
}
var $833559fe574b4225$var$mk = Math.ceil, $833559fe574b4225$var$nk = $833559fe574b4225$var$ua.ReactCurrentDispatcher, $833559fe574b4225$var$ok = $833559fe574b4225$var$ua.ReactCurrentOwner, $833559fe574b4225$var$pk = $833559fe574b4225$var$ua.ReactCurrentBatchConfig, $833559fe574b4225$var$K = 0, $833559fe574b4225$var$R = null, $833559fe574b4225$var$Y = null, $833559fe574b4225$var$Z = 0, $833559fe574b4225$var$gj = 0, $833559fe574b4225$var$fj = $833559fe574b4225$var$Uf(0), $833559fe574b4225$var$T = 0, $833559fe574b4225$var$qk = null, $833559fe574b4225$var$hh = 0, $833559fe574b4225$var$rk = 0, $833559fe574b4225$var$sk = 0, $833559fe574b4225$var$tk = null, $833559fe574b4225$var$uk = null, $833559fe574b4225$var$gk = 0, $833559fe574b4225$var$Hj = Infinity, $833559fe574b4225$var$vk = null, $833559fe574b4225$var$Pi = !1, $833559fe574b4225$var$Qi = null, $833559fe574b4225$var$Si = null, $833559fe574b4225$var$wk = !1, $833559fe574b4225$var$xk = null, $833559fe574b4225$var$yk = 0, $833559fe574b4225$var$zk = 0, $833559fe574b4225$var$Ak = null, $833559fe574b4225$var$Bk = -1, $833559fe574b4225$var$Ck = 0;
function $833559fe574b4225$var$L() {
    return 0 !== ($833559fe574b4225$var$K & 6) ? $833559fe574b4225$var$B() : -1 !== $833559fe574b4225$var$Bk ? $833559fe574b4225$var$Bk : $833559fe574b4225$var$Bk = $833559fe574b4225$var$B();
}
function $833559fe574b4225$var$lh(a) {
    if (0 === (a.mode & 1)) return 1;
    if (0 !== ($833559fe574b4225$var$K & 2) && 0 !== $833559fe574b4225$var$Z) return $833559fe574b4225$var$Z & -$833559fe574b4225$var$Z;
    if (null !== $833559fe574b4225$var$Kg.transition) return 0 === $833559fe574b4225$var$Ck && ($833559fe574b4225$var$Ck = $833559fe574b4225$var$yc()), $833559fe574b4225$var$Ck;
    a = $833559fe574b4225$var$C;
    if (0 !== a) return a;
    a = window.event;
    a = void 0 === a ? 16 : $833559fe574b4225$var$jd(a.type);
    return a;
}
function $833559fe574b4225$var$mh(a, b, c, d) {
    if (50 < $833559fe574b4225$var$zk) throw $833559fe574b4225$var$zk = 0, $833559fe574b4225$var$Ak = null, Error($833559fe574b4225$var$p(185));
    $833559fe574b4225$var$Ac(a, c, d);
    if (0 === ($833559fe574b4225$var$K & 2) || a !== $833559fe574b4225$var$R) a === $833559fe574b4225$var$R && (0 === ($833559fe574b4225$var$K & 2) && ($833559fe574b4225$var$rk |= c), 4 === $833559fe574b4225$var$T && $833559fe574b4225$var$Dk(a, $833559fe574b4225$var$Z)), $833559fe574b4225$var$Ek(a, d), 1 === c && 0 === $833559fe574b4225$var$K && 0 === (b.mode & 1) && ($833559fe574b4225$var$Hj = $833559fe574b4225$var$B() + 500, $833559fe574b4225$var$fg && $833559fe574b4225$var$jg());
}
function $833559fe574b4225$var$Ek(a, b) {
    var c = a.callbackNode;
    $833559fe574b4225$var$wc(a, b);
    var d = $833559fe574b4225$var$uc(a, a === $833559fe574b4225$var$R ? $833559fe574b4225$var$Z : 0);
    if (0 === d) null !== c && $833559fe574b4225$var$bc(c), a.callbackNode = null, a.callbackPriority = 0;
    else if (b = d & -d, a.callbackPriority !== b) {
        null != c && $833559fe574b4225$var$bc(c);
        if (1 === b) 0 === a.tag ? $833559fe574b4225$var$ig($833559fe574b4225$var$Fk.bind(null, a)) : $833559fe574b4225$var$hg($833559fe574b4225$var$Fk.bind(null, a)), $833559fe574b4225$var$Jf(function() {
            0 === ($833559fe574b4225$var$K & 6) && $833559fe574b4225$var$jg();
        }), c = null;
        else {
            switch($833559fe574b4225$var$Dc(d)){
                case 1:
                    c = $833559fe574b4225$var$fc;
                    break;
                case 4:
                    c = $833559fe574b4225$var$gc;
                    break;
                case 16:
                    c = $833559fe574b4225$var$hc;
                    break;
                case 536870912:
                    c = $833559fe574b4225$var$jc;
                    break;
                default:
                    c = $833559fe574b4225$var$hc;
            }
            c = $833559fe574b4225$var$Gk(c, $833559fe574b4225$var$Hk.bind(null, a));
        }
        a.callbackPriority = b;
        a.callbackNode = c;
    }
}
function $833559fe574b4225$var$Hk(a, b) {
    $833559fe574b4225$var$Bk = -1;
    $833559fe574b4225$var$Ck = 0;
    if (0 !== ($833559fe574b4225$var$K & 6)) throw Error($833559fe574b4225$var$p(327));
    var c = a.callbackNode;
    if ($833559fe574b4225$var$Ik() && a.callbackNode !== c) return null;
    var d = $833559fe574b4225$var$uc(a, a === $833559fe574b4225$var$R ? $833559fe574b4225$var$Z : 0);
    if (0 === d) return null;
    if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = $833559fe574b4225$var$Jk(a, d);
    else {
        b = d;
        var e = $833559fe574b4225$var$K;
        $833559fe574b4225$var$K |= 2;
        var f = $833559fe574b4225$var$Kk();
        if ($833559fe574b4225$var$R !== a || $833559fe574b4225$var$Z !== b) $833559fe574b4225$var$vk = null, $833559fe574b4225$var$Hj = $833559fe574b4225$var$B() + 500, $833559fe574b4225$var$Lk(a, b);
        for(;;)try {
            $833559fe574b4225$var$Mk();
            break;
        } catch (h) {
            $833559fe574b4225$var$Nk(a, h);
        }
        $833559fe574b4225$var$Qg();
        $833559fe574b4225$var$nk.current = f;
        $833559fe574b4225$var$K = e;
        null !== $833559fe574b4225$var$Y ? b = 0 : ($833559fe574b4225$var$R = null, $833559fe574b4225$var$Z = 0, b = $833559fe574b4225$var$T);
    }
    if (0 !== b) {
        2 === b && (e = $833559fe574b4225$var$xc(a), 0 !== e && (d = e, b = $833559fe574b4225$var$Ok(a, e)));
        if (1 === b) throw c = $833559fe574b4225$var$qk, $833559fe574b4225$var$Lk(a, 0), $833559fe574b4225$var$Dk(a, d), $833559fe574b4225$var$Ek(a, $833559fe574b4225$var$B()), c;
        if (6 === b) $833559fe574b4225$var$Dk(a, d);
        else {
            e = a.current.alternate;
            if (0 === (d & 30) && !$833559fe574b4225$var$Pk(e) && (b = $833559fe574b4225$var$Jk(a, d), 2 === b && (f = $833559fe574b4225$var$xc(a), 0 !== f && (d = f, b = $833559fe574b4225$var$Ok(a, f))), 1 === b)) throw c = $833559fe574b4225$var$qk, $833559fe574b4225$var$Lk(a, 0), $833559fe574b4225$var$Dk(a, d), $833559fe574b4225$var$Ek(a, $833559fe574b4225$var$B()), c;
            a.finishedWork = e;
            a.finishedLanes = d;
            switch(b){
                case 0:
                case 1:
                    throw Error($833559fe574b4225$var$p(345));
                case 2:
                    $833559fe574b4225$var$Qk(a, $833559fe574b4225$var$uk, $833559fe574b4225$var$vk);
                    break;
                case 3:
                    $833559fe574b4225$var$Dk(a, d);
                    if ((d & 130023424) === d && (b = $833559fe574b4225$var$gk + 500 - $833559fe574b4225$var$B(), 10 < b)) {
                        if (0 !== $833559fe574b4225$var$uc(a, 0)) break;
                        e = a.suspendedLanes;
                        if ((e & d) !== d) {
                            $833559fe574b4225$var$L();
                            a.pingedLanes |= a.suspendedLanes & e;
                            break;
                        }
                        a.timeoutHandle = $833559fe574b4225$var$Ff($833559fe574b4225$var$Qk.bind(null, a, $833559fe574b4225$var$uk, $833559fe574b4225$var$vk), b);
                        break;
                    }
                    $833559fe574b4225$var$Qk(a, $833559fe574b4225$var$uk, $833559fe574b4225$var$vk);
                    break;
                case 4:
                    $833559fe574b4225$var$Dk(a, d);
                    if ((d & 4194240) === d) break;
                    b = a.eventTimes;
                    for(e = -1; 0 < d;){
                        var g = 31 - $833559fe574b4225$var$oc(d);
                        f = 1 << g;
                        g = b[g];
                        g > e && (e = g);
                        d &= ~f;
                    }
                    d = e;
                    d = $833559fe574b4225$var$B() - d;
                    d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3E3 > d ? 3E3 : 4320 > d ? 4320 : 1960 * $833559fe574b4225$var$mk(d / 1960)) - d;
                    if (10 < d) {
                        a.timeoutHandle = $833559fe574b4225$var$Ff($833559fe574b4225$var$Qk.bind(null, a, $833559fe574b4225$var$uk, $833559fe574b4225$var$vk), d);
                        break;
                    }
                    $833559fe574b4225$var$Qk(a, $833559fe574b4225$var$uk, $833559fe574b4225$var$vk);
                    break;
                case 5:
                    $833559fe574b4225$var$Qk(a, $833559fe574b4225$var$uk, $833559fe574b4225$var$vk);
                    break;
                default:
                    throw Error($833559fe574b4225$var$p(329));
            }
        }
    }
    $833559fe574b4225$var$Ek(a, $833559fe574b4225$var$B());
    return a.callbackNode === c ? $833559fe574b4225$var$Hk.bind(null, a) : null;
}
function $833559fe574b4225$var$Ok(a, b) {
    var c = $833559fe574b4225$var$tk;
    a.current.memoizedState.isDehydrated && ($833559fe574b4225$var$Lk(a, b).flags |= 256);
    a = $833559fe574b4225$var$Jk(a, b);
    2 !== a && (b = $833559fe574b4225$var$uk, $833559fe574b4225$var$uk = c, null !== b && $833559fe574b4225$var$Gj(b));
    return a;
}
function $833559fe574b4225$var$Gj(a) {
    null === $833559fe574b4225$var$uk ? $833559fe574b4225$var$uk = a : $833559fe574b4225$var$uk.push.apply($833559fe574b4225$var$uk, a);
}
function $833559fe574b4225$var$Pk(a) {
    for(var b = a;;){
        if (b.flags & 16384) {
            var c = b.updateQueue;
            if (null !== c && (c = c.stores, null !== c)) for(var d = 0; d < c.length; d++){
                var e = c[d], f = e.getSnapshot;
                e = e.value;
                try {
                    if (!$833559fe574b4225$var$He(f(), e)) return !1;
                } catch (g) {
                    return !1;
                }
            }
        }
        c = b.child;
        if (b.subtreeFlags & 16384 && null !== c) c.return = b, b = c;
        else {
            if (b === a) break;
            for(; null === b.sibling;){
                if (null === b.return || b.return === a) return !0;
                b = b.return;
            }
            b.sibling.return = b.return;
            b = b.sibling;
        }
    }
    return !0;
}
function $833559fe574b4225$var$Dk(a, b) {
    b &= ~$833559fe574b4225$var$sk;
    b &= ~$833559fe574b4225$var$rk;
    a.suspendedLanes |= b;
    a.pingedLanes &= ~b;
    for(a = a.expirationTimes; 0 < b;){
        var c = 31 - $833559fe574b4225$var$oc(b), d = 1 << c;
        a[c] = -1;
        b &= ~d;
    }
}
function $833559fe574b4225$var$Fk(a) {
    if (0 !== ($833559fe574b4225$var$K & 6)) throw Error($833559fe574b4225$var$p(327));
    $833559fe574b4225$var$Ik();
    var b = $833559fe574b4225$var$uc(a, 0);
    if (0 === (b & 1)) return $833559fe574b4225$var$Ek(a, $833559fe574b4225$var$B()), null;
    var c = $833559fe574b4225$var$Jk(a, b);
    if (0 !== a.tag && 2 === c) {
        var d = $833559fe574b4225$var$xc(a);
        0 !== d && (b = d, c = $833559fe574b4225$var$Ok(a, d));
    }
    if (1 === c) throw c = $833559fe574b4225$var$qk, $833559fe574b4225$var$Lk(a, 0), $833559fe574b4225$var$Dk(a, b), $833559fe574b4225$var$Ek(a, $833559fe574b4225$var$B()), c;
    if (6 === c) throw Error($833559fe574b4225$var$p(345));
    a.finishedWork = a.current.alternate;
    a.finishedLanes = b;
    $833559fe574b4225$var$Qk(a, $833559fe574b4225$var$uk, $833559fe574b4225$var$vk);
    $833559fe574b4225$var$Ek(a, $833559fe574b4225$var$B());
    return null;
}
function $833559fe574b4225$var$Rk(a, b) {
    var c = $833559fe574b4225$var$K;
    $833559fe574b4225$var$K |= 1;
    try {
        return a(b);
    } finally{
        $833559fe574b4225$var$K = c, 0 === $833559fe574b4225$var$K && ($833559fe574b4225$var$Hj = $833559fe574b4225$var$B() + 500, $833559fe574b4225$var$fg && $833559fe574b4225$var$jg());
    }
}
function $833559fe574b4225$var$Sk(a) {
    null !== $833559fe574b4225$var$xk && 0 === $833559fe574b4225$var$xk.tag && 0 === ($833559fe574b4225$var$K & 6) && $833559fe574b4225$var$Ik();
    var b = $833559fe574b4225$var$K;
    $833559fe574b4225$var$K |= 1;
    var c = $833559fe574b4225$var$pk.transition, d = $833559fe574b4225$var$C;
    try {
        if ($833559fe574b4225$var$pk.transition = null, $833559fe574b4225$var$C = 1, a) return a();
    } finally{
        $833559fe574b4225$var$C = d, $833559fe574b4225$var$pk.transition = c, $833559fe574b4225$var$K = b, 0 === ($833559fe574b4225$var$K & 6) && $833559fe574b4225$var$jg();
    }
}
function $833559fe574b4225$var$Ij() {
    $833559fe574b4225$var$gj = $833559fe574b4225$var$fj.current;
    $833559fe574b4225$var$E($833559fe574b4225$var$fj);
}
function $833559fe574b4225$var$Lk(a, b) {
    a.finishedWork = null;
    a.finishedLanes = 0;
    var c = a.timeoutHandle;
    -1 !== c && (a.timeoutHandle = -1, $833559fe574b4225$var$Gf(c));
    if (null !== $833559fe574b4225$var$Y) for(c = $833559fe574b4225$var$Y.return; null !== c;){
        var d = c;
        $833559fe574b4225$var$wg(d);
        switch(d.tag){
            case 1:
                d = d.type.childContextTypes;
                null !== d && void 0 !== d && $833559fe574b4225$var$$f();
                break;
            case 3:
                $833559fe574b4225$var$Jh();
                $833559fe574b4225$var$E($833559fe574b4225$var$Wf);
                $833559fe574b4225$var$E($833559fe574b4225$var$H);
                $833559fe574b4225$var$Oh();
                break;
            case 5:
                $833559fe574b4225$var$Lh(d);
                break;
            case 4:
                $833559fe574b4225$var$Jh();
                break;
            case 13:
                $833559fe574b4225$var$E($833559fe574b4225$var$M);
                break;
            case 19:
                $833559fe574b4225$var$E($833559fe574b4225$var$M);
                break;
            case 10:
                $833559fe574b4225$var$Rg(d.type._context);
                break;
            case 22:
            case 23:
                $833559fe574b4225$var$Ij();
        }
        c = c.return;
    }
    $833559fe574b4225$var$R = a;
    $833559fe574b4225$var$Y = a = $833559fe574b4225$var$wh(a.current, null);
    $833559fe574b4225$var$Z = $833559fe574b4225$var$gj = b;
    $833559fe574b4225$var$T = 0;
    $833559fe574b4225$var$qk = null;
    $833559fe574b4225$var$sk = $833559fe574b4225$var$rk = $833559fe574b4225$var$hh = 0;
    $833559fe574b4225$var$uk = $833559fe574b4225$var$tk = null;
    if (null !== $833559fe574b4225$var$Wg) {
        for(b = 0; b < $833559fe574b4225$var$Wg.length; b++)if (c = $833559fe574b4225$var$Wg[b], d = c.interleaved, null !== d) {
            c.interleaved = null;
            var e = d.next, f = c.pending;
            if (null !== f) {
                var g = f.next;
                f.next = e;
                d.next = g;
            }
            c.pending = d;
        }
        $833559fe574b4225$var$Wg = null;
    }
    return a;
}
function $833559fe574b4225$var$Nk(a, b) {
    do {
        var c = $833559fe574b4225$var$Y;
        try {
            $833559fe574b4225$var$Qg();
            $833559fe574b4225$var$Ph.current = $833559fe574b4225$var$ai;
            if ($833559fe574b4225$var$Sh) {
                for(var d = $833559fe574b4225$var$N.memoizedState; null !== d;){
                    var e = d.queue;
                    null !== e && (e.pending = null);
                    d = d.next;
                }
                $833559fe574b4225$var$Sh = !1;
            }
            $833559fe574b4225$var$Rh = 0;
            $833559fe574b4225$var$P = $833559fe574b4225$var$O = $833559fe574b4225$var$N = null;
            $833559fe574b4225$var$Th = !1;
            $833559fe574b4225$var$Uh = 0;
            $833559fe574b4225$var$ok.current = null;
            if (null === c || null === c.return) {
                $833559fe574b4225$var$T = 1;
                $833559fe574b4225$var$qk = b;
                $833559fe574b4225$var$Y = null;
                break;
            }
            a: {
                var f = a, g = c.return, h = c, k = b;
                b = $833559fe574b4225$var$Z;
                h.flags |= 32768;
                if (null !== k && "object" === typeof k && "function" === typeof k.then) {
                    var l = k, m = h, q = m.tag;
                    if (0 === (m.mode & 1) && (0 === q || 11 === q || 15 === q)) {
                        var r = m.alternate;
                        r ? (m.updateQueue = r.updateQueue, m.memoizedState = r.memoizedState, m.lanes = r.lanes) : (m.updateQueue = null, m.memoizedState = null);
                    }
                    var y = $833559fe574b4225$var$Vi(g);
                    if (null !== y) {
                        y.flags &= -257;
                        $833559fe574b4225$var$Wi(y, g, h, f, b);
                        y.mode & 1 && $833559fe574b4225$var$Ti(f, l, b);
                        b = y;
                        k = l;
                        var n = b.updateQueue;
                        if (null === n) {
                            var t = new Set;
                            t.add(k);
                            b.updateQueue = t;
                        } else n.add(k);
                        break a;
                    } else {
                        if (0 === (b & 1)) {
                            $833559fe574b4225$var$Ti(f, l, b);
                            $833559fe574b4225$var$uj();
                            break a;
                        }
                        k = Error($833559fe574b4225$var$p(426));
                    }
                } else if ($833559fe574b4225$var$I && h.mode & 1) {
                    var J = $833559fe574b4225$var$Vi(g);
                    if (null !== J) {
                        0 === (J.flags & 65536) && (J.flags |= 256);
                        $833559fe574b4225$var$Wi(J, g, h, f, b);
                        $833559fe574b4225$var$Jg($833559fe574b4225$var$Ki(k, h));
                        break a;
                    }
                }
                f = k = $833559fe574b4225$var$Ki(k, h);
                4 !== $833559fe574b4225$var$T && ($833559fe574b4225$var$T = 2);
                null === $833559fe574b4225$var$tk ? $833559fe574b4225$var$tk = [
                    f
                ] : $833559fe574b4225$var$tk.push(f);
                f = g;
                do {
                    switch(f.tag){
                        case 3:
                            f.flags |= 65536;
                            b &= -b;
                            f.lanes |= b;
                            var x = $833559fe574b4225$var$Oi(f, k, b);
                            $833559fe574b4225$var$fh(f, x);
                            break a;
                        case 1:
                            h = k;
                            var w = f.type, u = f.stateNode;
                            if (0 === (f.flags & 128) && ("function" === typeof w.getDerivedStateFromError || null !== u && "function" === typeof u.componentDidCatch && (null === $833559fe574b4225$var$Si || !$833559fe574b4225$var$Si.has(u)))) {
                                f.flags |= 65536;
                                b &= -b;
                                f.lanes |= b;
                                var F = $833559fe574b4225$var$Ri(f, h, b);
                                $833559fe574b4225$var$fh(f, F);
                                break a;
                            }
                    }
                    f = f.return;
                }while (null !== f);
            }
            $833559fe574b4225$var$Tk(c);
        } catch (na) {
            b = na;
            $833559fe574b4225$var$Y === c && null !== c && ($833559fe574b4225$var$Y = c = c.return);
            continue;
        }
        break;
    }while (1);
}
function $833559fe574b4225$var$Kk() {
    var a = $833559fe574b4225$var$nk.current;
    $833559fe574b4225$var$nk.current = $833559fe574b4225$var$ai;
    return null === a ? $833559fe574b4225$var$ai : a;
}
function $833559fe574b4225$var$uj() {
    if (0 === $833559fe574b4225$var$T || 3 === $833559fe574b4225$var$T || 2 === $833559fe574b4225$var$T) $833559fe574b4225$var$T = 4;
    null === $833559fe574b4225$var$R || 0 === ($833559fe574b4225$var$hh & 268435455) && 0 === ($833559fe574b4225$var$rk & 268435455) || $833559fe574b4225$var$Dk($833559fe574b4225$var$R, $833559fe574b4225$var$Z);
}
function $833559fe574b4225$var$Jk(a, b) {
    var c = $833559fe574b4225$var$K;
    $833559fe574b4225$var$K |= 2;
    var d = $833559fe574b4225$var$Kk();
    if ($833559fe574b4225$var$R !== a || $833559fe574b4225$var$Z !== b) $833559fe574b4225$var$vk = null, $833559fe574b4225$var$Lk(a, b);
    for(;;)try {
        $833559fe574b4225$var$Uk();
        break;
    } catch (e) {
        $833559fe574b4225$var$Nk(a, e);
    }
    $833559fe574b4225$var$Qg();
    $833559fe574b4225$var$K = c;
    $833559fe574b4225$var$nk.current = d;
    if (null !== $833559fe574b4225$var$Y) throw Error($833559fe574b4225$var$p(261));
    $833559fe574b4225$var$R = null;
    $833559fe574b4225$var$Z = 0;
    return $833559fe574b4225$var$T;
}
function $833559fe574b4225$var$Uk() {
    for(; null !== $833559fe574b4225$var$Y;)$833559fe574b4225$var$Vk($833559fe574b4225$var$Y);
}
function $833559fe574b4225$var$Mk() {
    for(; null !== $833559fe574b4225$var$Y && !$833559fe574b4225$var$cc();)$833559fe574b4225$var$Vk($833559fe574b4225$var$Y);
}
function $833559fe574b4225$var$Vk(a) {
    var b = $833559fe574b4225$var$Wk(a.alternate, a, $833559fe574b4225$var$gj);
    a.memoizedProps = a.pendingProps;
    null === b ? $833559fe574b4225$var$Tk(a) : $833559fe574b4225$var$Y = b;
    $833559fe574b4225$var$ok.current = null;
}
function $833559fe574b4225$var$Tk(a) {
    var b = a;
    do {
        var c = b.alternate;
        a = b.return;
        if (0 === (b.flags & 32768)) {
            if (c = $833559fe574b4225$var$Fj(c, b, $833559fe574b4225$var$gj), null !== c) {
                $833559fe574b4225$var$Y = c;
                return;
            }
        } else {
            c = $833559fe574b4225$var$Jj(c, b);
            if (null !== c) {
                c.flags &= 32767;
                $833559fe574b4225$var$Y = c;
                return;
            }
            if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
            else {
                $833559fe574b4225$var$T = 6;
                $833559fe574b4225$var$Y = null;
                return;
            }
        }
        b = b.sibling;
        if (null !== b) {
            $833559fe574b4225$var$Y = b;
            return;
        }
        $833559fe574b4225$var$Y = b = a;
    }while (null !== b);
    0 === $833559fe574b4225$var$T && ($833559fe574b4225$var$T = 5);
}
function $833559fe574b4225$var$Qk(a, b, c) {
    var d = $833559fe574b4225$var$C, e = $833559fe574b4225$var$pk.transition;
    try {
        $833559fe574b4225$var$pk.transition = null, $833559fe574b4225$var$C = 1, $833559fe574b4225$var$Xk(a, b, c, d);
    } finally{
        $833559fe574b4225$var$pk.transition = e, $833559fe574b4225$var$C = d;
    }
    return null;
}
function $833559fe574b4225$var$Xk(a, b, c, d) {
    do $833559fe574b4225$var$Ik();
    while (null !== $833559fe574b4225$var$xk);
    if (0 !== ($833559fe574b4225$var$K & 6)) throw Error($833559fe574b4225$var$p(327));
    c = a.finishedWork;
    var e = a.finishedLanes;
    if (null === c) return null;
    a.finishedWork = null;
    a.finishedLanes = 0;
    if (c === a.current) throw Error($833559fe574b4225$var$p(177));
    a.callbackNode = null;
    a.callbackPriority = 0;
    var f = c.lanes | c.childLanes;
    $833559fe574b4225$var$Bc(a, f);
    a === $833559fe574b4225$var$R && ($833559fe574b4225$var$Y = $833559fe574b4225$var$R = null, $833559fe574b4225$var$Z = 0);
    0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || $833559fe574b4225$var$wk || ($833559fe574b4225$var$wk = !0, $833559fe574b4225$var$Gk($833559fe574b4225$var$hc, function() {
        $833559fe574b4225$var$Ik();
        return null;
    }));
    f = 0 !== (c.flags & 15990);
    if (0 !== (c.subtreeFlags & 15990) || f) {
        f = $833559fe574b4225$var$pk.transition;
        $833559fe574b4225$var$pk.transition = null;
        var g = $833559fe574b4225$var$C;
        $833559fe574b4225$var$C = 1;
        var h = $833559fe574b4225$var$K;
        $833559fe574b4225$var$K |= 4;
        $833559fe574b4225$var$ok.current = null;
        $833559fe574b4225$var$Pj(a, c);
        $833559fe574b4225$var$ek(c, a);
        $833559fe574b4225$var$Oe($833559fe574b4225$var$Df);
        $833559fe574b4225$var$dd = !!$833559fe574b4225$var$Cf;
        $833559fe574b4225$var$Df = $833559fe574b4225$var$Cf = null;
        a.current = c;
        $833559fe574b4225$var$ik(c, a, e);
        $833559fe574b4225$var$dc();
        $833559fe574b4225$var$K = h;
        $833559fe574b4225$var$C = g;
        $833559fe574b4225$var$pk.transition = f;
    } else a.current = c;
    $833559fe574b4225$var$wk && ($833559fe574b4225$var$wk = !1, $833559fe574b4225$var$xk = a, $833559fe574b4225$var$yk = e);
    f = a.pendingLanes;
    0 === f && ($833559fe574b4225$var$Si = null);
    $833559fe574b4225$var$mc(c.stateNode, d);
    $833559fe574b4225$var$Ek(a, $833559fe574b4225$var$B());
    if (null !== b) for(d = a.onRecoverableError, c = 0; c < b.length; c++)e = b[c], d(e.value, {
        componentStack: e.stack,
        digest: e.digest
    });
    if ($833559fe574b4225$var$Pi) throw $833559fe574b4225$var$Pi = !1, a = $833559fe574b4225$var$Qi, $833559fe574b4225$var$Qi = null, a;
    0 !== ($833559fe574b4225$var$yk & 1) && 0 !== a.tag && $833559fe574b4225$var$Ik();
    f = a.pendingLanes;
    0 !== (f & 1) ? a === $833559fe574b4225$var$Ak ? $833559fe574b4225$var$zk++ : ($833559fe574b4225$var$zk = 0, $833559fe574b4225$var$Ak = a) : $833559fe574b4225$var$zk = 0;
    $833559fe574b4225$var$jg();
    return null;
}
function $833559fe574b4225$var$Ik() {
    if (null !== $833559fe574b4225$var$xk) {
        var a = $833559fe574b4225$var$Dc($833559fe574b4225$var$yk), b = $833559fe574b4225$var$pk.transition, c = $833559fe574b4225$var$C;
        try {
            $833559fe574b4225$var$pk.transition = null;
            $833559fe574b4225$var$C = 16 > a ? 16 : a;
            if (null === $833559fe574b4225$var$xk) var d = !1;
            else {
                a = $833559fe574b4225$var$xk;
                $833559fe574b4225$var$xk = null;
                $833559fe574b4225$var$yk = 0;
                if (0 !== ($833559fe574b4225$var$K & 6)) throw Error($833559fe574b4225$var$p(331));
                var e = $833559fe574b4225$var$K;
                $833559fe574b4225$var$K |= 4;
                for($833559fe574b4225$var$V = a.current; null !== $833559fe574b4225$var$V;){
                    var f = $833559fe574b4225$var$V, g = f.child;
                    if (0 !== ($833559fe574b4225$var$V.flags & 16)) {
                        var h = f.deletions;
                        if (null !== h) {
                            for(var k = 0; k < h.length; k++){
                                var l = h[k];
                                for($833559fe574b4225$var$V = l; null !== $833559fe574b4225$var$V;){
                                    var m = $833559fe574b4225$var$V;
                                    switch(m.tag){
                                        case 0:
                                        case 11:
                                        case 15:
                                            $833559fe574b4225$var$Qj(8, m, f);
                                    }
                                    var q = m.child;
                                    if (null !== q) q.return = m, $833559fe574b4225$var$V = q;
                                    else for(; null !== $833559fe574b4225$var$V;){
                                        m = $833559fe574b4225$var$V;
                                        var r = m.sibling, y = m.return;
                                        $833559fe574b4225$var$Tj(m);
                                        if (m === l) {
                                            $833559fe574b4225$var$V = null;
                                            break;
                                        }
                                        if (null !== r) {
                                            r.return = y;
                                            $833559fe574b4225$var$V = r;
                                            break;
                                        }
                                        $833559fe574b4225$var$V = y;
                                    }
                                }
                            }
                            var n = f.alternate;
                            if (null !== n) {
                                var t = n.child;
                                if (null !== t) {
                                    n.child = null;
                                    do {
                                        var J = t.sibling;
                                        t.sibling = null;
                                        t = J;
                                    }while (null !== t);
                                }
                            }
                            $833559fe574b4225$var$V = f;
                        }
                    }
                    if (0 !== (f.subtreeFlags & 2064) && null !== g) g.return = f, $833559fe574b4225$var$V = g;
                    else b: for(; null !== $833559fe574b4225$var$V;){
                        f = $833559fe574b4225$var$V;
                        if (0 !== (f.flags & 2048)) switch(f.tag){
                            case 0:
                            case 11:
                            case 15:
                                $833559fe574b4225$var$Qj(9, f, f.return);
                        }
                        var x = f.sibling;
                        if (null !== x) {
                            x.return = f.return;
                            $833559fe574b4225$var$V = x;
                            break b;
                        }
                        $833559fe574b4225$var$V = f.return;
                    }
                }
                var w = a.current;
                for($833559fe574b4225$var$V = w; null !== $833559fe574b4225$var$V;){
                    g = $833559fe574b4225$var$V;
                    var u = g.child;
                    if (0 !== (g.subtreeFlags & 2064) && null !== u) u.return = g, $833559fe574b4225$var$V = u;
                    else b: for(g = w; null !== $833559fe574b4225$var$V;){
                        h = $833559fe574b4225$var$V;
                        if (0 !== (h.flags & 2048)) try {
                            switch(h.tag){
                                case 0:
                                case 11:
                                case 15:
                                    $833559fe574b4225$var$Rj(9, h);
                            }
                        } catch (na) {
                            $833559fe574b4225$var$W(h, h.return, na);
                        }
                        if (h === g) {
                            $833559fe574b4225$var$V = null;
                            break b;
                        }
                        var F = h.sibling;
                        if (null !== F) {
                            F.return = h.return;
                            $833559fe574b4225$var$V = F;
                            break b;
                        }
                        $833559fe574b4225$var$V = h.return;
                    }
                }
                $833559fe574b4225$var$K = e;
                $833559fe574b4225$var$jg();
                if ($833559fe574b4225$var$lc && "function" === typeof $833559fe574b4225$var$lc.onPostCommitFiberRoot) try {
                    $833559fe574b4225$var$lc.onPostCommitFiberRoot($833559fe574b4225$var$kc, a);
                } catch (na) {}
                d = !0;
            }
            return d;
        } finally{
            $833559fe574b4225$var$C = c, $833559fe574b4225$var$pk.transition = b;
        }
    }
    return !1;
}
function $833559fe574b4225$var$Yk(a, b, c) {
    b = $833559fe574b4225$var$Ki(c, b);
    b = $833559fe574b4225$var$Oi(a, b, 1);
    a = $833559fe574b4225$var$dh(a, b, 1);
    b = $833559fe574b4225$var$L();
    null !== a && ($833559fe574b4225$var$Ac(a, 1, b), $833559fe574b4225$var$Ek(a, b));
}
function $833559fe574b4225$var$W(a, b, c) {
    if (3 === a.tag) $833559fe574b4225$var$Yk(a, a, c);
    else for(; null !== b;){
        if (3 === b.tag) {
            $833559fe574b4225$var$Yk(b, a, c);
            break;
        } else if (1 === b.tag) {
            var d = b.stateNode;
            if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === $833559fe574b4225$var$Si || !$833559fe574b4225$var$Si.has(d))) {
                a = $833559fe574b4225$var$Ki(c, a);
                a = $833559fe574b4225$var$Ri(b, a, 1);
                b = $833559fe574b4225$var$dh(b, a, 1);
                a = $833559fe574b4225$var$L();
                null !== b && ($833559fe574b4225$var$Ac(b, 1, a), $833559fe574b4225$var$Ek(b, a));
                break;
            }
        }
        b = b.return;
    }
}
function $833559fe574b4225$var$Ui(a, b, c) {
    var d = a.pingCache;
    null !== d && d.delete(b);
    b = $833559fe574b4225$var$L();
    a.pingedLanes |= a.suspendedLanes & c;
    $833559fe574b4225$var$R === a && ($833559fe574b4225$var$Z & c) === c && (4 === $833559fe574b4225$var$T || 3 === $833559fe574b4225$var$T && ($833559fe574b4225$var$Z & 130023424) === $833559fe574b4225$var$Z && 500 > $833559fe574b4225$var$B() - $833559fe574b4225$var$gk ? $833559fe574b4225$var$Lk(a, 0) : $833559fe574b4225$var$sk |= c);
    $833559fe574b4225$var$Ek(a, b);
}
function $833559fe574b4225$var$Zk(a, b) {
    0 === b && (0 === (a.mode & 1) ? b = 1 : (b = $833559fe574b4225$var$sc, $833559fe574b4225$var$sc <<= 1, 0 === ($833559fe574b4225$var$sc & 130023424) && ($833559fe574b4225$var$sc = 4194304)));
    var c = $833559fe574b4225$var$L();
    a = $833559fe574b4225$var$Zg(a, b);
    null !== a && ($833559fe574b4225$var$Ac(a, b, c), $833559fe574b4225$var$Ek(a, c));
}
function $833559fe574b4225$var$vj(a) {
    var b = a.memoizedState, c = 0;
    null !== b && (c = b.retryLane);
    $833559fe574b4225$var$Zk(a, c);
}
function $833559fe574b4225$var$ck(a, b) {
    var c = 0;
    switch(a.tag){
        case 13:
            var d = a.stateNode;
            var e = a.memoizedState;
            null !== e && (c = e.retryLane);
            break;
        case 19:
            d = a.stateNode;
            break;
        default:
            throw Error($833559fe574b4225$var$p(314));
    }
    null !== d && d.delete(b);
    $833559fe574b4225$var$Zk(a, c);
}
var $833559fe574b4225$var$Wk;
$833559fe574b4225$var$Wk = function(a, b, c) {
    if (null !== a) {
        if (a.memoizedProps !== b.pendingProps || $833559fe574b4225$var$Wf.current) $833559fe574b4225$var$Ug = !0;
        else {
            if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return $833559fe574b4225$var$Ug = !1, $833559fe574b4225$var$zj(a, b, c);
            $833559fe574b4225$var$Ug = 0 !== (a.flags & 131072) ? !0 : !1;
        }
    } else $833559fe574b4225$var$Ug = !1, $833559fe574b4225$var$I && 0 !== (b.flags & 1048576) && $833559fe574b4225$var$ug(b, $833559fe574b4225$var$ng, b.index);
    b.lanes = 0;
    switch(b.tag){
        case 2:
            var d = b.type;
            $833559fe574b4225$var$jj(a, b);
            a = b.pendingProps;
            var e = $833559fe574b4225$var$Yf(b, $833559fe574b4225$var$H.current);
            $833559fe574b4225$var$Tg(b, c);
            e = $833559fe574b4225$var$Xh(null, b, d, a, e, c);
            var f = $833559fe574b4225$var$bi();
            b.flags |= 1;
            "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, $833559fe574b4225$var$Zf(d) ? (f = !0, $833559fe574b4225$var$cg(b)) : f = !1, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, $833559fe574b4225$var$ah(b), e.updater = $833559fe574b4225$var$nh, b.stateNode = e, e._reactInternals = b, $833559fe574b4225$var$rh(b, d, a, c), b = $833559fe574b4225$var$kj(null, b, d, !0, f, c)) : (b.tag = 0, $833559fe574b4225$var$I && f && $833559fe574b4225$var$vg(b), $833559fe574b4225$var$Yi(null, b, e, c), b = b.child);
            return b;
        case 16:
            d = b.elementType;
            a: {
                $833559fe574b4225$var$jj(a, b);
                a = b.pendingProps;
                e = d._init;
                d = e(d._payload);
                b.type = d;
                e = b.tag = $833559fe574b4225$var$$k(d);
                a = $833559fe574b4225$var$Lg(d, a);
                switch(e){
                    case 0:
                        b = $833559fe574b4225$var$dj(null, b, d, a, c);
                        break a;
                    case 1:
                        b = $833559fe574b4225$var$ij(null, b, d, a, c);
                        break a;
                    case 11:
                        b = $833559fe574b4225$var$Zi(null, b, d, a, c);
                        break a;
                    case 14:
                        b = $833559fe574b4225$var$aj(null, b, d, $833559fe574b4225$var$Lg(d.type, a), c);
                        break a;
                }
                throw Error($833559fe574b4225$var$p(306, d, ""));
            }
            return b;
        case 0:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : $833559fe574b4225$var$Lg(d, e), $833559fe574b4225$var$dj(a, b, d, e, c);
        case 1:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : $833559fe574b4225$var$Lg(d, e), $833559fe574b4225$var$ij(a, b, d, e, c);
        case 3:
            a: {
                $833559fe574b4225$var$lj(b);
                if (null === a) throw Error($833559fe574b4225$var$p(387));
                d = b.pendingProps;
                f = b.memoizedState;
                e = f.element;
                $833559fe574b4225$var$bh(a, b);
                $833559fe574b4225$var$gh(b, d, null, c);
                var g = b.memoizedState;
                d = g.element;
                if (f.isDehydrated) {
                    if (f = {
                        element: d,
                        isDehydrated: !1,
                        cache: g.cache,
                        pendingSuspenseBoundaries: g.pendingSuspenseBoundaries,
                        transitions: g.transitions
                    }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {
                        e = $833559fe574b4225$var$Ki(Error($833559fe574b4225$var$p(423)), b);
                        b = $833559fe574b4225$var$mj(a, b, d, c, e);
                        break a;
                    } else if (d !== e) {
                        e = $833559fe574b4225$var$Ki(Error($833559fe574b4225$var$p(424)), b);
                        b = $833559fe574b4225$var$mj(a, b, d, c, e);
                        break a;
                    } else for($833559fe574b4225$var$yg = $833559fe574b4225$var$Lf(b.stateNode.containerInfo.firstChild), $833559fe574b4225$var$xg = b, $833559fe574b4225$var$I = !0, $833559fe574b4225$var$zg = null, c = $833559fe574b4225$var$Ch(b, null, d, c), b.child = c; c;)c.flags = c.flags & -3 | 4096, c = c.sibling;
                } else {
                    $833559fe574b4225$var$Ig();
                    if (d === e) {
                        b = $833559fe574b4225$var$$i(a, b, c);
                        break a;
                    }
                    $833559fe574b4225$var$Yi(a, b, d, c);
                }
                b = b.child;
            }
            return b;
        case 5:
            return $833559fe574b4225$var$Kh(b), null === a && $833559fe574b4225$var$Eg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, $833559fe574b4225$var$Ef(d, e) ? g = null : null !== f && $833559fe574b4225$var$Ef(d, f) && (b.flags |= 32), $833559fe574b4225$var$hj(a, b), $833559fe574b4225$var$Yi(a, b, g, c), b.child;
        case 6:
            return null === a && $833559fe574b4225$var$Eg(b), null;
        case 13:
            return $833559fe574b4225$var$pj(a, b, c);
        case 4:
            return $833559fe574b4225$var$Ih(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = $833559fe574b4225$var$Bh(b, null, d, c) : $833559fe574b4225$var$Yi(a, b, d, c), b.child;
        case 11:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : $833559fe574b4225$var$Lg(d, e), $833559fe574b4225$var$Zi(a, b, d, e, c);
        case 7:
            return $833559fe574b4225$var$Yi(a, b, b.pendingProps, c), b.child;
        case 8:
            return $833559fe574b4225$var$Yi(a, b, b.pendingProps.children, c), b.child;
        case 12:
            return $833559fe574b4225$var$Yi(a, b, b.pendingProps.children, c), b.child;
        case 10:
            a: {
                d = b.type._context;
                e = b.pendingProps;
                f = b.memoizedProps;
                g = e.value;
                $833559fe574b4225$var$G($833559fe574b4225$var$Mg, d._currentValue);
                d._currentValue = g;
                if (null !== f) {
                    if ($833559fe574b4225$var$He(f.value, g)) {
                        if (f.children === e.children && !$833559fe574b4225$var$Wf.current) {
                            b = $833559fe574b4225$var$$i(a, b, c);
                            break a;
                        }
                    } else for(f = b.child, null !== f && (f.return = b); null !== f;){
                        var h = f.dependencies;
                        if (null !== h) {
                            g = f.child;
                            for(var k = h.firstContext; null !== k;){
                                if (k.context === d) {
                                    if (1 === f.tag) {
                                        k = $833559fe574b4225$var$ch(-1, c & -c);
                                        k.tag = 2;
                                        var l = f.updateQueue;
                                        if (null !== l) {
                                            l = l.shared;
                                            var m = l.pending;
                                            null === m ? k.next = k : (k.next = m.next, m.next = k);
                                            l.pending = k;
                                        }
                                    }
                                    f.lanes |= c;
                                    k = f.alternate;
                                    null !== k && (k.lanes |= c);
                                    $833559fe574b4225$var$Sg(f.return, c, b);
                                    h.lanes |= c;
                                    break;
                                }
                                k = k.next;
                            }
                        } else if (10 === f.tag) g = f.type === b.type ? null : f.child;
                        else if (18 === f.tag) {
                            g = f.return;
                            if (null === g) throw Error($833559fe574b4225$var$p(341));
                            g.lanes |= c;
                            h = g.alternate;
                            null !== h && (h.lanes |= c);
                            $833559fe574b4225$var$Sg(g, c, b);
                            g = f.sibling;
                        } else g = f.child;
                        if (null !== g) g.return = f;
                        else for(g = f; null !== g;){
                            if (g === b) {
                                g = null;
                                break;
                            }
                            f = g.sibling;
                            if (null !== f) {
                                f.return = g.return;
                                g = f;
                                break;
                            }
                            g = g.return;
                        }
                        f = g;
                    }
                }
                $833559fe574b4225$var$Yi(a, b, e.children, c);
                b = b.child;
            }
            return b;
        case 9:
            return e = b.type, d = b.pendingProps.children, $833559fe574b4225$var$Tg(b, c), e = $833559fe574b4225$var$Vg(e), d = d(e), b.flags |= 1, $833559fe574b4225$var$Yi(a, b, d, c), b.child;
        case 14:
            return d = b.type, e = $833559fe574b4225$var$Lg(d, b.pendingProps), e = $833559fe574b4225$var$Lg(d.type, e), $833559fe574b4225$var$aj(a, b, d, e, c);
        case 15:
            return $833559fe574b4225$var$cj(a, b, b.type, b.pendingProps, c);
        case 17:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : $833559fe574b4225$var$Lg(d, e), $833559fe574b4225$var$jj(a, b), b.tag = 1, $833559fe574b4225$var$Zf(d) ? (a = !0, $833559fe574b4225$var$cg(b)) : a = !1, $833559fe574b4225$var$Tg(b, c), $833559fe574b4225$var$ph(b, d, e), $833559fe574b4225$var$rh(b, d, e, c), $833559fe574b4225$var$kj(null, b, d, !0, a, c);
        case 19:
            return $833559fe574b4225$var$yj(a, b, c);
        case 22:
            return $833559fe574b4225$var$ej(a, b, c);
    }
    throw Error($833559fe574b4225$var$p(156, b.tag));
};
function $833559fe574b4225$var$Gk(a, b) {
    return $833559fe574b4225$var$ac(a, b);
}
function $833559fe574b4225$var$al(a, b, c, d) {
    this.tag = a;
    this.key = c;
    this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
    this.index = 0;
    this.ref = null;
    this.pendingProps = b;
    this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
    this.mode = d;
    this.subtreeFlags = this.flags = 0;
    this.deletions = null;
    this.childLanes = this.lanes = 0;
    this.alternate = null;
}
function $833559fe574b4225$var$Bg(a, b, c, d) {
    return new $833559fe574b4225$var$al(a, b, c, d);
}
function $833559fe574b4225$var$bj(a) {
    a = a.prototype;
    return !(!a || !a.isReactComponent);
}
function $833559fe574b4225$var$$k(a) {
    if ("function" === typeof a) return $833559fe574b4225$var$bj(a) ? 1 : 0;
    if (void 0 !== a && null !== a) {
        a = a.$$typeof;
        if (a === $833559fe574b4225$var$Da) return 11;
        if (a === $833559fe574b4225$var$Ga) return 14;
    }
    return 2;
}
function $833559fe574b4225$var$wh(a, b) {
    var c = a.alternate;
    null === c ? (c = $833559fe574b4225$var$Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
    c.flags = a.flags & 14680064;
    c.childLanes = a.childLanes;
    c.lanes = a.lanes;
    c.child = a.child;
    c.memoizedProps = a.memoizedProps;
    c.memoizedState = a.memoizedState;
    c.updateQueue = a.updateQueue;
    b = a.dependencies;
    c.dependencies = null === b ? null : {
        lanes: b.lanes,
        firstContext: b.firstContext
    };
    c.sibling = a.sibling;
    c.index = a.index;
    c.ref = a.ref;
    return c;
}
function $833559fe574b4225$var$yh(a, b, c, d, e, f) {
    var g = 2;
    d = a;
    if ("function" === typeof a) $833559fe574b4225$var$bj(a) && (g = 1);
    else if ("string" === typeof a) g = 5;
    else a: switch(a){
        case $833559fe574b4225$var$ya:
            return $833559fe574b4225$var$Ah(c.children, e, f, b);
        case $833559fe574b4225$var$za:
            g = 8;
            e |= 8;
            break;
        case $833559fe574b4225$var$Aa:
            return a = $833559fe574b4225$var$Bg(12, c, b, e | 2), a.elementType = $833559fe574b4225$var$Aa, a.lanes = f, a;
        case $833559fe574b4225$var$Ea:
            return a = $833559fe574b4225$var$Bg(13, c, b, e), a.elementType = $833559fe574b4225$var$Ea, a.lanes = f, a;
        case $833559fe574b4225$var$Fa:
            return a = $833559fe574b4225$var$Bg(19, c, b, e), a.elementType = $833559fe574b4225$var$Fa, a.lanes = f, a;
        case $833559fe574b4225$var$Ia:
            return $833559fe574b4225$var$qj(c, e, f, b);
        default:
            if ("object" === typeof a && null !== a) switch(a.$$typeof){
                case $833559fe574b4225$var$Ba:
                    g = 10;
                    break a;
                case $833559fe574b4225$var$Ca:
                    g = 9;
                    break a;
                case $833559fe574b4225$var$Da:
                    g = 11;
                    break a;
                case $833559fe574b4225$var$Ga:
                    g = 14;
                    break a;
                case $833559fe574b4225$var$Ha:
                    g = 16;
                    d = null;
                    break a;
            }
            throw Error($833559fe574b4225$var$p(130, null == a ? a : typeof a, ""));
    }
    b = $833559fe574b4225$var$Bg(g, c, b, e);
    b.elementType = a;
    b.type = d;
    b.lanes = f;
    return b;
}
function $833559fe574b4225$var$Ah(a, b, c, d) {
    a = $833559fe574b4225$var$Bg(7, a, d, b);
    a.lanes = c;
    return a;
}
function $833559fe574b4225$var$qj(a, b, c, d) {
    a = $833559fe574b4225$var$Bg(22, a, d, b);
    a.elementType = $833559fe574b4225$var$Ia;
    a.lanes = c;
    a.stateNode = {
        isHidden: !1
    };
    return a;
}
function $833559fe574b4225$var$xh(a, b, c) {
    a = $833559fe574b4225$var$Bg(6, a, null, b);
    a.lanes = c;
    return a;
}
function $833559fe574b4225$var$zh(a, b, c) {
    b = $833559fe574b4225$var$Bg(4, null !== a.children ? a.children : [], a.key, b);
    b.lanes = c;
    b.stateNode = {
        containerInfo: a.containerInfo,
        pendingChildren: null,
        implementation: a.implementation
    };
    return b;
}
function $833559fe574b4225$var$bl(a, b, c, d, e) {
    this.tag = b;
    this.containerInfo = a;
    this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
    this.timeoutHandle = -1;
    this.callbackNode = this.pendingContext = this.context = null;
    this.callbackPriority = 0;
    this.eventTimes = $833559fe574b4225$var$zc(0);
    this.expirationTimes = $833559fe574b4225$var$zc(-1);
    this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
    this.entanglements = $833559fe574b4225$var$zc(0);
    this.identifierPrefix = d;
    this.onRecoverableError = e;
    this.mutableSourceEagerHydrationData = null;
}
function $833559fe574b4225$var$cl(a, b, c, d, e, f, g, h, k) {
    a = new $833559fe574b4225$var$bl(a, b, c, h, k);
    1 === b ? (b = 1, !0 === f && (b |= 8)) : b = 0;
    f = $833559fe574b4225$var$Bg(3, null, null, b);
    a.current = f;
    f.stateNode = a;
    f.memoizedState = {
        element: d,
        isDehydrated: c,
        cache: null,
        transitions: null,
        pendingSuspenseBoundaries: null
    };
    $833559fe574b4225$var$ah(f);
    return a;
}
function $833559fe574b4225$var$dl(a, b, c) {
    var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return {
        $$typeof: $833559fe574b4225$var$wa,
        key: null == d ? null : "" + d,
        children: a,
        containerInfo: b,
        implementation: c
    };
}
function $833559fe574b4225$var$el(a) {
    if (!a) return $833559fe574b4225$var$Vf;
    a = a._reactInternals;
    a: {
        if ($833559fe574b4225$var$Vb(a) !== a || 1 !== a.tag) throw Error($833559fe574b4225$var$p(170));
        var b = a;
        do {
            switch(b.tag){
                case 3:
                    b = b.stateNode.context;
                    break a;
                case 1:
                    if ($833559fe574b4225$var$Zf(b.type)) {
                        b = b.stateNode.__reactInternalMemoizedMergedChildContext;
                        break a;
                    }
            }
            b = b.return;
        }while (null !== b);
        throw Error($833559fe574b4225$var$p(171));
    }
    if (1 === a.tag) {
        var c = a.type;
        if ($833559fe574b4225$var$Zf(c)) return $833559fe574b4225$var$bg(a, c, b);
    }
    return b;
}
function $833559fe574b4225$var$fl(a, b, c, d, e, f, g, h, k) {
    a = $833559fe574b4225$var$cl(c, d, !0, a, e, f, g, h, k);
    a.context = $833559fe574b4225$var$el(null);
    c = a.current;
    d = $833559fe574b4225$var$L();
    e = $833559fe574b4225$var$lh(c);
    f = $833559fe574b4225$var$ch(d, e);
    f.callback = void 0 !== b && null !== b ? b : null;
    $833559fe574b4225$var$dh(c, f, e);
    a.current.lanes = e;
    $833559fe574b4225$var$Ac(a, e, d);
    $833559fe574b4225$var$Ek(a, d);
    return a;
}
function $833559fe574b4225$var$gl(a, b, c, d) {
    var e = b.current, f = $833559fe574b4225$var$L(), g = $833559fe574b4225$var$lh(e);
    c = $833559fe574b4225$var$el(c);
    null === b.context ? b.context = c : b.pendingContext = c;
    b = $833559fe574b4225$var$ch(f, g);
    b.payload = {
        element: a
    };
    d = void 0 === d ? null : d;
    null !== d && (b.callback = d);
    a = $833559fe574b4225$var$dh(e, b, g);
    null !== a && ($833559fe574b4225$var$mh(a, e, g, f), $833559fe574b4225$var$eh(a, e, g));
    return g;
}
function $833559fe574b4225$var$hl(a) {
    a = a.current;
    if (!a.child) return null;
    switch(a.child.tag){
        case 5:
            return a.child.stateNode;
        default:
            return a.child.stateNode;
    }
}
function $833559fe574b4225$var$il(a, b) {
    a = a.memoizedState;
    if (null !== a && null !== a.dehydrated) {
        var c = a.retryLane;
        a.retryLane = 0 !== c && c < b ? c : b;
    }
}
function $833559fe574b4225$var$jl(a, b) {
    $833559fe574b4225$var$il(a, b);
    (a = a.alternate) && $833559fe574b4225$var$il(a, b);
}
function $833559fe574b4225$var$kl() {
    return null;
}
var $833559fe574b4225$var$ll = "function" === typeof reportError ? reportError : function(a) {
    console.error(a);
};
function $833559fe574b4225$var$ml(a) {
    this._internalRoot = a;
}
$833559fe574b4225$var$nl.prototype.render = $833559fe574b4225$var$ml.prototype.render = function(a) {
    var b = this._internalRoot;
    if (null === b) throw Error($833559fe574b4225$var$p(409));
    $833559fe574b4225$var$gl(a, b, null, null);
};
$833559fe574b4225$var$nl.prototype.unmount = $833559fe574b4225$var$ml.prototype.unmount = function() {
    var a = this._internalRoot;
    if (null !== a) {
        this._internalRoot = null;
        var b = a.containerInfo;
        $833559fe574b4225$var$Sk(function() {
            $833559fe574b4225$var$gl(null, a, null, null);
        });
        b[$833559fe574b4225$var$uf] = null;
    }
};
function $833559fe574b4225$var$nl(a) {
    this._internalRoot = a;
}
$833559fe574b4225$var$nl.prototype.unstable_scheduleHydration = function(a) {
    if (a) {
        var b = $833559fe574b4225$var$Hc();
        a = {
            blockedOn: null,
            target: a,
            priority: b
        };
        for(var c = 0; c < $833559fe574b4225$var$Qc.length && 0 !== b && b < $833559fe574b4225$var$Qc[c].priority; c++);
        $833559fe574b4225$var$Qc.splice(c, 0, a);
        0 === c && $833559fe574b4225$var$Vc(a);
    }
};
function $833559fe574b4225$var$ol(a) {
    return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
}
function $833559fe574b4225$var$pl(a) {
    return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
}
function $833559fe574b4225$var$ql() {}
function $833559fe574b4225$var$rl(a, b, c, d, e) {
    if (e) {
        if ("function" === typeof d) {
            var f = d;
            d = function() {
                var a = $833559fe574b4225$var$hl(g);
                f.call(a);
            };
        }
        var g = $833559fe574b4225$var$fl(b, d, a, 0, null, !1, !1, "", $833559fe574b4225$var$ql);
        a._reactRootContainer = g;
        a[$833559fe574b4225$var$uf] = g.current;
        $833559fe574b4225$var$sf(8 === a.nodeType ? a.parentNode : a);
        $833559fe574b4225$var$Sk();
        return g;
    }
    for(; e = a.lastChild;)a.removeChild(e);
    if ("function" === typeof d) {
        var h = d;
        d = function() {
            var a = $833559fe574b4225$var$hl(k);
            h.call(a);
        };
    }
    var k = $833559fe574b4225$var$cl(a, 0, !1, null, null, !1, !1, "", $833559fe574b4225$var$ql);
    a._reactRootContainer = k;
    a[$833559fe574b4225$var$uf] = k.current;
    $833559fe574b4225$var$sf(8 === a.nodeType ? a.parentNode : a);
    $833559fe574b4225$var$Sk(function() {
        $833559fe574b4225$var$gl(b, k, c, d);
    });
    return k;
}
function $833559fe574b4225$var$sl(a, b, c, d, e) {
    var f = c._reactRootContainer;
    if (f) {
        var g = f;
        if ("function" === typeof e) {
            var h = e;
            e = function() {
                var a = $833559fe574b4225$var$hl(g);
                h.call(a);
            };
        }
        $833559fe574b4225$var$gl(b, g, a, e);
    } else g = $833559fe574b4225$var$rl(c, b, a, e, d);
    return $833559fe574b4225$var$hl(g);
}
$833559fe574b4225$var$Ec = function(a) {
    switch(a.tag){
        case 3:
            var b = a.stateNode;
            if (b.current.memoizedState.isDehydrated) {
                var c = $833559fe574b4225$var$tc(b.pendingLanes);
                0 !== c && ($833559fe574b4225$var$Cc(b, c | 1), $833559fe574b4225$var$Ek(b, $833559fe574b4225$var$B()), 0 === ($833559fe574b4225$var$K & 6) && ($833559fe574b4225$var$Hj = $833559fe574b4225$var$B() + 500, $833559fe574b4225$var$jg()));
            }
            break;
        case 13:
            $833559fe574b4225$var$Sk(function() {
                var b = $833559fe574b4225$var$Zg(a, 1);
                if (null !== b) {
                    var c = $833559fe574b4225$var$L();
                    $833559fe574b4225$var$mh(b, a, 1, c);
                }
            }), $833559fe574b4225$var$jl(a, 1);
    }
};
$833559fe574b4225$var$Fc = function(a) {
    if (13 === a.tag) {
        var b = $833559fe574b4225$var$Zg(a, 134217728);
        if (null !== b) {
            var c = $833559fe574b4225$var$L();
            $833559fe574b4225$var$mh(b, a, 134217728, c);
        }
        $833559fe574b4225$var$jl(a, 134217728);
    }
};
$833559fe574b4225$var$Gc = function(a) {
    if (13 === a.tag) {
        var b = $833559fe574b4225$var$lh(a), c = $833559fe574b4225$var$Zg(a, b);
        if (null !== c) {
            var d = $833559fe574b4225$var$L();
            $833559fe574b4225$var$mh(c, a, b, d);
        }
        $833559fe574b4225$var$jl(a, b);
    }
};
$833559fe574b4225$var$Hc = function() {
    return $833559fe574b4225$var$C;
};
$833559fe574b4225$var$Ic = function(a, b) {
    var c = $833559fe574b4225$var$C;
    try {
        return $833559fe574b4225$var$C = a, b();
    } finally{
        $833559fe574b4225$var$C = c;
    }
};
$833559fe574b4225$var$yb = function(a, b, c) {
    switch(b){
        case "input":
            $833559fe574b4225$var$bb(a, c);
            b = c.name;
            if ("radio" === c.type && null != b) {
                for(c = a; c.parentNode;)c = c.parentNode;
                c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
                for(b = 0; b < c.length; b++){
                    var d = c[b];
                    if (d !== a && d.form === a.form) {
                        var e = $833559fe574b4225$var$Db(d);
                        if (!e) throw Error($833559fe574b4225$var$p(90));
                        $833559fe574b4225$var$Wa(d);
                        $833559fe574b4225$var$bb(d, e);
                    }
                }
            }
            break;
        case "textarea":
            $833559fe574b4225$var$ib(a, c);
            break;
        case "select":
            b = c.value, null != b && $833559fe574b4225$var$fb(a, !!c.multiple, b, !1);
    }
};
$833559fe574b4225$var$Gb = $833559fe574b4225$var$Rk;
$833559fe574b4225$var$Hb = $833559fe574b4225$var$Sk;
var $833559fe574b4225$var$tl = {
    usingClientEntryPoint: !1,
    Events: [
        $833559fe574b4225$var$Cb,
        $833559fe574b4225$var$ue,
        $833559fe574b4225$var$Db,
        $833559fe574b4225$var$Eb,
        $833559fe574b4225$var$Fb,
        $833559fe574b4225$var$Rk
    ]
}, $833559fe574b4225$var$ul = {
    findFiberByHostInstance: $833559fe574b4225$var$Wc,
    bundleType: 0,
    version: "18.2.0",
    rendererPackageName: "react-dom"
};
var $833559fe574b4225$var$vl = {
    bundleType: $833559fe574b4225$var$ul.bundleType,
    version: $833559fe574b4225$var$ul.version,
    rendererPackageName: $833559fe574b4225$var$ul.rendererPackageName,
    rendererConfig: $833559fe574b4225$var$ul.rendererConfig,
    overrideHookState: null,
    overrideHookStateDeletePath: null,
    overrideHookStateRenamePath: null,
    overrideProps: null,
    overridePropsDeletePath: null,
    overridePropsRenamePath: null,
    setErrorHandler: null,
    setSuspenseHandler: null,
    scheduleUpdate: null,
    currentDispatcherRef: $833559fe574b4225$var$ua.ReactCurrentDispatcher,
    findHostInstanceByFiber: function(a) {
        a = $833559fe574b4225$var$Zb(a);
        return null === a ? null : a.stateNode;
    },
    findFiberByHostInstance: $833559fe574b4225$var$ul.findFiberByHostInstance || $833559fe574b4225$var$kl,
    findHostInstancesForRefresh: null,
    scheduleRefresh: null,
    scheduleRoot: null,
    setRefreshHandler: null,
    getCurrentFiber: null,
    reconcilerVersion: "18.2.0-next-9e3b772b8-20220608"
};
if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var $833559fe574b4225$var$wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!$833559fe574b4225$var$wl.isDisabled && $833559fe574b4225$var$wl.supportsFiber) try {
        $833559fe574b4225$var$kc = $833559fe574b4225$var$wl.inject($833559fe574b4225$var$vl), $833559fe574b4225$var$lc = $833559fe574b4225$var$wl;
    } catch (a) {}
}
$833559fe574b4225$export$ae55be85d98224ed = $833559fe574b4225$var$tl;
$833559fe574b4225$export$d39a5bbd09211389 = function(a, b) {
    var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
    if (!$833559fe574b4225$var$ol(b)) throw Error($833559fe574b4225$var$p(200));
    return $833559fe574b4225$var$dl(a, b, null, c);
};
$833559fe574b4225$export$882461b6382ed46c = function(a, b) {
    if (!$833559fe574b4225$var$ol(a)) throw Error($833559fe574b4225$var$p(299));
    var c = !1, d = "", e = $833559fe574b4225$var$ll;
    null !== b && void 0 !== b && (!0 === b.unstable_strictMode && (c = !0), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
    b = $833559fe574b4225$var$cl(a, 1, !1, null, null, c, !1, d, e);
    a[$833559fe574b4225$var$uf] = b.current;
    $833559fe574b4225$var$sf(8 === a.nodeType ? a.parentNode : a);
    return new $833559fe574b4225$var$ml(b);
};
$833559fe574b4225$export$466bfc07425424d5 = function(a) {
    if (null == a) return null;
    if (1 === a.nodeType) return a;
    var b = a._reactInternals;
    if (void 0 === b) {
        if ("function" === typeof a.render) throw Error($833559fe574b4225$var$p(188));
        a = Object.keys(a).join(",");
        throw Error($833559fe574b4225$var$p(268, a));
    }
    a = $833559fe574b4225$var$Zb(b);
    a = null === a ? null : a.stateNode;
    return a;
};
$833559fe574b4225$export$cd75ccfd720a3cd4 = function(a) {
    return $833559fe574b4225$var$Sk(a);
};
$833559fe574b4225$export$fa8d919ba61d84db = function(a, b, c) {
    if (!$833559fe574b4225$var$pl(b)) throw Error($833559fe574b4225$var$p(200));
    return $833559fe574b4225$var$sl(null, a, b, !0, c);
};
$833559fe574b4225$export$757ceba2d55c277e = function(a, b, c) {
    if (!$833559fe574b4225$var$ol(a)) throw Error($833559fe574b4225$var$p(405));
    var d = null != c && c.hydratedSources || null, e = !1, f = "", g = $833559fe574b4225$var$ll;
    null !== c && void 0 !== c && (!0 === c.unstable_strictMode && (e = !0), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
    b = $833559fe574b4225$var$fl(b, null, a, 1, null != c ? c : null, e, !1, f, g);
    a[$833559fe574b4225$var$uf] = b.current;
    $833559fe574b4225$var$sf(a);
    if (d) for(a = 0; a < d.length; a++)c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [
        c,
        e
    ] : b.mutableSourceEagerHydrationData.push(c, e);
    return new $833559fe574b4225$var$nl(b);
};
$833559fe574b4225$export$b3890eb0ae9dca99 = function(a, b, c) {
    if (!$833559fe574b4225$var$pl(b)) throw Error($833559fe574b4225$var$p(200));
    return $833559fe574b4225$var$sl(null, a, b, !1, c);
};
$833559fe574b4225$export$502457920280e6be = function(a) {
    if (!$833559fe574b4225$var$pl(a)) throw Error($833559fe574b4225$var$p(40));
    return a._reactRootContainer ? ($833559fe574b4225$var$Sk(function() {
        $833559fe574b4225$var$sl(null, null, a, !1, function() {
            a._reactRootContainer = null;
            a[$833559fe574b4225$var$uf] = null;
        });
    }), !0) : !1;
};
$833559fe574b4225$export$c78a37762a8d58e1 = $833559fe574b4225$var$Rk;
$833559fe574b4225$export$dc54d992c10e8a18 = function(a, b, c, d) {
    if (!$833559fe574b4225$var$pl(c)) throw Error($833559fe574b4225$var$p(200));
    if (null == a || void 0 === a._reactInternals) throw Error($833559fe574b4225$var$p(38));
    return $833559fe574b4225$var$sl(a, b, c, !1, d);
};
$833559fe574b4225$export$83d89fbfd8236492 = "18.2.0-next-9e3b772b8-20220608";

});
parcelRegister("fw68E", function(module, exports) {
"use strict";

module.exports = (parcelRequire("d2ro6"));

});
parcelRegister("d2ro6", function(module, exports) {

$parcel$export(module.exports, "unstable_now", () => $97e0b4ea877737f9$export$c4744153514ff05d, (v) => $97e0b4ea877737f9$export$c4744153514ff05d = v);
$parcel$export(module.exports, "unstable_IdlePriority", () => $97e0b4ea877737f9$export$3e506c1ccc9cc1a7, (v) => $97e0b4ea877737f9$export$3e506c1ccc9cc1a7 = v);
$parcel$export(module.exports, "unstable_ImmediatePriority", () => $97e0b4ea877737f9$export$e26fe2ed2fa76875, (v) => $97e0b4ea877737f9$export$e26fe2ed2fa76875 = v);
$parcel$export(module.exports, "unstable_LowPriority", () => $97e0b4ea877737f9$export$502329bbf4b505b1, (v) => $97e0b4ea877737f9$export$502329bbf4b505b1 = v);
$parcel$export(module.exports, "unstable_NormalPriority", () => $97e0b4ea877737f9$export$6e3807111c4874c4, (v) => $97e0b4ea877737f9$export$6e3807111c4874c4 = v);
$parcel$export(module.exports, "unstable_Profiling", () => $97e0b4ea877737f9$export$c27134553091fb3a, (v) => $97e0b4ea877737f9$export$c27134553091fb3a = v);
$parcel$export(module.exports, "unstable_UserBlockingPriority", () => $97e0b4ea877737f9$export$33ee1acdc04fd2a2, (v) => $97e0b4ea877737f9$export$33ee1acdc04fd2a2 = v);
$parcel$export(module.exports, "unstable_cancelCallback", () => $97e0b4ea877737f9$export$b00a404bbd5edef2, (v) => $97e0b4ea877737f9$export$b00a404bbd5edef2 = v);
$parcel$export(module.exports, "unstable_continueExecution", () => $97e0b4ea877737f9$export$8352ce38b91d0c62, (v) => $97e0b4ea877737f9$export$8352ce38b91d0c62 = v);
$parcel$export(module.exports, "unstable_forceFrameRate", () => $97e0b4ea877737f9$export$d66a1c1c77bd778b, (v) => $97e0b4ea877737f9$export$d66a1c1c77bd778b = v);
$parcel$export(module.exports, "unstable_getCurrentPriorityLevel", () => $97e0b4ea877737f9$export$d3dfb8e4810cb555, (v) => $97e0b4ea877737f9$export$d3dfb8e4810cb555 = v);
$parcel$export(module.exports, "unstable_getFirstCallbackNode", () => $97e0b4ea877737f9$export$839f9183b0465a69, (v) => $97e0b4ea877737f9$export$839f9183b0465a69 = v);
$parcel$export(module.exports, "unstable_next", () => $97e0b4ea877737f9$export$72fdf0e06517287b, (v) => $97e0b4ea877737f9$export$72fdf0e06517287b = v);
$parcel$export(module.exports, "unstable_pauseExecution", () => $97e0b4ea877737f9$export$4b844e58a3e414b4, (v) => $97e0b4ea877737f9$export$4b844e58a3e414b4 = v);
$parcel$export(module.exports, "unstable_requestPaint", () => $97e0b4ea877737f9$export$816d2913ae6b83b1, (v) => $97e0b4ea877737f9$export$816d2913ae6b83b1 = v);
$parcel$export(module.exports, "unstable_runWithPriority", () => $97e0b4ea877737f9$export$61bcfe829111a1d0, (v) => $97e0b4ea877737f9$export$61bcfe829111a1d0 = v);
$parcel$export(module.exports, "unstable_scheduleCallback", () => $97e0b4ea877737f9$export$7ee8c9beb337bc3f, (v) => $97e0b4ea877737f9$export$7ee8c9beb337bc3f = v);
$parcel$export(module.exports, "unstable_shouldYield", () => $97e0b4ea877737f9$export$b5836b71941fa3ed, (v) => $97e0b4ea877737f9$export$b5836b71941fa3ed = v);
$parcel$export(module.exports, "unstable_wrapCallback", () => $97e0b4ea877737f9$export$cf845f2c119da08a, (v) => $97e0b4ea877737f9$export$cf845f2c119da08a = v);
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var $97e0b4ea877737f9$export$c4744153514ff05d;
var $97e0b4ea877737f9$export$3e506c1ccc9cc1a7;
var $97e0b4ea877737f9$export$e26fe2ed2fa76875;
var $97e0b4ea877737f9$export$502329bbf4b505b1;
var $97e0b4ea877737f9$export$6e3807111c4874c4;
var $97e0b4ea877737f9$export$c27134553091fb3a;
var $97e0b4ea877737f9$export$33ee1acdc04fd2a2;
var $97e0b4ea877737f9$export$b00a404bbd5edef2;
var $97e0b4ea877737f9$export$8352ce38b91d0c62;
var $97e0b4ea877737f9$export$d66a1c1c77bd778b;
var $97e0b4ea877737f9$export$d3dfb8e4810cb555;
var $97e0b4ea877737f9$export$839f9183b0465a69;
var $97e0b4ea877737f9$export$72fdf0e06517287b;
var $97e0b4ea877737f9$export$4b844e58a3e414b4;
var $97e0b4ea877737f9$export$816d2913ae6b83b1;
var $97e0b4ea877737f9$export$61bcfe829111a1d0;
var $97e0b4ea877737f9$export$7ee8c9beb337bc3f;
var $97e0b4ea877737f9$export$b5836b71941fa3ed;
var $97e0b4ea877737f9$export$cf845f2c119da08a;
"use strict";
function $97e0b4ea877737f9$var$f(a, b) {
    var c = a.length;
    a.push(b);
    a: for(; 0 < c;){
        var d = c - 1 >>> 1, e = a[d];
        if (0 < $97e0b4ea877737f9$var$g(e, b)) a[d] = b, a[c] = e, c = d;
        else break a;
    }
}
function $97e0b4ea877737f9$var$h(a) {
    return 0 === a.length ? null : a[0];
}
function $97e0b4ea877737f9$var$k(a) {
    if (0 === a.length) return null;
    var b = a[0], c = a.pop();
    if (c !== b) {
        a[0] = c;
        a: for(var d = 0, e = a.length, w = e >>> 1; d < w;){
            var m = 2 * (d + 1) - 1, C = a[m], n = m + 1, x = a[n];
            if (0 > $97e0b4ea877737f9$var$g(C, c)) n < e && 0 > $97e0b4ea877737f9$var$g(x, C) ? (a[d] = x, a[n] = c, d = n) : (a[d] = C, a[m] = c, d = m);
            else if (n < e && 0 > $97e0b4ea877737f9$var$g(x, c)) a[d] = x, a[n] = c, d = n;
            else break a;
        }
    }
    return b;
}
function $97e0b4ea877737f9$var$g(a, b) {
    var c = a.sortIndex - b.sortIndex;
    return 0 !== c ? c : a.id - b.id;
}
if ("object" === typeof performance && "function" === typeof performance.now) {
    var $97e0b4ea877737f9$var$l = performance;
    $97e0b4ea877737f9$export$c4744153514ff05d = function() {
        return $97e0b4ea877737f9$var$l.now();
    };
} else {
    var $97e0b4ea877737f9$var$p = Date, $97e0b4ea877737f9$var$q = $97e0b4ea877737f9$var$p.now();
    $97e0b4ea877737f9$export$c4744153514ff05d = function() {
        return $97e0b4ea877737f9$var$p.now() - $97e0b4ea877737f9$var$q;
    };
}
var $97e0b4ea877737f9$var$r = [], $97e0b4ea877737f9$var$t = [], $97e0b4ea877737f9$var$u = 1, $97e0b4ea877737f9$var$v = null, $97e0b4ea877737f9$var$y = 3, $97e0b4ea877737f9$var$z = !1, $97e0b4ea877737f9$var$A = !1, $97e0b4ea877737f9$var$B = !1, $97e0b4ea877737f9$var$D = "function" === typeof setTimeout ? setTimeout : null, $97e0b4ea877737f9$var$E = "function" === typeof clearTimeout ? clearTimeout : null, $97e0b4ea877737f9$var$F = "undefined" !== typeof setImmediate ? setImmediate : null;
"undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
function $97e0b4ea877737f9$var$G(a) {
    for(var b = $97e0b4ea877737f9$var$h($97e0b4ea877737f9$var$t); null !== b;){
        if (null === b.callback) $97e0b4ea877737f9$var$k($97e0b4ea877737f9$var$t);
        else if (b.startTime <= a) $97e0b4ea877737f9$var$k($97e0b4ea877737f9$var$t), b.sortIndex = b.expirationTime, $97e0b4ea877737f9$var$f($97e0b4ea877737f9$var$r, b);
        else break;
        b = $97e0b4ea877737f9$var$h($97e0b4ea877737f9$var$t);
    }
}
function $97e0b4ea877737f9$var$H(a) {
    $97e0b4ea877737f9$var$B = !1;
    $97e0b4ea877737f9$var$G(a);
    if (!$97e0b4ea877737f9$var$A) {
        if (null !== $97e0b4ea877737f9$var$h($97e0b4ea877737f9$var$r)) $97e0b4ea877737f9$var$A = !0, $97e0b4ea877737f9$var$I($97e0b4ea877737f9$var$J);
        else {
            var b = $97e0b4ea877737f9$var$h($97e0b4ea877737f9$var$t);
            null !== b && $97e0b4ea877737f9$var$K($97e0b4ea877737f9$var$H, b.startTime - a);
        }
    }
}
function $97e0b4ea877737f9$var$J(a, b) {
    $97e0b4ea877737f9$var$A = !1;
    $97e0b4ea877737f9$var$B && ($97e0b4ea877737f9$var$B = !1, $97e0b4ea877737f9$var$E($97e0b4ea877737f9$var$L), $97e0b4ea877737f9$var$L = -1);
    $97e0b4ea877737f9$var$z = !0;
    var c = $97e0b4ea877737f9$var$y;
    try {
        $97e0b4ea877737f9$var$G(b);
        for($97e0b4ea877737f9$var$v = $97e0b4ea877737f9$var$h($97e0b4ea877737f9$var$r); null !== $97e0b4ea877737f9$var$v && (!($97e0b4ea877737f9$var$v.expirationTime > b) || a && !$97e0b4ea877737f9$var$M());){
            var d = $97e0b4ea877737f9$var$v.callback;
            if ("function" === typeof d) {
                $97e0b4ea877737f9$var$v.callback = null;
                $97e0b4ea877737f9$var$y = $97e0b4ea877737f9$var$v.priorityLevel;
                var e = d($97e0b4ea877737f9$var$v.expirationTime <= b);
                b = $97e0b4ea877737f9$export$c4744153514ff05d();
                "function" === typeof e ? $97e0b4ea877737f9$var$v.callback = e : $97e0b4ea877737f9$var$v === $97e0b4ea877737f9$var$h($97e0b4ea877737f9$var$r) && $97e0b4ea877737f9$var$k($97e0b4ea877737f9$var$r);
                $97e0b4ea877737f9$var$G(b);
            } else $97e0b4ea877737f9$var$k($97e0b4ea877737f9$var$r);
            $97e0b4ea877737f9$var$v = $97e0b4ea877737f9$var$h($97e0b4ea877737f9$var$r);
        }
        if (null !== $97e0b4ea877737f9$var$v) var w = !0;
        else {
            var m = $97e0b4ea877737f9$var$h($97e0b4ea877737f9$var$t);
            null !== m && $97e0b4ea877737f9$var$K($97e0b4ea877737f9$var$H, m.startTime - b);
            w = !1;
        }
        return w;
    } finally{
        $97e0b4ea877737f9$var$v = null, $97e0b4ea877737f9$var$y = c, $97e0b4ea877737f9$var$z = !1;
    }
}
var $97e0b4ea877737f9$var$N = !1, $97e0b4ea877737f9$var$O = null, $97e0b4ea877737f9$var$L = -1, $97e0b4ea877737f9$var$P = 5, $97e0b4ea877737f9$var$Q = -1;
function $97e0b4ea877737f9$var$M() {
    return $97e0b4ea877737f9$export$c4744153514ff05d() - $97e0b4ea877737f9$var$Q < $97e0b4ea877737f9$var$P ? !1 : !0;
}
function $97e0b4ea877737f9$var$R() {
    if (null !== $97e0b4ea877737f9$var$O) {
        var a = $97e0b4ea877737f9$export$c4744153514ff05d();
        $97e0b4ea877737f9$var$Q = a;
        var b = !0;
        try {
            b = $97e0b4ea877737f9$var$O(!0, a);
        } finally{
            b ? $97e0b4ea877737f9$var$S() : ($97e0b4ea877737f9$var$N = !1, $97e0b4ea877737f9$var$O = null);
        }
    } else $97e0b4ea877737f9$var$N = !1;
}
var $97e0b4ea877737f9$var$S;
if ("function" === typeof $97e0b4ea877737f9$var$F) $97e0b4ea877737f9$var$S = function() {
    $97e0b4ea877737f9$var$F($97e0b4ea877737f9$var$R);
};
else if ("undefined" !== typeof MessageChannel) {
    var $97e0b4ea877737f9$var$T = new MessageChannel, $97e0b4ea877737f9$var$U = $97e0b4ea877737f9$var$T.port2;
    $97e0b4ea877737f9$var$T.port1.onmessage = $97e0b4ea877737f9$var$R;
    $97e0b4ea877737f9$var$S = function() {
        $97e0b4ea877737f9$var$U.postMessage(null);
    };
} else $97e0b4ea877737f9$var$S = function() {
    $97e0b4ea877737f9$var$D($97e0b4ea877737f9$var$R, 0);
};
function $97e0b4ea877737f9$var$I(a) {
    $97e0b4ea877737f9$var$O = a;
    $97e0b4ea877737f9$var$N || ($97e0b4ea877737f9$var$N = !0, $97e0b4ea877737f9$var$S());
}
function $97e0b4ea877737f9$var$K(a, b) {
    $97e0b4ea877737f9$var$L = $97e0b4ea877737f9$var$D(function() {
        a($97e0b4ea877737f9$export$c4744153514ff05d());
    }, b);
}
$97e0b4ea877737f9$export$3e506c1ccc9cc1a7 = 5;
$97e0b4ea877737f9$export$e26fe2ed2fa76875 = 1;
$97e0b4ea877737f9$export$502329bbf4b505b1 = 4;
$97e0b4ea877737f9$export$6e3807111c4874c4 = 3;
$97e0b4ea877737f9$export$c27134553091fb3a = null;
$97e0b4ea877737f9$export$33ee1acdc04fd2a2 = 2;
$97e0b4ea877737f9$export$b00a404bbd5edef2 = function(a) {
    a.callback = null;
};
$97e0b4ea877737f9$export$8352ce38b91d0c62 = function() {
    $97e0b4ea877737f9$var$A || $97e0b4ea877737f9$var$z || ($97e0b4ea877737f9$var$A = !0, $97e0b4ea877737f9$var$I($97e0b4ea877737f9$var$J));
};
$97e0b4ea877737f9$export$d66a1c1c77bd778b = function(a) {
    0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : $97e0b4ea877737f9$var$P = 0 < a ? Math.floor(1E3 / a) : 5;
};
$97e0b4ea877737f9$export$d3dfb8e4810cb555 = function() {
    return $97e0b4ea877737f9$var$y;
};
$97e0b4ea877737f9$export$839f9183b0465a69 = function() {
    return $97e0b4ea877737f9$var$h($97e0b4ea877737f9$var$r);
};
$97e0b4ea877737f9$export$72fdf0e06517287b = function(a) {
    switch($97e0b4ea877737f9$var$y){
        case 1:
        case 2:
        case 3:
            var b = 3;
            break;
        default:
            b = $97e0b4ea877737f9$var$y;
    }
    var c = $97e0b4ea877737f9$var$y;
    $97e0b4ea877737f9$var$y = b;
    try {
        return a();
    } finally{
        $97e0b4ea877737f9$var$y = c;
    }
};
$97e0b4ea877737f9$export$4b844e58a3e414b4 = function() {};
$97e0b4ea877737f9$export$816d2913ae6b83b1 = function() {};
$97e0b4ea877737f9$export$61bcfe829111a1d0 = function(a, b) {
    switch(a){
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            break;
        default:
            a = 3;
    }
    var c = $97e0b4ea877737f9$var$y;
    $97e0b4ea877737f9$var$y = a;
    try {
        return b();
    } finally{
        $97e0b4ea877737f9$var$y = c;
    }
};
$97e0b4ea877737f9$export$7ee8c9beb337bc3f = function(a, b, c) {
    var d = $97e0b4ea877737f9$export$c4744153514ff05d();
    "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
    switch(a){
        case 1:
            var e = -1;
            break;
        case 2:
            e = 250;
            break;
        case 5:
            e = 1073741823;
            break;
        case 4:
            e = 1E4;
            break;
        default:
            e = 5E3;
    }
    e = c + e;
    a = {
        id: $97e0b4ea877737f9$var$u++,
        callback: b,
        priorityLevel: a,
        startTime: c,
        expirationTime: e,
        sortIndex: -1
    };
    c > d ? (a.sortIndex = c, $97e0b4ea877737f9$var$f($97e0b4ea877737f9$var$t, a), null === $97e0b4ea877737f9$var$h($97e0b4ea877737f9$var$r) && a === $97e0b4ea877737f9$var$h($97e0b4ea877737f9$var$t) && ($97e0b4ea877737f9$var$B ? ($97e0b4ea877737f9$var$E($97e0b4ea877737f9$var$L), $97e0b4ea877737f9$var$L = -1) : $97e0b4ea877737f9$var$B = !0, $97e0b4ea877737f9$var$K($97e0b4ea877737f9$var$H, c - d))) : (a.sortIndex = e, $97e0b4ea877737f9$var$f($97e0b4ea877737f9$var$r, a), $97e0b4ea877737f9$var$A || $97e0b4ea877737f9$var$z || ($97e0b4ea877737f9$var$A = !0, $97e0b4ea877737f9$var$I($97e0b4ea877737f9$var$J)));
    return a;
};
$97e0b4ea877737f9$export$b5836b71941fa3ed = $97e0b4ea877737f9$var$M;
$97e0b4ea877737f9$export$cf845f2c119da08a = function(a) {
    var b = $97e0b4ea877737f9$var$y;
    return function() {
        var c = $97e0b4ea877737f9$var$y;
        $97e0b4ea877737f9$var$y = b;
        try {
            return a.apply(this, arguments);
        } finally{
            $97e0b4ea877737f9$var$y = c;
        }
    };
};

});



parcelRegister("kplZx", function(module, exports) {
// Source: http://jsfiddle.net/vWx8V/
// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes
/**
 * Conenience method returns corresponding value for given keyName or keyCode.
 *
 * @param {Mixed} keyCode {Number} or keyName {String}
 * @return {Mixed}
 * @api public
 */ function keyCode(searchInput) {
    // Keyboard Events
    if (searchInput && "object" === typeof searchInput) {
        var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode;
        if (hasKeyCode) searchInput = hasKeyCode;
    }
    // Numbers
    if ("number" === typeof searchInput) return names[searchInput];
    // Everything else (cast to string)
    var search = String(searchInput);
    // check codes
    var foundNamedKey = codes[search.toLowerCase()];
    if (foundNamedKey) return foundNamedKey;
    // check aliases
    var foundNamedKey = aliases[search.toLowerCase()];
    if (foundNamedKey) return foundNamedKey;
    // weird character?
    if (search.length === 1) return search.charCodeAt(0);
    return undefined;
}
/**
 * Compares a keyboard event with a given keyCode or keyName.
 *
 * @param {Event} event Keyboard event that should be tested
 * @param {Mixed} keyCode {Number} or keyName {String}
 * @return {Boolean}
 * @api public
 */ keyCode.isEventKey = function isEventKey(event, nameOrCode) {
    if (event && "object" === typeof event) {
        var keyCode = event.which || event.keyCode || event.charCode;
        if (keyCode === null || keyCode === undefined) return false;
        if (typeof nameOrCode === "string") {
            // check codes
            var foundNamedKey = codes[nameOrCode.toLowerCase()];
            if (foundNamedKey) return foundNamedKey === keyCode;
            // check aliases
            var foundNamedKey = aliases[nameOrCode.toLowerCase()];
            if (foundNamedKey) return foundNamedKey === keyCode;
        } else if (typeof nameOrCode === "number") return nameOrCode === keyCode;
        return false;
    }
};
exports = module.exports = keyCode;
/**
 * Get by name
 *
 *   exports.code['enter'] // => 13
 */ var codes = exports.code = exports.codes = {
    "backspace": 8,
    "tab": 9,
    "enter": 13,
    "shift": 16,
    "ctrl": 17,
    "alt": 18,
    "pause/break": 19,
    "caps lock": 20,
    "esc": 27,
    "space": 32,
    "page up": 33,
    "page down": 34,
    "end": 35,
    "home": 36,
    "left": 37,
    "up": 38,
    "right": 39,
    "down": 40,
    "insert": 45,
    "delete": 46,
    "command": 91,
    "left command": 91,
    "right command": 93,
    "numpad *": 106,
    "numpad +": 107,
    "numpad -": 109,
    "numpad .": 110,
    "numpad /": 111,
    "num lock": 144,
    "scroll lock": 145,
    "my computer": 182,
    "my calculator": 183,
    ";": 186,
    "=": 187,
    ",": 188,
    "-": 189,
    ".": 190,
    "/": 191,
    "`": 192,
    "[": 219,
    "\\": 220,
    "]": 221,
    "'": 222
};
// Helper aliases
var aliases = exports.aliases = {
    "windows": 91,
    "\u21E7": 16,
    "\u2325": 18,
    "\u2303": 17,
    "\u2318": 91,
    "ctl": 17,
    "control": 17,
    "option": 18,
    "pause": 19,
    "break": 19,
    "caps": 20,
    "return": 13,
    "escape": 27,
    "spc": 32,
    "spacebar": 32,
    "pgup": 33,
    "pgdn": 34,
    "ins": 45,
    "del": 46,
    "cmd": 91
};
/*!
 * Programatically add the following
 */ // lower case chars
for(i = 97; i < 123; i++)codes[String.fromCharCode(i)] = i - 32;
// numbers
for(var i = 48; i < 58; i++)codes[i - 48] = i;
// function keys
for(i = 1; i < 13; i++)codes["f" + i] = i + 111;
// numpad keys
for(i = 0; i < 10; i++)codes["numpad " + i] = i + 96;
/**
 * Get by code
 *
 *   exports.name[13] // => 'Enter'
 */ var names = exports.names = exports.title = {} // title for backward compat
;
// Create reverse mapping
for(i in codes)names[codes[i]] = i;
// Add aliases
for(var alias in aliases)codes[alias] = aliases[alias];

});

parcelRegister("4qCb0", function(module, exports) {
"use strict";

var $cktB7 = parcelRequire("cktB7");
var $3397342ea802c9f7$var$httpResponseHandler = function httpResponseHandler(callback, decodeResponseBody) {
    if (decodeResponseBody === void 0) decodeResponseBody = false;
    return function(err, response, responseBody) {
        // if the XHR failed, return that error
        if (err) {
            callback(err);
            return;
        } // if the HTTP status code is 4xx or 5xx, the request also failed
        if (response.statusCode >= 400 && response.statusCode <= 599) {
            var cause = responseBody;
            if (decodeResponseBody) {
                if ($cktB7.TextDecoder) {
                    var charset = $3397342ea802c9f7$var$getCharset(response.headers && response.headers["content-type"]);
                    try {
                        cause = new TextDecoder(charset).decode(responseBody);
                    } catch (e) {}
                } else cause = String.fromCharCode.apply(null, new Uint8Array(responseBody));
            }
            callback({
                cause: cause
            });
            return;
        } // otherwise, request succeeded
        callback(null, responseBody);
    };
};
function $3397342ea802c9f7$var$getCharset(contentTypeHeader) {
    if (contentTypeHeader === void 0) contentTypeHeader = "";
    return contentTypeHeader.toLowerCase().split(";").reduce(function(charset, contentType) {
        var _contentType$split = contentType.split("="), type = _contentType$split[0], value = _contentType$split[1];
        if (type.trim() === "charset") return value.trim();
        return charset;
    }, "utf-8");
}
module.exports = $3397342ea802c9f7$var$httpResponseHandler;

});
parcelRegister("cktB7", function(module, exports) {
var $8f9e4fc752a0926b$var$win;
if (typeof window !== "undefined") $8f9e4fc752a0926b$var$win = window;
else if (typeof $parcel$global !== "undefined") $8f9e4fc752a0926b$var$win = $parcel$global;
else if (typeof self !== "undefined") $8f9e4fc752a0926b$var$win = self;
else $8f9e4fc752a0926b$var$win = {};
module.exports = $8f9e4fc752a0926b$var$win;

});


parcelRegister("3feqK", function(module, exports) {
/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */ /* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */ 
var $hiZ2X = parcelRequire("hiZ2X");
var $25cdf762077d5179$var$_objCreate = Object.create || function() {
    function F() {}
    return function(o) {
        if (arguments.length !== 1) throw new Error("Object.create shim only accepts one parameter.");
        F.prototype = o;
        return new F();
    };
}();
// Creates a new ParserError object from an errorData object. The errorData
// object should have default code and message properties. The default message
// property can be overriden by passing in a message parameter.
// See ParsingError.Errors below for acceptable errors.
function $25cdf762077d5179$var$ParsingError(errorData, message) {
    this.name = "ParsingError";
    this.code = errorData.code;
    this.message = message || errorData.message;
}
$25cdf762077d5179$var$ParsingError.prototype = $25cdf762077d5179$var$_objCreate(Error.prototype);
$25cdf762077d5179$var$ParsingError.prototype.constructor = $25cdf762077d5179$var$ParsingError;
// ParsingError metadata for acceptable ParsingErrors.
$25cdf762077d5179$var$ParsingError.Errors = {
    BadSignature: {
        code: 0,
        message: "Malformed WebVTT signature."
    },
    BadTimeStamp: {
        code: 1,
        message: "Malformed time stamp."
    }
};
// Try to parse input as a time stamp.
function $25cdf762077d5179$var$parseTimeStamp(input) {
    function computeSeconds(h, m, s, f) {
        return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;
    }
    var m = input.match(/^(\d+):(\d{1,2})(:\d{1,2})?\.(\d{3})/);
    if (!m) return null;
    if (m[3]) // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]
    return computeSeconds(m[1], m[2], m[3].replace(":", ""), m[4]);
    else if (m[1] > 59) // Timestamp takes the form of [hours]:[minutes].[milliseconds]
    // First position is hours as it's over 59.
    return computeSeconds(m[1], m[2], 0, m[4]);
    else // Timestamp takes the form of [minutes]:[seconds].[milliseconds]
    return computeSeconds(0, m[1], m[2], m[4]);
}
// A settings object holds key/value pairs and will ignore anything but the first
// assignment to a specific key.
function $25cdf762077d5179$var$Settings() {
    this.values = $25cdf762077d5179$var$_objCreate(null);
}
$25cdf762077d5179$var$Settings.prototype = {
    // Only accept the first assignment to any key.
    set: function(k, v) {
        if (!this.get(k) && v !== "") this.values[k] = v;
    },
    // Return the value for a key, or a default value.
    // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
    // a number of possible default values as properties where 'defaultKey' is
    // the key of the property that will be chosen; otherwise it's assumed to be
    // a single value.
    get: function(k, dflt, defaultKey) {
        if (defaultKey) return this.has(k) ? this.values[k] : dflt[defaultKey];
        return this.has(k) ? this.values[k] : dflt;
    },
    // Check whether we have a value for a key.
    has: function(k) {
        return k in this.values;
    },
    // Accept a setting if its one of the given alternatives.
    alt: function(k, v, a) {
        for(var n = 0; n < a.length; ++n)if (v === a[n]) {
            this.set(k, v);
            break;
        }
    },
    // Accept a setting if its a valid (signed) integer.
    integer: function(k, v) {
        if (/^-?\d+$/.test(v)) this.set(k, parseInt(v, 10));
    },
    // Accept a setting if its a valid percentage.
    percent: function(k, v) {
        var m;
        if (m = v.match(/^([\d]{1,3})(\.[\d]*)?%$/)) {
            v = parseFloat(v);
            if (v >= 0 && v <= 100) {
                this.set(k, v);
                return true;
            }
        }
        return false;
    }
};
// Helper function to parse input into groups separated by 'groupDelim', and
// interprete each group as a key/value pair separated by 'keyValueDelim'.
function $25cdf762077d5179$var$parseOptions(input, callback, keyValueDelim, groupDelim) {
    var groups = groupDelim ? input.split(groupDelim) : [
        input
    ];
    for(var i in groups){
        if (typeof groups[i] !== "string") continue;
        var kv = groups[i].split(keyValueDelim);
        if (kv.length !== 2) continue;
        var k = kv[0].trim();
        var v = kv[1].trim();
        callback(k, v);
    }
}
function $25cdf762077d5179$var$parseCue(input, cue, regionList) {
    // Remember the original input if we need to throw an error.
    var oInput = input;
    // 4.1 WebVTT timestamp
    function consumeTimeStamp() {
        var ts = $25cdf762077d5179$var$parseTimeStamp(input);
        if (ts === null) throw new $25cdf762077d5179$var$ParsingError($25cdf762077d5179$var$ParsingError.Errors.BadTimeStamp, "Malformed timestamp: " + oInput);
        // Remove time stamp from input.
        input = input.replace(/^[^\sa-zA-Z-]+/, "");
        return ts;
    }
    // 4.4.2 WebVTT cue settings
    function consumeCueSettings(input, cue) {
        var settings = new $25cdf762077d5179$var$Settings();
        $25cdf762077d5179$var$parseOptions(input, function(k, v) {
            switch(k){
                case "region":
                    // Find the last region we parsed with the same region id.
                    for(var i = regionList.length - 1; i >= 0; i--)if (regionList[i].id === v) {
                        settings.set(k, regionList[i].region);
                        break;
                    }
                    break;
                case "vertical":
                    settings.alt(k, v, [
                        "rl",
                        "lr"
                    ]);
                    break;
                case "line":
                    var vals = v.split(","), vals0 = vals[0];
                    settings.integer(k, vals0);
                    settings.percent(k, vals0) && settings.set("snapToLines", false);
                    settings.alt(k, vals0, [
                        "auto"
                    ]);
                    if (vals.length === 2) settings.alt("lineAlign", vals[1], [
                        "start",
                        "center",
                        "end"
                    ]);
                    break;
                case "position":
                    vals = v.split(",");
                    settings.percent(k, vals[0]);
                    if (vals.length === 2) settings.alt("positionAlign", vals[1], [
                        "start",
                        "center",
                        "end"
                    ]);
                    break;
                case "size":
                    settings.percent(k, v);
                    break;
                case "align":
                    settings.alt(k, v, [
                        "start",
                        "center",
                        "end",
                        "left",
                        "right"
                    ]);
                    break;
            }
        }, /:/, /\s/);
        // Apply default values for any missing fields.
        cue.region = settings.get("region", null);
        cue.vertical = settings.get("vertical", "");
        try {
            cue.line = settings.get("line", "auto");
        } catch (e) {}
        cue.lineAlign = settings.get("lineAlign", "start");
        cue.snapToLines = settings.get("snapToLines", true);
        cue.size = settings.get("size", 100);
        // Safari still uses the old middle value and won't accept center
        try {
            cue.align = settings.get("align", "center");
        } catch (e) {
            cue.align = settings.get("align", "middle");
        }
        try {
            cue.position = settings.get("position", "auto");
        } catch (e) {
            cue.position = settings.get("position", {
                start: 0,
                left: 0,
                center: 50,
                middle: 50,
                end: 100,
                right: 100
            }, cue.align);
        }
        cue.positionAlign = settings.get("positionAlign", {
            start: "start",
            left: "start",
            center: "center",
            middle: "center",
            end: "end",
            right: "end"
        }, cue.align);
    }
    function skipWhitespace() {
        input = input.replace(/^\s+/, "");
    }
    // 4.1 WebVTT cue timings.
    skipWhitespace();
    cue.startTime = consumeTimeStamp(); // (1) collect cue start time
    skipWhitespace();
    if (input.substr(0, 3) !== "-->") throw new $25cdf762077d5179$var$ParsingError($25cdf762077d5179$var$ParsingError.Errors.BadTimeStamp, "Malformed time stamp (time stamps must be separated by '-->'): " + oInput);
    input = input.substr(3);
    skipWhitespace();
    cue.endTime = consumeTimeStamp(); // (5) collect cue end time
    // 4.1 WebVTT cue settings list.
    skipWhitespace();
    consumeCueSettings(input, cue);
}
// When evaluating this file as part of a Webpack bundle for server
// side rendering, `document` is an empty object.
var $25cdf762077d5179$var$TEXTAREA_ELEMENT = $hiZ2X.createElement && $hiZ2X.createElement("textarea");
var $25cdf762077d5179$var$TAG_NAME = {
    c: "span",
    i: "i",
    b: "b",
    u: "u",
    ruby: "ruby",
    rt: "rt",
    v: "span",
    lang: "span"
};
// 5.1 default text color
// 5.2 default text background color is equivalent to text color with bg_ prefix
var $25cdf762077d5179$var$DEFAULT_COLOR_CLASS = {
    white: "rgba(255,255,255,1)",
    lime: "rgba(0,255,0,1)",
    cyan: "rgba(0,255,255,1)",
    red: "rgba(255,0,0,1)",
    yellow: "rgba(255,255,0,1)",
    magenta: "rgba(255,0,255,1)",
    blue: "rgba(0,0,255,1)",
    black: "rgba(0,0,0,1)"
};
var $25cdf762077d5179$var$TAG_ANNOTATION = {
    v: "title",
    lang: "lang"
};
var $25cdf762077d5179$var$NEEDS_PARENT = {
    rt: "ruby"
};
// Parse content into a document fragment.
function $25cdf762077d5179$var$parseContent(window, input) {
    function nextToken() {
        // Check for end-of-string.
        if (!input) return null;
        // Consume 'n' characters from the input.
        function consume(result) {
            input = input.substr(result.length);
            return result;
        }
        var m = input.match(/^([^<]*)(<[^>]*>?)?/);
        // If there is some text before the next tag, return it, otherwise return
        // the tag.
        return consume(m[1] ? m[1] : m[2]);
    }
    function unescape(s) {
        $25cdf762077d5179$var$TEXTAREA_ELEMENT.innerHTML = s;
        s = $25cdf762077d5179$var$TEXTAREA_ELEMENT.textContent;
        $25cdf762077d5179$var$TEXTAREA_ELEMENT.textContent = "";
        return s;
    }
    function shouldAdd(current, element) {
        return !$25cdf762077d5179$var$NEEDS_PARENT[element.localName] || $25cdf762077d5179$var$NEEDS_PARENT[element.localName] === current.localName;
    }
    // Create an element for this tag.
    function createElement(type, annotation) {
        var tagName = $25cdf762077d5179$var$TAG_NAME[type];
        if (!tagName) return null;
        var element = window.document.createElement(tagName);
        var name = $25cdf762077d5179$var$TAG_ANNOTATION[type];
        if (name && annotation) element[name] = annotation.trim();
        return element;
    }
    var rootDiv = window.document.createElement("div"), current = rootDiv, t, tagStack = [];
    while((t = nextToken()) !== null){
        if (t[0] === "<") {
            if (t[1] === "/") {
                // If the closing tag matches, move back up to the parent node.
                if (tagStack.length && tagStack[tagStack.length - 1] === t.substr(2).replace(">", "")) {
                    tagStack.pop();
                    current = current.parentNode;
                }
                continue;
            }
            var ts = $25cdf762077d5179$var$parseTimeStamp(t.substr(1, t.length - 2));
            var node;
            if (ts) {
                // Timestamps are lead nodes as well.
                node = window.document.createProcessingInstruction("timestamp", ts);
                current.appendChild(node);
                continue;
            }
            var m = t.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
            // If we can't parse the tag, skip to the next tag.
            if (!m) continue;
            // Try to construct an element, and ignore the tag if we couldn't.
            node = createElement(m[1], m[3]);
            if (!node) continue;
            // Determine if the tag should be added based on the context of where it
            // is placed in the cuetext.
            if (!shouldAdd(current, node)) continue;
            // Set the class list (as a list of classes, separated by space).
            if (m[2]) {
                var classes = m[2].split(".");
                classes.forEach(function(cl) {
                    var bgColor = /^bg_/.test(cl);
                    // slice out `bg_` if it's a background color
                    var colorName = bgColor ? cl.slice(3) : cl;
                    if ($25cdf762077d5179$var$DEFAULT_COLOR_CLASS.hasOwnProperty(colorName)) {
                        var propName = bgColor ? "background-color" : "color";
                        var propValue = $25cdf762077d5179$var$DEFAULT_COLOR_CLASS[colorName];
                        node.style[propName] = propValue;
                    }
                });
                node.className = classes.join(" ");
            }
            // Append the node to the current node, and enter the scope of the new
            // node.
            tagStack.push(m[1]);
            current.appendChild(node);
            current = node;
            continue;
        }
        // Text nodes are leaf nodes.
        current.appendChild(window.document.createTextNode(unescape(t)));
    }
    return rootDiv;
}
// This is a list of all the Unicode characters that have a strong
// right-to-left category. What this means is that these characters are
// written right-to-left for sure. It was generated by pulling all the strong
// right-to-left characters out of the Unicode data table. That table can
// found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt
var $25cdf762077d5179$var$strongRTLRanges = [
    [
        0x5be,
        0x5be
    ],
    [
        0x5c0,
        0x5c0
    ],
    [
        0x5c3,
        0x5c3
    ],
    [
        0x5c6,
        0x5c6
    ],
    [
        0x5d0,
        0x5ea
    ],
    [
        0x5f0,
        0x5f4
    ],
    [
        0x608,
        0x608
    ],
    [
        0x60b,
        0x60b
    ],
    [
        0x60d,
        0x60d
    ],
    [
        0x61b,
        0x61b
    ],
    [
        0x61e,
        0x64a
    ],
    [
        0x66d,
        0x66f
    ],
    [
        0x671,
        0x6d5
    ],
    [
        0x6e5,
        0x6e6
    ],
    [
        0x6ee,
        0x6ef
    ],
    [
        0x6fa,
        0x70d
    ],
    [
        0x70f,
        0x710
    ],
    [
        0x712,
        0x72f
    ],
    [
        0x74d,
        0x7a5
    ],
    [
        0x7b1,
        0x7b1
    ],
    [
        0x7c0,
        0x7ea
    ],
    [
        0x7f4,
        0x7f5
    ],
    [
        0x7fa,
        0x7fa
    ],
    [
        0x800,
        0x815
    ],
    [
        0x81a,
        0x81a
    ],
    [
        0x824,
        0x824
    ],
    [
        0x828,
        0x828
    ],
    [
        0x830,
        0x83e
    ],
    [
        0x840,
        0x858
    ],
    [
        0x85e,
        0x85e
    ],
    [
        0x8a0,
        0x8a0
    ],
    [
        0x8a2,
        0x8ac
    ],
    [
        0x200f,
        0x200f
    ],
    [
        0xfb1d,
        0xfb1d
    ],
    [
        0xfb1f,
        0xfb28
    ],
    [
        0xfb2a,
        0xfb36
    ],
    [
        0xfb38,
        0xfb3c
    ],
    [
        0xfb3e,
        0xfb3e
    ],
    [
        0xfb40,
        0xfb41
    ],
    [
        0xfb43,
        0xfb44
    ],
    [
        0xfb46,
        0xfbc1
    ],
    [
        0xfbd3,
        0xfd3d
    ],
    [
        0xfd50,
        0xfd8f
    ],
    [
        0xfd92,
        0xfdc7
    ],
    [
        0xfdf0,
        0xfdfc
    ],
    [
        0xfe70,
        0xfe74
    ],
    [
        0xfe76,
        0xfefc
    ],
    [
        0x10800,
        0x10805
    ],
    [
        0x10808,
        0x10808
    ],
    [
        0x1080a,
        0x10835
    ],
    [
        0x10837,
        0x10838
    ],
    [
        0x1083c,
        0x1083c
    ],
    [
        0x1083f,
        0x10855
    ],
    [
        0x10857,
        0x1085f
    ],
    [
        0x10900,
        0x1091b
    ],
    [
        0x10920,
        0x10939
    ],
    [
        0x1093f,
        0x1093f
    ],
    [
        0x10980,
        0x109b7
    ],
    [
        0x109be,
        0x109bf
    ],
    [
        0x10a00,
        0x10a00
    ],
    [
        0x10a10,
        0x10a13
    ],
    [
        0x10a15,
        0x10a17
    ],
    [
        0x10a19,
        0x10a33
    ],
    [
        0x10a40,
        0x10a47
    ],
    [
        0x10a50,
        0x10a58
    ],
    [
        0x10a60,
        0x10a7f
    ],
    [
        0x10b00,
        0x10b35
    ],
    [
        0x10b40,
        0x10b55
    ],
    [
        0x10b58,
        0x10b72
    ],
    [
        0x10b78,
        0x10b7f
    ],
    [
        0x10c00,
        0x10c48
    ],
    [
        0x1ee00,
        0x1ee03
    ],
    [
        0x1ee05,
        0x1ee1f
    ],
    [
        0x1ee21,
        0x1ee22
    ],
    [
        0x1ee24,
        0x1ee24
    ],
    [
        0x1ee27,
        0x1ee27
    ],
    [
        0x1ee29,
        0x1ee32
    ],
    [
        0x1ee34,
        0x1ee37
    ],
    [
        0x1ee39,
        0x1ee39
    ],
    [
        0x1ee3b,
        0x1ee3b
    ],
    [
        0x1ee42,
        0x1ee42
    ],
    [
        0x1ee47,
        0x1ee47
    ],
    [
        0x1ee49,
        0x1ee49
    ],
    [
        0x1ee4b,
        0x1ee4b
    ],
    [
        0x1ee4d,
        0x1ee4f
    ],
    [
        0x1ee51,
        0x1ee52
    ],
    [
        0x1ee54,
        0x1ee54
    ],
    [
        0x1ee57,
        0x1ee57
    ],
    [
        0x1ee59,
        0x1ee59
    ],
    [
        0x1ee5b,
        0x1ee5b
    ],
    [
        0x1ee5d,
        0x1ee5d
    ],
    [
        0x1ee5f,
        0x1ee5f
    ],
    [
        0x1ee61,
        0x1ee62
    ],
    [
        0x1ee64,
        0x1ee64
    ],
    [
        0x1ee67,
        0x1ee6a
    ],
    [
        0x1ee6c,
        0x1ee72
    ],
    [
        0x1ee74,
        0x1ee77
    ],
    [
        0x1ee79,
        0x1ee7c
    ],
    [
        0x1ee7e,
        0x1ee7e
    ],
    [
        0x1ee80,
        0x1ee89
    ],
    [
        0x1ee8b,
        0x1ee9b
    ],
    [
        0x1eea1,
        0x1eea3
    ],
    [
        0x1eea5,
        0x1eea9
    ],
    [
        0x1eeab,
        0x1eebb
    ],
    [
        0x10fffd,
        0x10fffd
    ]
];
function $25cdf762077d5179$var$isStrongRTLChar(charCode) {
    for(var i = 0; i < $25cdf762077d5179$var$strongRTLRanges.length; i++){
        var currentRange = $25cdf762077d5179$var$strongRTLRanges[i];
        if (charCode >= currentRange[0] && charCode <= currentRange[1]) return true;
    }
    return false;
}
function $25cdf762077d5179$var$determineBidi(cueDiv) {
    var nodeStack = [], text = "", charCode;
    if (!cueDiv || !cueDiv.childNodes) return "ltr";
    function pushNodes(nodeStack, node) {
        for(var i = node.childNodes.length - 1; i >= 0; i--)nodeStack.push(node.childNodes[i]);
    }
    function nextTextNode(nodeStack) {
        if (!nodeStack || !nodeStack.length) return null;
        var node = nodeStack.pop(), text = node.textContent || node.innerText;
        if (text) {
            // TODO: This should match all unicode type B characters (paragraph
            // separator characters). See issue #115.
            var m = text.match(/^.*(\n|\r)/);
            if (m) {
                nodeStack.length = 0;
                return m[0];
            }
            return text;
        }
        if (node.tagName === "ruby") return nextTextNode(nodeStack);
        if (node.childNodes) {
            pushNodes(nodeStack, node);
            return nextTextNode(nodeStack);
        }
    }
    pushNodes(nodeStack, cueDiv);
    while(text = nextTextNode(nodeStack))for(var i = 0; i < text.length; i++){
        charCode = text.charCodeAt(i);
        if ($25cdf762077d5179$var$isStrongRTLChar(charCode)) return "rtl";
    }
    return "ltr";
}
function $25cdf762077d5179$var$computeLinePos(cue) {
    if (typeof cue.line === "number" && (cue.snapToLines || cue.line >= 0 && cue.line <= 100)) return cue.line;
    if (!cue.track || !cue.track.textTrackList || !cue.track.textTrackList.mediaElement) return -1;
    var track = cue.track, trackList = track.textTrackList, count = 0;
    for(var i = 0; i < trackList.length && trackList[i] !== track; i++)if (trackList[i].mode === "showing") count++;
    return ++count * -1;
}
function $25cdf762077d5179$var$StyleBox() {}
// Apply styles to a div. If there is no div passed then it defaults to the
// div on 'this'.
$25cdf762077d5179$var$StyleBox.prototype.applyStyles = function(styles, div) {
    div = div || this.div;
    for(var prop in styles)if (styles.hasOwnProperty(prop)) div.style[prop] = styles[prop];
};
$25cdf762077d5179$var$StyleBox.prototype.formatStyle = function(val, unit) {
    return val === 0 ? 0 : val + unit;
};
// Constructs the computed display state of the cue (a div). Places the div
// into the overlay which should be a block level element (usually a div).
function $25cdf762077d5179$var$CueStyleBox(window, cue, styleOptions) {
    $25cdf762077d5179$var$StyleBox.call(this);
    this.cue = cue;
    // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will
    // have inline positioning and will function as the cue background box.
    this.cueDiv = $25cdf762077d5179$var$parseContent(window, cue.text);
    var styles = {
        color: "rgba(255, 255, 255, 1)",
        backgroundColor: "rgba(0, 0, 0, 0.8)",
        position: "relative",
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
        display: "inline",
        writingMode: cue.vertical === "" ? "horizontal-tb" : cue.vertical === "lr" ? "vertical-lr" : "vertical-rl",
        unicodeBidi: "plaintext"
    };
    this.applyStyles(styles, this.cueDiv);
    // Create an absolutely positioned div that will be used to position the cue
    // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS
    // mirrors of them except middle instead of center on Safari.
    this.div = window.document.createElement("div");
    styles = {
        direction: $25cdf762077d5179$var$determineBidi(this.cueDiv),
        writingMode: cue.vertical === "" ? "horizontal-tb" : cue.vertical === "lr" ? "vertical-lr" : "vertical-rl",
        unicodeBidi: "plaintext",
        textAlign: cue.align === "middle" ? "center" : cue.align,
        font: styleOptions.font,
        whiteSpace: "pre-line",
        position: "absolute"
    };
    this.applyStyles(styles);
    this.div.appendChild(this.cueDiv);
    // Calculate the distance from the reference edge of the viewport to the text
    // position of the cue box. The reference edge will be resolved later when
    // the box orientation styles are applied.
    var textPos = 0;
    switch(cue.positionAlign){
        case "start":
        case "line-left":
            textPos = cue.position;
            break;
        case "center":
            textPos = cue.position - cue.size / 2;
            break;
        case "end":
        case "line-right":
            textPos = cue.position - cue.size;
            break;
    }
    // Horizontal box orientation; textPos is the distance from the left edge of the
    // area to the left edge of the box and cue.size is the distance extending to
    // the right from there.
    if (cue.vertical === "") this.applyStyles({
        left: this.formatStyle(textPos, "%"),
        width: this.formatStyle(cue.size, "%")
    });
    else this.applyStyles({
        top: this.formatStyle(textPos, "%"),
        height: this.formatStyle(cue.size, "%")
    });
    this.move = function(box) {
        this.applyStyles({
            top: this.formatStyle(box.top, "px"),
            bottom: this.formatStyle(box.bottom, "px"),
            left: this.formatStyle(box.left, "px"),
            right: this.formatStyle(box.right, "px"),
            height: this.formatStyle(box.height, "px"),
            width: this.formatStyle(box.width, "px")
        });
    };
}
$25cdf762077d5179$var$CueStyleBox.prototype = $25cdf762077d5179$var$_objCreate($25cdf762077d5179$var$StyleBox.prototype);
$25cdf762077d5179$var$CueStyleBox.prototype.constructor = $25cdf762077d5179$var$CueStyleBox;
// Represents the co-ordinates of an Element in a way that we can easily
// compute things with such as if it overlaps or intersects with another Element.
// Can initialize it with either a StyleBox or another BoxPosition.
function $25cdf762077d5179$var$BoxPosition(obj) {
    // Either a BoxPosition was passed in and we need to copy it, or a StyleBox
    // was passed in and we need to copy the results of 'getBoundingClientRect'
    // as the object returned is readonly. All co-ordinate values are in reference
    // to the viewport origin (top left).
    var lh, height, width, top;
    if (obj.div) {
        height = obj.div.offsetHeight;
        width = obj.div.offsetWidth;
        top = obj.div.offsetTop;
        var rects = (rects = obj.div.childNodes) && (rects = rects[0]) && rects.getClientRects && rects.getClientRects();
        obj = obj.div.getBoundingClientRect();
        // In certain cases the outter div will be slightly larger then the sum of
        // the inner div's lines. This could be due to bold text, etc, on some platforms.
        // In this case we should get the average line height and use that. This will
        // result in the desired behaviour.
        lh = rects ? Math.max(rects[0] && rects[0].height || 0, obj.height / rects.length) : 0;
    }
    this.left = obj.left;
    this.right = obj.right;
    this.top = obj.top || top;
    this.height = obj.height || height;
    this.bottom = obj.bottom || top + (obj.height || height);
    this.width = obj.width || width;
    this.lineHeight = lh !== undefined ? lh : obj.lineHeight;
}
// Move the box along a particular axis. Optionally pass in an amount to move
// the box. If no amount is passed then the default is the line height of the
// box.
$25cdf762077d5179$var$BoxPosition.prototype.move = function(axis, toMove) {
    toMove = toMove !== undefined ? toMove : this.lineHeight;
    switch(axis){
        case "+x":
            this.left += toMove;
            this.right += toMove;
            break;
        case "-x":
            this.left -= toMove;
            this.right -= toMove;
            break;
        case "+y":
            this.top += toMove;
            this.bottom += toMove;
            break;
        case "-y":
            this.top -= toMove;
            this.bottom -= toMove;
            break;
    }
};
// Check if this box overlaps another box, b2.
$25cdf762077d5179$var$BoxPosition.prototype.overlaps = function(b2) {
    return this.left < b2.right && this.right > b2.left && this.top < b2.bottom && this.bottom > b2.top;
};
// Check if this box overlaps any other boxes in boxes.
$25cdf762077d5179$var$BoxPosition.prototype.overlapsAny = function(boxes) {
    for(var i = 0; i < boxes.length; i++){
        if (this.overlaps(boxes[i])) return true;
    }
    return false;
};
// Check if this box is within another box.
$25cdf762077d5179$var$BoxPosition.prototype.within = function(container) {
    return this.top >= container.top && this.bottom <= container.bottom && this.left >= container.left && this.right <= container.right;
};
// Check if this box is entirely within the container or it is overlapping
// on the edge opposite of the axis direction passed. For example, if "+x" is
// passed and the box is overlapping on the left edge of the container, then
// return true.
$25cdf762077d5179$var$BoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {
    switch(axis){
        case "+x":
            return this.left < container.left;
        case "-x":
            return this.right > container.right;
        case "+y":
            return this.top < container.top;
        case "-y":
            return this.bottom > container.bottom;
    }
};
// Find the percentage of the area that this box is overlapping with another
// box.
$25cdf762077d5179$var$BoxPosition.prototype.intersectPercentage = function(b2) {
    var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)), y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)), intersectArea = x * y;
    return intersectArea / (this.height * this.width);
};
// Convert the positions from this box to CSS compatible positions using
// the reference container's positions. This has to be done because this
// box's positions are in reference to the viewport origin, whereas, CSS
// values are in referecne to their respective edges.
$25cdf762077d5179$var$BoxPosition.prototype.toCSSCompatValues = function(reference) {
    return {
        top: this.top - reference.top,
        bottom: reference.bottom - this.bottom,
        left: this.left - reference.left,
        right: reference.right - this.right,
        height: this.height,
        width: this.width
    };
};
// Get an object that represents the box's position without anything extra.
// Can pass a StyleBox, HTMLElement, or another BoxPositon.
$25cdf762077d5179$var$BoxPosition.getSimpleBoxPosition = function(obj) {
    var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;
    var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;
    var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;
    obj = obj.div ? obj.div.getBoundingClientRect() : obj.tagName ? obj.getBoundingClientRect() : obj;
    var ret = {
        left: obj.left,
        right: obj.right,
        top: obj.top || top,
        height: obj.height || height,
        bottom: obj.bottom || top + (obj.height || height),
        width: obj.width || width
    };
    return ret;
};
// Move a StyleBox to its specified, or next best, position. The containerBox
// is the box that contains the StyleBox, such as a div. boxPositions are
// a list of other boxes that the styleBox can't overlap with.
function $25cdf762077d5179$var$moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {
    // Find the best position for a cue box, b, on the video. The axis parameter
    // is a list of axis, the order of which, it will move the box along. For example:
    // Passing ["+x", "-x"] will move the box first along the x axis in the positive
    // direction. If it doesn't find a good position for it there it will then move
    // it along the x axis in the negative direction.
    function findBestPosition(b, axis) {
        var bestPosition, specifiedPosition = new $25cdf762077d5179$var$BoxPosition(b), percentage = 1; // Highest possible so the first thing we get is better.
        for(var i = 0; i < axis.length; i++){
            while(b.overlapsOppositeAxis(containerBox, axis[i]) || b.within(containerBox) && b.overlapsAny(boxPositions))b.move(axis[i]);
            // We found a spot where we aren't overlapping anything. This is our
            // best position.
            if (b.within(containerBox)) return b;
            var p = b.intersectPercentage(containerBox);
            // If we're outside the container box less then we were on our last try
            // then remember this position as the best position.
            if (percentage > p) {
                bestPosition = new $25cdf762077d5179$var$BoxPosition(b);
                percentage = p;
            }
            // Reset the box position to the specified position.
            b = new $25cdf762077d5179$var$BoxPosition(specifiedPosition);
        }
        return bestPosition || specifiedPosition;
    }
    var boxPosition = new $25cdf762077d5179$var$BoxPosition(styleBox), cue = styleBox.cue, linePos = $25cdf762077d5179$var$computeLinePos(cue), axis = [];
    // If we have a line number to align the cue to.
    if (cue.snapToLines) {
        var size;
        switch(cue.vertical){
            case "":
                axis = [
                    "+y",
                    "-y"
                ];
                size = "height";
                break;
            case "rl":
                axis = [
                    "+x",
                    "-x"
                ];
                size = "width";
                break;
            case "lr":
                axis = [
                    "-x",
                    "+x"
                ];
                size = "width";
                break;
        }
        var step = boxPosition.lineHeight, position = step * Math.round(linePos), maxPosition = containerBox[size] + step, initialAxis = axis[0];
        // If the specified intial position is greater then the max position then
        // clamp the box to the amount of steps it would take for the box to
        // reach the max position.
        if (Math.abs(position) > maxPosition) {
            position = position < 0 ? -1 : 1;
            position *= Math.ceil(maxPosition / step) * step;
        }
        // If computed line position returns negative then line numbers are
        // relative to the bottom of the video instead of the top. Therefore, we
        // need to increase our initial position by the length or width of the
        // video, depending on the writing direction, and reverse our axis directions.
        if (linePos < 0) {
            position += cue.vertical === "" ? containerBox.height : containerBox.width;
            axis = axis.reverse();
        }
        // Move the box to the specified position. This may not be its best
        // position.
        boxPosition.move(initialAxis, position);
    } else {
        // If we have a percentage line value for the cue.
        var calculatedPercentage = boxPosition.lineHeight / containerBox.height * 100;
        switch(cue.lineAlign){
            case "center":
                linePos -= calculatedPercentage / 2;
                break;
            case "end":
                linePos -= calculatedPercentage;
                break;
        }
        // Apply initial line position to the cue box.
        switch(cue.vertical){
            case "":
                styleBox.applyStyles({
                    top: styleBox.formatStyle(linePos, "%")
                });
                break;
            case "rl":
                styleBox.applyStyles({
                    left: styleBox.formatStyle(linePos, "%")
                });
                break;
            case "lr":
                styleBox.applyStyles({
                    right: styleBox.formatStyle(linePos, "%")
                });
                break;
        }
        axis = [
            "+y",
            "-x",
            "+x",
            "-y"
        ];
        // Get the box position again after we've applied the specified positioning
        // to it.
        boxPosition = new $25cdf762077d5179$var$BoxPosition(styleBox);
    }
    var bestPosition = findBestPosition(boxPosition, axis);
    styleBox.move(bestPosition.toCSSCompatValues(containerBox));
}
function $25cdf762077d5179$var$WebVTT() {
// Nothing
}
// Helper to allow strings to be decoded instead of the default binary utf8 data.
$25cdf762077d5179$var$WebVTT.StringDecoder = function() {
    return {
        decode: function(data) {
            if (!data) return "";
            if (typeof data !== "string") throw new Error("Error - expected string data.");
            return decodeURIComponent(encodeURIComponent(data));
        }
    };
};
$25cdf762077d5179$var$WebVTT.convertCueToDOMTree = function(window, cuetext) {
    if (!window || !cuetext) return null;
    return $25cdf762077d5179$var$parseContent(window, cuetext);
};
var $25cdf762077d5179$var$FONT_SIZE_PERCENT = 0.05;
var $25cdf762077d5179$var$FONT_STYLE = "sans-serif";
var $25cdf762077d5179$var$CUE_BACKGROUND_PADDING = "1.5%";
// Runs the processing model over the cues and regions passed to it.
// @param overlay A block level element (usually a div) that the computed cues
//                and regions will be placed into.
$25cdf762077d5179$var$WebVTT.processCues = function(window, cues, overlay) {
    if (!window || !cues || !overlay) return null;
    // Remove all previous children.
    while(overlay.firstChild)overlay.removeChild(overlay.firstChild);
    var paddedOverlay = window.document.createElement("div");
    paddedOverlay.style.position = "absolute";
    paddedOverlay.style.left = "0";
    paddedOverlay.style.right = "0";
    paddedOverlay.style.top = "0";
    paddedOverlay.style.bottom = "0";
    paddedOverlay.style.margin = $25cdf762077d5179$var$CUE_BACKGROUND_PADDING;
    overlay.appendChild(paddedOverlay);
    // Determine if we need to compute the display states of the cues. This could
    // be the case if a cue's state has been changed since the last computation or
    // if it has not been computed yet.
    function shouldCompute(cues) {
        for(var i = 0; i < cues.length; i++){
            if (cues[i].hasBeenReset || !cues[i].displayState) return true;
        }
        return false;
    }
    // We don't need to recompute the cues' display states. Just reuse them.
    if (!shouldCompute(cues)) {
        for(var i = 0; i < cues.length; i++)paddedOverlay.appendChild(cues[i].displayState);
        return;
    }
    var boxPositions = [], containerBox = $25cdf762077d5179$var$BoxPosition.getSimpleBoxPosition(paddedOverlay), fontSize = Math.round(containerBox.height * $25cdf762077d5179$var$FONT_SIZE_PERCENT * 100) / 100;
    var styleOptions = {
        font: fontSize + "px " + $25cdf762077d5179$var$FONT_STYLE
    };
    (function() {
        var styleBox, cue;
        for(var i = 0; i < cues.length; i++){
            cue = cues[i];
            // Compute the intial position and styles of the cue div.
            styleBox = new $25cdf762077d5179$var$CueStyleBox(window, cue, styleOptions);
            paddedOverlay.appendChild(styleBox.div);
            // Move the cue div to it's correct line position.
            $25cdf762077d5179$var$moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);
            // Remember the computed div so that we don't have to recompute it later
            // if we don't have too.
            cue.displayState = styleBox.div;
            boxPositions.push($25cdf762077d5179$var$BoxPosition.getSimpleBoxPosition(styleBox));
        }
    })();
};
$25cdf762077d5179$var$WebVTT.Parser = function(window, vttjs, decoder) {
    if (!decoder) {
        decoder = vttjs;
        vttjs = {};
    }
    if (!vttjs) vttjs = {};
    this.window = window;
    this.vttjs = vttjs;
    this.state = "INITIAL";
    this.buffer = "";
    this.decoder = decoder || new TextDecoder("utf8");
    this.regionList = [];
};
$25cdf762077d5179$var$WebVTT.Parser.prototype = {
    // If the error is a ParsingError then report it to the consumer if
    // possible. If it's not a ParsingError then throw it like normal.
    reportOrThrowError: function(e) {
        if (e instanceof $25cdf762077d5179$var$ParsingError) this.onparsingerror && this.onparsingerror(e);
        else throw e;
    },
    parse: function(data) {
        var self = this;
        // If there is no data then we won't decode it, but will just try to parse
        // whatever is in buffer already. This may occur in circumstances, for
        // example when flush() is called.
        if (data) // Try to decode the data that we received.
        self.buffer += self.decoder.decode(data, {
            stream: true
        });
        function collectNextLine() {
            var buffer = self.buffer;
            var pos = 0;
            while(pos < buffer.length && buffer[pos] !== "\r" && buffer[pos] !== "\n")++pos;
            var line = buffer.substr(0, pos);
            // Advance the buffer early in case we fail below.
            if (buffer[pos] === "\r") ++pos;
            if (buffer[pos] === "\n") ++pos;
            self.buffer = buffer.substr(pos);
            return line;
        }
        // 3.4 WebVTT region and WebVTT region settings syntax
        function parseRegion(input) {
            var settings = new $25cdf762077d5179$var$Settings();
            $25cdf762077d5179$var$parseOptions(input, function(k, v) {
                switch(k){
                    case "id":
                        settings.set(k, v);
                        break;
                    case "width":
                        settings.percent(k, v);
                        break;
                    case "lines":
                        settings.integer(k, v);
                        break;
                    case "regionanchor":
                    case "viewportanchor":
                        var xy = v.split(",");
                        if (xy.length !== 2) break;
                        // We have to make sure both x and y parse, so use a temporary
                        // settings object here.
                        var anchor = new $25cdf762077d5179$var$Settings();
                        anchor.percent("x", xy[0]);
                        anchor.percent("y", xy[1]);
                        if (!anchor.has("x") || !anchor.has("y")) break;
                        settings.set(k + "X", anchor.get("x"));
                        settings.set(k + "Y", anchor.get("y"));
                        break;
                    case "scroll":
                        settings.alt(k, v, [
                            "up"
                        ]);
                        break;
                }
            }, /=/, /\s/);
            // Create the region, using default values for any values that were not
            // specified.
            if (settings.has("id")) {
                var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();
                region.width = settings.get("width", 100);
                region.lines = settings.get("lines", 3);
                region.regionAnchorX = settings.get("regionanchorX", 0);
                region.regionAnchorY = settings.get("regionanchorY", 100);
                region.viewportAnchorX = settings.get("viewportanchorX", 0);
                region.viewportAnchorY = settings.get("viewportanchorY", 100);
                region.scroll = settings.get("scroll", "");
                // Register the region.
                self.onregion && self.onregion(region);
                // Remember the VTTRegion for later in case we parse any VTTCues that
                // reference it.
                self.regionList.push({
                    id: settings.get("id"),
                    region: region
                });
            }
        }
        // draft-pantos-http-live-streaming-20
        // https://tools.ietf.org/html/draft-pantos-http-live-streaming-20#section-3.5
        // 3.5 WebVTT
        function parseTimestampMap(input) {
            var settings = new $25cdf762077d5179$var$Settings();
            $25cdf762077d5179$var$parseOptions(input, function(k, v) {
                switch(k){
                    case "MPEGT":
                        settings.integer(k + "S", v);
                        break;
                    case "LOCA":
                        settings.set(k + "L", $25cdf762077d5179$var$parseTimeStamp(v));
                        break;
                }
            }, /[^\d]:/, /,/);
            self.ontimestampmap && self.ontimestampmap({
                "MPEGTS": settings.get("MPEGTS"),
                "LOCAL": settings.get("LOCAL")
            });
        }
        // 3.2 WebVTT metadata header syntax
        function parseHeader(input) {
            if (input.match(/X-TIMESTAMP-MAP/)) // This line contains HLS X-TIMESTAMP-MAP metadata
            $25cdf762077d5179$var$parseOptions(input, function(k, v) {
                switch(k){
                    case "X-TIMESTAMP-MAP":
                        parseTimestampMap(v);
                        break;
                }
            }, /=/);
            else $25cdf762077d5179$var$parseOptions(input, function(k, v) {
                switch(k){
                    case "Region":
                        // 3.3 WebVTT region metadata header syntax
                        parseRegion(v);
                        break;
                }
            }, /:/);
        }
        // 5.1 WebVTT file parsing.
        try {
            var line;
            if (self.state === "INITIAL") {
                // We can't start parsing until we have the first line.
                if (!/\r\n|\n/.test(self.buffer)) return this;
                line = collectNextLine();
                var m = line.match(/^WEBVTT([ \t].*)?$/);
                if (!m || !m[0]) throw new $25cdf762077d5179$var$ParsingError($25cdf762077d5179$var$ParsingError.Errors.BadSignature);
                self.state = "HEADER";
            }
            var alreadyCollectedLine = false;
            while(self.buffer){
                // We can't parse a line until we have the full line.
                if (!/\r\n|\n/.test(self.buffer)) return this;
                if (!alreadyCollectedLine) line = collectNextLine();
                else alreadyCollectedLine = false;
                switch(self.state){
                    case "HEADER":
                        // 13-18 - Allow a header (metadata) under the WEBVTT line.
                        if (/:/.test(line)) parseHeader(line);
                        else if (!line) // An empty line terminates the header and starts the body (cues).
                        self.state = "ID";
                        continue;
                    case "NOTE":
                        // Ignore NOTE blocks.
                        if (!line) self.state = "ID";
                        continue;
                    case "ID":
                        // Check for the start of NOTE blocks.
                        if (/^NOTE($|[ \t])/.test(line)) {
                            self.state = "NOTE";
                            break;
                        }
                        // 19-29 - Allow any number of line terminators, then initialize new cue values.
                        if (!line) continue;
                        self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, "");
                        // Safari still uses the old middle value and won't accept center
                        try {
                            self.cue.align = "center";
                        } catch (e) {
                            self.cue.align = "middle";
                        }
                        self.state = "CUE";
                        // 30-39 - Check if self line contains an optional identifier or timing data.
                        if (line.indexOf("-->") === -1) {
                            self.cue.id = line;
                            continue;
                        }
                    // Process line as start of a cue.
                    /*falls through*/ case "CUE":
                        // 40 - Collect cue timings and settings.
                        try {
                            $25cdf762077d5179$var$parseCue(line, self.cue, self.regionList);
                        } catch (e) {
                            self.reportOrThrowError(e);
                            // In case of an error ignore rest of the cue.
                            self.cue = null;
                            self.state = "BADCUE";
                            continue;
                        }
                        self.state = "CUETEXT";
                        continue;
                    case "CUETEXT":
                        var hasSubstring = line.indexOf("-->") !== -1;
                        // 34 - If we have an empty line then report the cue.
                        // 35 - If we have the special substring '-->' then report the cue,
                        // but do not collect the line as we need to process the current
                        // one as a new cue.
                        if (!line || hasSubstring && (alreadyCollectedLine = true)) {
                            // We are done parsing self cue.
                            self.oncue && self.oncue(self.cue);
                            self.cue = null;
                            self.state = "ID";
                            continue;
                        }
                        if (self.cue.text) self.cue.text += "\n";
                        self.cue.text += line.replace(/\u2028/g, "\n").replace(/u2029/g, "\n");
                        continue;
                    case "BADCUE":
                        // 54-62 - Collect and discard the remaining cue.
                        if (!line) self.state = "ID";
                        continue;
                }
            }
        } catch (e) {
            self.reportOrThrowError(e);
            // If we are currently parsing a cue, report what we have.
            if (self.state === "CUETEXT" && self.cue && self.oncue) self.oncue(self.cue);
            self.cue = null;
            // Enter BADWEBVTT state if header was not parsed correctly otherwise
            // another exception occurred so enter BADCUE state.
            self.state = self.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
        }
        return this;
    },
    flush: function() {
        var self = this;
        try {
            // Finish decoding the stream.
            self.buffer += self.decoder.decode();
            // Synthesize the end of the current cue or region.
            if (self.cue || self.state === "HEADER") {
                self.buffer += "\n\n";
                self.parse();
            }
            // If we've flushed, parsed, and we're still on the INITIAL state then
            // that means we don't have enough of the stream to parse the first
            // line.
            if (self.state === "INITIAL") throw new $25cdf762077d5179$var$ParsingError($25cdf762077d5179$var$ParsingError.Errors.BadSignature);
        } catch (e) {
            self.reportOrThrowError(e);
        }
        self.onflush && self.onflush();
        return this;
    }
};
module.exports = $25cdf762077d5179$var$WebVTT;

});
parcelRegister("hiZ2X", function(module, exports) {
var $c99378b4b7e0f462$var$topLevel = typeof $parcel$global !== "undefined" ? $parcel$global : typeof window !== "undefined" ? window : {};

var $XDU19 = parcelRequire("XDU19");
var $c99378b4b7e0f462$var$doccy;
if (typeof document !== "undefined") $c99378b4b7e0f462$var$doccy = document;
else {
    $c99378b4b7e0f462$var$doccy = $c99378b4b7e0f462$var$topLevel["__GLOBAL_DOCUMENT_CACHE@4"];
    if (!$c99378b4b7e0f462$var$doccy) $c99378b4b7e0f462$var$doccy = $c99378b4b7e0f462$var$topLevel["__GLOBAL_DOCUMENT_CACHE@4"] = $XDU19;
}
module.exports = $c99378b4b7e0f462$var$doccy;

});
parcelRegister("XDU19", function(module, exports) {
"use strict";

});



parcelRegister("5nCPd", function(module, exports) {
/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $3ead37937cf84e1a$var$autoKeyword = "auto";
var $3ead37937cf84e1a$var$directionSetting = {
    "": 1,
    "lr": 1,
    "rl": 1
};
var $3ead37937cf84e1a$var$alignSetting = {
    "start": 1,
    "center": 1,
    "end": 1,
    "left": 1,
    "right": 1,
    "auto": 1,
    "line-left": 1,
    "line-right": 1
};
function $3ead37937cf84e1a$var$findDirectionSetting(value) {
    if (typeof value !== "string") return false;
    var dir = $3ead37937cf84e1a$var$directionSetting[value.toLowerCase()];
    return dir ? value.toLowerCase() : false;
}
function $3ead37937cf84e1a$var$findAlignSetting(value) {
    if (typeof value !== "string") return false;
    var align = $3ead37937cf84e1a$var$alignSetting[value.toLowerCase()];
    return align ? value.toLowerCase() : false;
}
function $3ead37937cf84e1a$var$VTTCue(startTime, endTime, text) {
    /**
   * Shim implementation specific properties. These properties are not in
   * the spec.
   */ // Lets us know when the VTTCue's data has changed in such a way that we need
    // to recompute its display state. This lets us compute its display state
    // lazily.
    this.hasBeenReset = false;
    /**
   * VTTCue and TextTrackCue properties
   * http://dev.w3.org/html5/webvtt/#vttcue-interface
   */ var _id = "";
    var _pauseOnExit = false;
    var _startTime = startTime;
    var _endTime = endTime;
    var _text = text;
    var _region = null;
    var _vertical = "";
    var _snapToLines = true;
    var _line = "auto";
    var _lineAlign = "start";
    var _position = "auto";
    var _positionAlign = "auto";
    var _size = 100;
    var _align = "center";
    Object.defineProperties(this, {
        "id": {
            enumerable: true,
            get: function() {
                return _id;
            },
            set: function(value) {
                _id = "" + value;
            }
        },
        "pauseOnExit": {
            enumerable: true,
            get: function() {
                return _pauseOnExit;
            },
            set: function(value) {
                _pauseOnExit = !!value;
            }
        },
        "startTime": {
            enumerable: true,
            get: function() {
                return _startTime;
            },
            set: function(value) {
                if (typeof value !== "number") throw new TypeError("Start time must be set to a number.");
                _startTime = value;
                this.hasBeenReset = true;
            }
        },
        "endTime": {
            enumerable: true,
            get: function() {
                return _endTime;
            },
            set: function(value) {
                if (typeof value !== "number") throw new TypeError("End time must be set to a number.");
                _endTime = value;
                this.hasBeenReset = true;
            }
        },
        "text": {
            enumerable: true,
            get: function() {
                return _text;
            },
            set: function(value) {
                _text = "" + value;
                this.hasBeenReset = true;
            }
        },
        "region": {
            enumerable: true,
            get: function() {
                return _region;
            },
            set: function(value) {
                _region = value;
                this.hasBeenReset = true;
            }
        },
        "vertical": {
            enumerable: true,
            get: function() {
                return _vertical;
            },
            set: function(value) {
                var setting = $3ead37937cf84e1a$var$findDirectionSetting(value);
                // Have to check for false because the setting an be an empty string.
                if (setting === false) throw new SyntaxError("Vertical: an invalid or illegal direction string was specified.");
                _vertical = setting;
                this.hasBeenReset = true;
            }
        },
        "snapToLines": {
            enumerable: true,
            get: function() {
                return _snapToLines;
            },
            set: function(value) {
                _snapToLines = !!value;
                this.hasBeenReset = true;
            }
        },
        "line": {
            enumerable: true,
            get: function() {
                return _line;
            },
            set: function(value) {
                if (typeof value !== "number" && value !== $3ead37937cf84e1a$var$autoKeyword) throw new SyntaxError("Line: an invalid number or illegal string was specified.");
                _line = value;
                this.hasBeenReset = true;
            }
        },
        "lineAlign": {
            enumerable: true,
            get: function() {
                return _lineAlign;
            },
            set: function(value) {
                var setting = $3ead37937cf84e1a$var$findAlignSetting(value);
                if (!setting) console.warn("lineAlign: an invalid or illegal string was specified.");
                else {
                    _lineAlign = setting;
                    this.hasBeenReset = true;
                }
            }
        },
        "position": {
            enumerable: true,
            get: function() {
                return _position;
            },
            set: function(value) {
                if (value < 0 || value > 100) throw new Error("Position must be between 0 and 100.");
                _position = value;
                this.hasBeenReset = true;
            }
        },
        "positionAlign": {
            enumerable: true,
            get: function() {
                return _positionAlign;
            },
            set: function(value) {
                var setting = $3ead37937cf84e1a$var$findAlignSetting(value);
                if (!setting) console.warn("positionAlign: an invalid or illegal string was specified.");
                else {
                    _positionAlign = setting;
                    this.hasBeenReset = true;
                }
            }
        },
        "size": {
            enumerable: true,
            get: function() {
                return _size;
            },
            set: function(value) {
                if (value < 0 || value > 100) throw new Error("Size must be between 0 and 100.");
                _size = value;
                this.hasBeenReset = true;
            }
        },
        "align": {
            enumerable: true,
            get: function() {
                return _align;
            },
            set: function(value) {
                var setting = $3ead37937cf84e1a$var$findAlignSetting(value);
                if (!setting) throw new SyntaxError("align: an invalid or illegal alignment string was specified.");
                _align = setting;
                this.hasBeenReset = true;
            }
        }
    });
    /**
   * Other <track> spec defined properties
   */ // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
    this.displayState = undefined;
}
/**
 * VTTCue methods
 */ $3ead37937cf84e1a$var$VTTCue.prototype.getCueAsHTML = function() {
    // Assume WebVTT.convertCueToDOMTree is on the global.
    return WebVTT.convertCueToDOMTree(window, this.text);
};
module.exports = $3ead37937cf84e1a$var$VTTCue;

});

parcelRegister("X2zir", function(module, exports) {
/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ var $0b1780d03c0cd29c$var$scrollSetting = {
    "": true,
    "up": true
};
function $0b1780d03c0cd29c$var$findScrollSetting(value) {
    if (typeof value !== "string") return false;
    var scroll = $0b1780d03c0cd29c$var$scrollSetting[value.toLowerCase()];
    return scroll ? value.toLowerCase() : false;
}
function $0b1780d03c0cd29c$var$isValidPercentValue(value) {
    return typeof value === "number" && value >= 0 && value <= 100;
}
// VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface
function $0b1780d03c0cd29c$var$VTTRegion() {
    var _width = 100;
    var _lines = 3;
    var _regionAnchorX = 0;
    var _regionAnchorY = 100;
    var _viewportAnchorX = 0;
    var _viewportAnchorY = 100;
    var _scroll = "";
    Object.defineProperties(this, {
        "width": {
            enumerable: true,
            get: function() {
                return _width;
            },
            set: function(value) {
                if (!$0b1780d03c0cd29c$var$isValidPercentValue(value)) throw new Error("Width must be between 0 and 100.");
                _width = value;
            }
        },
        "lines": {
            enumerable: true,
            get: function() {
                return _lines;
            },
            set: function(value) {
                if (typeof value !== "number") throw new TypeError("Lines must be set to a number.");
                _lines = value;
            }
        },
        "regionAnchorY": {
            enumerable: true,
            get: function() {
                return _regionAnchorY;
            },
            set: function(value) {
                if (!$0b1780d03c0cd29c$var$isValidPercentValue(value)) throw new Error("RegionAnchorX must be between 0 and 100.");
                _regionAnchorY = value;
            }
        },
        "regionAnchorX": {
            enumerable: true,
            get: function() {
                return _regionAnchorX;
            },
            set: function(value) {
                if (!$0b1780d03c0cd29c$var$isValidPercentValue(value)) throw new Error("RegionAnchorY must be between 0 and 100.");
                _regionAnchorX = value;
            }
        },
        "viewportAnchorY": {
            enumerable: true,
            get: function() {
                return _viewportAnchorY;
            },
            set: function(value) {
                if (!$0b1780d03c0cd29c$var$isValidPercentValue(value)) throw new Error("ViewportAnchorY must be between 0 and 100.");
                _viewportAnchorY = value;
            }
        },
        "viewportAnchorX": {
            enumerable: true,
            get: function() {
                return _viewportAnchorX;
            },
            set: function(value) {
                if (!$0b1780d03c0cd29c$var$isValidPercentValue(value)) throw new Error("ViewportAnchorX must be between 0 and 100.");
                _viewportAnchorX = value;
            }
        },
        "scroll": {
            enumerable: true,
            get: function() {
                return _scroll;
            },
            set: function(value) {
                var setting = $0b1780d03c0cd29c$var$findScrollSetting(value);
                // Have to check for false as an empty string is a legal value.
                if (setting === false) console.warn("Scroll: an invalid or illegal string was specified.");
                else _scroll = setting;
            }
        }
    });
}
module.exports = $0b1780d03c0cd29c$var$VTTRegion;

});

parcelRegister("7nEww", function(module, exports) {

$parcel$export(module.exports, "DOMParser", () => $55fa1d7e32129ec1$export$1059c6e7d2ce5669, (v) => $55fa1d7e32129ec1$export$1059c6e7d2ce5669 = v);
var $55fa1d7e32129ec1$export$181392475aa39887;
var $55fa1d7e32129ec1$export$ba13e0e2f19e61a1;
var $55fa1d7e32129ec1$export$1059c6e7d2ce5669;

var $aHMXu = parcelRequire("aHMXu");

var $bipYb = parcelRequire("bipYb");

var $29crI = parcelRequire("29crI");

var $2CVVF = parcelRequire("2CVVF");
var $55fa1d7e32129ec1$var$DOMImplementation = $bipYb.DOMImplementation;
var $55fa1d7e32129ec1$var$NAMESPACE = $aHMXu.NAMESPACE;
var $55fa1d7e32129ec1$var$ParseError = $2CVVF.ParseError;
var $55fa1d7e32129ec1$var$XMLReader = $2CVVF.XMLReader;
/**
 * Normalizes line ending according to https://www.w3.org/TR/xml11/#sec-line-ends:
 *
 * > XML parsed entities are often stored in computer files which,
 * > for editing convenience, are organized into lines.
 * > These lines are typically separated by some combination
 * > of the characters CARRIAGE RETURN (#xD) and LINE FEED (#xA).
 * >
 * > To simplify the tasks of applications, the XML processor must behave
 * > as if it normalized all line breaks in external parsed entities (including the document entity)
 * > on input, before parsing, by translating all of the following to a single #xA character:
 * >
 * > 1. the two-character sequence #xD #xA
 * > 2. the two-character sequence #xD #x85
 * > 3. the single character #x85
 * > 4. the single character #x2028
 * > 5. any #xD character that is not immediately followed by #xA or #x85.
 *
 * @param {string} input
 * @returns {string}
 */ function $55fa1d7e32129ec1$var$normalizeLineEndings(input) {
    return input.replace(/\r[\n\u0085]/g, "\n").replace(/[\r\u0085\u2028]/g, "\n");
}
/**
 * @typedef Locator
 * @property {number} [columnNumber]
 * @property {number} [lineNumber]
 */ /**
 * @typedef DOMParserOptions
 * @property {DOMHandler} [domBuilder]
 * @property {Function} [errorHandler]
 * @property {(string) => string} [normalizeLineEndings] used to replace line endings before parsing
 * 						defaults to `normalizeLineEndings`
 * @property {Locator} [locator]
 * @property {Record<string, string>} [xmlns]
 *
 * @see normalizeLineEndings
 */ /**
 * The DOMParser interface provides the ability to parse XML or HTML source code
 * from a string into a DOM `Document`.
 *
 * _xmldom is different from the spec in that it allows an `options` parameter,
 * to override the default behavior._
 *
 * @param {DOMParserOptions} [options]
 * @constructor
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser
 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-parsing-and-serialization
 */ function $55fa1d7e32129ec1$var$DOMParser(options) {
    this.options = options || {
        locator: {}
    };
}
$55fa1d7e32129ec1$var$DOMParser.prototype.parseFromString = function(source, mimeType) {
    var options = this.options;
    var sax = new $55fa1d7e32129ec1$var$XMLReader();
    var domBuilder = options.domBuilder || new $55fa1d7e32129ec1$var$DOMHandler(); //contentHandler and LexicalHandler
    var errorHandler = options.errorHandler;
    var locator = options.locator;
    var defaultNSMap = options.xmlns || {};
    var isHTML = /\/x?html?$/.test(mimeType); //mimeType.toLowerCase().indexOf('html') > -1;
    var entityMap = isHTML ? $29crI.HTML_ENTITIES : $29crI.XML_ENTITIES;
    if (locator) domBuilder.setDocumentLocator(locator);
    sax.errorHandler = $55fa1d7e32129ec1$var$buildErrorHandler(errorHandler, domBuilder, locator);
    sax.domBuilder = options.domBuilder || domBuilder;
    if (isHTML) defaultNSMap[""] = $55fa1d7e32129ec1$var$NAMESPACE.HTML;
    defaultNSMap.xml = defaultNSMap.xml || $55fa1d7e32129ec1$var$NAMESPACE.XML;
    var normalize = options.normalizeLineEndings || $55fa1d7e32129ec1$var$normalizeLineEndings;
    if (source && typeof source === "string") sax.parse(normalize(source), defaultNSMap, entityMap);
    else sax.errorHandler.error("invalid doc source");
    return domBuilder.doc;
};
function $55fa1d7e32129ec1$var$buildErrorHandler(errorImpl, domBuilder, locator) {
    if (!errorImpl) {
        if (domBuilder instanceof $55fa1d7e32129ec1$var$DOMHandler) return domBuilder;
        errorImpl = domBuilder;
    }
    var errorHandler = {};
    var isCallback = errorImpl instanceof Function;
    locator = locator || {};
    function build(key) {
        var fn = errorImpl[key];
        if (!fn && isCallback) fn = errorImpl.length == 2 ? function(msg) {
            errorImpl(key, msg);
        } : errorImpl;
        errorHandler[key] = fn && function(msg) {
            fn("[xmldom " + key + "]	" + msg + $55fa1d7e32129ec1$var$_locator(locator));
        } || function() {};
    }
    build("warning");
    build("error");
    build("fatalError");
    return errorHandler;
}
//console.log('#\n\n\n\n\n\n\n####')
/**
 * +ContentHandler+ErrorHandler
 * +LexicalHandler+EntityResolver2
 * -DeclHandler-DTDHandler
 *
 * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
 * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
 * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
 */ function $55fa1d7e32129ec1$var$DOMHandler() {
    this.cdata = false;
}
function $55fa1d7e32129ec1$var$position(locator, node) {
    node.lineNumber = locator.lineNumber;
    node.columnNumber = locator.columnNumber;
}
/**
 * @see org.xml.sax.ContentHandler#startDocument
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
 */ $55fa1d7e32129ec1$var$DOMHandler.prototype = {
    startDocument: function() {
        this.doc = new $55fa1d7e32129ec1$var$DOMImplementation().createDocument(null, null, null);
        if (this.locator) this.doc.documentURI = this.locator.systemId;
    },
    startElement: function(namespaceURI, localName, qName, attrs) {
        var doc = this.doc;
        var el = doc.createElementNS(namespaceURI, qName || localName);
        var len = attrs.length;
        $55fa1d7e32129ec1$var$appendElement(this, el);
        this.currentElement = el;
        this.locator && $55fa1d7e32129ec1$var$position(this.locator, el);
        for(var i = 0; i < len; i++){
            var namespaceURI = attrs.getURI(i);
            var value = attrs.getValue(i);
            var qName = attrs.getQName(i);
            var attr = doc.createAttributeNS(namespaceURI, qName);
            this.locator && $55fa1d7e32129ec1$var$position(attrs.getLocator(i), attr);
            attr.value = attr.nodeValue = value;
            el.setAttributeNode(attr);
        }
    },
    endElement: function(namespaceURI, localName, qName) {
        var current = this.currentElement;
        var tagName = current.tagName;
        this.currentElement = current.parentNode;
    },
    startPrefixMapping: function(prefix, uri) {},
    endPrefixMapping: function(prefix) {},
    processingInstruction: function(target, data) {
        var ins = this.doc.createProcessingInstruction(target, data);
        this.locator && $55fa1d7e32129ec1$var$position(this.locator, ins);
        $55fa1d7e32129ec1$var$appendElement(this, ins);
    },
    ignorableWhitespace: function(ch, start, length) {},
    characters: function(chars, start, length) {
        chars = $55fa1d7e32129ec1$var$_toString.apply(this, arguments);
        //console.log(chars)
        if (chars) {
            if (this.cdata) var charNode = this.doc.createCDATASection(chars);
            else var charNode = this.doc.createTextNode(chars);
            if (this.currentElement) this.currentElement.appendChild(charNode);
            else if (/^\s*$/.test(chars)) this.doc.appendChild(charNode);
            this.locator && $55fa1d7e32129ec1$var$position(this.locator, charNode);
        }
    },
    skippedEntity: function(name) {},
    endDocument: function() {
        this.doc.normalize();
    },
    setDocumentLocator: function(locator) {
        if (this.locator = locator) locator.lineNumber = 0;
    },
    //LexicalHandler
    comment: function(chars, start, length) {
        chars = $55fa1d7e32129ec1$var$_toString.apply(this, arguments);
        var comm = this.doc.createComment(chars);
        this.locator && $55fa1d7e32129ec1$var$position(this.locator, comm);
        $55fa1d7e32129ec1$var$appendElement(this, comm);
    },
    startCDATA: function() {
        //used in characters() methods
        this.cdata = true;
    },
    endCDATA: function() {
        this.cdata = false;
    },
    startDTD: function(name, publicId, systemId) {
        var impl = this.doc.implementation;
        if (impl && impl.createDocumentType) {
            var dt = impl.createDocumentType(name, publicId, systemId);
            this.locator && $55fa1d7e32129ec1$var$position(this.locator, dt);
            $55fa1d7e32129ec1$var$appendElement(this, dt);
            this.doc.doctype = dt;
        }
    },
    /**
	 * @see org.xml.sax.ErrorHandler
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
	 */ warning: function(error) {
        console.warn("[xmldom warning]	" + error, $55fa1d7e32129ec1$var$_locator(this.locator));
    },
    error: function(error) {
        console.error("[xmldom error]	" + error, $55fa1d7e32129ec1$var$_locator(this.locator));
    },
    fatalError: function(error) {
        throw new $55fa1d7e32129ec1$var$ParseError(error, this.locator);
    }
};
function $55fa1d7e32129ec1$var$_locator(l) {
    if (l) return "\n@" + (l.systemId || "") + "#[line:" + l.lineNumber + ",col:" + l.columnNumber + "]";
}
function $55fa1d7e32129ec1$var$_toString(chars, start, length) {
    if (typeof chars == "string") return chars.substr(start, length);
    else {
        if (chars.length >= start + length || start) return new java.lang.String(chars, start, length) + "";
        return chars;
    }
}
/*
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
 * used method of org.xml.sax.ext.LexicalHandler:
 *  #comment(chars, start, length)
 *  #startCDATA()
 *  #endCDATA()
 *  #startDTD(name, publicId, systemId)
 *
 *
 * IGNORED method of org.xml.sax.ext.LexicalHandler:
 *  #endDTD()
 *  #startEntity(name)
 *  #endEntity(name)
 *
 *
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
 * IGNORED method of org.xml.sax.ext.DeclHandler
 * 	#attributeDecl(eName, aName, type, mode, value)
 *  #elementDecl(name, model)
 *  #externalEntityDecl(name, publicId, systemId)
 *  #internalEntityDecl(name, value)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
 * IGNORED method of org.xml.sax.EntityResolver2
 *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
 *  #resolveEntity(publicId, systemId)
 *  #getExternalSubset(name, baseURI)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
 * IGNORED method of org.xml.sax.DTDHandler
 *  #notationDecl(name, publicId, systemId) {};
 *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
 */ "endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g, function(key) {
    $55fa1d7e32129ec1$var$DOMHandler.prototype[key] = function() {
        return null;
    };
});
/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */ function $55fa1d7e32129ec1$var$appendElement(hander, node) {
    if (!hander.currentElement) hander.doc.appendChild(node);
    else hander.currentElement.appendChild(node);
} //appendChild and setAttributeNS are preformance key
$55fa1d7e32129ec1$export$181392475aa39887 = $55fa1d7e32129ec1$var$DOMHandler;
$55fa1d7e32129ec1$export$ba13e0e2f19e61a1 = $55fa1d7e32129ec1$var$normalizeLineEndings;
$55fa1d7e32129ec1$export$1059c6e7d2ce5669 = $55fa1d7e32129ec1$var$DOMParser;

});
parcelRegister("aHMXu", function(module, exports) {

$parcel$export(module.exports, "find", () => $7cb3e5af843e94db$export$71aa6c912b956294, (v) => $7cb3e5af843e94db$export$71aa6c912b956294 = v);
$parcel$export(module.exports, "freeze", () => $7cb3e5af843e94db$export$792f3d81ea979f55, (v) => $7cb3e5af843e94db$export$792f3d81ea979f55 = v);
$parcel$export(module.exports, "NAMESPACE", () => $7cb3e5af843e94db$export$6aad947bda0f3f46, (v) => $7cb3e5af843e94db$export$6aad947bda0f3f46 = v);
var $7cb3e5af843e94db$export$e6e34fd1f2686227;
var $7cb3e5af843e94db$export$71aa6c912b956294;
var $7cb3e5af843e94db$export$792f3d81ea979f55;
var $7cb3e5af843e94db$export$c6cb9dd1e3ada1aa;
var $7cb3e5af843e94db$export$6aad947bda0f3f46;
"use strict";
/**
 * Ponyfill for `Array.prototype.find` which is only available in ES6 runtimes.
 *
 * Works with anything that has a `length` property and index access properties, including NodeList.
 *
 * @template {unknown} T
 * @param {Array<T> | ({length:number, [number]: T})} list
 * @param {function (item: T, index: number, list:Array<T> | ({length:number, [number]: T})):boolean} predicate
 * @param {Partial<Pick<ArrayConstructor['prototype'], 'find'>>?} ac `Array.prototype` by default,
 * 				allows injecting a custom implementation in tests
 * @returns {T | undefined}
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
 * @see https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.find
 */ function $7cb3e5af843e94db$var$find(list, predicate, ac) {
    if (ac === undefined) ac = Array.prototype;
    if (list && typeof ac.find === "function") return ac.find.call(list, predicate);
    for(var i = 0; i < list.length; i++)if (Object.prototype.hasOwnProperty.call(list, i)) {
        var item = list[i];
        if (predicate.call(undefined, item, i, list)) return item;
    }
}
/**
 * "Shallow freezes" an object to render it immutable.
 * Uses `Object.freeze` if available,
 * otherwise the immutability is only in the type.
 *
 * Is used to create "enum like" objects.
 *
 * @template T
 * @param {T} object the object to freeze
 * @param {Pick<ObjectConstructor, 'freeze'> = Object} oc `Object` by default,
 * 				allows to inject custom object constructor for tests
 * @returns {Readonly<T>}
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze
 */ function $7cb3e5af843e94db$var$freeze(object, oc) {
    if (oc === undefined) oc = Object;
    return oc && typeof oc.freeze === "function" ? oc.freeze(object) : object;
}
/**
 * Since we can not rely on `Object.assign` we provide a simplified version
 * that is sufficient for our needs.
 *
 * @param {Object} target
 * @param {Object | null | undefined} source
 *
 * @returns {Object} target
 * @throws TypeError if target is not an object
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 * @see https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.assign
 */ function $7cb3e5af843e94db$var$assign(target, source) {
    if (target === null || typeof target !== "object") throw new TypeError("target is not an object");
    for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
    return target;
}
/**
 * All mime types that are allowed as input to `DOMParser.parseFromString`
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString#Argument02 MDN
 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#domparsersupportedtype WHATWG HTML Spec
 * @see DOMParser.prototype.parseFromString
 */ var $7cb3e5af843e94db$var$MIME_TYPE = $7cb3e5af843e94db$var$freeze({
    /**
	 * `text/html`, the only mime type that triggers treating an XML document as HTML.
	 *
	 * @see DOMParser.SupportedType.isHTML
	 * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
	 * @see https://en.wikipedia.org/wiki/HTML Wikipedia
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
	 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring WHATWG HTML Spec
	 */ HTML: "text/html",
    /**
	 * Helper method to check a mime type if it indicates an HTML document
	 *
	 * @param {string} [value]
	 * @returns {boolean}
	 *
	 * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
	 * @see https://en.wikipedia.org/wiki/HTML Wikipedia
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
	 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring 	 */ isHTML: function(value) {
        return value === $7cb3e5af843e94db$var$MIME_TYPE.HTML;
    },
    /**
	 * `application/xml`, the standard mime type for XML documents.
	 *
	 * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType registration
	 * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303
	 * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
	 */ XML_APPLICATION: "application/xml",
    /**
	 * `text/html`, an alias for `application/xml`.
	 *
	 * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303
	 * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration
	 * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
	 */ XML_TEXT: "text/xml",
    /**
	 * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,
	 * but is parsed as an XML document.
	 *
	 * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType registration
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec
	 * @see https://en.wikipedia.org/wiki/XHTML Wikipedia
	 */ XML_XHTML_APPLICATION: "application/xhtml+xml",
    /**
	 * `image/svg+xml`,
	 *
	 * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration
	 * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1
	 * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia
	 */ XML_SVG_IMAGE: "image/svg+xml"
});
/**
 * Namespaces that are used in this code base.
 *
 * @see http://www.w3.org/TR/REC-xml-names
 */ var $7cb3e5af843e94db$var$NAMESPACE = $7cb3e5af843e94db$var$freeze({
    /**
	 * The XHTML namespace.
	 *
	 * @see http://www.w3.org/1999/xhtml
	 */ HTML: "http://www.w3.org/1999/xhtml",
    /**
	 * Checks if `uri` equals `NAMESPACE.HTML`.
	 *
	 * @param {string} [uri]
	 *
	 * @see NAMESPACE.HTML
	 */ isHTML: function(uri) {
        return uri === $7cb3e5af843e94db$var$NAMESPACE.HTML;
    },
    /**
	 * The SVG namespace.
	 *
	 * @see http://www.w3.org/2000/svg
	 */ SVG: "http://www.w3.org/2000/svg",
    /**
	 * The `xml:` namespace.
	 *
	 * @see http://www.w3.org/XML/1998/namespace
	 */ XML: "http://www.w3.org/XML/1998/namespace",
    /**
	 * The `xmlns:` namespace
	 *
	 * @see https://www.w3.org/2000/xmlns/
	 */ XMLNS: "http://www.w3.org/2000/xmlns/"
});
$7cb3e5af843e94db$export$e6e34fd1f2686227 = $7cb3e5af843e94db$var$assign;
$7cb3e5af843e94db$export$71aa6c912b956294 = $7cb3e5af843e94db$var$find;
$7cb3e5af843e94db$export$792f3d81ea979f55 = $7cb3e5af843e94db$var$freeze;
$7cb3e5af843e94db$export$c6cb9dd1e3ada1aa = $7cb3e5af843e94db$var$MIME_TYPE;
$7cb3e5af843e94db$export$6aad947bda0f3f46 = $7cb3e5af843e94db$var$NAMESPACE;

});

parcelRegister("bipYb", function(module, exports) {

$parcel$export(module.exports, "DOMImplementation", () => $8395852f5ec885ec$export$455426655eab1d48, (v) => $8395852f5ec885ec$export$455426655eab1d48 = v);
$parcel$export(module.exports, "XMLSerializer", () => $8395852f5ec885ec$export$64f0bed4ae6f0f24, (v) => $8395852f5ec885ec$export$64f0bed4ae6f0f24 = v);
//if(typeof require == 'function'){
var $8395852f5ec885ec$export$d1d99cf900472499;
var $8395852f5ec885ec$export$fe58bcf938607f6a;
var $8395852f5ec885ec$export$455426655eab1d48;
var $8395852f5ec885ec$export$db77ccec0bb4ccac;
var $8395852f5ec885ec$export$85c928794f8d04d4;
var $8395852f5ec885ec$export$79b41aa5d56abdff;
var $8395852f5ec885ec$export$64f0bed4ae6f0f24;

var $aHMXu = parcelRequire("aHMXu");
var $8395852f5ec885ec$var$find = $aHMXu.find;
var $8395852f5ec885ec$var$NAMESPACE = $aHMXu.NAMESPACE;
/**
 * A prerequisite for `[].filter`, to drop elements that are empty
 * @param {string} input
 * @returns {boolean}
 */ function $8395852f5ec885ec$var$notEmptyString(input) {
    return input !== "";
}
/**
 * @see https://infra.spec.whatwg.org/#split-on-ascii-whitespace
 * @see https://infra.spec.whatwg.org/#ascii-whitespace
 *
 * @param {string} input
 * @returns {string[]} (can be empty)
 */ function $8395852f5ec885ec$var$splitOnASCIIWhitespace(input) {
    // U+0009 TAB, U+000A LF, U+000C FF, U+000D CR, U+0020 SPACE
    return input ? input.split(/[\t\n\f\r ]+/).filter($8395852f5ec885ec$var$notEmptyString) : [];
}
/**
 * Adds element as a key to current if it is not already present.
 *
 * @param {Record<string, boolean | undefined>} current
 * @param {string} element
 * @returns {Record<string, boolean | undefined>}
 */ function $8395852f5ec885ec$var$orderedSetReducer(current, element) {
    if (!current.hasOwnProperty(element)) current[element] = true;
    return current;
}
/**
 * @see https://infra.spec.whatwg.org/#ordered-set
 * @param {string} input
 * @returns {string[]}
 */ function $8395852f5ec885ec$var$toOrderedSet(input) {
    if (!input) return [];
    var list = $8395852f5ec885ec$var$splitOnASCIIWhitespace(input);
    return Object.keys(list.reduce($8395852f5ec885ec$var$orderedSetReducer, {}));
}
/**
 * Uses `list.indexOf` to implement something like `Array.prototype.includes`,
 * which we can not rely on being available.
 *
 * @param {any[]} list
 * @returns {function(any): boolean}
 */ function $8395852f5ec885ec$var$arrayIncludes(list) {
    return function(element) {
        return list && list.indexOf(element) !== -1;
    };
}
function $8395852f5ec885ec$var$copy(src, dest) {
    for(var p in src)if (Object.prototype.hasOwnProperty.call(src, p)) dest[p] = src[p];
}
/**
^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
 */ function $8395852f5ec885ec$var$_extends(Class, Super) {
    var pt = Class.prototype;
    if (!(pt instanceof Super)) {
        function t() {}
        t.prototype = Super.prototype;
        t = new t();
        $8395852f5ec885ec$var$copy(pt, t);
        Class.prototype = pt = t;
    }
    if (pt.constructor != Class) {
        if (typeof Class != "function") console.error("unknown Class:" + Class);
        pt.constructor = Class;
    }
}
// Node Types
var $8395852f5ec885ec$var$NodeType = {};
var $8395852f5ec885ec$var$ELEMENT_NODE = $8395852f5ec885ec$var$NodeType.ELEMENT_NODE = 1;
var $8395852f5ec885ec$var$ATTRIBUTE_NODE = $8395852f5ec885ec$var$NodeType.ATTRIBUTE_NODE = 2;
var $8395852f5ec885ec$var$TEXT_NODE = $8395852f5ec885ec$var$NodeType.TEXT_NODE = 3;
var $8395852f5ec885ec$var$CDATA_SECTION_NODE = $8395852f5ec885ec$var$NodeType.CDATA_SECTION_NODE = 4;
var $8395852f5ec885ec$var$ENTITY_REFERENCE_NODE = $8395852f5ec885ec$var$NodeType.ENTITY_REFERENCE_NODE = 5;
var $8395852f5ec885ec$var$ENTITY_NODE = $8395852f5ec885ec$var$NodeType.ENTITY_NODE = 6;
var $8395852f5ec885ec$var$PROCESSING_INSTRUCTION_NODE = $8395852f5ec885ec$var$NodeType.PROCESSING_INSTRUCTION_NODE = 7;
var $8395852f5ec885ec$var$COMMENT_NODE = $8395852f5ec885ec$var$NodeType.COMMENT_NODE = 8;
var $8395852f5ec885ec$var$DOCUMENT_NODE = $8395852f5ec885ec$var$NodeType.DOCUMENT_NODE = 9;
var $8395852f5ec885ec$var$DOCUMENT_TYPE_NODE = $8395852f5ec885ec$var$NodeType.DOCUMENT_TYPE_NODE = 10;
var $8395852f5ec885ec$var$DOCUMENT_FRAGMENT_NODE = $8395852f5ec885ec$var$NodeType.DOCUMENT_FRAGMENT_NODE = 11;
var $8395852f5ec885ec$var$NOTATION_NODE = $8395852f5ec885ec$var$NodeType.NOTATION_NODE = 12;
// ExceptionCode
var $8395852f5ec885ec$var$ExceptionCode = {};
var $8395852f5ec885ec$var$ExceptionMessage = {};
var $8395852f5ec885ec$var$INDEX_SIZE_ERR = $8395852f5ec885ec$var$ExceptionCode.INDEX_SIZE_ERR = ($8395852f5ec885ec$var$ExceptionMessage[1] = "Index size error", 1);
var $8395852f5ec885ec$var$DOMSTRING_SIZE_ERR = $8395852f5ec885ec$var$ExceptionCode.DOMSTRING_SIZE_ERR = ($8395852f5ec885ec$var$ExceptionMessage[2] = "DOMString size error", 2);
var $8395852f5ec885ec$var$HIERARCHY_REQUEST_ERR = $8395852f5ec885ec$var$ExceptionCode.HIERARCHY_REQUEST_ERR = ($8395852f5ec885ec$var$ExceptionMessage[3] = "Hierarchy request error", 3);
var $8395852f5ec885ec$var$WRONG_DOCUMENT_ERR = $8395852f5ec885ec$var$ExceptionCode.WRONG_DOCUMENT_ERR = ($8395852f5ec885ec$var$ExceptionMessage[4] = "Wrong document", 4);
var $8395852f5ec885ec$var$INVALID_CHARACTER_ERR = $8395852f5ec885ec$var$ExceptionCode.INVALID_CHARACTER_ERR = ($8395852f5ec885ec$var$ExceptionMessage[5] = "Invalid character", 5);
var $8395852f5ec885ec$var$NO_DATA_ALLOWED_ERR = $8395852f5ec885ec$var$ExceptionCode.NO_DATA_ALLOWED_ERR = ($8395852f5ec885ec$var$ExceptionMessage[6] = "No data allowed", 6);
var $8395852f5ec885ec$var$NO_MODIFICATION_ALLOWED_ERR = $8395852f5ec885ec$var$ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = ($8395852f5ec885ec$var$ExceptionMessage[7] = "No modification allowed", 7);
var $8395852f5ec885ec$var$NOT_FOUND_ERR = $8395852f5ec885ec$var$ExceptionCode.NOT_FOUND_ERR = ($8395852f5ec885ec$var$ExceptionMessage[8] = "Not found", 8);
var $8395852f5ec885ec$var$NOT_SUPPORTED_ERR = $8395852f5ec885ec$var$ExceptionCode.NOT_SUPPORTED_ERR = ($8395852f5ec885ec$var$ExceptionMessage[9] = "Not supported", 9);
var $8395852f5ec885ec$var$INUSE_ATTRIBUTE_ERR = $8395852f5ec885ec$var$ExceptionCode.INUSE_ATTRIBUTE_ERR = ($8395852f5ec885ec$var$ExceptionMessage[10] = "Attribute in use", 10);
//level2
var $8395852f5ec885ec$var$INVALID_STATE_ERR = $8395852f5ec885ec$var$ExceptionCode.INVALID_STATE_ERR = ($8395852f5ec885ec$var$ExceptionMessage[11] = "Invalid state", 11);
var $8395852f5ec885ec$var$SYNTAX_ERR = $8395852f5ec885ec$var$ExceptionCode.SYNTAX_ERR = ($8395852f5ec885ec$var$ExceptionMessage[12] = "Syntax error", 12);
var $8395852f5ec885ec$var$INVALID_MODIFICATION_ERR = $8395852f5ec885ec$var$ExceptionCode.INVALID_MODIFICATION_ERR = ($8395852f5ec885ec$var$ExceptionMessage[13] = "Invalid modification", 13);
var $8395852f5ec885ec$var$NAMESPACE_ERR = $8395852f5ec885ec$var$ExceptionCode.NAMESPACE_ERR = ($8395852f5ec885ec$var$ExceptionMessage[14] = "Invalid namespace", 14);
var $8395852f5ec885ec$var$INVALID_ACCESS_ERR = $8395852f5ec885ec$var$ExceptionCode.INVALID_ACCESS_ERR = ($8395852f5ec885ec$var$ExceptionMessage[15] = "Invalid access", 15);
/**
 * DOM Level 2
 * Object DOMException
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
 * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
 */ function $8395852f5ec885ec$var$DOMException(code, message) {
    if (message instanceof Error) var error = message;
    else {
        error = this;
        Error.call(this, $8395852f5ec885ec$var$ExceptionMessage[code]);
        this.message = $8395852f5ec885ec$var$ExceptionMessage[code];
        if (Error.captureStackTrace) Error.captureStackTrace(this, $8395852f5ec885ec$var$DOMException);
    }
    error.code = code;
    if (message) this.message = this.message + ": " + message;
    return error;
}
$8395852f5ec885ec$var$DOMException.prototype = Error.prototype;
$8395852f5ec885ec$var$copy($8395852f5ec885ec$var$ExceptionCode, $8395852f5ec885ec$var$DOMException);
/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
 * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
 * The items in the NodeList are accessible via an integral index, starting from 0.
 */ function $8395852f5ec885ec$var$NodeList() {}
$8395852f5ec885ec$var$NodeList.prototype = {
    /**
	 * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
	 * @standard level1
	 */ length: 0,
    /**
	 * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
	 * @standard level1
	 * @param index  unsigned long
	 *   Index into the collection.
	 * @return Node
	 * 	The node at the indexth position in the NodeList, or null if that is not a valid index.
	 */ item: function(index) {
        return index >= 0 && index < this.length ? this[index] : null;
    },
    toString: function(isHTML, nodeFilter) {
        for(var buf = [], i = 0; i < this.length; i++)$8395852f5ec885ec$var$serializeToString(this[i], buf, isHTML, nodeFilter);
        return buf.join("");
    },
    /**
	 * @private
	 * @param {function (Node):boolean} predicate
	 * @returns {Node[]}
	 */ filter: function(predicate) {
        return Array.prototype.filter.call(this, predicate);
    },
    /**
	 * @private
	 * @param {Node} item
	 * @returns {number}
	 */ indexOf: function(item) {
        return Array.prototype.indexOf.call(this, item);
    }
};
function $8395852f5ec885ec$var$LiveNodeList(node, refresh) {
    this._node = node;
    this._refresh = refresh;
    $8395852f5ec885ec$var$_updateLiveList(this);
}
function $8395852f5ec885ec$var$_updateLiveList(list) {
    var inc = list._node._inc || list._node.ownerDocument._inc;
    if (list._inc !== inc) {
        var ls = list._refresh(list._node);
        $8395852f5ec885ec$var$__set__(list, "length", ls.length);
        if (!list.$$length || ls.length < list.$$length) {
            for(var i = ls.length; (i in list); i++)if (Object.prototype.hasOwnProperty.call(list, i)) delete list[i];
        }
        $8395852f5ec885ec$var$copy(ls, list);
        list._inc = inc;
    }
}
$8395852f5ec885ec$var$LiveNodeList.prototype.item = function(i) {
    $8395852f5ec885ec$var$_updateLiveList(this);
    return this[i] || null;
};
$8395852f5ec885ec$var$_extends($8395852f5ec885ec$var$LiveNodeList, $8395852f5ec885ec$var$NodeList);
/**
 * Objects implementing the NamedNodeMap interface are used
 * to represent collections of nodes that can be accessed by name.
 * Note that NamedNodeMap does not inherit from NodeList;
 * NamedNodeMaps are not maintained in any particular order.
 * Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index,
 * but this is simply to allow convenient enumeration of the contents of a NamedNodeMap,
 * and does not imply that the DOM specifies an order to these Nodes.
 * NamedNodeMap objects in the DOM are live.
 * used for attributes or DocumentType entities
 */ function $8395852f5ec885ec$var$NamedNodeMap() {}
function $8395852f5ec885ec$var$_findNodeIndex(list, node) {
    var i = list.length;
    while(i--){
        if (list[i] === node) return i;
    }
}
function $8395852f5ec885ec$var$_addNamedNode(el, list, newAttr, oldAttr) {
    if (oldAttr) list[$8395852f5ec885ec$var$_findNodeIndex(list, oldAttr)] = newAttr;
    else list[list.length++] = newAttr;
    if (el) {
        newAttr.ownerElement = el;
        var doc = el.ownerDocument;
        if (doc) {
            oldAttr && $8395852f5ec885ec$var$_onRemoveAttribute(doc, el, oldAttr);
            $8395852f5ec885ec$var$_onAddAttribute(doc, el, newAttr);
        }
    }
}
function $8395852f5ec885ec$var$_removeNamedNode(el, list, attr) {
    //console.log('remove attr:'+attr)
    var i = $8395852f5ec885ec$var$_findNodeIndex(list, attr);
    if (i >= 0) {
        var lastIndex = list.length - 1;
        while(i < lastIndex)list[i] = list[++i];
        list.length = lastIndex;
        if (el) {
            var doc = el.ownerDocument;
            if (doc) {
                $8395852f5ec885ec$var$_onRemoveAttribute(doc, el, attr);
                attr.ownerElement = null;
            }
        }
    } else throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$NOT_FOUND_ERR, new Error(el.tagName + "@" + attr));
}
$8395852f5ec885ec$var$NamedNodeMap.prototype = {
    length: 0,
    item: $8395852f5ec885ec$var$NodeList.prototype.item,
    getNamedItem: function(key) {
        //		if(key.indexOf(':')>0 || key == 'xmlns'){
        //			return null;
        //		}
        //console.log()
        var i = this.length;
        while(i--){
            var attr = this[i];
            //console.log(attr.nodeName,key)
            if (attr.nodeName == key) return attr;
        }
    },
    setNamedItem: function(attr) {
        var el = attr.ownerElement;
        if (el && el != this._ownerElement) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$INUSE_ATTRIBUTE_ERR);
        var oldAttr = this.getNamedItem(attr.nodeName);
        $8395852f5ec885ec$var$_addNamedNode(this._ownerElement, this, attr, oldAttr);
        return oldAttr;
    },
    /* returns Node */ setNamedItemNS: function(attr) {
        var el = attr.ownerElement, oldAttr;
        if (el && el != this._ownerElement) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$INUSE_ATTRIBUTE_ERR);
        oldAttr = this.getNamedItemNS(attr.namespaceURI, attr.localName);
        $8395852f5ec885ec$var$_addNamedNode(this._ownerElement, this, attr, oldAttr);
        return oldAttr;
    },
    /* returns Node */ removeNamedItem: function(key) {
        var attr = this.getNamedItem(key);
        $8395852f5ec885ec$var$_removeNamedNode(this._ownerElement, this, attr);
        return attr;
    },
    //for level2
    removeNamedItemNS: function(namespaceURI, localName) {
        var attr = this.getNamedItemNS(namespaceURI, localName);
        $8395852f5ec885ec$var$_removeNamedNode(this._ownerElement, this, attr);
        return attr;
    },
    getNamedItemNS: function(namespaceURI, localName) {
        var i = this.length;
        while(i--){
            var node = this[i];
            if (node.localName == localName && node.namespaceURI == namespaceURI) return node;
        }
        return null;
    }
};
/**
 * The DOMImplementation interface represents an object providing methods
 * which are not dependent on any particular document.
 * Such an object is returned by the `Document.implementation` property.
 *
 * __The individual methods describe the differences compared to the specs.__
 *
 * @constructor
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation MDN
 * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490 DOM Level 1 Core (Initial)
 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490 DOM Level 2 Core
 * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-102161490 DOM Level 3 Core
 * @see https://dom.spec.whatwg.org/#domimplementation DOM Living Standard
 */ function $8395852f5ec885ec$var$DOMImplementation() {}
$8395852f5ec885ec$var$DOMImplementation.prototype = {
    /**
	 * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.
	 * The different implementations fairly diverged in what kind of features were reported.
	 * The latest version of the spec settled to force this method to always return true, where the functionality was accurate and in use.
	 *
	 * @deprecated It is deprecated and modern browsers return true in all cases.
	 *
	 * @param {string} feature
	 * @param {string} [version]
	 * @returns {boolean} always true
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN
	 * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard
	 */ hasFeature: function(feature, version) {
        return true;
    },
    /**
	 * Creates an XML Document object of the specified type with its document element.
	 *
	 * __It behaves slightly different from the description in the living standard__:
	 * - There is no interface/class `XMLDocument`, it returns a `Document` instance.
	 * - `contentType`, `encoding`, `mode`, `origin`, `url` fields are currently not declared.
	 * - this implementation is not validating names or qualified names
	 *   (when parsing XML strings, the SAX parser takes care of that)
	 *
	 * @param {string|null} namespaceURI
	 * @param {string} qualifiedName
	 * @param {DocumentType=null} doctype
	 * @returns {Document}
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN
	 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM Level 2 Core (initial)
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument  DOM Level 2 Core
	 *
	 * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
	 * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
	 * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
	 */ createDocument: function(namespaceURI, qualifiedName, doctype) {
        var doc = new $8395852f5ec885ec$var$Document();
        doc.implementation = this;
        doc.childNodes = new $8395852f5ec885ec$var$NodeList();
        doc.doctype = doctype || null;
        if (doctype) doc.appendChild(doctype);
        if (qualifiedName) {
            var root = doc.createElementNS(namespaceURI, qualifiedName);
            doc.appendChild(root);
        }
        return doc;
    },
    /**
	 * Returns a doctype, with the given `qualifiedName`, `publicId`, and `systemId`.
	 *
	 * __This behavior is slightly different from the in the specs__:
	 * - this implementation is not validating names or qualified names
	 *   (when parsing XML strings, the SAX parser takes care of that)
	 *
	 * @param {string} qualifiedName
	 * @param {string} [publicId]
	 * @param {string} [systemId]
	 * @returns {DocumentType} which can either be used with `DOMImplementation.createDocument` upon document creation
	 * 				  or can be put into the document via methods like `Node.insertBefore()` or `Node.replaceChild()`
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType MDN
	 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM Level 2 Core
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living Standard
	 *
	 * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
	 * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
	 * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
	 */ createDocumentType: function(qualifiedName, publicId, systemId) {
        var node = new $8395852f5ec885ec$var$DocumentType();
        node.name = qualifiedName;
        node.nodeName = qualifiedName;
        node.publicId = publicId || "";
        node.systemId = systemId || "";
        return node;
    }
};
/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
 */ function $8395852f5ec885ec$var$Node() {}
$8395852f5ec885ec$var$Node.prototype = {
    firstChild: null,
    lastChild: null,
    previousSibling: null,
    nextSibling: null,
    attributes: null,
    parentNode: null,
    childNodes: null,
    ownerDocument: null,
    nodeValue: null,
    namespaceURI: null,
    prefix: null,
    localName: null,
    // Modified in DOM Level 2:
    insertBefore: function(newChild, refChild) {
        return $8395852f5ec885ec$var$_insertBefore(this, newChild, refChild);
    },
    replaceChild: function(newChild, oldChild) {
        $8395852f5ec885ec$var$_insertBefore(this, newChild, oldChild, $8395852f5ec885ec$var$assertPreReplacementValidityInDocument);
        if (oldChild) this.removeChild(oldChild);
    },
    removeChild: function(oldChild) {
        return $8395852f5ec885ec$var$_removeChild(this, oldChild);
    },
    appendChild: function(newChild) {
        return this.insertBefore(newChild, null);
    },
    hasChildNodes: function() {
        return this.firstChild != null;
    },
    cloneNode: function(deep) {
        return $8395852f5ec885ec$var$cloneNode(this.ownerDocument || this, this, deep);
    },
    // Modified in DOM Level 2:
    normalize: function() {
        var child = this.firstChild;
        while(child){
            var next = child.nextSibling;
            if (next && next.nodeType == $8395852f5ec885ec$var$TEXT_NODE && child.nodeType == $8395852f5ec885ec$var$TEXT_NODE) {
                this.removeChild(next);
                child.appendData(next.data);
            } else {
                child.normalize();
                child = next;
            }
        }
    },
    // Introduced in DOM Level 2:
    isSupported: function(feature, version) {
        return this.ownerDocument.implementation.hasFeature(feature, version);
    },
    // Introduced in DOM Level 2:
    hasAttributes: function() {
        return this.attributes.length > 0;
    },
    /**
	 * Look up the prefix associated to the given namespace URI, starting from this node.
	 * **The default namespace declarations are ignored by this method.**
	 * See Namespace Prefix Lookup for details on the algorithm used by this method.
	 *
	 * _Note: The implementation seems to be incomplete when compared to the algorithm described in the specs._
	 *
	 * @param {string | null} namespaceURI
	 * @returns {string | null}
	 * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix
	 * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo
	 * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix
	 * @see https://github.com/xmldom/xmldom/issues/322
	 */ lookupPrefix: function(namespaceURI) {
        var el = this;
        while(el){
            var map = el._nsMap;
            //console.dir(map)
            if (map) for(var n in map){
                if (Object.prototype.hasOwnProperty.call(map, n) && map[n] === namespaceURI) return n;
            }
            el = el.nodeType == $8395852f5ec885ec$var$ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;
        }
        return null;
    },
    // Introduced in DOM Level 3:
    lookupNamespaceURI: function(prefix) {
        var el = this;
        while(el){
            var map = el._nsMap;
            //console.dir(map)
            if (map) {
                if (Object.prototype.hasOwnProperty.call(map, prefix)) return map[prefix];
            }
            el = el.nodeType == $8395852f5ec885ec$var$ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;
        }
        return null;
    },
    // Introduced in DOM Level 3:
    isDefaultNamespace: function(namespaceURI) {
        var prefix = this.lookupPrefix(namespaceURI);
        return prefix == null;
    }
};
function $8395852f5ec885ec$var$_xmlEncoder(c) {
    return c == "<" && "&lt;" || c == ">" && "&gt;" || c == "&" && "&amp;" || c == '"' && "&quot;" || "&#" + c.charCodeAt() + ";";
}
$8395852f5ec885ec$var$copy($8395852f5ec885ec$var$NodeType, $8395852f5ec885ec$var$Node);
$8395852f5ec885ec$var$copy($8395852f5ec885ec$var$NodeType, $8395852f5ec885ec$var$Node.prototype);
/**
 * @param callback return true for continue,false for break
 * @return boolean true: break visit;
 */ function $8395852f5ec885ec$var$_visitNode(node, callback) {
    if (callback(node)) return true;
    if (node = node.firstChild) do {
        if ($8395852f5ec885ec$var$_visitNode(node, callback)) return true;
    }while (node = node.nextSibling);
}
function $8395852f5ec885ec$var$Document() {
    this.ownerDocument = this;
}
function $8395852f5ec885ec$var$_onAddAttribute(doc, el, newAttr) {
    doc && doc._inc++;
    var ns = newAttr.namespaceURI;
    if (ns === $8395852f5ec885ec$var$NAMESPACE.XMLNS) //update namespace
    el._nsMap[newAttr.prefix ? newAttr.localName : ""] = newAttr.value;
}
function $8395852f5ec885ec$var$_onRemoveAttribute(doc, el, newAttr, remove) {
    doc && doc._inc++;
    var ns = newAttr.namespaceURI;
    if (ns === $8395852f5ec885ec$var$NAMESPACE.XMLNS) //update namespace
    delete el._nsMap[newAttr.prefix ? newAttr.localName : ""];
}
/**
 * Updates `el.childNodes`, updating the indexed items and it's `length`.
 * Passing `newChild` means it will be appended.
 * Otherwise it's assumed that an item has been removed,
 * and `el.firstNode` and it's `.nextSibling` are used
 * to walk the current list of child nodes.
 *
 * @param {Document} doc
 * @param {Node} el
 * @param {Node} [newChild]
 * @private
 */ function $8395852f5ec885ec$var$_onUpdateChild(doc, el, newChild) {
    if (doc && doc._inc) {
        doc._inc++;
        //update childNodes
        var cs = el.childNodes;
        if (newChild) cs[cs.length++] = newChild;
        else {
            var child = el.firstChild;
            var i = 0;
            while(child){
                cs[i++] = child;
                child = child.nextSibling;
            }
            cs.length = i;
            delete cs[cs.length];
        }
    }
}
/**
 * Removes the connections between `parentNode` and `child`
 * and any existing `child.previousSibling` or `child.nextSibling`.
 *
 * @see https://github.com/xmldom/xmldom/issues/135
 * @see https://github.com/xmldom/xmldom/issues/145
 *
 * @param {Node} parentNode
 * @param {Node} child
 * @returns {Node} the child that was removed.
 * @private
 */ function $8395852f5ec885ec$var$_removeChild(parentNode, child) {
    var previous = child.previousSibling;
    var next = child.nextSibling;
    if (previous) previous.nextSibling = next;
    else parentNode.firstChild = next;
    if (next) next.previousSibling = previous;
    else parentNode.lastChild = previous;
    child.parentNode = null;
    child.previousSibling = null;
    child.nextSibling = null;
    $8395852f5ec885ec$var$_onUpdateChild(parentNode.ownerDocument, parentNode);
    return child;
}
/**
 * Returns `true` if `node` can be a parent for insertion.
 * @param {Node} node
 * @returns {boolean}
 */ function $8395852f5ec885ec$var$hasValidParentNodeType(node) {
    return node && (node.nodeType === $8395852f5ec885ec$var$Node.DOCUMENT_NODE || node.nodeType === $8395852f5ec885ec$var$Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === $8395852f5ec885ec$var$Node.ELEMENT_NODE);
}
/**
 * Returns `true` if `node` can be inserted according to it's `nodeType`.
 * @param {Node} node
 * @returns {boolean}
 */ function $8395852f5ec885ec$var$hasInsertableNodeType(node) {
    return node && ($8395852f5ec885ec$var$isElementNode(node) || $8395852f5ec885ec$var$isTextNode(node) || $8395852f5ec885ec$var$isDocTypeNode(node) || node.nodeType === $8395852f5ec885ec$var$Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === $8395852f5ec885ec$var$Node.COMMENT_NODE || node.nodeType === $8395852f5ec885ec$var$Node.PROCESSING_INSTRUCTION_NODE);
}
/**
 * Returns true if `node` is a DOCTYPE node
 * @param {Node} node
 * @returns {boolean}
 */ function $8395852f5ec885ec$var$isDocTypeNode(node) {
    return node && node.nodeType === $8395852f5ec885ec$var$Node.DOCUMENT_TYPE_NODE;
}
/**
 * Returns true if the node is an element
 * @param {Node} node
 * @returns {boolean}
 */ function $8395852f5ec885ec$var$isElementNode(node) {
    return node && node.nodeType === $8395852f5ec885ec$var$Node.ELEMENT_NODE;
}
/**
 * Returns true if `node` is a text node
 * @param {Node} node
 * @returns {boolean}
 */ function $8395852f5ec885ec$var$isTextNode(node) {
    return node && node.nodeType === $8395852f5ec885ec$var$Node.TEXT_NODE;
}
/**
 * Check if en element node can be inserted before `child`, or at the end if child is falsy,
 * according to the presence and position of a doctype node on the same level.
 *
 * @param {Document} doc The document node
 * @param {Node} child the node that would become the nextSibling if the element would be inserted
 * @returns {boolean} `true` if an element can be inserted before child
 * @private
 * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 */ function $8395852f5ec885ec$var$isElementInsertionPossible(doc, child) {
    var parentChildNodes = doc.childNodes || [];
    if ($8395852f5ec885ec$var$find(parentChildNodes, $8395852f5ec885ec$var$isElementNode) || $8395852f5ec885ec$var$isDocTypeNode(child)) return false;
    var docTypeNode = $8395852f5ec885ec$var$find(parentChildNodes, $8395852f5ec885ec$var$isDocTypeNode);
    return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));
}
/**
 * Check if en element node can be inserted before `child`, or at the end if child is falsy,
 * according to the presence and position of a doctype node on the same level.
 *
 * @param {Node} doc The document node
 * @param {Node} child the node that would become the nextSibling if the element would be inserted
 * @returns {boolean} `true` if an element can be inserted before child
 * @private
 * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 */ function $8395852f5ec885ec$var$isElementReplacementPossible(doc, child) {
    var parentChildNodes = doc.childNodes || [];
    function hasElementChildThatIsNotChild(node) {
        return $8395852f5ec885ec$var$isElementNode(node) && node !== child;
    }
    if ($8395852f5ec885ec$var$find(parentChildNodes, hasElementChildThatIsNotChild)) return false;
    var docTypeNode = $8395852f5ec885ec$var$find(parentChildNodes, $8395852f5ec885ec$var$isDocTypeNode);
    return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));
}
/**
 * @private
 * Steps 1-5 of the checks before inserting and before replacing a child are the same.
 *
 * @param {Node} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node=} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 * @see https://dom.spec.whatwg.org/#concept-node-replace
 */ function $8395852f5ec885ec$var$assertPreInsertionValidity1to5(parent, node, child) {
    // 1. If `parent` is not a Document, DocumentFragment, or Element node, then throw a "HierarchyRequestError" DOMException.
    if (!$8395852f5ec885ec$var$hasValidParentNodeType(parent)) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$HIERARCHY_REQUEST_ERR, "Unexpected parent node type " + parent.nodeType);
    // 2. If `node` is a host-including inclusive ancestor of `parent`, then throw a "HierarchyRequestError" DOMException.
    // not implemented!
    // 3. If `child` is non-null and its parent is not `parent`, then throw a "NotFoundError" DOMException.
    if (child && child.parentNode !== parent) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$NOT_FOUND_ERR, "child not in parent");
    if (// 4. If `node` is not a DocumentFragment, DocumentType, Element, or CharacterData node, then throw a "HierarchyRequestError" DOMException.
    !$8395852f5ec885ec$var$hasInsertableNodeType(node) || // 5. If either `node` is a Text node and `parent` is a document,
    // the sax parser currently adds top level text nodes, this will be fixed in 0.9.0
    // || (node.nodeType === Node.TEXT_NODE && parent.nodeType === Node.DOCUMENT_NODE)
    // or `node` is a doctype and `parent` is not a document, then throw a "HierarchyRequestError" DOMException.
    $8395852f5ec885ec$var$isDocTypeNode(node) && parent.nodeType !== $8395852f5ec885ec$var$Node.DOCUMENT_NODE) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$HIERARCHY_REQUEST_ERR, "Unexpected node type " + node.nodeType + " for parent node type " + parent.nodeType);
}
/**
 * @private
 * Step 6 of the checks before inserting and before replacing a child are different.
 *
 * @param {Document} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node | undefined} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 * @see https://dom.spec.whatwg.org/#concept-node-replace
 */ function $8395852f5ec885ec$var$assertPreInsertionValidityInDocument(parent, node, child) {
    var parentChildNodes = parent.childNodes || [];
    var nodeChildNodes = node.childNodes || [];
    // DocumentFragment
    if (node.nodeType === $8395852f5ec885ec$var$Node.DOCUMENT_FRAGMENT_NODE) {
        var nodeChildElements = nodeChildNodes.filter($8395852f5ec885ec$var$isElementNode);
        // If node has more than one element child or has a Text node child.
        if (nodeChildElements.length > 1 || $8395852f5ec885ec$var$find(nodeChildNodes, $8395852f5ec885ec$var$isTextNode)) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$HIERARCHY_REQUEST_ERR, "More than one element or text in fragment");
        // Otherwise, if `node` has one element child and either `parent` has an element child,
        // `child` is a doctype, or `child` is non-null and a doctype is following `child`.
        if (nodeChildElements.length === 1 && !$8395852f5ec885ec$var$isElementInsertionPossible(parent, child)) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$HIERARCHY_REQUEST_ERR, "Element in fragment can not be inserted before doctype");
    }
    // Element
    if ($8395852f5ec885ec$var$isElementNode(node)) {
        // `parent` has an element child, `child` is a doctype,
        // or `child` is non-null and a doctype is following `child`.
        if (!$8395852f5ec885ec$var$isElementInsertionPossible(parent, child)) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$HIERARCHY_REQUEST_ERR, "Only one element can be added and only after doctype");
    }
    // DocumentType
    if ($8395852f5ec885ec$var$isDocTypeNode(node)) {
        // `parent` has a doctype child,
        if ($8395852f5ec885ec$var$find(parentChildNodes, $8395852f5ec885ec$var$isDocTypeNode)) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$HIERARCHY_REQUEST_ERR, "Only one doctype is allowed");
        var parentElementChild = $8395852f5ec885ec$var$find(parentChildNodes, $8395852f5ec885ec$var$isElementNode);
        // `child` is non-null and an element is preceding `child`,
        if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$HIERARCHY_REQUEST_ERR, "Doctype can only be inserted before an element");
        // or `child` is null and `parent` has an element child.
        if (!child && parentElementChild) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$HIERARCHY_REQUEST_ERR, "Doctype can not be appended since element is present");
    }
}
/**
 * @private
 * Step 6 of the checks before inserting and before replacing a child are different.
 *
 * @param {Document} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node | undefined} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 * @see https://dom.spec.whatwg.org/#concept-node-replace
 */ function $8395852f5ec885ec$var$assertPreReplacementValidityInDocument(parent, node, child) {
    var parentChildNodes = parent.childNodes || [];
    var nodeChildNodes = node.childNodes || [];
    // DocumentFragment
    if (node.nodeType === $8395852f5ec885ec$var$Node.DOCUMENT_FRAGMENT_NODE) {
        var nodeChildElements = nodeChildNodes.filter($8395852f5ec885ec$var$isElementNode);
        // If `node` has more than one element child or has a Text node child.
        if (nodeChildElements.length > 1 || $8395852f5ec885ec$var$find(nodeChildNodes, $8395852f5ec885ec$var$isTextNode)) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$HIERARCHY_REQUEST_ERR, "More than one element or text in fragment");
        // Otherwise, if `node` has one element child and either `parent` has an element child that is not `child` or a doctype is following `child`.
        if (nodeChildElements.length === 1 && !$8395852f5ec885ec$var$isElementReplacementPossible(parent, child)) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$HIERARCHY_REQUEST_ERR, "Element in fragment can not be inserted before doctype");
    }
    // Element
    if ($8395852f5ec885ec$var$isElementNode(node)) {
        // `parent` has an element child that is not `child` or a doctype is following `child`.
        if (!$8395852f5ec885ec$var$isElementReplacementPossible(parent, child)) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$HIERARCHY_REQUEST_ERR, "Only one element can be added and only after doctype");
    }
    // DocumentType
    if ($8395852f5ec885ec$var$isDocTypeNode(node)) {
        function hasDoctypeChildThatIsNotChild(node) {
            return $8395852f5ec885ec$var$isDocTypeNode(node) && node !== child;
        }
        // `parent` has a doctype child that is not `child`,
        if ($8395852f5ec885ec$var$find(parentChildNodes, hasDoctypeChildThatIsNotChild)) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$HIERARCHY_REQUEST_ERR, "Only one doctype is allowed");
        var parentElementChild = $8395852f5ec885ec$var$find(parentChildNodes, $8395852f5ec885ec$var$isElementNode);
        // or an element is preceding `child`.
        if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) throw new $8395852f5ec885ec$var$DOMException($8395852f5ec885ec$var$HIERARCHY_REQUEST_ERR, "Doctype can only be inserted before an element");
    }
}
/**
 * @private
 * @param {Node} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node=} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 */ function $8395852f5ec885ec$var$_insertBefore(parent, node, child, _inDocumentAssertion) {
    // To ensure pre-insertion validity of a node into a parent before a child, run these steps:
    $8395852f5ec885ec$var$assertPreInsertionValidity1to5(parent, node, child);
    // If parent is a document, and any of the statements below, switched on the interface node implements,
    // are true, then throw a "HierarchyRequestError" DOMException.
    if (parent.nodeType === $8395852f5ec885ec$var$Node.DOCUMENT_NODE) (_inDocumentAssertion || $8395852f5ec885ec$var$assertPreInsertionValidityInDocument)(parent, node, child);
    var cp = node.parentNode;
    if (cp) cp.removeChild(node); //remove and update
    if (node.nodeType === $8395852f5ec885ec$var$DOCUMENT_FRAGMENT_NODE) {
        var newFirst = node.firstChild;
        if (newFirst == null) return node;
        var newLast = node.lastChild;
    } else newFirst = newLast = node;
    var pre = child ? child.previousSibling : parent.lastChild;
    newFirst.previousSibling = pre;
    newLast.nextSibling = child;
    if (pre) pre.nextSibling = newFirst;
    else parent.firstChild = newFirst;
    if (child == null) parent.lastChild = newLast;
    else child.previousSibling = newLast;
    do newFirst.parentNode = parent;
    while (newFirst !== newLast && (newFirst = newFirst.nextSibling));
    $8395852f5ec885ec$var$_onUpdateChild(parent.ownerDocument || parent, parent);
    //console.log(parent.lastChild.nextSibling == null)
    if (node.nodeType == $8395852f5ec885ec$var$DOCUMENT_FRAGMENT_NODE) node.firstChild = node.lastChild = null;
    return node;
}
/**
 * Appends `newChild` to `parentNode`.
 * If `newChild` is already connected to a `parentNode` it is first removed from it.
 *
 * @see https://github.com/xmldom/xmldom/issues/135
 * @see https://github.com/xmldom/xmldom/issues/145
 * @param {Node} parentNode
 * @param {Node} newChild
 * @returns {Node}
 * @private
 */ function $8395852f5ec885ec$var$_appendSingleChild(parentNode, newChild) {
    if (newChild.parentNode) newChild.parentNode.removeChild(newChild);
    newChild.parentNode = parentNode;
    newChild.previousSibling = parentNode.lastChild;
    newChild.nextSibling = null;
    if (newChild.previousSibling) newChild.previousSibling.nextSibling = newChild;
    else parentNode.firstChild = newChild;
    parentNode.lastChild = newChild;
    $8395852f5ec885ec$var$_onUpdateChild(parentNode.ownerDocument, parentNode, newChild);
    return newChild;
}
$8395852f5ec885ec$var$Document.prototype = {
    //implementation : null,
    nodeName: "#document",
    nodeType: $8395852f5ec885ec$var$DOCUMENT_NODE,
    /**
	 * The DocumentType node of the document.
	 *
	 * @readonly
	 * @type DocumentType
	 */ doctype: null,
    documentElement: null,
    _inc: 1,
    insertBefore: function(newChild, refChild) {
        if (newChild.nodeType == $8395852f5ec885ec$var$DOCUMENT_FRAGMENT_NODE) {
            var child = newChild.firstChild;
            while(child){
                var next = child.nextSibling;
                this.insertBefore(child, refChild);
                child = next;
            }
            return newChild;
        }
        $8395852f5ec885ec$var$_insertBefore(this, newChild, refChild);
        newChild.ownerDocument = this;
        if (this.documentElement === null && newChild.nodeType === $8395852f5ec885ec$var$ELEMENT_NODE) this.documentElement = newChild;
        return newChild;
    },
    removeChild: function(oldChild) {
        if (this.documentElement == oldChild) this.documentElement = null;
        return $8395852f5ec885ec$var$_removeChild(this, oldChild);
    },
    replaceChild: function(newChild, oldChild) {
        //raises
        $8395852f5ec885ec$var$_insertBefore(this, newChild, oldChild, $8395852f5ec885ec$var$assertPreReplacementValidityInDocument);
        newChild.ownerDocument = this;
        if (oldChild) this.removeChild(oldChild);
        if ($8395852f5ec885ec$var$isElementNode(newChild)) this.documentElement = newChild;
    },
    // Introduced in DOM Level 2:
    importNode: function(importedNode, deep) {
        return $8395852f5ec885ec$var$importNode(this, importedNode, deep);
    },
    // Introduced in DOM Level 2:
    getElementById: function(id) {
        var rtv = null;
        $8395852f5ec885ec$var$_visitNode(this.documentElement, function(node) {
            if (node.nodeType == $8395852f5ec885ec$var$ELEMENT_NODE) {
                if (node.getAttribute("id") == id) {
                    rtv = node;
                    return true;
                }
            }
        });
        return rtv;
    },
    /**
	 * The `getElementsByClassName` method of `Document` interface returns an array-like object
	 * of all child elements which have **all** of the given class name(s).
	 *
	 * Returns an empty list if `classeNames` is an empty string or only contains HTML white space characters.
	 *
	 *
	 * Warning: This is a live LiveNodeList.
	 * Changes in the DOM will reflect in the array as the changes occur.
	 * If an element selected by this array no longer qualifies for the selector,
	 * it will automatically be removed. Be aware of this for iteration purposes.
	 *
	 * @param {string} classNames is a string representing the class name(s) to match; multiple class names are separated by (ASCII-)whitespace
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
	 * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname
	 */ getElementsByClassName: function(classNames) {
        var classNamesSet = $8395852f5ec885ec$var$toOrderedSet(classNames);
        return new $8395852f5ec885ec$var$LiveNodeList(this, function(base) {
            var ls = [];
            if (classNamesSet.length > 0) $8395852f5ec885ec$var$_visitNode(base.documentElement, function(node) {
                if (node !== base && node.nodeType === $8395852f5ec885ec$var$ELEMENT_NODE) {
                    var nodeClassNames = node.getAttribute("class");
                    // can be null if the attribute does not exist
                    if (nodeClassNames) {
                        // before splitting and iterating just compare them for the most common case
                        var matches = classNames === nodeClassNames;
                        if (!matches) {
                            var nodeClassNamesSet = $8395852f5ec885ec$var$toOrderedSet(nodeClassNames);
                            matches = classNamesSet.every($8395852f5ec885ec$var$arrayIncludes(nodeClassNamesSet));
                        }
                        if (matches) ls.push(node);
                    }
                }
            });
            return ls;
        });
    },
    //document factory method:
    createElement: function(tagName) {
        var node = new $8395852f5ec885ec$var$Element();
        node.ownerDocument = this;
        node.nodeName = tagName;
        node.tagName = tagName;
        node.localName = tagName;
        node.childNodes = new $8395852f5ec885ec$var$NodeList();
        var attrs = node.attributes = new $8395852f5ec885ec$var$NamedNodeMap();
        attrs._ownerElement = node;
        return node;
    },
    createDocumentFragment: function() {
        var node = new $8395852f5ec885ec$var$DocumentFragment();
        node.ownerDocument = this;
        node.childNodes = new $8395852f5ec885ec$var$NodeList();
        return node;
    },
    createTextNode: function(data) {
        var node = new $8395852f5ec885ec$var$Text();
        node.ownerDocument = this;
        node.appendData(data);
        return node;
    },
    createComment: function(data) {
        var node = new $8395852f5ec885ec$var$Comment();
        node.ownerDocument = this;
        node.appendData(data);
        return node;
    },
    createCDATASection: function(data) {
        var node = new $8395852f5ec885ec$var$CDATASection();
        node.ownerDocument = this;
        node.appendData(data);
        return node;
    },
    createProcessingInstruction: function(target, data) {
        var node = new $8395852f5ec885ec$var$ProcessingInstruction();
        node.ownerDocument = this;
        node.tagName = node.nodeName = node.target = target;
        node.nodeValue = node.data = data;
        return node;
    },
    createAttribute: function(name) {
        var node = new $8395852f5ec885ec$var$Attr();
        node.ownerDocument = this;
        node.name = name;
        node.nodeName = name;
        node.localName = name;
        node.specified = true;
        return node;
    },
    createEntityReference: function(name) {
        var node = new $8395852f5ec885ec$var$EntityReference();
        node.ownerDocument = this;
        node.nodeName = name;
        return node;
    },
    // Introduced in DOM Level 2:
    createElementNS: function(namespaceURI, qualifiedName) {
        var node = new $8395852f5ec885ec$var$Element();
        var pl = qualifiedName.split(":");
        var attrs = node.attributes = new $8395852f5ec885ec$var$NamedNodeMap();
        node.childNodes = new $8395852f5ec885ec$var$NodeList();
        node.ownerDocument = this;
        node.nodeName = qualifiedName;
        node.tagName = qualifiedName;
        node.namespaceURI = namespaceURI;
        if (pl.length == 2) {
            node.prefix = pl[0];
            node.localName = pl[1];
        } else //el.prefix = null;
        node.localName = qualifiedName;
        attrs._ownerElement = node;
        return node;
    },
    // Introduced in DOM Level 2:
    createAttributeNS: function(namespaceURI, qualifiedName) {
        var node = new $8395852f5ec885ec$var$Attr();
        var pl = qualifiedName.split(":");
        node.ownerDocument = this;
        node.nodeName = qualifiedName;
        node.name = qualifiedName;
        node.namespaceURI = namespaceURI;
        node.specified = true;
        if (pl.length == 2) {
            node.prefix = pl[0];
            node.localName = pl[1];
        } else //el.prefix = null;
        node.localName = qualifiedName;
        return node;
    }
};
$8395852f5ec885ec$var$_extends($8395852f5ec885ec$var$Document, $8395852f5ec885ec$var$Node);
function $8395852f5ec885ec$var$Element() {
    this._nsMap = {};
}
$8395852f5ec885ec$var$Element.prototype = {
    nodeType: $8395852f5ec885ec$var$ELEMENT_NODE,
    hasAttribute: function(name) {
        return this.getAttributeNode(name) != null;
    },
    getAttribute: function(name) {
        var attr = this.getAttributeNode(name);
        return attr && attr.value || "";
    },
    getAttributeNode: function(name) {
        return this.attributes.getNamedItem(name);
    },
    setAttribute: function(name, value) {
        var attr = this.ownerDocument.createAttribute(name);
        attr.value = attr.nodeValue = "" + value;
        this.setAttributeNode(attr);
    },
    removeAttribute: function(name) {
        var attr = this.getAttributeNode(name);
        attr && this.removeAttributeNode(attr);
    },
    //four real opeartion method
    appendChild: function(newChild) {
        if (newChild.nodeType === $8395852f5ec885ec$var$DOCUMENT_FRAGMENT_NODE) return this.insertBefore(newChild, null);
        else return $8395852f5ec885ec$var$_appendSingleChild(this, newChild);
    },
    setAttributeNode: function(newAttr) {
        return this.attributes.setNamedItem(newAttr);
    },
    setAttributeNodeNS: function(newAttr) {
        return this.attributes.setNamedItemNS(newAttr);
    },
    removeAttributeNode: function(oldAttr) {
        //console.log(this == oldAttr.ownerElement)
        return this.attributes.removeNamedItem(oldAttr.nodeName);
    },
    //get real attribute name,and remove it by removeAttributeNode
    removeAttributeNS: function(namespaceURI, localName) {
        var old = this.getAttributeNodeNS(namespaceURI, localName);
        old && this.removeAttributeNode(old);
    },
    hasAttributeNS: function(namespaceURI, localName) {
        return this.getAttributeNodeNS(namespaceURI, localName) != null;
    },
    getAttributeNS: function(namespaceURI, localName) {
        var attr = this.getAttributeNodeNS(namespaceURI, localName);
        return attr && attr.value || "";
    },
    setAttributeNS: function(namespaceURI, qualifiedName, value) {
        var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
        attr.value = attr.nodeValue = "" + value;
        this.setAttributeNode(attr);
    },
    getAttributeNodeNS: function(namespaceURI, localName) {
        return this.attributes.getNamedItemNS(namespaceURI, localName);
    },
    getElementsByTagName: function(tagName) {
        return new $8395852f5ec885ec$var$LiveNodeList(this, function(base) {
            var ls = [];
            $8395852f5ec885ec$var$_visitNode(base, function(node) {
                if (node !== base && node.nodeType == $8395852f5ec885ec$var$ELEMENT_NODE && (tagName === "*" || node.tagName == tagName)) ls.push(node);
            });
            return ls;
        });
    },
    getElementsByTagNameNS: function(namespaceURI, localName) {
        return new $8395852f5ec885ec$var$LiveNodeList(this, function(base) {
            var ls = [];
            $8395852f5ec885ec$var$_visitNode(base, function(node) {
                if (node !== base && node.nodeType === $8395852f5ec885ec$var$ELEMENT_NODE && (namespaceURI === "*" || node.namespaceURI === namespaceURI) && (localName === "*" || node.localName == localName)) ls.push(node);
            });
            return ls;
        });
    }
};
$8395852f5ec885ec$var$Document.prototype.getElementsByTagName = $8395852f5ec885ec$var$Element.prototype.getElementsByTagName;
$8395852f5ec885ec$var$Document.prototype.getElementsByTagNameNS = $8395852f5ec885ec$var$Element.prototype.getElementsByTagNameNS;
$8395852f5ec885ec$var$_extends($8395852f5ec885ec$var$Element, $8395852f5ec885ec$var$Node);
function $8395852f5ec885ec$var$Attr() {}
$8395852f5ec885ec$var$Attr.prototype.nodeType = $8395852f5ec885ec$var$ATTRIBUTE_NODE;
$8395852f5ec885ec$var$_extends($8395852f5ec885ec$var$Attr, $8395852f5ec885ec$var$Node);
function $8395852f5ec885ec$var$CharacterData() {}
$8395852f5ec885ec$var$CharacterData.prototype = {
    data: "",
    substringData: function(offset, count) {
        return this.data.substring(offset, offset + count);
    },
    appendData: function(text) {
        text = this.data + text;
        this.nodeValue = this.data = text;
        this.length = text.length;
    },
    insertData: function(offset, text) {
        this.replaceData(offset, 0, text);
    },
    appendChild: function(newChild) {
        throw new Error($8395852f5ec885ec$var$ExceptionMessage[$8395852f5ec885ec$var$HIERARCHY_REQUEST_ERR]);
    },
    deleteData: function(offset, count) {
        this.replaceData(offset, count, "");
    },
    replaceData: function(offset, count, text) {
        var start = this.data.substring(0, offset);
        var end = this.data.substring(offset + count);
        text = start + text + end;
        this.nodeValue = this.data = text;
        this.length = text.length;
    }
};
$8395852f5ec885ec$var$_extends($8395852f5ec885ec$var$CharacterData, $8395852f5ec885ec$var$Node);
function $8395852f5ec885ec$var$Text() {}
$8395852f5ec885ec$var$Text.prototype = {
    nodeName: "#text",
    nodeType: $8395852f5ec885ec$var$TEXT_NODE,
    splitText: function(offset) {
        var text = this.data;
        var newText = text.substring(offset);
        text = text.substring(0, offset);
        this.data = this.nodeValue = text;
        this.length = text.length;
        var newNode = this.ownerDocument.createTextNode(newText);
        if (this.parentNode) this.parentNode.insertBefore(newNode, this.nextSibling);
        return newNode;
    }
};
$8395852f5ec885ec$var$_extends($8395852f5ec885ec$var$Text, $8395852f5ec885ec$var$CharacterData);
function $8395852f5ec885ec$var$Comment() {}
$8395852f5ec885ec$var$Comment.prototype = {
    nodeName: "#comment",
    nodeType: $8395852f5ec885ec$var$COMMENT_NODE
};
$8395852f5ec885ec$var$_extends($8395852f5ec885ec$var$Comment, $8395852f5ec885ec$var$CharacterData);
function $8395852f5ec885ec$var$CDATASection() {}
$8395852f5ec885ec$var$CDATASection.prototype = {
    nodeName: "#cdata-section",
    nodeType: $8395852f5ec885ec$var$CDATA_SECTION_NODE
};
$8395852f5ec885ec$var$_extends($8395852f5ec885ec$var$CDATASection, $8395852f5ec885ec$var$CharacterData);
function $8395852f5ec885ec$var$DocumentType() {}
$8395852f5ec885ec$var$DocumentType.prototype.nodeType = $8395852f5ec885ec$var$DOCUMENT_TYPE_NODE;
$8395852f5ec885ec$var$_extends($8395852f5ec885ec$var$DocumentType, $8395852f5ec885ec$var$Node);
function $8395852f5ec885ec$var$Notation() {}
$8395852f5ec885ec$var$Notation.prototype.nodeType = $8395852f5ec885ec$var$NOTATION_NODE;
$8395852f5ec885ec$var$_extends($8395852f5ec885ec$var$Notation, $8395852f5ec885ec$var$Node);
function $8395852f5ec885ec$var$Entity() {}
$8395852f5ec885ec$var$Entity.prototype.nodeType = $8395852f5ec885ec$var$ENTITY_NODE;
$8395852f5ec885ec$var$_extends($8395852f5ec885ec$var$Entity, $8395852f5ec885ec$var$Node);
function $8395852f5ec885ec$var$EntityReference() {}
$8395852f5ec885ec$var$EntityReference.prototype.nodeType = $8395852f5ec885ec$var$ENTITY_REFERENCE_NODE;
$8395852f5ec885ec$var$_extends($8395852f5ec885ec$var$EntityReference, $8395852f5ec885ec$var$Node);
function $8395852f5ec885ec$var$DocumentFragment() {}
$8395852f5ec885ec$var$DocumentFragment.prototype.nodeName = "#document-fragment";
$8395852f5ec885ec$var$DocumentFragment.prototype.nodeType = $8395852f5ec885ec$var$DOCUMENT_FRAGMENT_NODE;
$8395852f5ec885ec$var$_extends($8395852f5ec885ec$var$DocumentFragment, $8395852f5ec885ec$var$Node);
function $8395852f5ec885ec$var$ProcessingInstruction() {}
$8395852f5ec885ec$var$ProcessingInstruction.prototype.nodeType = $8395852f5ec885ec$var$PROCESSING_INSTRUCTION_NODE;
$8395852f5ec885ec$var$_extends($8395852f5ec885ec$var$ProcessingInstruction, $8395852f5ec885ec$var$Node);
function $8395852f5ec885ec$var$XMLSerializer() {}
$8395852f5ec885ec$var$XMLSerializer.prototype.serializeToString = function(node, isHtml, nodeFilter) {
    return $8395852f5ec885ec$var$nodeSerializeToString.call(node, isHtml, nodeFilter);
};
$8395852f5ec885ec$var$Node.prototype.toString = $8395852f5ec885ec$var$nodeSerializeToString;
function $8395852f5ec885ec$var$nodeSerializeToString(isHtml, nodeFilter) {
    var buf = [];
    var refNode = this.nodeType == 9 && this.documentElement || this;
    var prefix = refNode.prefix;
    var uri = refNode.namespaceURI;
    if (uri && prefix == null) {
        //console.log(prefix)
        var prefix = refNode.lookupPrefix(uri);
        if (prefix == null) //isHTML = true;
        var visibleNamespaces = [
            {
                namespace: uri,
                prefix: null
            }
        ];
    }
    $8395852f5ec885ec$var$serializeToString(this, buf, isHtml, nodeFilter, visibleNamespaces);
    //console.log('###',this.nodeType,uri,prefix,buf.join(''))
    return buf.join("");
}
function $8395852f5ec885ec$var$needNamespaceDefine(node, isHTML, visibleNamespaces) {
    var prefix = node.prefix || "";
    var uri = node.namespaceURI;
    // According to [Namespaces in XML 1.0](https://www.w3.org/TR/REC-xml-names/#ns-using) ,
    // and more specifically https://www.w3.org/TR/REC-xml-names/#nsc-NoPrefixUndecl :
    // > In a namespace declaration for a prefix [...], the attribute value MUST NOT be empty.
    // in a similar manner [Namespaces in XML 1.1](https://www.w3.org/TR/xml-names11/#ns-using)
    // and more specifically https://www.w3.org/TR/xml-names11/#nsc-NSDeclared :
    // > [...] Furthermore, the attribute value [...] must not be an empty string.
    // so serializing empty namespace value like xmlns:ds="" would produce an invalid XML document.
    if (!uri) return false;
    if (prefix === "xml" && uri === $8395852f5ec885ec$var$NAMESPACE.XML || uri === $8395852f5ec885ec$var$NAMESPACE.XMLNS) return false;
    var i = visibleNamespaces.length;
    while(i--){
        var ns = visibleNamespaces[i];
        // get namespace prefix
        if (ns.prefix === prefix) return ns.namespace !== uri;
    }
    return true;
}
/**
 * Well-formed constraint: No < in Attribute Values
 * > The replacement text of any entity referred to directly or indirectly
 * > in an attribute value must not contain a <.
 * @see https://www.w3.org/TR/xml11/#CleanAttrVals
 * @see https://www.w3.org/TR/xml11/#NT-AttValue
 *
 * Literal whitespace other than space that appear in attribute values
 * are serialized as their entity references, so they will be preserved.
 * (In contrast to whitespace literals in the input which are normalized to spaces)
 * @see https://www.w3.org/TR/xml11/#AVNormalize
 * @see https://w3c.github.io/DOM-Parsing/#serializing-an-element-s-attributes
 */ function $8395852f5ec885ec$var$addSerializedAttribute(buf, qualifiedName, value) {
    buf.push(" ", qualifiedName, '="', value.replace(/[<>&"\t\n\r]/g, $8395852f5ec885ec$var$_xmlEncoder), '"');
}
function $8395852f5ec885ec$var$serializeToString(node, buf, isHTML, nodeFilter, visibleNamespaces) {
    if (!visibleNamespaces) visibleNamespaces = [];
    if (nodeFilter) {
        node = nodeFilter(node);
        if (node) {
            if (typeof node == "string") {
                buf.push(node);
                return;
            }
        } else return;
    //buf.sort.apply(attrs, attributeSorter);
    }
    switch(node.nodeType){
        case $8395852f5ec885ec$var$ELEMENT_NODE:
            var attrs = node.attributes;
            var len = attrs.length;
            var child = node.firstChild;
            var nodeName = node.tagName;
            isHTML = $8395852f5ec885ec$var$NAMESPACE.isHTML(node.namespaceURI) || isHTML;
            var prefixedNodeName = nodeName;
            if (!isHTML && !node.prefix && node.namespaceURI) {
                var defaultNS;
                // lookup current default ns from `xmlns` attribute
                for(var ai = 0; ai < attrs.length; ai++)if (attrs.item(ai).name === "xmlns") {
                    defaultNS = attrs.item(ai).value;
                    break;
                }
                if (!defaultNS) // lookup current default ns in visibleNamespaces
                for(var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--){
                    var namespace = visibleNamespaces[nsi];
                    if (namespace.prefix === "" && namespace.namespace === node.namespaceURI) {
                        defaultNS = namespace.namespace;
                        break;
                    }
                }
                if (defaultNS !== node.namespaceURI) for(var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--){
                    var namespace = visibleNamespaces[nsi];
                    if (namespace.namespace === node.namespaceURI) {
                        if (namespace.prefix) prefixedNodeName = namespace.prefix + ":" + nodeName;
                        break;
                    }
                }
            }
            buf.push("<", prefixedNodeName);
            for(var i = 0; i < len; i++){
                // add namespaces for attributes
                var attr = attrs.item(i);
                if (attr.prefix == "xmlns") visibleNamespaces.push({
                    prefix: attr.localName,
                    namespace: attr.value
                });
                else if (attr.nodeName == "xmlns") visibleNamespaces.push({
                    prefix: "",
                    namespace: attr.value
                });
            }
            for(var i = 0; i < len; i++){
                var attr = attrs.item(i);
                if ($8395852f5ec885ec$var$needNamespaceDefine(attr, isHTML, visibleNamespaces)) {
                    var prefix = attr.prefix || "";
                    var uri = attr.namespaceURI;
                    $8395852f5ec885ec$var$addSerializedAttribute(buf, prefix ? "xmlns:" + prefix : "xmlns", uri);
                    visibleNamespaces.push({
                        prefix: prefix,
                        namespace: uri
                    });
                }
                $8395852f5ec885ec$var$serializeToString(attr, buf, isHTML, nodeFilter, visibleNamespaces);
            }
            // add namespace for current node
            if (nodeName === prefixedNodeName && $8395852f5ec885ec$var$needNamespaceDefine(node, isHTML, visibleNamespaces)) {
                var prefix = node.prefix || "";
                var uri = node.namespaceURI;
                $8395852f5ec885ec$var$addSerializedAttribute(buf, prefix ? "xmlns:" + prefix : "xmlns", uri);
                visibleNamespaces.push({
                    prefix: prefix,
                    namespace: uri
                });
            }
            if (child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)) {
                buf.push(">");
                //if is cdata child node
                if (isHTML && /^script$/i.test(nodeName)) while(child){
                    if (child.data) buf.push(child.data);
                    else $8395852f5ec885ec$var$serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
                    child = child.nextSibling;
                }
                else while(child){
                    $8395852f5ec885ec$var$serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
                    child = child.nextSibling;
                }
                buf.push("</", prefixedNodeName, ">");
            } else buf.push("/>");
            // remove added visible namespaces
            //visibleNamespaces.length = startVisibleNamespaces;
            return;
        case $8395852f5ec885ec$var$DOCUMENT_NODE:
        case $8395852f5ec885ec$var$DOCUMENT_FRAGMENT_NODE:
            var child = node.firstChild;
            while(child){
                $8395852f5ec885ec$var$serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces.slice());
                child = child.nextSibling;
            }
            return;
        case $8395852f5ec885ec$var$ATTRIBUTE_NODE:
            return $8395852f5ec885ec$var$addSerializedAttribute(buf, node.name, node.value);
        case $8395852f5ec885ec$var$TEXT_NODE:
            /**
		 * The ampersand character (&) and the left angle bracket (<) must not appear in their literal form,
		 * except when used as markup delimiters, or within a comment, a processing instruction, or a CDATA section.
		 * If they are needed elsewhere, they must be escaped using either numeric character references or the strings
		 * `&amp;` and `&lt;` respectively.
		 * The right angle bracket (>) may be represented using the string " &gt; ", and must, for compatibility,
		 * be escaped using either `&gt;` or a character reference when it appears in the string `]]>` in content,
		 * when that string is not marking the end of a CDATA section.
		 *
		 * In the content of elements, character data is any string of characters
		 * which does not contain the start-delimiter of any markup
		 * and does not include the CDATA-section-close delimiter, `]]>`.
		 *
		 * @see https://www.w3.org/TR/xml/#NT-CharData
		 * @see https://w3c.github.io/DOM-Parsing/#xml-serializing-a-text-node
		 */ return buf.push(node.data.replace(/[<&>]/g, $8395852f5ec885ec$var$_xmlEncoder));
        case $8395852f5ec885ec$var$CDATA_SECTION_NODE:
            return buf.push("<![CDATA[", node.data, "]]>");
        case $8395852f5ec885ec$var$COMMENT_NODE:
            return buf.push("<!--", node.data, "-->");
        case $8395852f5ec885ec$var$DOCUMENT_TYPE_NODE:
            var pubid = node.publicId;
            var sysid = node.systemId;
            buf.push("<!DOCTYPE ", node.name);
            if (pubid) {
                buf.push(" PUBLIC ", pubid);
                if (sysid && sysid != ".") buf.push(" ", sysid);
                buf.push(">");
            } else if (sysid && sysid != ".") buf.push(" SYSTEM ", sysid, ">");
            else {
                var sub = node.internalSubset;
                if (sub) buf.push(" [", sub, "]");
                buf.push(">");
            }
            return;
        case $8395852f5ec885ec$var$PROCESSING_INSTRUCTION_NODE:
            return buf.push("<?", node.target, " ", node.data, "?>");
        case $8395852f5ec885ec$var$ENTITY_REFERENCE_NODE:
            return buf.push("&", node.nodeName, ";");
        //case ENTITY_NODE:
        //case NOTATION_NODE:
        default:
            buf.push("??", node.nodeName);
    }
}
function $8395852f5ec885ec$var$importNode(doc, node, deep) {
    var node2;
    switch(node.nodeType){
        case $8395852f5ec885ec$var$ELEMENT_NODE:
            node2 = node.cloneNode(false);
            node2.ownerDocument = doc;
        //var attrs = node2.attributes;
        //var len = attrs.length;
        //for(var i=0;i<len;i++){
        //node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
        //}
        case $8395852f5ec885ec$var$DOCUMENT_FRAGMENT_NODE:
            break;
        case $8395852f5ec885ec$var$ATTRIBUTE_NODE:
            deep = true;
            break;
    }
    if (!node2) node2 = node.cloneNode(false); //false
    node2.ownerDocument = doc;
    node2.parentNode = null;
    if (deep) {
        var child = node.firstChild;
        while(child){
            node2.appendChild($8395852f5ec885ec$var$importNode(doc, child, deep));
            child = child.nextSibling;
        }
    }
    return node2;
}
//
//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,
//					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};
function $8395852f5ec885ec$var$cloneNode(doc, node, deep) {
    var node2 = new node.constructor();
    for(var n in node)if (Object.prototype.hasOwnProperty.call(node, n)) {
        var v = node[n];
        if (typeof v != "object") {
            if (v != node2[n]) node2[n] = v;
        }
    }
    if (node.childNodes) node2.childNodes = new $8395852f5ec885ec$var$NodeList();
    node2.ownerDocument = doc;
    switch(node2.nodeType){
        case $8395852f5ec885ec$var$ELEMENT_NODE:
            var attrs = node.attributes;
            var attrs2 = node2.attributes = new $8395852f5ec885ec$var$NamedNodeMap();
            var len = attrs.length;
            attrs2._ownerElement = node2;
            for(var i = 0; i < len; i++)node2.setAttributeNode($8395852f5ec885ec$var$cloneNode(doc, attrs.item(i), true));
            break;
        case $8395852f5ec885ec$var$ATTRIBUTE_NODE:
            deep = true;
    }
    if (deep) {
        var child = node.firstChild;
        while(child){
            node2.appendChild($8395852f5ec885ec$var$cloneNode(doc, child, deep));
            child = child.nextSibling;
        }
    }
    return node2;
}
function $8395852f5ec885ec$var$__set__(object, key, value) {
    object[key] = value;
}
//do dynamic
try {
    if (Object.defineProperty) {
        Object.defineProperty($8395852f5ec885ec$var$LiveNodeList.prototype, "length", {
            get: function() {
                $8395852f5ec885ec$var$_updateLiveList(this);
                return this.$$length;
            }
        });
        Object.defineProperty($8395852f5ec885ec$var$Node.prototype, "textContent", {
            get: function() {
                return getTextContent(this);
            },
            set: function(data) {
                switch(this.nodeType){
                    case $8395852f5ec885ec$var$ELEMENT_NODE:
                    case $8395852f5ec885ec$var$DOCUMENT_FRAGMENT_NODE:
                        while(this.firstChild)this.removeChild(this.firstChild);
                        if (data || String(data)) this.appendChild(this.ownerDocument.createTextNode(data));
                        break;
                    default:
                        this.data = data;
                        this.value = data;
                        this.nodeValue = data;
                }
            }
        });
        function getTextContent(node) {
            switch(node.nodeType){
                case $8395852f5ec885ec$var$ELEMENT_NODE:
                case $8395852f5ec885ec$var$DOCUMENT_FRAGMENT_NODE:
                    var buf = [];
                    node = node.firstChild;
                    while(node){
                        if (node.nodeType !== 7 && node.nodeType !== 8) buf.push(getTextContent(node));
                        node = node.nextSibling;
                    }
                    return buf.join("");
                default:
                    return node.nodeValue;
            }
        }
        $8395852f5ec885ec$var$__set__ = function(object, key, value) {
            //console.log(value)
            object["$$" + key] = value;
        };
    }
} catch (e) {}
$8395852f5ec885ec$export$d1d99cf900472499 = $8395852f5ec885ec$var$DocumentType;
$8395852f5ec885ec$export$fe58bcf938607f6a = $8395852f5ec885ec$var$DOMException;
$8395852f5ec885ec$export$455426655eab1d48 = $8395852f5ec885ec$var$DOMImplementation;
$8395852f5ec885ec$export$db77ccec0bb4ccac = $8395852f5ec885ec$var$Element;
$8395852f5ec885ec$export$85c928794f8d04d4 = $8395852f5ec885ec$var$Node;
$8395852f5ec885ec$export$79b41aa5d56abdff = $8395852f5ec885ec$var$NodeList;
$8395852f5ec885ec$export$64f0bed4ae6f0f24 = $8395852f5ec885ec$var$XMLSerializer; //}

});

parcelRegister("29crI", function(module, exports) {

$parcel$export(module.exports, "XML_ENTITIES", () => $1906139318cf5984$export$91f0e5ff03dc84f, (v) => $1906139318cf5984$export$91f0e5ff03dc84f = v);
$parcel$export(module.exports, "HTML_ENTITIES", () => $1906139318cf5984$export$b7e4d4631df36afa, (v) => $1906139318cf5984$export$b7e4d4631df36afa = v);
/**
 * The entities that are predefined in every XML document.
 *
 * @see https://www.w3.org/TR/2006/REC-xml11-20060816/#sec-predefined-ent W3C XML 1.1
 * @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-predefined-ent W3C XML 1.0
 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Predefined_entities_in_XML Wikipedia
 */ var $1906139318cf5984$export$91f0e5ff03dc84f;
/**
 * A map of all entities that are detected in an HTML document.
 * They contain all entries from `XML_ENTITIES`.
 *
 * @see XML_ENTITIES
 * @see DOMParser.parseFromString
 * @see DOMImplementation.prototype.createHTMLDocument
 * @see https://html.spec.whatwg.org/#named-character-references WHATWG HTML(5) Spec
 * @see https://html.spec.whatwg.org/entities.json JSON
 * @see https://www.w3.org/TR/xml-entity-names/ W3C XML Entity Names
 * @see https://www.w3.org/TR/html4/sgml/entities.html W3C HTML4/SGML
 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Character_entity_references_in_HTML Wikipedia (HTML)
 * @see https://en.wikipedia.org/wiki/List_of_XML_and_HTML_character_entity_references#Entities_representing_special_characters_in_XHTML Wikpedia (XHTML)
 */ var $1906139318cf5984$export$b7e4d4631df36afa;
/**
 * @deprecated use `HTML_ENTITIES` instead
 * @see HTML_ENTITIES
 */ var $1906139318cf5984$export$79451380caed3f98;
"use strict";

var $aHMXu = parcelRequire("aHMXu");
var $1906139318cf5984$require$freeze = $aHMXu.freeze;
$1906139318cf5984$export$91f0e5ff03dc84f = $1906139318cf5984$require$freeze({
    amp: "&",
    apos: "'",
    gt: ">",
    lt: "<",
    quot: '"'
});
$1906139318cf5984$export$b7e4d4631df36afa = $1906139318cf5984$require$freeze({
    Aacute: "\xc1",
    aacute: "\xe1",
    Abreve: "\u0102",
    abreve: "\u0103",
    ac: "\u223E",
    acd: "\u223F",
    acE: "\u223E\u0333",
    Acirc: "\xc2",
    acirc: "\xe2",
    acute: "\xb4",
    Acy: "\u0410",
    acy: "\u0430",
    AElig: "\xc6",
    aelig: "\xe6",
    af: "\u2061",
    Afr: "\uD835\uDD04",
    afr: "\uD835\uDD1E",
    Agrave: "\xc0",
    agrave: "\xe0",
    alefsym: "\u2135",
    aleph: "\u2135",
    Alpha: "\u0391",
    alpha: "\u03B1",
    Amacr: "\u0100",
    amacr: "\u0101",
    amalg: "\u2A3F",
    AMP: "&",
    amp: "&",
    And: "\u2A53",
    and: "\u2227",
    andand: "\u2A55",
    andd: "\u2A5C",
    andslope: "\u2A58",
    andv: "\u2A5A",
    ang: "\u2220",
    ange: "\u29A4",
    angle: "\u2220",
    angmsd: "\u2221",
    angmsdaa: "\u29A8",
    angmsdab: "\u29A9",
    angmsdac: "\u29AA",
    angmsdad: "\u29AB",
    angmsdae: "\u29AC",
    angmsdaf: "\u29AD",
    angmsdag: "\u29AE",
    angmsdah: "\u29AF",
    angrt: "\u221F",
    angrtvb: "\u22BE",
    angrtvbd: "\u299D",
    angsph: "\u2222",
    angst: "\xc5",
    angzarr: "\u237C",
    Aogon: "\u0104",
    aogon: "\u0105",
    Aopf: "\uD835\uDD38",
    aopf: "\uD835\uDD52",
    ap: "\u2248",
    apacir: "\u2A6F",
    apE: "\u2A70",
    ape: "\u224A",
    apid: "\u224B",
    apos: "'",
    ApplyFunction: "\u2061",
    approx: "\u2248",
    approxeq: "\u224A",
    Aring: "\xc5",
    aring: "\xe5",
    Ascr: "\uD835\uDC9C",
    ascr: "\uD835\uDCB6",
    Assign: "\u2254",
    ast: "*",
    asymp: "\u2248",
    asympeq: "\u224D",
    Atilde: "\xc3",
    atilde: "\xe3",
    Auml: "\xc4",
    auml: "\xe4",
    awconint: "\u2233",
    awint: "\u2A11",
    backcong: "\u224C",
    backepsilon: "\u03F6",
    backprime: "\u2035",
    backsim: "\u223D",
    backsimeq: "\u22CD",
    Backslash: "\u2216",
    Barv: "\u2AE7",
    barvee: "\u22BD",
    Barwed: "\u2306",
    barwed: "\u2305",
    barwedge: "\u2305",
    bbrk: "\u23B5",
    bbrktbrk: "\u23B6",
    bcong: "\u224C",
    Bcy: "\u0411",
    bcy: "\u0431",
    bdquo: "\u201E",
    becaus: "\u2235",
    Because: "\u2235",
    because: "\u2235",
    bemptyv: "\u29B0",
    bepsi: "\u03F6",
    bernou: "\u212C",
    Bernoullis: "\u212C",
    Beta: "\u0392",
    beta: "\u03B2",
    beth: "\u2136",
    between: "\u226C",
    Bfr: "\uD835\uDD05",
    bfr: "\uD835\uDD1F",
    bigcap: "\u22C2",
    bigcirc: "\u25EF",
    bigcup: "\u22C3",
    bigodot: "\u2A00",
    bigoplus: "\u2A01",
    bigotimes: "\u2A02",
    bigsqcup: "\u2A06",
    bigstar: "\u2605",
    bigtriangledown: "\u25BD",
    bigtriangleup: "\u25B3",
    biguplus: "\u2A04",
    bigvee: "\u22C1",
    bigwedge: "\u22C0",
    bkarow: "\u290D",
    blacklozenge: "\u29EB",
    blacksquare: "\u25AA",
    blacktriangle: "\u25B4",
    blacktriangledown: "\u25BE",
    blacktriangleleft: "\u25C2",
    blacktriangleright: "\u25B8",
    blank: "\u2423",
    blk12: "\u2592",
    blk14: "\u2591",
    blk34: "\u2593",
    block: "\u2588",
    bne: "=\u20E5",
    bnequiv: "\u2261\u20E5",
    bNot: "\u2AED",
    bnot: "\u2310",
    Bopf: "\uD835\uDD39",
    bopf: "\uD835\uDD53",
    bot: "\u22A5",
    bottom: "\u22A5",
    bowtie: "\u22C8",
    boxbox: "\u29C9",
    boxDL: "\u2557",
    boxDl: "\u2556",
    boxdL: "\u2555",
    boxdl: "\u2510",
    boxDR: "\u2554",
    boxDr: "\u2553",
    boxdR: "\u2552",
    boxdr: "\u250C",
    boxH: "\u2550",
    boxh: "\u2500",
    boxHD: "\u2566",
    boxHd: "\u2564",
    boxhD: "\u2565",
    boxhd: "\u252C",
    boxHU: "\u2569",
    boxHu: "\u2567",
    boxhU: "\u2568",
    boxhu: "\u2534",
    boxminus: "\u229F",
    boxplus: "\u229E",
    boxtimes: "\u22A0",
    boxUL: "\u255D",
    boxUl: "\u255C",
    boxuL: "\u255B",
    boxul: "\u2518",
    boxUR: "\u255A",
    boxUr: "\u2559",
    boxuR: "\u2558",
    boxur: "\u2514",
    boxV: "\u2551",
    boxv: "\u2502",
    boxVH: "\u256C",
    boxVh: "\u256B",
    boxvH: "\u256A",
    boxvh: "\u253C",
    boxVL: "\u2563",
    boxVl: "\u2562",
    boxvL: "\u2561",
    boxvl: "\u2524",
    boxVR: "\u2560",
    boxVr: "\u255F",
    boxvR: "\u255E",
    boxvr: "\u251C",
    bprime: "\u2035",
    Breve: "\u02D8",
    breve: "\u02D8",
    brvbar: "\xa6",
    Bscr: "\u212C",
    bscr: "\uD835\uDCB7",
    bsemi: "\u204F",
    bsim: "\u223D",
    bsime: "\u22CD",
    bsol: "\\",
    bsolb: "\u29C5",
    bsolhsub: "\u27C8",
    bull: "\u2022",
    bullet: "\u2022",
    bump: "\u224E",
    bumpE: "\u2AAE",
    bumpe: "\u224F",
    Bumpeq: "\u224E",
    bumpeq: "\u224F",
    Cacute: "\u0106",
    cacute: "\u0107",
    Cap: "\u22D2",
    cap: "\u2229",
    capand: "\u2A44",
    capbrcup: "\u2A49",
    capcap: "\u2A4B",
    capcup: "\u2A47",
    capdot: "\u2A40",
    CapitalDifferentialD: "\u2145",
    caps: "\u2229\uFE00",
    caret: "\u2041",
    caron: "\u02C7",
    Cayleys: "\u212D",
    ccaps: "\u2A4D",
    Ccaron: "\u010C",
    ccaron: "\u010D",
    Ccedil: "\xc7",
    ccedil: "\xe7",
    Ccirc: "\u0108",
    ccirc: "\u0109",
    Cconint: "\u2230",
    ccups: "\u2A4C",
    ccupssm: "\u2A50",
    Cdot: "\u010A",
    cdot: "\u010B",
    cedil: "\xb8",
    Cedilla: "\xb8",
    cemptyv: "\u29B2",
    cent: "\xa2",
    CenterDot: "\xb7",
    centerdot: "\xb7",
    Cfr: "\u212D",
    cfr: "\uD835\uDD20",
    CHcy: "\u0427",
    chcy: "\u0447",
    check: "\u2713",
    checkmark: "\u2713",
    Chi: "\u03A7",
    chi: "\u03C7",
    cir: "\u25CB",
    circ: "\u02C6",
    circeq: "\u2257",
    circlearrowleft: "\u21BA",
    circlearrowright: "\u21BB",
    circledast: "\u229B",
    circledcirc: "\u229A",
    circleddash: "\u229D",
    CircleDot: "\u2299",
    circledR: "\xae",
    circledS: "\u24C8",
    CircleMinus: "\u2296",
    CirclePlus: "\u2295",
    CircleTimes: "\u2297",
    cirE: "\u29C3",
    cire: "\u2257",
    cirfnint: "\u2A10",
    cirmid: "\u2AEF",
    cirscir: "\u29C2",
    ClockwiseContourIntegral: "\u2232",
    CloseCurlyDoubleQuote: "\u201D",
    CloseCurlyQuote: "\u2019",
    clubs: "\u2663",
    clubsuit: "\u2663",
    Colon: "\u2237",
    colon: ":",
    Colone: "\u2A74",
    colone: "\u2254",
    coloneq: "\u2254",
    comma: ",",
    commat: "@",
    comp: "\u2201",
    compfn: "\u2218",
    complement: "\u2201",
    complexes: "\u2102",
    cong: "\u2245",
    congdot: "\u2A6D",
    Congruent: "\u2261",
    Conint: "\u222F",
    conint: "\u222E",
    ContourIntegral: "\u222E",
    Copf: "\u2102",
    copf: "\uD835\uDD54",
    coprod: "\u2210",
    Coproduct: "\u2210",
    COPY: "\xa9",
    copy: "\xa9",
    copysr: "\u2117",
    CounterClockwiseContourIntegral: "\u2233",
    crarr: "\u21B5",
    Cross: "\u2A2F",
    cross: "\u2717",
    Cscr: "\uD835\uDC9E",
    cscr: "\uD835\uDCB8",
    csub: "\u2ACF",
    csube: "\u2AD1",
    csup: "\u2AD0",
    csupe: "\u2AD2",
    ctdot: "\u22EF",
    cudarrl: "\u2938",
    cudarrr: "\u2935",
    cuepr: "\u22DE",
    cuesc: "\u22DF",
    cularr: "\u21B6",
    cularrp: "\u293D",
    Cup: "\u22D3",
    cup: "\u222A",
    cupbrcap: "\u2A48",
    CupCap: "\u224D",
    cupcap: "\u2A46",
    cupcup: "\u2A4A",
    cupdot: "\u228D",
    cupor: "\u2A45",
    cups: "\u222A\uFE00",
    curarr: "\u21B7",
    curarrm: "\u293C",
    curlyeqprec: "\u22DE",
    curlyeqsucc: "\u22DF",
    curlyvee: "\u22CE",
    curlywedge: "\u22CF",
    curren: "\xa4",
    curvearrowleft: "\u21B6",
    curvearrowright: "\u21B7",
    cuvee: "\u22CE",
    cuwed: "\u22CF",
    cwconint: "\u2232",
    cwint: "\u2231",
    cylcty: "\u232D",
    Dagger: "\u2021",
    dagger: "\u2020",
    daleth: "\u2138",
    Darr: "\u21A1",
    dArr: "\u21D3",
    darr: "\u2193",
    dash: "\u2010",
    Dashv: "\u2AE4",
    dashv: "\u22A3",
    dbkarow: "\u290F",
    dblac: "\u02DD",
    Dcaron: "\u010E",
    dcaron: "\u010F",
    Dcy: "\u0414",
    dcy: "\u0434",
    DD: "\u2145",
    dd: "\u2146",
    ddagger: "\u2021",
    ddarr: "\u21CA",
    DDotrahd: "\u2911",
    ddotseq: "\u2A77",
    deg: "\xb0",
    Del: "\u2207",
    Delta: "\u0394",
    delta: "\u03B4",
    demptyv: "\u29B1",
    dfisht: "\u297F",
    Dfr: "\uD835\uDD07",
    dfr: "\uD835\uDD21",
    dHar: "\u2965",
    dharl: "\u21C3",
    dharr: "\u21C2",
    DiacriticalAcute: "\xb4",
    DiacriticalDot: "\u02D9",
    DiacriticalDoubleAcute: "\u02DD",
    DiacriticalGrave: "`",
    DiacriticalTilde: "\u02DC",
    diam: "\u22C4",
    Diamond: "\u22C4",
    diamond: "\u22C4",
    diamondsuit: "\u2666",
    diams: "\u2666",
    die: "\xa8",
    DifferentialD: "\u2146",
    digamma: "\u03DD",
    disin: "\u22F2",
    div: "\xf7",
    divide: "\xf7",
    divideontimes: "\u22C7",
    divonx: "\u22C7",
    DJcy: "\u0402",
    djcy: "\u0452",
    dlcorn: "\u231E",
    dlcrop: "\u230D",
    dollar: "$",
    Dopf: "\uD835\uDD3B",
    dopf: "\uD835\uDD55",
    Dot: "\xa8",
    dot: "\u02D9",
    DotDot: "\u20DC",
    doteq: "\u2250",
    doteqdot: "\u2251",
    DotEqual: "\u2250",
    dotminus: "\u2238",
    dotplus: "\u2214",
    dotsquare: "\u22A1",
    doublebarwedge: "\u2306",
    DoubleContourIntegral: "\u222F",
    DoubleDot: "\xa8",
    DoubleDownArrow: "\u21D3",
    DoubleLeftArrow: "\u21D0",
    DoubleLeftRightArrow: "\u21D4",
    DoubleLeftTee: "\u2AE4",
    DoubleLongLeftArrow: "\u27F8",
    DoubleLongLeftRightArrow: "\u27FA",
    DoubleLongRightArrow: "\u27F9",
    DoubleRightArrow: "\u21D2",
    DoubleRightTee: "\u22A8",
    DoubleUpArrow: "\u21D1",
    DoubleUpDownArrow: "\u21D5",
    DoubleVerticalBar: "\u2225",
    DownArrow: "\u2193",
    Downarrow: "\u21D3",
    downarrow: "\u2193",
    DownArrowBar: "\u2913",
    DownArrowUpArrow: "\u21F5",
    DownBreve: "\u0311",
    downdownarrows: "\u21CA",
    downharpoonleft: "\u21C3",
    downharpoonright: "\u21C2",
    DownLeftRightVector: "\u2950",
    DownLeftTeeVector: "\u295E",
    DownLeftVector: "\u21BD",
    DownLeftVectorBar: "\u2956",
    DownRightTeeVector: "\u295F",
    DownRightVector: "\u21C1",
    DownRightVectorBar: "\u2957",
    DownTee: "\u22A4",
    DownTeeArrow: "\u21A7",
    drbkarow: "\u2910",
    drcorn: "\u231F",
    drcrop: "\u230C",
    Dscr: "\uD835\uDC9F",
    dscr: "\uD835\uDCB9",
    DScy: "\u0405",
    dscy: "\u0455",
    dsol: "\u29F6",
    Dstrok: "\u0110",
    dstrok: "\u0111",
    dtdot: "\u22F1",
    dtri: "\u25BF",
    dtrif: "\u25BE",
    duarr: "\u21F5",
    duhar: "\u296F",
    dwangle: "\u29A6",
    DZcy: "\u040F",
    dzcy: "\u045F",
    dzigrarr: "\u27FF",
    Eacute: "\xc9",
    eacute: "\xe9",
    easter: "\u2A6E",
    Ecaron: "\u011A",
    ecaron: "\u011B",
    ecir: "\u2256",
    Ecirc: "\xca",
    ecirc: "\xea",
    ecolon: "\u2255",
    Ecy: "\u042D",
    ecy: "\u044D",
    eDDot: "\u2A77",
    Edot: "\u0116",
    eDot: "\u2251",
    edot: "\u0117",
    ee: "\u2147",
    efDot: "\u2252",
    Efr: "\uD835\uDD08",
    efr: "\uD835\uDD22",
    eg: "\u2A9A",
    Egrave: "\xc8",
    egrave: "\xe8",
    egs: "\u2A96",
    egsdot: "\u2A98",
    el: "\u2A99",
    Element: "\u2208",
    elinters: "\u23E7",
    ell: "\u2113",
    els: "\u2A95",
    elsdot: "\u2A97",
    Emacr: "\u0112",
    emacr: "\u0113",
    empty: "\u2205",
    emptyset: "\u2205",
    EmptySmallSquare: "\u25FB",
    emptyv: "\u2205",
    EmptyVerySmallSquare: "\u25AB",
    emsp: "\u2003",
    emsp13: "\u2004",
    emsp14: "\u2005",
    ENG: "\u014A",
    eng: "\u014B",
    ensp: "\u2002",
    Eogon: "\u0118",
    eogon: "\u0119",
    Eopf: "\uD835\uDD3C",
    eopf: "\uD835\uDD56",
    epar: "\u22D5",
    eparsl: "\u29E3",
    eplus: "\u2A71",
    epsi: "\u03B5",
    Epsilon: "\u0395",
    epsilon: "\u03B5",
    epsiv: "\u03F5",
    eqcirc: "\u2256",
    eqcolon: "\u2255",
    eqsim: "\u2242",
    eqslantgtr: "\u2A96",
    eqslantless: "\u2A95",
    Equal: "\u2A75",
    equals: "=",
    EqualTilde: "\u2242",
    equest: "\u225F",
    Equilibrium: "\u21CC",
    equiv: "\u2261",
    equivDD: "\u2A78",
    eqvparsl: "\u29E5",
    erarr: "\u2971",
    erDot: "\u2253",
    Escr: "\u2130",
    escr: "\u212F",
    esdot: "\u2250",
    Esim: "\u2A73",
    esim: "\u2242",
    Eta: "\u0397",
    eta: "\u03B7",
    ETH: "\xd0",
    eth: "\xf0",
    Euml: "\xcb",
    euml: "\xeb",
    euro: "\u20AC",
    excl: "!",
    exist: "\u2203",
    Exists: "\u2203",
    expectation: "\u2130",
    ExponentialE: "\u2147",
    exponentiale: "\u2147",
    fallingdotseq: "\u2252",
    Fcy: "\u0424",
    fcy: "\u0444",
    female: "\u2640",
    ffilig: "\uFB03",
    fflig: "\uFB00",
    ffllig: "\uFB04",
    Ffr: "\uD835\uDD09",
    ffr: "\uD835\uDD23",
    filig: "\uFB01",
    FilledSmallSquare: "\u25FC",
    FilledVerySmallSquare: "\u25AA",
    fjlig: "fj",
    flat: "\u266D",
    fllig: "\uFB02",
    fltns: "\u25B1",
    fnof: "\u0192",
    Fopf: "\uD835\uDD3D",
    fopf: "\uD835\uDD57",
    ForAll: "\u2200",
    forall: "\u2200",
    fork: "\u22D4",
    forkv: "\u2AD9",
    Fouriertrf: "\u2131",
    fpartint: "\u2A0D",
    frac12: "\xbd",
    frac13: "\u2153",
    frac14: "\xbc",
    frac15: "\u2155",
    frac16: "\u2159",
    frac18: "\u215B",
    frac23: "\u2154",
    frac25: "\u2156",
    frac34: "\xbe",
    frac35: "\u2157",
    frac38: "\u215C",
    frac45: "\u2158",
    frac56: "\u215A",
    frac58: "\u215D",
    frac78: "\u215E",
    frasl: "\u2044",
    frown: "\u2322",
    Fscr: "\u2131",
    fscr: "\uD835\uDCBB",
    gacute: "\u01F5",
    Gamma: "\u0393",
    gamma: "\u03B3",
    Gammad: "\u03DC",
    gammad: "\u03DD",
    gap: "\u2A86",
    Gbreve: "\u011E",
    gbreve: "\u011F",
    Gcedil: "\u0122",
    Gcirc: "\u011C",
    gcirc: "\u011D",
    Gcy: "\u0413",
    gcy: "\u0433",
    Gdot: "\u0120",
    gdot: "\u0121",
    gE: "\u2267",
    ge: "\u2265",
    gEl: "\u2A8C",
    gel: "\u22DB",
    geq: "\u2265",
    geqq: "\u2267",
    geqslant: "\u2A7E",
    ges: "\u2A7E",
    gescc: "\u2AA9",
    gesdot: "\u2A80",
    gesdoto: "\u2A82",
    gesdotol: "\u2A84",
    gesl: "\u22DB\uFE00",
    gesles: "\u2A94",
    Gfr: "\uD835\uDD0A",
    gfr: "\uD835\uDD24",
    Gg: "\u22D9",
    gg: "\u226B",
    ggg: "\u22D9",
    gimel: "\u2137",
    GJcy: "\u0403",
    gjcy: "\u0453",
    gl: "\u2277",
    gla: "\u2AA5",
    glE: "\u2A92",
    glj: "\u2AA4",
    gnap: "\u2A8A",
    gnapprox: "\u2A8A",
    gnE: "\u2269",
    gne: "\u2A88",
    gneq: "\u2A88",
    gneqq: "\u2269",
    gnsim: "\u22E7",
    Gopf: "\uD835\uDD3E",
    gopf: "\uD835\uDD58",
    grave: "`",
    GreaterEqual: "\u2265",
    GreaterEqualLess: "\u22DB",
    GreaterFullEqual: "\u2267",
    GreaterGreater: "\u2AA2",
    GreaterLess: "\u2277",
    GreaterSlantEqual: "\u2A7E",
    GreaterTilde: "\u2273",
    Gscr: "\uD835\uDCA2",
    gscr: "\u210A",
    gsim: "\u2273",
    gsime: "\u2A8E",
    gsiml: "\u2A90",
    Gt: "\u226B",
    GT: ">",
    gt: ">",
    gtcc: "\u2AA7",
    gtcir: "\u2A7A",
    gtdot: "\u22D7",
    gtlPar: "\u2995",
    gtquest: "\u2A7C",
    gtrapprox: "\u2A86",
    gtrarr: "\u2978",
    gtrdot: "\u22D7",
    gtreqless: "\u22DB",
    gtreqqless: "\u2A8C",
    gtrless: "\u2277",
    gtrsim: "\u2273",
    gvertneqq: "\u2269\uFE00",
    gvnE: "\u2269\uFE00",
    Hacek: "\u02C7",
    hairsp: "\u200A",
    half: "\xbd",
    hamilt: "\u210B",
    HARDcy: "\u042A",
    hardcy: "\u044A",
    hArr: "\u21D4",
    harr: "\u2194",
    harrcir: "\u2948",
    harrw: "\u21AD",
    Hat: "^",
    hbar: "\u210F",
    Hcirc: "\u0124",
    hcirc: "\u0125",
    hearts: "\u2665",
    heartsuit: "\u2665",
    hellip: "\u2026",
    hercon: "\u22B9",
    Hfr: "\u210C",
    hfr: "\uD835\uDD25",
    HilbertSpace: "\u210B",
    hksearow: "\u2925",
    hkswarow: "\u2926",
    hoarr: "\u21FF",
    homtht: "\u223B",
    hookleftarrow: "\u21A9",
    hookrightarrow: "\u21AA",
    Hopf: "\u210D",
    hopf: "\uD835\uDD59",
    horbar: "\u2015",
    HorizontalLine: "\u2500",
    Hscr: "\u210B",
    hscr: "\uD835\uDCBD",
    hslash: "\u210F",
    Hstrok: "\u0126",
    hstrok: "\u0127",
    HumpDownHump: "\u224E",
    HumpEqual: "\u224F",
    hybull: "\u2043",
    hyphen: "\u2010",
    Iacute: "\xcd",
    iacute: "\xed",
    ic: "\u2063",
    Icirc: "\xce",
    icirc: "\xee",
    Icy: "\u0418",
    icy: "\u0438",
    Idot: "\u0130",
    IEcy: "\u0415",
    iecy: "\u0435",
    iexcl: "\xa1",
    iff: "\u21D4",
    Ifr: "\u2111",
    ifr: "\uD835\uDD26",
    Igrave: "\xcc",
    igrave: "\xec",
    ii: "\u2148",
    iiiint: "\u2A0C",
    iiint: "\u222D",
    iinfin: "\u29DC",
    iiota: "\u2129",
    IJlig: "\u0132",
    ijlig: "\u0133",
    Im: "\u2111",
    Imacr: "\u012A",
    imacr: "\u012B",
    image: "\u2111",
    ImaginaryI: "\u2148",
    imagline: "\u2110",
    imagpart: "\u2111",
    imath: "\u0131",
    imof: "\u22B7",
    imped: "\u01B5",
    Implies: "\u21D2",
    in: "\u2208",
    incare: "\u2105",
    infin: "\u221E",
    infintie: "\u29DD",
    inodot: "\u0131",
    Int: "\u222C",
    int: "\u222B",
    intcal: "\u22BA",
    integers: "\u2124",
    Integral: "\u222B",
    intercal: "\u22BA",
    Intersection: "\u22C2",
    intlarhk: "\u2A17",
    intprod: "\u2A3C",
    InvisibleComma: "\u2063",
    InvisibleTimes: "\u2062",
    IOcy: "\u0401",
    iocy: "\u0451",
    Iogon: "\u012E",
    iogon: "\u012F",
    Iopf: "\uD835\uDD40",
    iopf: "\uD835\uDD5A",
    Iota: "\u0399",
    iota: "\u03B9",
    iprod: "\u2A3C",
    iquest: "\xbf",
    Iscr: "\u2110",
    iscr: "\uD835\uDCBE",
    isin: "\u2208",
    isindot: "\u22F5",
    isinE: "\u22F9",
    isins: "\u22F4",
    isinsv: "\u22F3",
    isinv: "\u2208",
    it: "\u2062",
    Itilde: "\u0128",
    itilde: "\u0129",
    Iukcy: "\u0406",
    iukcy: "\u0456",
    Iuml: "\xcf",
    iuml: "\xef",
    Jcirc: "\u0134",
    jcirc: "\u0135",
    Jcy: "\u0419",
    jcy: "\u0439",
    Jfr: "\uD835\uDD0D",
    jfr: "\uD835\uDD27",
    jmath: "\u0237",
    Jopf: "\uD835\uDD41",
    jopf: "\uD835\uDD5B",
    Jscr: "\uD835\uDCA5",
    jscr: "\uD835\uDCBF",
    Jsercy: "\u0408",
    jsercy: "\u0458",
    Jukcy: "\u0404",
    jukcy: "\u0454",
    Kappa: "\u039A",
    kappa: "\u03BA",
    kappav: "\u03F0",
    Kcedil: "\u0136",
    kcedil: "\u0137",
    Kcy: "\u041A",
    kcy: "\u043A",
    Kfr: "\uD835\uDD0E",
    kfr: "\uD835\uDD28",
    kgreen: "\u0138",
    KHcy: "\u0425",
    khcy: "\u0445",
    KJcy: "\u040C",
    kjcy: "\u045C",
    Kopf: "\uD835\uDD42",
    kopf: "\uD835\uDD5C",
    Kscr: "\uD835\uDCA6",
    kscr: "\uD835\uDCC0",
    lAarr: "\u21DA",
    Lacute: "\u0139",
    lacute: "\u013A",
    laemptyv: "\u29B4",
    lagran: "\u2112",
    Lambda: "\u039B",
    lambda: "\u03BB",
    Lang: "\u27EA",
    lang: "\u27E8",
    langd: "\u2991",
    langle: "\u27E8",
    lap: "\u2A85",
    Laplacetrf: "\u2112",
    laquo: "\xab",
    Larr: "\u219E",
    lArr: "\u21D0",
    larr: "\u2190",
    larrb: "\u21E4",
    larrbfs: "\u291F",
    larrfs: "\u291D",
    larrhk: "\u21A9",
    larrlp: "\u21AB",
    larrpl: "\u2939",
    larrsim: "\u2973",
    larrtl: "\u21A2",
    lat: "\u2AAB",
    lAtail: "\u291B",
    latail: "\u2919",
    late: "\u2AAD",
    lates: "\u2AAD\uFE00",
    lBarr: "\u290E",
    lbarr: "\u290C",
    lbbrk: "\u2772",
    lbrace: "{",
    lbrack: "[",
    lbrke: "\u298B",
    lbrksld: "\u298F",
    lbrkslu: "\u298D",
    Lcaron: "\u013D",
    lcaron: "\u013E",
    Lcedil: "\u013B",
    lcedil: "\u013C",
    lceil: "\u2308",
    lcub: "{",
    Lcy: "\u041B",
    lcy: "\u043B",
    ldca: "\u2936",
    ldquo: "\u201C",
    ldquor: "\u201E",
    ldrdhar: "\u2967",
    ldrushar: "\u294B",
    ldsh: "\u21B2",
    lE: "\u2266",
    le: "\u2264",
    LeftAngleBracket: "\u27E8",
    LeftArrow: "\u2190",
    Leftarrow: "\u21D0",
    leftarrow: "\u2190",
    LeftArrowBar: "\u21E4",
    LeftArrowRightArrow: "\u21C6",
    leftarrowtail: "\u21A2",
    LeftCeiling: "\u2308",
    LeftDoubleBracket: "\u27E6",
    LeftDownTeeVector: "\u2961",
    LeftDownVector: "\u21C3",
    LeftDownVectorBar: "\u2959",
    LeftFloor: "\u230A",
    leftharpoondown: "\u21BD",
    leftharpoonup: "\u21BC",
    leftleftarrows: "\u21C7",
    LeftRightArrow: "\u2194",
    Leftrightarrow: "\u21D4",
    leftrightarrow: "\u2194",
    leftrightarrows: "\u21C6",
    leftrightharpoons: "\u21CB",
    leftrightsquigarrow: "\u21AD",
    LeftRightVector: "\u294E",
    LeftTee: "\u22A3",
    LeftTeeArrow: "\u21A4",
    LeftTeeVector: "\u295A",
    leftthreetimes: "\u22CB",
    LeftTriangle: "\u22B2",
    LeftTriangleBar: "\u29CF",
    LeftTriangleEqual: "\u22B4",
    LeftUpDownVector: "\u2951",
    LeftUpTeeVector: "\u2960",
    LeftUpVector: "\u21BF",
    LeftUpVectorBar: "\u2958",
    LeftVector: "\u21BC",
    LeftVectorBar: "\u2952",
    lEg: "\u2A8B",
    leg: "\u22DA",
    leq: "\u2264",
    leqq: "\u2266",
    leqslant: "\u2A7D",
    les: "\u2A7D",
    lescc: "\u2AA8",
    lesdot: "\u2A7F",
    lesdoto: "\u2A81",
    lesdotor: "\u2A83",
    lesg: "\u22DA\uFE00",
    lesges: "\u2A93",
    lessapprox: "\u2A85",
    lessdot: "\u22D6",
    lesseqgtr: "\u22DA",
    lesseqqgtr: "\u2A8B",
    LessEqualGreater: "\u22DA",
    LessFullEqual: "\u2266",
    LessGreater: "\u2276",
    lessgtr: "\u2276",
    LessLess: "\u2AA1",
    lesssim: "\u2272",
    LessSlantEqual: "\u2A7D",
    LessTilde: "\u2272",
    lfisht: "\u297C",
    lfloor: "\u230A",
    Lfr: "\uD835\uDD0F",
    lfr: "\uD835\uDD29",
    lg: "\u2276",
    lgE: "\u2A91",
    lHar: "\u2962",
    lhard: "\u21BD",
    lharu: "\u21BC",
    lharul: "\u296A",
    lhblk: "\u2584",
    LJcy: "\u0409",
    ljcy: "\u0459",
    Ll: "\u22D8",
    ll: "\u226A",
    llarr: "\u21C7",
    llcorner: "\u231E",
    Lleftarrow: "\u21DA",
    llhard: "\u296B",
    lltri: "\u25FA",
    Lmidot: "\u013F",
    lmidot: "\u0140",
    lmoust: "\u23B0",
    lmoustache: "\u23B0",
    lnap: "\u2A89",
    lnapprox: "\u2A89",
    lnE: "\u2268",
    lne: "\u2A87",
    lneq: "\u2A87",
    lneqq: "\u2268",
    lnsim: "\u22E6",
    loang: "\u27EC",
    loarr: "\u21FD",
    lobrk: "\u27E6",
    LongLeftArrow: "\u27F5",
    Longleftarrow: "\u27F8",
    longleftarrow: "\u27F5",
    LongLeftRightArrow: "\u27F7",
    Longleftrightarrow: "\u27FA",
    longleftrightarrow: "\u27F7",
    longmapsto: "\u27FC",
    LongRightArrow: "\u27F6",
    Longrightarrow: "\u27F9",
    longrightarrow: "\u27F6",
    looparrowleft: "\u21AB",
    looparrowright: "\u21AC",
    lopar: "\u2985",
    Lopf: "\uD835\uDD43",
    lopf: "\uD835\uDD5D",
    loplus: "\u2A2D",
    lotimes: "\u2A34",
    lowast: "\u2217",
    lowbar: "_",
    LowerLeftArrow: "\u2199",
    LowerRightArrow: "\u2198",
    loz: "\u25CA",
    lozenge: "\u25CA",
    lozf: "\u29EB",
    lpar: "(",
    lparlt: "\u2993",
    lrarr: "\u21C6",
    lrcorner: "\u231F",
    lrhar: "\u21CB",
    lrhard: "\u296D",
    lrm: "\u200E",
    lrtri: "\u22BF",
    lsaquo: "\u2039",
    Lscr: "\u2112",
    lscr: "\uD835\uDCC1",
    Lsh: "\u21B0",
    lsh: "\u21B0",
    lsim: "\u2272",
    lsime: "\u2A8D",
    lsimg: "\u2A8F",
    lsqb: "[",
    lsquo: "\u2018",
    lsquor: "\u201A",
    Lstrok: "\u0141",
    lstrok: "\u0142",
    Lt: "\u226A",
    LT: "<",
    lt: "<",
    ltcc: "\u2AA6",
    ltcir: "\u2A79",
    ltdot: "\u22D6",
    lthree: "\u22CB",
    ltimes: "\u22C9",
    ltlarr: "\u2976",
    ltquest: "\u2A7B",
    ltri: "\u25C3",
    ltrie: "\u22B4",
    ltrif: "\u25C2",
    ltrPar: "\u2996",
    lurdshar: "\u294A",
    luruhar: "\u2966",
    lvertneqq: "\u2268\uFE00",
    lvnE: "\u2268\uFE00",
    macr: "\xaf",
    male: "\u2642",
    malt: "\u2720",
    maltese: "\u2720",
    Map: "\u2905",
    map: "\u21A6",
    mapsto: "\u21A6",
    mapstodown: "\u21A7",
    mapstoleft: "\u21A4",
    mapstoup: "\u21A5",
    marker: "\u25AE",
    mcomma: "\u2A29",
    Mcy: "\u041C",
    mcy: "\u043C",
    mdash: "\u2014",
    mDDot: "\u223A",
    measuredangle: "\u2221",
    MediumSpace: "\u205F",
    Mellintrf: "\u2133",
    Mfr: "\uD835\uDD10",
    mfr: "\uD835\uDD2A",
    mho: "\u2127",
    micro: "\xb5",
    mid: "\u2223",
    midast: "*",
    midcir: "\u2AF0",
    middot: "\xb7",
    minus: "\u2212",
    minusb: "\u229F",
    minusd: "\u2238",
    minusdu: "\u2A2A",
    MinusPlus: "\u2213",
    mlcp: "\u2ADB",
    mldr: "\u2026",
    mnplus: "\u2213",
    models: "\u22A7",
    Mopf: "\uD835\uDD44",
    mopf: "\uD835\uDD5E",
    mp: "\u2213",
    Mscr: "\u2133",
    mscr: "\uD835\uDCC2",
    mstpos: "\u223E",
    Mu: "\u039C",
    mu: "\u03BC",
    multimap: "\u22B8",
    mumap: "\u22B8",
    nabla: "\u2207",
    Nacute: "\u0143",
    nacute: "\u0144",
    nang: "\u2220\u20D2",
    nap: "\u2249",
    napE: "\u2A70\u0338",
    napid: "\u224B\u0338",
    napos: "\u0149",
    napprox: "\u2249",
    natur: "\u266E",
    natural: "\u266E",
    naturals: "\u2115",
    nbsp: "\xa0",
    nbump: "\u224E\u0338",
    nbumpe: "\u224F\u0338",
    ncap: "\u2A43",
    Ncaron: "\u0147",
    ncaron: "\u0148",
    Ncedil: "\u0145",
    ncedil: "\u0146",
    ncong: "\u2247",
    ncongdot: "\u2A6D\u0338",
    ncup: "\u2A42",
    Ncy: "\u041D",
    ncy: "\u043D",
    ndash: "\u2013",
    ne: "\u2260",
    nearhk: "\u2924",
    neArr: "\u21D7",
    nearr: "\u2197",
    nearrow: "\u2197",
    nedot: "\u2250\u0338",
    NegativeMediumSpace: "\u200B",
    NegativeThickSpace: "\u200B",
    NegativeThinSpace: "\u200B",
    NegativeVeryThinSpace: "\u200B",
    nequiv: "\u2262",
    nesear: "\u2928",
    nesim: "\u2242\u0338",
    NestedGreaterGreater: "\u226B",
    NestedLessLess: "\u226A",
    NewLine: "\n",
    nexist: "\u2204",
    nexists: "\u2204",
    Nfr: "\uD835\uDD11",
    nfr: "\uD835\uDD2B",
    ngE: "\u2267\u0338",
    nge: "\u2271",
    ngeq: "\u2271",
    ngeqq: "\u2267\u0338",
    ngeqslant: "\u2A7E\u0338",
    nges: "\u2A7E\u0338",
    nGg: "\u22D9\u0338",
    ngsim: "\u2275",
    nGt: "\u226B\u20D2",
    ngt: "\u226F",
    ngtr: "\u226F",
    nGtv: "\u226B\u0338",
    nhArr: "\u21CE",
    nharr: "\u21AE",
    nhpar: "\u2AF2",
    ni: "\u220B",
    nis: "\u22FC",
    nisd: "\u22FA",
    niv: "\u220B",
    NJcy: "\u040A",
    njcy: "\u045A",
    nlArr: "\u21CD",
    nlarr: "\u219A",
    nldr: "\u2025",
    nlE: "\u2266\u0338",
    nle: "\u2270",
    nLeftarrow: "\u21CD",
    nleftarrow: "\u219A",
    nLeftrightarrow: "\u21CE",
    nleftrightarrow: "\u21AE",
    nleq: "\u2270",
    nleqq: "\u2266\u0338",
    nleqslant: "\u2A7D\u0338",
    nles: "\u2A7D\u0338",
    nless: "\u226E",
    nLl: "\u22D8\u0338",
    nlsim: "\u2274",
    nLt: "\u226A\u20D2",
    nlt: "\u226E",
    nltri: "\u22EA",
    nltrie: "\u22EC",
    nLtv: "\u226A\u0338",
    nmid: "\u2224",
    NoBreak: "\u2060",
    NonBreakingSpace: "\xa0",
    Nopf: "\u2115",
    nopf: "\uD835\uDD5F",
    Not: "\u2AEC",
    not: "\xac",
    NotCongruent: "\u2262",
    NotCupCap: "\u226D",
    NotDoubleVerticalBar: "\u2226",
    NotElement: "\u2209",
    NotEqual: "\u2260",
    NotEqualTilde: "\u2242\u0338",
    NotExists: "\u2204",
    NotGreater: "\u226F",
    NotGreaterEqual: "\u2271",
    NotGreaterFullEqual: "\u2267\u0338",
    NotGreaterGreater: "\u226B\u0338",
    NotGreaterLess: "\u2279",
    NotGreaterSlantEqual: "\u2A7E\u0338",
    NotGreaterTilde: "\u2275",
    NotHumpDownHump: "\u224E\u0338",
    NotHumpEqual: "\u224F\u0338",
    notin: "\u2209",
    notindot: "\u22F5\u0338",
    notinE: "\u22F9\u0338",
    notinva: "\u2209",
    notinvb: "\u22F7",
    notinvc: "\u22F6",
    NotLeftTriangle: "\u22EA",
    NotLeftTriangleBar: "\u29CF\u0338",
    NotLeftTriangleEqual: "\u22EC",
    NotLess: "\u226E",
    NotLessEqual: "\u2270",
    NotLessGreater: "\u2278",
    NotLessLess: "\u226A\u0338",
    NotLessSlantEqual: "\u2A7D\u0338",
    NotLessTilde: "\u2274",
    NotNestedGreaterGreater: "\u2AA2\u0338",
    NotNestedLessLess: "\u2AA1\u0338",
    notni: "\u220C",
    notniva: "\u220C",
    notnivb: "\u22FE",
    notnivc: "\u22FD",
    NotPrecedes: "\u2280",
    NotPrecedesEqual: "\u2AAF\u0338",
    NotPrecedesSlantEqual: "\u22E0",
    NotReverseElement: "\u220C",
    NotRightTriangle: "\u22EB",
    NotRightTriangleBar: "\u29D0\u0338",
    NotRightTriangleEqual: "\u22ED",
    NotSquareSubset: "\u228F\u0338",
    NotSquareSubsetEqual: "\u22E2",
    NotSquareSuperset: "\u2290\u0338",
    NotSquareSupersetEqual: "\u22E3",
    NotSubset: "\u2282\u20D2",
    NotSubsetEqual: "\u2288",
    NotSucceeds: "\u2281",
    NotSucceedsEqual: "\u2AB0\u0338",
    NotSucceedsSlantEqual: "\u22E1",
    NotSucceedsTilde: "\u227F\u0338",
    NotSuperset: "\u2283\u20D2",
    NotSupersetEqual: "\u2289",
    NotTilde: "\u2241",
    NotTildeEqual: "\u2244",
    NotTildeFullEqual: "\u2247",
    NotTildeTilde: "\u2249",
    NotVerticalBar: "\u2224",
    npar: "\u2226",
    nparallel: "\u2226",
    nparsl: "\u2AFD\u20E5",
    npart: "\u2202\u0338",
    npolint: "\u2A14",
    npr: "\u2280",
    nprcue: "\u22E0",
    npre: "\u2AAF\u0338",
    nprec: "\u2280",
    npreceq: "\u2AAF\u0338",
    nrArr: "\u21CF",
    nrarr: "\u219B",
    nrarrc: "\u2933\u0338",
    nrarrw: "\u219D\u0338",
    nRightarrow: "\u21CF",
    nrightarrow: "\u219B",
    nrtri: "\u22EB",
    nrtrie: "\u22ED",
    nsc: "\u2281",
    nsccue: "\u22E1",
    nsce: "\u2AB0\u0338",
    Nscr: "\uD835\uDCA9",
    nscr: "\uD835\uDCC3",
    nshortmid: "\u2224",
    nshortparallel: "\u2226",
    nsim: "\u2241",
    nsime: "\u2244",
    nsimeq: "\u2244",
    nsmid: "\u2224",
    nspar: "\u2226",
    nsqsube: "\u22E2",
    nsqsupe: "\u22E3",
    nsub: "\u2284",
    nsubE: "\u2AC5\u0338",
    nsube: "\u2288",
    nsubset: "\u2282\u20D2",
    nsubseteq: "\u2288",
    nsubseteqq: "\u2AC5\u0338",
    nsucc: "\u2281",
    nsucceq: "\u2AB0\u0338",
    nsup: "\u2285",
    nsupE: "\u2AC6\u0338",
    nsupe: "\u2289",
    nsupset: "\u2283\u20D2",
    nsupseteq: "\u2289",
    nsupseteqq: "\u2AC6\u0338",
    ntgl: "\u2279",
    Ntilde: "\xd1",
    ntilde: "\xf1",
    ntlg: "\u2278",
    ntriangleleft: "\u22EA",
    ntrianglelefteq: "\u22EC",
    ntriangleright: "\u22EB",
    ntrianglerighteq: "\u22ED",
    Nu: "\u039D",
    nu: "\u03BD",
    num: "#",
    numero: "\u2116",
    numsp: "\u2007",
    nvap: "\u224D\u20D2",
    nVDash: "\u22AF",
    nVdash: "\u22AE",
    nvDash: "\u22AD",
    nvdash: "\u22AC",
    nvge: "\u2265\u20D2",
    nvgt: ">\u20D2",
    nvHarr: "\u2904",
    nvinfin: "\u29DE",
    nvlArr: "\u2902",
    nvle: "\u2264\u20D2",
    nvlt: "<\u20D2",
    nvltrie: "\u22B4\u20D2",
    nvrArr: "\u2903",
    nvrtrie: "\u22B5\u20D2",
    nvsim: "\u223C\u20D2",
    nwarhk: "\u2923",
    nwArr: "\u21D6",
    nwarr: "\u2196",
    nwarrow: "\u2196",
    nwnear: "\u2927",
    Oacute: "\xd3",
    oacute: "\xf3",
    oast: "\u229B",
    ocir: "\u229A",
    Ocirc: "\xd4",
    ocirc: "\xf4",
    Ocy: "\u041E",
    ocy: "\u043E",
    odash: "\u229D",
    Odblac: "\u0150",
    odblac: "\u0151",
    odiv: "\u2A38",
    odot: "\u2299",
    odsold: "\u29BC",
    OElig: "\u0152",
    oelig: "\u0153",
    ofcir: "\u29BF",
    Ofr: "\uD835\uDD12",
    ofr: "\uD835\uDD2C",
    ogon: "\u02DB",
    Ograve: "\xd2",
    ograve: "\xf2",
    ogt: "\u29C1",
    ohbar: "\u29B5",
    ohm: "\u03A9",
    oint: "\u222E",
    olarr: "\u21BA",
    olcir: "\u29BE",
    olcross: "\u29BB",
    oline: "\u203E",
    olt: "\u29C0",
    Omacr: "\u014C",
    omacr: "\u014D",
    Omega: "\u03A9",
    omega: "\u03C9",
    Omicron: "\u039F",
    omicron: "\u03BF",
    omid: "\u29B6",
    ominus: "\u2296",
    Oopf: "\uD835\uDD46",
    oopf: "\uD835\uDD60",
    opar: "\u29B7",
    OpenCurlyDoubleQuote: "\u201C",
    OpenCurlyQuote: "\u2018",
    operp: "\u29B9",
    oplus: "\u2295",
    Or: "\u2A54",
    or: "\u2228",
    orarr: "\u21BB",
    ord: "\u2A5D",
    order: "\u2134",
    orderof: "\u2134",
    ordf: "\xaa",
    ordm: "\xba",
    origof: "\u22B6",
    oror: "\u2A56",
    orslope: "\u2A57",
    orv: "\u2A5B",
    oS: "\u24C8",
    Oscr: "\uD835\uDCAA",
    oscr: "\u2134",
    Oslash: "\xd8",
    oslash: "\xf8",
    osol: "\u2298",
    Otilde: "\xd5",
    otilde: "\xf5",
    Otimes: "\u2A37",
    otimes: "\u2297",
    otimesas: "\u2A36",
    Ouml: "\xd6",
    ouml: "\xf6",
    ovbar: "\u233D",
    OverBar: "\u203E",
    OverBrace: "\u23DE",
    OverBracket: "\u23B4",
    OverParenthesis: "\u23DC",
    par: "\u2225",
    para: "\xb6",
    parallel: "\u2225",
    parsim: "\u2AF3",
    parsl: "\u2AFD",
    part: "\u2202",
    PartialD: "\u2202",
    Pcy: "\u041F",
    pcy: "\u043F",
    percnt: "%",
    period: ".",
    permil: "\u2030",
    perp: "\u22A5",
    pertenk: "\u2031",
    Pfr: "\uD835\uDD13",
    pfr: "\uD835\uDD2D",
    Phi: "\u03A6",
    phi: "\u03C6",
    phiv: "\u03D5",
    phmmat: "\u2133",
    phone: "\u260E",
    Pi: "\u03A0",
    pi: "\u03C0",
    pitchfork: "\u22D4",
    piv: "\u03D6",
    planck: "\u210F",
    planckh: "\u210E",
    plankv: "\u210F",
    plus: "+",
    plusacir: "\u2A23",
    plusb: "\u229E",
    pluscir: "\u2A22",
    plusdo: "\u2214",
    plusdu: "\u2A25",
    pluse: "\u2A72",
    PlusMinus: "\xb1",
    plusmn: "\xb1",
    plussim: "\u2A26",
    plustwo: "\u2A27",
    pm: "\xb1",
    Poincareplane: "\u210C",
    pointint: "\u2A15",
    Popf: "\u2119",
    popf: "\uD835\uDD61",
    pound: "\xa3",
    Pr: "\u2ABB",
    pr: "\u227A",
    prap: "\u2AB7",
    prcue: "\u227C",
    prE: "\u2AB3",
    pre: "\u2AAF",
    prec: "\u227A",
    precapprox: "\u2AB7",
    preccurlyeq: "\u227C",
    Precedes: "\u227A",
    PrecedesEqual: "\u2AAF",
    PrecedesSlantEqual: "\u227C",
    PrecedesTilde: "\u227E",
    preceq: "\u2AAF",
    precnapprox: "\u2AB9",
    precneqq: "\u2AB5",
    precnsim: "\u22E8",
    precsim: "\u227E",
    Prime: "\u2033",
    prime: "\u2032",
    primes: "\u2119",
    prnap: "\u2AB9",
    prnE: "\u2AB5",
    prnsim: "\u22E8",
    prod: "\u220F",
    Product: "\u220F",
    profalar: "\u232E",
    profline: "\u2312",
    profsurf: "\u2313",
    prop: "\u221D",
    Proportion: "\u2237",
    Proportional: "\u221D",
    propto: "\u221D",
    prsim: "\u227E",
    prurel: "\u22B0",
    Pscr: "\uD835\uDCAB",
    pscr: "\uD835\uDCC5",
    Psi: "\u03A8",
    psi: "\u03C8",
    puncsp: "\u2008",
    Qfr: "\uD835\uDD14",
    qfr: "\uD835\uDD2E",
    qint: "\u2A0C",
    Qopf: "\u211A",
    qopf: "\uD835\uDD62",
    qprime: "\u2057",
    Qscr: "\uD835\uDCAC",
    qscr: "\uD835\uDCC6",
    quaternions: "\u210D",
    quatint: "\u2A16",
    quest: "?",
    questeq: "\u225F",
    QUOT: '"',
    quot: '"',
    rAarr: "\u21DB",
    race: "\u223D\u0331",
    Racute: "\u0154",
    racute: "\u0155",
    radic: "\u221A",
    raemptyv: "\u29B3",
    Rang: "\u27EB",
    rang: "\u27E9",
    rangd: "\u2992",
    range: "\u29A5",
    rangle: "\u27E9",
    raquo: "\xbb",
    Rarr: "\u21A0",
    rArr: "\u21D2",
    rarr: "\u2192",
    rarrap: "\u2975",
    rarrb: "\u21E5",
    rarrbfs: "\u2920",
    rarrc: "\u2933",
    rarrfs: "\u291E",
    rarrhk: "\u21AA",
    rarrlp: "\u21AC",
    rarrpl: "\u2945",
    rarrsim: "\u2974",
    Rarrtl: "\u2916",
    rarrtl: "\u21A3",
    rarrw: "\u219D",
    rAtail: "\u291C",
    ratail: "\u291A",
    ratio: "\u2236",
    rationals: "\u211A",
    RBarr: "\u2910",
    rBarr: "\u290F",
    rbarr: "\u290D",
    rbbrk: "\u2773",
    rbrace: "}",
    rbrack: "]",
    rbrke: "\u298C",
    rbrksld: "\u298E",
    rbrkslu: "\u2990",
    Rcaron: "\u0158",
    rcaron: "\u0159",
    Rcedil: "\u0156",
    rcedil: "\u0157",
    rceil: "\u2309",
    rcub: "}",
    Rcy: "\u0420",
    rcy: "\u0440",
    rdca: "\u2937",
    rdldhar: "\u2969",
    rdquo: "\u201D",
    rdquor: "\u201D",
    rdsh: "\u21B3",
    Re: "\u211C",
    real: "\u211C",
    realine: "\u211B",
    realpart: "\u211C",
    reals: "\u211D",
    rect: "\u25AD",
    REG: "\xae",
    reg: "\xae",
    ReverseElement: "\u220B",
    ReverseEquilibrium: "\u21CB",
    ReverseUpEquilibrium: "\u296F",
    rfisht: "\u297D",
    rfloor: "\u230B",
    Rfr: "\u211C",
    rfr: "\uD835\uDD2F",
    rHar: "\u2964",
    rhard: "\u21C1",
    rharu: "\u21C0",
    rharul: "\u296C",
    Rho: "\u03A1",
    rho: "\u03C1",
    rhov: "\u03F1",
    RightAngleBracket: "\u27E9",
    RightArrow: "\u2192",
    Rightarrow: "\u21D2",
    rightarrow: "\u2192",
    RightArrowBar: "\u21E5",
    RightArrowLeftArrow: "\u21C4",
    rightarrowtail: "\u21A3",
    RightCeiling: "\u2309",
    RightDoubleBracket: "\u27E7",
    RightDownTeeVector: "\u295D",
    RightDownVector: "\u21C2",
    RightDownVectorBar: "\u2955",
    RightFloor: "\u230B",
    rightharpoondown: "\u21C1",
    rightharpoonup: "\u21C0",
    rightleftarrows: "\u21C4",
    rightleftharpoons: "\u21CC",
    rightrightarrows: "\u21C9",
    rightsquigarrow: "\u219D",
    RightTee: "\u22A2",
    RightTeeArrow: "\u21A6",
    RightTeeVector: "\u295B",
    rightthreetimes: "\u22CC",
    RightTriangle: "\u22B3",
    RightTriangleBar: "\u29D0",
    RightTriangleEqual: "\u22B5",
    RightUpDownVector: "\u294F",
    RightUpTeeVector: "\u295C",
    RightUpVector: "\u21BE",
    RightUpVectorBar: "\u2954",
    RightVector: "\u21C0",
    RightVectorBar: "\u2953",
    ring: "\u02DA",
    risingdotseq: "\u2253",
    rlarr: "\u21C4",
    rlhar: "\u21CC",
    rlm: "\u200F",
    rmoust: "\u23B1",
    rmoustache: "\u23B1",
    rnmid: "\u2AEE",
    roang: "\u27ED",
    roarr: "\u21FE",
    robrk: "\u27E7",
    ropar: "\u2986",
    Ropf: "\u211D",
    ropf: "\uD835\uDD63",
    roplus: "\u2A2E",
    rotimes: "\u2A35",
    RoundImplies: "\u2970",
    rpar: ")",
    rpargt: "\u2994",
    rppolint: "\u2A12",
    rrarr: "\u21C9",
    Rrightarrow: "\u21DB",
    rsaquo: "\u203A",
    Rscr: "\u211B",
    rscr: "\uD835\uDCC7",
    Rsh: "\u21B1",
    rsh: "\u21B1",
    rsqb: "]",
    rsquo: "\u2019",
    rsquor: "\u2019",
    rthree: "\u22CC",
    rtimes: "\u22CA",
    rtri: "\u25B9",
    rtrie: "\u22B5",
    rtrif: "\u25B8",
    rtriltri: "\u29CE",
    RuleDelayed: "\u29F4",
    ruluhar: "\u2968",
    rx: "\u211E",
    Sacute: "\u015A",
    sacute: "\u015B",
    sbquo: "\u201A",
    Sc: "\u2ABC",
    sc: "\u227B",
    scap: "\u2AB8",
    Scaron: "\u0160",
    scaron: "\u0161",
    sccue: "\u227D",
    scE: "\u2AB4",
    sce: "\u2AB0",
    Scedil: "\u015E",
    scedil: "\u015F",
    Scirc: "\u015C",
    scirc: "\u015D",
    scnap: "\u2ABA",
    scnE: "\u2AB6",
    scnsim: "\u22E9",
    scpolint: "\u2A13",
    scsim: "\u227F",
    Scy: "\u0421",
    scy: "\u0441",
    sdot: "\u22C5",
    sdotb: "\u22A1",
    sdote: "\u2A66",
    searhk: "\u2925",
    seArr: "\u21D8",
    searr: "\u2198",
    searrow: "\u2198",
    sect: "\xa7",
    semi: ";",
    seswar: "\u2929",
    setminus: "\u2216",
    setmn: "\u2216",
    sext: "\u2736",
    Sfr: "\uD835\uDD16",
    sfr: "\uD835\uDD30",
    sfrown: "\u2322",
    sharp: "\u266F",
    SHCHcy: "\u0429",
    shchcy: "\u0449",
    SHcy: "\u0428",
    shcy: "\u0448",
    ShortDownArrow: "\u2193",
    ShortLeftArrow: "\u2190",
    shortmid: "\u2223",
    shortparallel: "\u2225",
    ShortRightArrow: "\u2192",
    ShortUpArrow: "\u2191",
    shy: "\xad",
    Sigma: "\u03A3",
    sigma: "\u03C3",
    sigmaf: "\u03C2",
    sigmav: "\u03C2",
    sim: "\u223C",
    simdot: "\u2A6A",
    sime: "\u2243",
    simeq: "\u2243",
    simg: "\u2A9E",
    simgE: "\u2AA0",
    siml: "\u2A9D",
    simlE: "\u2A9F",
    simne: "\u2246",
    simplus: "\u2A24",
    simrarr: "\u2972",
    slarr: "\u2190",
    SmallCircle: "\u2218",
    smallsetminus: "\u2216",
    smashp: "\u2A33",
    smeparsl: "\u29E4",
    smid: "\u2223",
    smile: "\u2323",
    smt: "\u2AAA",
    smte: "\u2AAC",
    smtes: "\u2AAC\uFE00",
    SOFTcy: "\u042C",
    softcy: "\u044C",
    sol: "/",
    solb: "\u29C4",
    solbar: "\u233F",
    Sopf: "\uD835\uDD4A",
    sopf: "\uD835\uDD64",
    spades: "\u2660",
    spadesuit: "\u2660",
    spar: "\u2225",
    sqcap: "\u2293",
    sqcaps: "\u2293\uFE00",
    sqcup: "\u2294",
    sqcups: "\u2294\uFE00",
    Sqrt: "\u221A",
    sqsub: "\u228F",
    sqsube: "\u2291",
    sqsubset: "\u228F",
    sqsubseteq: "\u2291",
    sqsup: "\u2290",
    sqsupe: "\u2292",
    sqsupset: "\u2290",
    sqsupseteq: "\u2292",
    squ: "\u25A1",
    Square: "\u25A1",
    square: "\u25A1",
    SquareIntersection: "\u2293",
    SquareSubset: "\u228F",
    SquareSubsetEqual: "\u2291",
    SquareSuperset: "\u2290",
    SquareSupersetEqual: "\u2292",
    SquareUnion: "\u2294",
    squarf: "\u25AA",
    squf: "\u25AA",
    srarr: "\u2192",
    Sscr: "\uD835\uDCAE",
    sscr: "\uD835\uDCC8",
    ssetmn: "\u2216",
    ssmile: "\u2323",
    sstarf: "\u22C6",
    Star: "\u22C6",
    star: "\u2606",
    starf: "\u2605",
    straightepsilon: "\u03F5",
    straightphi: "\u03D5",
    strns: "\xaf",
    Sub: "\u22D0",
    sub: "\u2282",
    subdot: "\u2ABD",
    subE: "\u2AC5",
    sube: "\u2286",
    subedot: "\u2AC3",
    submult: "\u2AC1",
    subnE: "\u2ACB",
    subne: "\u228A",
    subplus: "\u2ABF",
    subrarr: "\u2979",
    Subset: "\u22D0",
    subset: "\u2282",
    subseteq: "\u2286",
    subseteqq: "\u2AC5",
    SubsetEqual: "\u2286",
    subsetneq: "\u228A",
    subsetneqq: "\u2ACB",
    subsim: "\u2AC7",
    subsub: "\u2AD5",
    subsup: "\u2AD3",
    succ: "\u227B",
    succapprox: "\u2AB8",
    succcurlyeq: "\u227D",
    Succeeds: "\u227B",
    SucceedsEqual: "\u2AB0",
    SucceedsSlantEqual: "\u227D",
    SucceedsTilde: "\u227F",
    succeq: "\u2AB0",
    succnapprox: "\u2ABA",
    succneqq: "\u2AB6",
    succnsim: "\u22E9",
    succsim: "\u227F",
    SuchThat: "\u220B",
    Sum: "\u2211",
    sum: "\u2211",
    sung: "\u266A",
    Sup: "\u22D1",
    sup: "\u2283",
    sup1: "\xb9",
    sup2: "\xb2",
    sup3: "\xb3",
    supdot: "\u2ABE",
    supdsub: "\u2AD8",
    supE: "\u2AC6",
    supe: "\u2287",
    supedot: "\u2AC4",
    Superset: "\u2283",
    SupersetEqual: "\u2287",
    suphsol: "\u27C9",
    suphsub: "\u2AD7",
    suplarr: "\u297B",
    supmult: "\u2AC2",
    supnE: "\u2ACC",
    supne: "\u228B",
    supplus: "\u2AC0",
    Supset: "\u22D1",
    supset: "\u2283",
    supseteq: "\u2287",
    supseteqq: "\u2AC6",
    supsetneq: "\u228B",
    supsetneqq: "\u2ACC",
    supsim: "\u2AC8",
    supsub: "\u2AD4",
    supsup: "\u2AD6",
    swarhk: "\u2926",
    swArr: "\u21D9",
    swarr: "\u2199",
    swarrow: "\u2199",
    swnwar: "\u292A",
    szlig: "\xdf",
    Tab: "	",
    target: "\u2316",
    Tau: "\u03A4",
    tau: "\u03C4",
    tbrk: "\u23B4",
    Tcaron: "\u0164",
    tcaron: "\u0165",
    Tcedil: "\u0162",
    tcedil: "\u0163",
    Tcy: "\u0422",
    tcy: "\u0442",
    tdot: "\u20DB",
    telrec: "\u2315",
    Tfr: "\uD835\uDD17",
    tfr: "\uD835\uDD31",
    there4: "\u2234",
    Therefore: "\u2234",
    therefore: "\u2234",
    Theta: "\u0398",
    theta: "\u03B8",
    thetasym: "\u03D1",
    thetav: "\u03D1",
    thickapprox: "\u2248",
    thicksim: "\u223C",
    ThickSpace: "\u205F\u200A",
    thinsp: "\u2009",
    ThinSpace: "\u2009",
    thkap: "\u2248",
    thksim: "\u223C",
    THORN: "\xde",
    thorn: "\xfe",
    Tilde: "\u223C",
    tilde: "\u02DC",
    TildeEqual: "\u2243",
    TildeFullEqual: "\u2245",
    TildeTilde: "\u2248",
    times: "\xd7",
    timesb: "\u22A0",
    timesbar: "\u2A31",
    timesd: "\u2A30",
    tint: "\u222D",
    toea: "\u2928",
    top: "\u22A4",
    topbot: "\u2336",
    topcir: "\u2AF1",
    Topf: "\uD835\uDD4B",
    topf: "\uD835\uDD65",
    topfork: "\u2ADA",
    tosa: "\u2929",
    tprime: "\u2034",
    TRADE: "\u2122",
    trade: "\u2122",
    triangle: "\u25B5",
    triangledown: "\u25BF",
    triangleleft: "\u25C3",
    trianglelefteq: "\u22B4",
    triangleq: "\u225C",
    triangleright: "\u25B9",
    trianglerighteq: "\u22B5",
    tridot: "\u25EC",
    trie: "\u225C",
    triminus: "\u2A3A",
    TripleDot: "\u20DB",
    triplus: "\u2A39",
    trisb: "\u29CD",
    tritime: "\u2A3B",
    trpezium: "\u23E2",
    Tscr: "\uD835\uDCAF",
    tscr: "\uD835\uDCC9",
    TScy: "\u0426",
    tscy: "\u0446",
    TSHcy: "\u040B",
    tshcy: "\u045B",
    Tstrok: "\u0166",
    tstrok: "\u0167",
    twixt: "\u226C",
    twoheadleftarrow: "\u219E",
    twoheadrightarrow: "\u21A0",
    Uacute: "\xda",
    uacute: "\xfa",
    Uarr: "\u219F",
    uArr: "\u21D1",
    uarr: "\u2191",
    Uarrocir: "\u2949",
    Ubrcy: "\u040E",
    ubrcy: "\u045E",
    Ubreve: "\u016C",
    ubreve: "\u016D",
    Ucirc: "\xdb",
    ucirc: "\xfb",
    Ucy: "\u0423",
    ucy: "\u0443",
    udarr: "\u21C5",
    Udblac: "\u0170",
    udblac: "\u0171",
    udhar: "\u296E",
    ufisht: "\u297E",
    Ufr: "\uD835\uDD18",
    ufr: "\uD835\uDD32",
    Ugrave: "\xd9",
    ugrave: "\xf9",
    uHar: "\u2963",
    uharl: "\u21BF",
    uharr: "\u21BE",
    uhblk: "\u2580",
    ulcorn: "\u231C",
    ulcorner: "\u231C",
    ulcrop: "\u230F",
    ultri: "\u25F8",
    Umacr: "\u016A",
    umacr: "\u016B",
    uml: "\xa8",
    UnderBar: "_",
    UnderBrace: "\u23DF",
    UnderBracket: "\u23B5",
    UnderParenthesis: "\u23DD",
    Union: "\u22C3",
    UnionPlus: "\u228E",
    Uogon: "\u0172",
    uogon: "\u0173",
    Uopf: "\uD835\uDD4C",
    uopf: "\uD835\uDD66",
    UpArrow: "\u2191",
    Uparrow: "\u21D1",
    uparrow: "\u2191",
    UpArrowBar: "\u2912",
    UpArrowDownArrow: "\u21C5",
    UpDownArrow: "\u2195",
    Updownarrow: "\u21D5",
    updownarrow: "\u2195",
    UpEquilibrium: "\u296E",
    upharpoonleft: "\u21BF",
    upharpoonright: "\u21BE",
    uplus: "\u228E",
    UpperLeftArrow: "\u2196",
    UpperRightArrow: "\u2197",
    Upsi: "\u03D2",
    upsi: "\u03C5",
    upsih: "\u03D2",
    Upsilon: "\u03A5",
    upsilon: "\u03C5",
    UpTee: "\u22A5",
    UpTeeArrow: "\u21A5",
    upuparrows: "\u21C8",
    urcorn: "\u231D",
    urcorner: "\u231D",
    urcrop: "\u230E",
    Uring: "\u016E",
    uring: "\u016F",
    urtri: "\u25F9",
    Uscr: "\uD835\uDCB0",
    uscr: "\uD835\uDCCA",
    utdot: "\u22F0",
    Utilde: "\u0168",
    utilde: "\u0169",
    utri: "\u25B5",
    utrif: "\u25B4",
    uuarr: "\u21C8",
    Uuml: "\xdc",
    uuml: "\xfc",
    uwangle: "\u29A7",
    vangrt: "\u299C",
    varepsilon: "\u03F5",
    varkappa: "\u03F0",
    varnothing: "\u2205",
    varphi: "\u03D5",
    varpi: "\u03D6",
    varpropto: "\u221D",
    vArr: "\u21D5",
    varr: "\u2195",
    varrho: "\u03F1",
    varsigma: "\u03C2",
    varsubsetneq: "\u228A\uFE00",
    varsubsetneqq: "\u2ACB\uFE00",
    varsupsetneq: "\u228B\uFE00",
    varsupsetneqq: "\u2ACC\uFE00",
    vartheta: "\u03D1",
    vartriangleleft: "\u22B2",
    vartriangleright: "\u22B3",
    Vbar: "\u2AEB",
    vBar: "\u2AE8",
    vBarv: "\u2AE9",
    Vcy: "\u0412",
    vcy: "\u0432",
    VDash: "\u22AB",
    Vdash: "\u22A9",
    vDash: "\u22A8",
    vdash: "\u22A2",
    Vdashl: "\u2AE6",
    Vee: "\u22C1",
    vee: "\u2228",
    veebar: "\u22BB",
    veeeq: "\u225A",
    vellip: "\u22EE",
    Verbar: "\u2016",
    verbar: "|",
    Vert: "\u2016",
    vert: "|",
    VerticalBar: "\u2223",
    VerticalLine: "|",
    VerticalSeparator: "\u2758",
    VerticalTilde: "\u2240",
    VeryThinSpace: "\u200A",
    Vfr: "\uD835\uDD19",
    vfr: "\uD835\uDD33",
    vltri: "\u22B2",
    vnsub: "\u2282\u20D2",
    vnsup: "\u2283\u20D2",
    Vopf: "\uD835\uDD4D",
    vopf: "\uD835\uDD67",
    vprop: "\u221D",
    vrtri: "\u22B3",
    Vscr: "\uD835\uDCB1",
    vscr: "\uD835\uDCCB",
    vsubnE: "\u2ACB\uFE00",
    vsubne: "\u228A\uFE00",
    vsupnE: "\u2ACC\uFE00",
    vsupne: "\u228B\uFE00",
    Vvdash: "\u22AA",
    vzigzag: "\u299A",
    Wcirc: "\u0174",
    wcirc: "\u0175",
    wedbar: "\u2A5F",
    Wedge: "\u22C0",
    wedge: "\u2227",
    wedgeq: "\u2259",
    weierp: "\u2118",
    Wfr: "\uD835\uDD1A",
    wfr: "\uD835\uDD34",
    Wopf: "\uD835\uDD4E",
    wopf: "\uD835\uDD68",
    wp: "\u2118",
    wr: "\u2240",
    wreath: "\u2240",
    Wscr: "\uD835\uDCB2",
    wscr: "\uD835\uDCCC",
    xcap: "\u22C2",
    xcirc: "\u25EF",
    xcup: "\u22C3",
    xdtri: "\u25BD",
    Xfr: "\uD835\uDD1B",
    xfr: "\uD835\uDD35",
    xhArr: "\u27FA",
    xharr: "\u27F7",
    Xi: "\u039E",
    xi: "\u03BE",
    xlArr: "\u27F8",
    xlarr: "\u27F5",
    xmap: "\u27FC",
    xnis: "\u22FB",
    xodot: "\u2A00",
    Xopf: "\uD835\uDD4F",
    xopf: "\uD835\uDD69",
    xoplus: "\u2A01",
    xotime: "\u2A02",
    xrArr: "\u27F9",
    xrarr: "\u27F6",
    Xscr: "\uD835\uDCB3",
    xscr: "\uD835\uDCCD",
    xsqcup: "\u2A06",
    xuplus: "\u2A04",
    xutri: "\u25B3",
    xvee: "\u22C1",
    xwedge: "\u22C0",
    Yacute: "\xdd",
    yacute: "\xfd",
    YAcy: "\u042F",
    yacy: "\u044F",
    Ycirc: "\u0176",
    ycirc: "\u0177",
    Ycy: "\u042B",
    ycy: "\u044B",
    yen: "\xa5",
    Yfr: "\uD835\uDD1C",
    yfr: "\uD835\uDD36",
    YIcy: "\u0407",
    yicy: "\u0457",
    Yopf: "\uD835\uDD50",
    yopf: "\uD835\uDD6A",
    Yscr: "\uD835\uDCB4",
    yscr: "\uD835\uDCCE",
    YUcy: "\u042E",
    yucy: "\u044E",
    Yuml: "\u0178",
    yuml: "\xff",
    Zacute: "\u0179",
    zacute: "\u017A",
    Zcaron: "\u017D",
    zcaron: "\u017E",
    Zcy: "\u0417",
    zcy: "\u0437",
    Zdot: "\u017B",
    zdot: "\u017C",
    zeetrf: "\u2128",
    ZeroWidthSpace: "\u200B",
    Zeta: "\u0396",
    zeta: "\u03B6",
    Zfr: "\u2128",
    zfr: "\uD835\uDD37",
    ZHcy: "\u0416",
    zhcy: "\u0436",
    zigrarr: "\u21DD",
    Zopf: "\u2124",
    zopf: "\uD835\uDD6B",
    Zscr: "\uD835\uDCB5",
    zscr: "\uD835\uDCCF",
    zwj: "\u200D",
    zwnj: "\u200C"
});
$1906139318cf5984$export$79451380caed3f98 = $1906139318cf5984$export$b7e4d4631df36afa;

});

parcelRegister("2CVVF", function(module, exports) {

$parcel$export(module.exports, "XMLReader", () => $1e9c10e785c57779$export$ccbc9f9f018333e9, (v) => $1e9c10e785c57779$export$ccbc9f9f018333e9 = v);
$parcel$export(module.exports, "ParseError", () => $1e9c10e785c57779$export$f9c837a54db411d, (v) => $1e9c10e785c57779$export$f9c837a54db411d = v);
var $1e9c10e785c57779$export$ccbc9f9f018333e9;
var $1e9c10e785c57779$export$f9c837a54db411d;

var $aHMXu = parcelRequire("aHMXu");
var $1e9c10e785c57779$require$NAMESPACE = $aHMXu.NAMESPACE;
//[4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
//[4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
//[5]   	Name	   ::=   	NameStartChar (NameChar)*
var $1e9c10e785c57779$var$nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/ //\u10000-\uEFFFF
;
var $1e9c10e785c57779$var$nameChar = new RegExp("[\\-\\.0-9" + $1e9c10e785c57779$var$nameStartChar.source.slice(1, -1) + "\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
var $1e9c10e785c57779$var$tagNamePattern = new RegExp("^" + $1e9c10e785c57779$var$nameStartChar.source + $1e9c10e785c57779$var$nameChar.source + "*(?::" + $1e9c10e785c57779$var$nameStartChar.source + $1e9c10e785c57779$var$nameChar.source + "*)?$");
//var tagNamePattern = /^[a-zA-Z_][\w\-\.]*(?:\:[a-zA-Z_][\w\-\.]*)?$/
//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')
//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
var $1e9c10e785c57779$var$S_TAG = 0; //tag name offerring
var $1e9c10e785c57779$var$S_ATTR = 1; //attr name offerring
var $1e9c10e785c57779$var$S_ATTR_SPACE = 2; //attr name end and space offer
var $1e9c10e785c57779$var$S_EQ = 3; //=space?
var $1e9c10e785c57779$var$S_ATTR_NOQUOT_VALUE = 4; //attr value(no quot value only)
var $1e9c10e785c57779$var$S_ATTR_END = 5; //attr value end and no space(quot end)
var $1e9c10e785c57779$var$S_TAG_SPACE = 6; //(attr value end || tag end ) && (space offer)
var $1e9c10e785c57779$var$S_TAG_CLOSE = 7; //closed el<el />
/**
 * Creates an error that will not be caught by XMLReader aka the SAX parser.
 *
 * @param {string} message
 * @param {any?} locator Optional, can provide details about the location in the source
 * @constructor
 */ function $1e9c10e785c57779$var$ParseError(message, locator) {
    this.message = message;
    this.locator = locator;
    if (Error.captureStackTrace) Error.captureStackTrace(this, $1e9c10e785c57779$var$ParseError);
}
$1e9c10e785c57779$var$ParseError.prototype = new Error();
$1e9c10e785c57779$var$ParseError.prototype.name = $1e9c10e785c57779$var$ParseError.name;
function $1e9c10e785c57779$var$XMLReader() {}
$1e9c10e785c57779$var$XMLReader.prototype = {
    parse: function(source, defaultNSMap, entityMap) {
        var domBuilder = this.domBuilder;
        domBuilder.startDocument();
        $1e9c10e785c57779$var$_copy(defaultNSMap, defaultNSMap = {});
        $1e9c10e785c57779$var$parse(source, defaultNSMap, entityMap, domBuilder, this.errorHandler);
        domBuilder.endDocument();
    }
};
function $1e9c10e785c57779$var$parse(source, defaultNSMapCopy, entityMap, domBuilder, errorHandler) {
    function fixedFromCharCode(code) {
        // String.prototype.fromCharCode does not supports
        // > 2 bytes unicode chars directly
        if (code > 0xffff) {
            code -= 0x10000;
            var surrogate1 = 0xd800 + (code >> 10), surrogate2 = 0xdc00 + (code & 0x3ff);
            return String.fromCharCode(surrogate1, surrogate2);
        } else return String.fromCharCode(code);
    }
    function entityReplacer(a) {
        var k = a.slice(1, -1);
        if (Object.hasOwnProperty.call(entityMap, k)) return entityMap[k];
        else if (k.charAt(0) === "#") return fixedFromCharCode(parseInt(k.substr(1).replace("x", "0x")));
        else {
            errorHandler.error("entity not found:" + a);
            return a;
        }
    }
    function appendText(end) {
        if (end > start) {
            var xt = source.substring(start, end).replace(/&#?\w+;/g, entityReplacer);
            locator && position(start);
            domBuilder.characters(xt, 0, end - start);
            start = end;
        }
    }
    function position(p, m) {
        while(p >= lineEnd && (m = linePattern.exec(source))){
            lineStart = m.index;
            lineEnd = lineStart + m[0].length;
            locator.lineNumber++;
        //console.log('line++:',locator,startPos,endPos)
        }
        locator.columnNumber = p - lineStart + 1;
    }
    var lineStart = 0;
    var lineEnd = 0;
    var linePattern = /.*(?:\r\n?|\n)|.*$/g;
    var locator = domBuilder.locator;
    var parseStack = [
        {
            currentNSMap: defaultNSMapCopy
        }
    ];
    var closeMap = {};
    var start = 0;
    while(true){
        try {
            var tagStart = source.indexOf("<", start);
            if (tagStart < 0) {
                if (!source.substr(start).match(/^\s*$/)) {
                    var doc = domBuilder.doc;
                    var text = doc.createTextNode(source.substr(start));
                    doc.appendChild(text);
                    domBuilder.currentElement = text;
                }
                return;
            }
            if (tagStart > start) appendText(tagStart);
            switch(source.charAt(tagStart + 1)){
                case "/":
                    var end = source.indexOf(">", tagStart + 3);
                    var tagName = source.substring(tagStart + 2, end).replace(/[ \t\n\r]+$/g, "");
                    var config = parseStack.pop();
                    if (end < 0) {
                        tagName = source.substring(tagStart + 2).replace(/[\s<].*/, "");
                        errorHandler.error("end tag name: " + tagName + " is not complete:" + config.tagName);
                        end = tagStart + 1 + tagName.length;
                    } else if (tagName.match(/\s</)) {
                        tagName = tagName.replace(/[\s<].*/, "");
                        errorHandler.error("end tag name: " + tagName + " maybe not complete");
                        end = tagStart + 1 + tagName.length;
                    }
                    var localNSMap = config.localNSMap;
                    var endMatch = config.tagName == tagName;
                    var endIgnoreCaseMach = endMatch || config.tagName && config.tagName.toLowerCase() == tagName.toLowerCase();
                    if (endIgnoreCaseMach) {
                        domBuilder.endElement(config.uri, config.localName, tagName);
                        if (localNSMap) {
                            for(var prefix in localNSMap)if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) domBuilder.endPrefixMapping(prefix);
                        }
                        if (!endMatch) errorHandler.fatalError("end tag name: " + tagName + " is not match the current start tagName:" + config.tagName); // No known test case
                    } else parseStack.push(config);
                    end++;
                    break;
                // end elment
                case "?":
                    locator && position(tagStart);
                    end = $1e9c10e785c57779$var$parseInstruction(source, tagStart, domBuilder);
                    break;
                case "!":
                    locator && position(tagStart);
                    end = $1e9c10e785c57779$var$parseDCC(source, tagStart, domBuilder, errorHandler);
                    break;
                default:
                    locator && position(tagStart);
                    var el = new $1e9c10e785c57779$var$ElementAttributes();
                    var currentNSMap = parseStack[parseStack.length - 1].currentNSMap;
                    //elStartEnd
                    var end = $1e9c10e785c57779$var$parseElementStartPart(source, tagStart, el, currentNSMap, entityReplacer, errorHandler);
                    var len = el.length;
                    if (!el.closed && $1e9c10e785c57779$var$fixSelfClosed(source, end, el.tagName, closeMap)) {
                        el.closed = true;
                        if (!entityMap.nbsp) errorHandler.warning("unclosed xml attribute");
                    }
                    if (locator && len) {
                        var locator2 = $1e9c10e785c57779$var$copyLocator(locator, {});
                        //try{//attribute position fixed
                        for(var i = 0; i < len; i++){
                            var a = el[i];
                            position(a.offset);
                            a.locator = $1e9c10e785c57779$var$copyLocator(locator, {});
                        }
                        domBuilder.locator = locator2;
                        if ($1e9c10e785c57779$var$appendElement(el, domBuilder, currentNSMap)) parseStack.push(el);
                        domBuilder.locator = locator;
                    } else if ($1e9c10e785c57779$var$appendElement(el, domBuilder, currentNSMap)) parseStack.push(el);
                    if ($1e9c10e785c57779$require$NAMESPACE.isHTML(el.uri) && !el.closed) end = $1e9c10e785c57779$var$parseHtmlSpecialContent(source, end, el.tagName, entityReplacer, domBuilder);
                    else end++;
            }
        } catch (e) {
            if (e instanceof $1e9c10e785c57779$var$ParseError) throw e;
            errorHandler.error("element parse error: " + e);
            end = -1;
        }
        if (end > start) start = end;
        else //TODO: 这里有可能sax回退，有位置错误风险
        appendText(Math.max(tagStart, start) + 1);
    }
}
function $1e9c10e785c57779$var$copyLocator(f, t) {
    t.lineNumber = f.lineNumber;
    t.columnNumber = f.columnNumber;
    return t;
}
/**
 * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
 */ function $1e9c10e785c57779$var$parseElementStartPart(source, start, el, currentNSMap, entityReplacer, errorHandler) {
    /**
	 * @param {string} qname
	 * @param {string} value
	 * @param {number} startIndex
	 */ function addAttribute(qname, value, startIndex) {
        if (el.attributeNames.hasOwnProperty(qname)) errorHandler.fatalError("Attribute " + qname + " redefined");
        el.addValue(qname, // @see https://www.w3.org/TR/xml/#AVNormalize
        // since the xmldom sax parser does not "interpret" DTD the following is not implemented:
        // - recursive replacement of (DTD) entity references
        // - trimming and collapsing multiple spaces into a single one for attributes that are not of type CDATA
        value.replace(/[\t\n\r]/g, " ").replace(/&#?\w+;/g, entityReplacer), startIndex);
    }
    var attrName;
    var value;
    var p = ++start;
    var s = $1e9c10e785c57779$var$S_TAG; //status
    while(true){
        var c = source.charAt(p);
        switch(c){
            case "=":
                if (s === $1e9c10e785c57779$var$S_ATTR) {
                    attrName = source.slice(start, p);
                    s = $1e9c10e785c57779$var$S_EQ;
                } else if (s === $1e9c10e785c57779$var$S_ATTR_SPACE) s = $1e9c10e785c57779$var$S_EQ;
                else //fatalError: equal must after attrName or space after attrName
                throw new Error("attribute equal must after attrName"); // No known test case
                break;
            case "'":
            case '"':
                if (s === $1e9c10e785c57779$var$S_EQ || s === $1e9c10e785c57779$var$S_ATTR //|| s == S_ATTR_SPACE
                ) {
                    if (s === $1e9c10e785c57779$var$S_ATTR) {
                        errorHandler.warning('attribute value must after "="');
                        attrName = source.slice(start, p);
                    }
                    start = p + 1;
                    p = source.indexOf(c, start);
                    if (p > 0) {
                        value = source.slice(start, p);
                        addAttribute(attrName, value, start - 1);
                        s = $1e9c10e785c57779$var$S_ATTR_END;
                    } else //fatalError: no end quot match
                    throw new Error("attribute value no end '" + c + "' match");
                } else if (s == $1e9c10e785c57779$var$S_ATTR_NOQUOT_VALUE) {
                    value = source.slice(start, p);
                    addAttribute(attrName, value, start);
                    errorHandler.warning('attribute "' + attrName + '" missed start quot(' + c + ")!!");
                    start = p + 1;
                    s = $1e9c10e785c57779$var$S_ATTR_END;
                } else //fatalError: no equal before
                throw new Error('attribute value must after "="'); // No known test case
                break;
            case "/":
                switch(s){
                    case $1e9c10e785c57779$var$S_TAG:
                        el.setTagName(source.slice(start, p));
                    case $1e9c10e785c57779$var$S_ATTR_END:
                    case $1e9c10e785c57779$var$S_TAG_SPACE:
                    case $1e9c10e785c57779$var$S_TAG_CLOSE:
                        s = $1e9c10e785c57779$var$S_TAG_CLOSE;
                        el.closed = true;
                    case $1e9c10e785c57779$var$S_ATTR_NOQUOT_VALUE:
                    case $1e9c10e785c57779$var$S_ATTR:
                        break;
                    case $1e9c10e785c57779$var$S_ATTR_SPACE:
                        el.closed = true;
                        break;
                    //case S_EQ:
                    default:
                        throw new Error("attribute invalid close char('/')") // No known test case
                        ;
                }
                break;
            case "":
                errorHandler.error("unexpected end of input");
                if (s == $1e9c10e785c57779$var$S_TAG) el.setTagName(source.slice(start, p));
                return p;
            case ">":
                switch(s){
                    case $1e9c10e785c57779$var$S_TAG:
                        el.setTagName(source.slice(start, p));
                    case $1e9c10e785c57779$var$S_ATTR_END:
                    case $1e9c10e785c57779$var$S_TAG_SPACE:
                    case $1e9c10e785c57779$var$S_TAG_CLOSE:
                        break; //normal
                    case $1e9c10e785c57779$var$S_ATTR_NOQUOT_VALUE:
                    case $1e9c10e785c57779$var$S_ATTR:
                        value = source.slice(start, p);
                        if (value.slice(-1) === "/") {
                            el.closed = true;
                            value = value.slice(0, -1);
                        }
                    case $1e9c10e785c57779$var$S_ATTR_SPACE:
                        if (s === $1e9c10e785c57779$var$S_ATTR_SPACE) value = attrName;
                        if (s == $1e9c10e785c57779$var$S_ATTR_NOQUOT_VALUE) {
                            errorHandler.warning('attribute "' + value + '" missed quot(")!');
                            addAttribute(attrName, value, start);
                        } else {
                            if (!$1e9c10e785c57779$require$NAMESPACE.isHTML(currentNSMap[""]) || !value.match(/^(?:disabled|checked|selected)$/i)) errorHandler.warning('attribute "' + value + '" missed value!! "' + value + '" instead!!');
                            addAttribute(value, value, start);
                        }
                        break;
                    case $1e9c10e785c57779$var$S_EQ:
                        throw new Error("attribute value missed!!");
                }
                //			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))
                return p;
            /*xml space '\x20' | #x9 | #xD | #xA; */ case "\x80":
                c = " ";
            default:
                if (c <= " ") switch(s){
                    case $1e9c10e785c57779$var$S_TAG:
                        el.setTagName(source.slice(start, p)); //tagName
                        s = $1e9c10e785c57779$var$S_TAG_SPACE;
                        break;
                    case $1e9c10e785c57779$var$S_ATTR:
                        attrName = source.slice(start, p);
                        s = $1e9c10e785c57779$var$S_ATTR_SPACE;
                        break;
                    case $1e9c10e785c57779$var$S_ATTR_NOQUOT_VALUE:
                        var value = source.slice(start, p);
                        errorHandler.warning('attribute "' + value + '" missed quot(")!!');
                        addAttribute(attrName, value, start);
                    case $1e9c10e785c57779$var$S_ATTR_END:
                        s = $1e9c10e785c57779$var$S_TAG_SPACE;
                        break;
                }
                else //S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
                //S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
                switch(s){
                    //case S_TAG:void();break;
                    //case S_ATTR:void();break;
                    //case S_ATTR_NOQUOT_VALUE:void();break;
                    case $1e9c10e785c57779$var$S_ATTR_SPACE:
                        var tagName = el.tagName;
                        if (!$1e9c10e785c57779$require$NAMESPACE.isHTML(currentNSMap[""]) || !attrName.match(/^(?:disabled|checked|selected)$/i)) errorHandler.warning('attribute "' + attrName + '" missed value!! "' + attrName + '" instead2!!');
                        addAttribute(attrName, attrName, start);
                        start = p;
                        s = $1e9c10e785c57779$var$S_ATTR;
                        break;
                    case $1e9c10e785c57779$var$S_ATTR_END:
                        errorHandler.warning('attribute space is required"' + attrName + '"!!');
                    case $1e9c10e785c57779$var$S_TAG_SPACE:
                        s = $1e9c10e785c57779$var$S_ATTR;
                        start = p;
                        break;
                    case $1e9c10e785c57779$var$S_EQ:
                        s = $1e9c10e785c57779$var$S_ATTR_NOQUOT_VALUE;
                        start = p;
                        break;
                    case $1e9c10e785c57779$var$S_TAG_CLOSE:
                        throw new Error("elements closed character '/' and '>' must be connected to");
                }
        } //end outer switch
        //console.log('p++',p)
        p++;
    }
}
/**
 * @return true if has new namespace define
 */ function $1e9c10e785c57779$var$appendElement(el, domBuilder, currentNSMap) {
    var tagName = el.tagName;
    var localNSMap = null;
    //var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
    var i = el.length;
    while(i--){
        var a = el[i];
        var qName = a.qName;
        var value = a.value;
        var nsp = qName.indexOf(":");
        if (nsp > 0) {
            var prefix = a.prefix = qName.slice(0, nsp);
            var localName = qName.slice(nsp + 1);
            var nsPrefix = prefix === "xmlns" && localName;
        } else {
            localName = qName;
            prefix = null;
            nsPrefix = qName === "xmlns" && "";
        }
        //can not set prefix,because prefix !== ''
        a.localName = localName;
        //prefix == null for no ns prefix attribute
        if (nsPrefix !== false) {
            if (localNSMap == null) {
                localNSMap = {};
                //console.log(currentNSMap,0)
                $1e9c10e785c57779$var$_copy(currentNSMap, currentNSMap = {});
            //console.log(currentNSMap,1)
            }
            currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
            a.uri = $1e9c10e785c57779$require$NAMESPACE.XMLNS;
            domBuilder.startPrefixMapping(nsPrefix, value);
        }
    }
    var i = el.length;
    while(i--){
        a = el[i];
        var prefix = a.prefix;
        if (prefix) {
            if (prefix === "xml") a.uri = $1e9c10e785c57779$require$NAMESPACE.XML;
            if (prefix !== "xmlns") a.uri = currentNSMap[prefix || ""];
        }
    }
    var nsp = tagName.indexOf(":");
    if (nsp > 0) {
        prefix = el.prefix = tagName.slice(0, nsp);
        localName = el.localName = tagName.slice(nsp + 1);
    } else {
        prefix = null; //important!!
        localName = el.localName = tagName;
    }
    //no prefix element has default namespace
    var ns = el.uri = currentNSMap[prefix || ""];
    domBuilder.startElement(ns, localName, tagName, el);
    //endPrefixMapping and startPrefixMapping have not any help for dom builder
    //localNSMap = null
    if (el.closed) {
        domBuilder.endElement(ns, localName, tagName);
        if (localNSMap) {
            for(prefix in localNSMap)if (Object.prototype.hasOwnProperty.call(localNSMap, prefix)) domBuilder.endPrefixMapping(prefix);
        }
    } else {
        el.currentNSMap = currentNSMap;
        el.localNSMap = localNSMap;
        //parseStack.push(el);
        return true;
    }
}
function $1e9c10e785c57779$var$parseHtmlSpecialContent(source, elStartEnd, tagName, entityReplacer, domBuilder) {
    if (/^(?:script|textarea)$/i.test(tagName)) {
        var elEndStart = source.indexOf("</" + tagName + ">", elStartEnd);
        var text = source.substring(elStartEnd + 1, elEndStart);
        if (/[&<]/.test(text)) {
            if (/^script$/i.test(tagName)) {
                //if(!/\]\]>/.test(text)){
                //lexHandler.startCDATA();
                domBuilder.characters(text, 0, text.length);
                //lexHandler.endCDATA();
                return elEndStart;
            //}
            } //}else{//text area
            text = text.replace(/&#?\w+;/g, entityReplacer);
            domBuilder.characters(text, 0, text.length);
            return elEndStart;
        //}
        }
    }
    return elStartEnd + 1;
}
function $1e9c10e785c57779$var$fixSelfClosed(source, elStartEnd, tagName, closeMap) {
    //if(tagName in closeMap){
    var pos = closeMap[tagName];
    if (pos == null) {
        //console.log(tagName)
        pos = source.lastIndexOf("</" + tagName + ">");
        if (pos < elStartEnd) pos = source.lastIndexOf("</" + tagName);
        closeMap[tagName] = pos;
    }
    return pos < elStartEnd;
//}
}
function $1e9c10e785c57779$var$_copy(source, target) {
    for(var n in source)if (Object.prototype.hasOwnProperty.call(source, n)) target[n] = source[n];
}
function $1e9c10e785c57779$var$parseDCC(source, start, domBuilder, errorHandler) {
    var next = source.charAt(start + 2);
    switch(next){
        case "-":
            if (source.charAt(start + 3) === "-") {
                var end = source.indexOf("-->", start + 4);
                //append comment source.substring(4,end)//<!--
                if (end > start) {
                    domBuilder.comment(source, start + 4, end - start - 4);
                    return end + 3;
                } else {
                    errorHandler.error("Unclosed comment");
                    return -1;
                }
            } else //error
            return -1;
        default:
            if (source.substr(start + 3, 6) == "CDATA[") {
                var end = source.indexOf("]]>", start + 9);
                domBuilder.startCDATA();
                domBuilder.characters(source, start + 9, end - start - 9);
                domBuilder.endCDATA();
                return end + 3;
            }
            //<!DOCTYPE
            //startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId)
            var matchs = $1e9c10e785c57779$var$split(source, start);
            var len = matchs.length;
            if (len > 1 && /!doctype/i.test(matchs[0][0])) {
                var name = matchs[1][0];
                var pubid = false;
                var sysid = false;
                if (len > 3) {
                    if (/^public$/i.test(matchs[2][0])) {
                        pubid = matchs[3][0];
                        sysid = len > 4 && matchs[4][0];
                    } else if (/^system$/i.test(matchs[2][0])) sysid = matchs[3][0];
                }
                var lastMatch = matchs[len - 1];
                domBuilder.startDTD(name, pubid, sysid);
                domBuilder.endDTD();
                return lastMatch.index + lastMatch[0].length;
            }
    }
    return -1;
}
function $1e9c10e785c57779$var$parseInstruction(source, start, domBuilder) {
    var end = source.indexOf("?>", start);
    if (end) {
        var match = source.substring(start, end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
        if (match) {
            var len = match[0].length;
            domBuilder.processingInstruction(match[1], match[2]);
            return end + 2;
        } else return -1;
    }
    return -1;
}
function $1e9c10e785c57779$var$ElementAttributes() {
    this.attributeNames = {};
}
$1e9c10e785c57779$var$ElementAttributes.prototype = {
    setTagName: function(tagName) {
        if (!$1e9c10e785c57779$var$tagNamePattern.test(tagName)) throw new Error("invalid tagName:" + tagName);
        this.tagName = tagName;
    },
    addValue: function(qName, value, offset) {
        if (!$1e9c10e785c57779$var$tagNamePattern.test(qName)) throw new Error("invalid attribute:" + qName);
        this.attributeNames[qName] = this.length;
        this[this.length++] = {
            qName: qName,
            value: value,
            offset: offset
        };
    },
    length: 0,
    getLocalName: function(i) {
        return this[i].localName;
    },
    getLocator: function(i) {
        return this[i].locator;
    },
    getQName: function(i) {
        return this[i].qName;
    },
    getURI: function(i) {
        return this[i].uri;
    },
    getValue: function(i) {
        return this[i].value;
    }
};
function $1e9c10e785c57779$var$split(source, start) {
    var match;
    var buf = [];
    var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
    reg.lastIndex = start;
    reg.exec(source); //skip <
    while(match = reg.exec(source)){
        buf.push(match);
        if (match[1]) return buf;
    }
}
$1e9c10e785c57779$export$ccbc9f9f018333e9 = $1e9c10e785c57779$var$XMLReader;
$1e9c10e785c57779$export$f9c837a54db411d = $1e9c10e785c57779$var$ParseError;

});


var $17b288f07ec57b56$exports = {};
"use strict";

$17b288f07ec57b56$exports = (parcelRequire("4WnG3"));


parcelRequire("d4J5n");
var $fef8548889890d4d$exports = {};

$parcel$export($fef8548889890d4d$exports, "createRoot", () => $fef8548889890d4d$export$882461b6382ed46c, (v) => $fef8548889890d4d$export$882461b6382ed46c = v);
$parcel$export($fef8548889890d4d$exports, "hydrateRoot", () => $fef8548889890d4d$export$757ceba2d55c277e, (v) => $fef8548889890d4d$export$757ceba2d55c277e = v);
var $fef8548889890d4d$export$882461b6382ed46c;
var $fef8548889890d4d$export$757ceba2d55c277e;
"use strict";
var $4723f549251dd88b$exports = {};
"use strict";
function $4723f549251dd88b$var$checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") return;
    try {
        // Verify that the code above has been dead code eliminated (DCE'd).
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE($4723f549251dd88b$var$checkDCE);
    } catch (err) {
        // DevTools shouldn't crash React, no matter what.
        // We should still report in case we break this code.
        console.error(err);
    }
}
// DCE check should happen before ReactDOM bundle executes so that
// DevTools can report bad minification during injection.
$4723f549251dd88b$var$checkDCE();

$4723f549251dd88b$exports = (parcelRequire("bgpZC"));


var $fef8548889890d4d$var$i;
$fef8548889890d4d$export$882461b6382ed46c = $4723f549251dd88b$exports.createRoot;
$fef8548889890d4d$export$757ceba2d55c277e = $4723f549251dd88b$exports.hydrateRoot;



parcelRequire("d4J5n");
/*
We're constantly improving the code you see. 
Please share your feedback here: https://form.asana.com/?k=uvp-HPgd3_hyoXRBw1IcNg&d=1152665201300829
*/ 
parcelRequire("d4J5n");

/**
 * React Router v6.20.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */ 
var $d4J5n = parcelRequire("d4J5n");
/**
 * @remix-run/router v1.13.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */ function $0e856af10b3b08bf$var$_extends() {
    $0e856af10b3b08bf$var$_extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return $0e856af10b3b08bf$var$_extends.apply(this, arguments);
}
////////////////////////////////////////////////////////////////////////////////
//#region Types and Constants
////////////////////////////////////////////////////////////////////////////////
/**
 * Actions represent the type of change to a location value.
 */ var $0e856af10b3b08bf$export$e19cd5f9376f8cee;
(function(Action) {
    /**
   * A POP indicates a change to an arbitrary index in the history stack, such
   * as a back or forward navigation. It does not describe the direction of the
   * navigation, only that the current index changed.
   *
   * Note: This is the default action for newly created history objects.
   */ Action["Pop"] = "POP";
    /**
   * A PUSH indicates a new entry being added to the history stack, such as when
   * a link is clicked and a new page loads. When this happens, all subsequent
   * entries in the stack are lost.
   */ Action["Push"] = "PUSH";
    /**
   * A REPLACE indicates the entry at the current index in the history stack
   * being replaced by a new one.
   */ Action["Replace"] = "REPLACE";
})($0e856af10b3b08bf$export$e19cd5f9376f8cee || ($0e856af10b3b08bf$export$e19cd5f9376f8cee = {}));
const $0e856af10b3b08bf$var$PopStateEventType = "popstate";
/**
 * Memory history stores the current location in memory. It is designed for use
 * in stateful non-browser environments like tests and React Native.
 */ function $0e856af10b3b08bf$export$2b76ad033c6e6d08(options) {
    if (options === void 0) options = {};
    let { initialEntries: initialEntries = [
        "/"
    ], initialIndex: initialIndex, v5Compat: v5Compat = false } = options;
    let entries; // Declare so we can access from createMemoryLocation
    entries = initialEntries.map((entry, index)=>createMemoryLocation(entry, typeof entry === "string" ? null : entry.state, index === 0 ? "default" : undefined));
    let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);
    let action = $0e856af10b3b08bf$export$e19cd5f9376f8cee.Pop;
    let listener = null;
    function clampIndex(n) {
        return Math.min(Math.max(n, 0), entries.length - 1);
    }
    function getCurrentLocation() {
        return entries[index];
    }
    function createMemoryLocation(to, state, key) {
        if (state === void 0) state = null;
        let location = $0e856af10b3b08bf$var$createLocation(entries ? getCurrentLocation().pathname : "/", to, state, key);
        $0e856af10b3b08bf$export$c0e02632e14916fd(location.pathname.charAt(0) === "/", "relative pathnames are not supported in memory history: " + JSON.stringify(to));
        return location;
    }
    function createHref(to) {
        return typeof to === "string" ? to : $0e856af10b3b08bf$export$fe53371bee54353d(to);
    }
    let history = {
        get index () {
            return index;
        },
        get action () {
            return action;
        },
        get location () {
            return getCurrentLocation();
        },
        createHref: createHref,
        createURL (to) {
            return new URL(createHref(to), "http://localhost");
        },
        encodeLocation (to) {
            let path = typeof to === "string" ? $0e856af10b3b08bf$export$8ccf933b0513f8d0(to) : to;
            return {
                pathname: path.pathname || "",
                search: path.search || "",
                hash: path.hash || ""
            };
        },
        push (to, state) {
            action = $0e856af10b3b08bf$export$e19cd5f9376f8cee.Push;
            let nextLocation = createMemoryLocation(to, state);
            index += 1;
            entries.splice(index, entries.length, nextLocation);
            if (v5Compat && listener) listener({
                action: action,
                location: nextLocation,
                delta: 1
            });
        },
        replace (to, state) {
            action = $0e856af10b3b08bf$export$e19cd5f9376f8cee.Replace;
            let nextLocation = createMemoryLocation(to, state);
            entries[index] = nextLocation;
            if (v5Compat && listener) listener({
                action: action,
                location: nextLocation,
                delta: 0
            });
        },
        go (delta) {
            action = $0e856af10b3b08bf$export$e19cd5f9376f8cee.Pop;
            let nextIndex = clampIndex(index + delta);
            let nextLocation = entries[nextIndex];
            index = nextIndex;
            if (listener) listener({
                action: action,
                location: nextLocation,
                delta: delta
            });
        },
        listen (fn) {
            listener = fn;
            return ()=>{
                listener = null;
            };
        }
    };
    return history;
}
/**
 * Browser history stores the location in regular URLs. This is the standard for
 * most web apps, but it requires some configuration on the server to ensure you
 * serve the same app at multiple URLs.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory
 */ function $0e856af10b3b08bf$export$719fc203c4e16dee(options) {
    if (options === void 0) options = {};
    function createBrowserLocation(window1, globalHistory) {
        let { pathname: pathname, search: search, hash: hash } = window1.location;
        return $0e856af10b3b08bf$var$createLocation("", {
            pathname: pathname,
            search: search,
            hash: hash
        }, // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || "default");
    }
    function createBrowserHref(window1, to) {
        return typeof to === "string" ? to : $0e856af10b3b08bf$export$fe53371bee54353d(to);
    }
    return $0e856af10b3b08bf$var$getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
}
/**
 * Hash history stores the location in window.location.hash. This makes it ideal
 * for situations where you don't want to send the location to the server for
 * some reason, either because you do cannot configure it or the URL space is
 * reserved for something else.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory
 */ function $0e856af10b3b08bf$export$b71fdd3798280242(options) {
    if (options === void 0) options = {};
    function createHashLocation(window1, globalHistory) {
        let { pathname: pathname = "/", search: search = "", hash: hash = "" } = $0e856af10b3b08bf$export$8ccf933b0513f8d0(window1.location.hash.substr(1));
        // Hash URL should always have a leading / just like window.location.pathname
        // does, so if an app ends up at a route like /#something then we add a
        // leading slash so all of our path-matching behaves the same as if it would
        // in a browser router.  This is particularly important when there exists a
        // root splat route (<Route path="*">) since that matches internally against
        // "/*" and we'd expect /#something to 404 in a hash router app.
        if (!pathname.startsWith("/") && !pathname.startsWith(".")) pathname = "/" + pathname;
        return $0e856af10b3b08bf$var$createLocation("", {
            pathname: pathname,
            search: search,
            hash: hash
        }, // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || "default");
    }
    function createHashHref(window1, to) {
        let base = window1.document.querySelector("base");
        let href = "";
        if (base && base.getAttribute("href")) {
            let url = window1.location.href;
            let hashIndex = url.indexOf("#");
            href = hashIndex === -1 ? url : url.slice(0, hashIndex);
        }
        return href + "#" + (typeof to === "string" ? to : $0e856af10b3b08bf$export$fe53371bee54353d(to));
    }
    function validateHashLocation(location, to) {
        $0e856af10b3b08bf$export$c0e02632e14916fd(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
    }
    return $0e856af10b3b08bf$var$getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
}
function $0e856af10b3b08bf$export$3e9cee6b33872309(value, message) {
    if (value === false || value === null || typeof value === "undefined") throw new Error(message);
}
function $0e856af10b3b08bf$export$c0e02632e14916fd(cond, message) {
    if (!cond) {
        // eslint-disable-next-line no-console
        if (typeof console !== "undefined") console.warn(message);
        try {
            // Welcome to debugging history!
            //
            // This error is thrown as a convenience, so you can more easily
            // find the source for a warning that appears in the console by
            // enabling "pause on exceptions" in your JavaScript debugger.
            throw new Error(message);
        // eslint-disable-next-line no-empty
        } catch (e) {}
    }
}
function $0e856af10b3b08bf$var$createKey() {
    return Math.random().toString(36).substr(2, 8);
}
/**
 * For browser-based histories, we combine the state and key into an object
 */ function $0e856af10b3b08bf$var$getHistoryState(location, index) {
    return {
        usr: location.state,
        key: location.key,
        idx: index
    };
}
/**
 * Creates a Location object with a unique key from the given Path
 */ function $0e856af10b3b08bf$var$createLocation(current, to, state, key) {
    if (state === void 0) state = null;
    let location = $0e856af10b3b08bf$var$_extends({
        pathname: typeof current === "string" ? current : current.pathname,
        search: "",
        hash: ""
    }, typeof to === "string" ? $0e856af10b3b08bf$export$8ccf933b0513f8d0(to) : to, {
        state: state,
        // TODO: This could be cleaned up.  push/replace should probably just take
        // full Locations now and avoid the need to run through this flow at all
        // But that's a pretty big refactor to the current test suite so going to
        // keep as is for the time being and just let any incoming keys take precedence
        key: to && to.key || key || $0e856af10b3b08bf$var$createKey()
    });
    return location;
}
/**
 * Creates a string URL path from the given pathname, search, and hash components.
 */ function $0e856af10b3b08bf$export$fe53371bee54353d(_ref) {
    let { pathname: pathname = "/", search: search = "", hash: hash = "" } = _ref;
    if (search && search !== "?") pathname += search.charAt(0) === "?" ? search : "?" + search;
    if (hash && hash !== "#") pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
    return pathname;
}
/**
 * Parses a string URL path into its separate pathname, search, and hash components.
 */ function $0e856af10b3b08bf$export$8ccf933b0513f8d0(path) {
    let parsedPath = {};
    if (path) {
        let hashIndex = path.indexOf("#");
        if (hashIndex >= 0) {
            parsedPath.hash = path.substr(hashIndex);
            path = path.substr(0, hashIndex);
        }
        let searchIndex = path.indexOf("?");
        if (searchIndex >= 0) {
            parsedPath.search = path.substr(searchIndex);
            path = path.substr(0, searchIndex);
        }
        if (path) parsedPath.pathname = path;
    }
    return parsedPath;
}
function $0e856af10b3b08bf$var$getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
    if (options === void 0) options = {};
    let { window: window1 = document.defaultView, v5Compat: v5Compat = false } = options;
    let globalHistory = window1.history;
    let action = $0e856af10b3b08bf$export$e19cd5f9376f8cee.Pop;
    let listener = null;
    let index = getIndex();
    // Index should only be null when we initialize. If not, it's because the
    // user called history.pushState or history.replaceState directly, in which
    // case we should log a warning as it will result in bugs.
    if (index == null) {
        index = 0;
        globalHistory.replaceState($0e856af10b3b08bf$var$_extends({}, globalHistory.state, {
            idx: index
        }), "");
    }
    function getIndex() {
        let state = globalHistory.state || {
            idx: null
        };
        return state.idx;
    }
    function handlePop() {
        action = $0e856af10b3b08bf$export$e19cd5f9376f8cee.Pop;
        let nextIndex = getIndex();
        let delta = nextIndex == null ? null : nextIndex - index;
        index = nextIndex;
        if (listener) listener({
            action: action,
            location: history.location,
            delta: delta
        });
    }
    function push(to, state) {
        action = $0e856af10b3b08bf$export$e19cd5f9376f8cee.Push;
        let location = $0e856af10b3b08bf$var$createLocation(history.location, to, state);
        if (validateLocation) validateLocation(location, to);
        index = getIndex() + 1;
        let historyState = $0e856af10b3b08bf$var$getHistoryState(location, index);
        let url = history.createHref(location);
        // try...catch because iOS limits us to 100 pushState calls :/
        try {
            globalHistory.pushState(historyState, "", url);
        } catch (error) {
            // If the exception is because `state` can't be serialized, let that throw
            // outwards just like a replace call would so the dev knows the cause
            // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps
            // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal
            if (error instanceof DOMException && error.name === "DataCloneError") throw error;
            // They are going to lose state here, but there is no real
            // way to warn them about it since the page will refresh...
            window1.location.assign(url);
        }
        if (v5Compat && listener) listener({
            action: action,
            location: history.location,
            delta: 1
        });
    }
    function replace(to, state) {
        action = $0e856af10b3b08bf$export$e19cd5f9376f8cee.Replace;
        let location = $0e856af10b3b08bf$var$createLocation(history.location, to, state);
        if (validateLocation) validateLocation(location, to);
        index = getIndex();
        let historyState = $0e856af10b3b08bf$var$getHistoryState(location, index);
        let url = history.createHref(location);
        globalHistory.replaceState(historyState, "", url);
        if (v5Compat && listener) listener({
            action: action,
            location: history.location,
            delta: 0
        });
    }
    function createURL(to) {
        // window.location.origin is "null" (the literal string value) in Firefox
        // under certain conditions, notably when serving from a local HTML file
        // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297
        let base = window1.location.origin !== "null" ? window1.location.origin : window1.location.href;
        let href = typeof to === "string" ? to : $0e856af10b3b08bf$export$fe53371bee54353d(to);
        $0e856af10b3b08bf$export$3e9cee6b33872309(base, "No window.location.(origin|href) available to create URL for href: " + href);
        return new URL(href, base);
    }
    let history = {
        get action () {
            return action;
        },
        get location () {
            return getLocation(window1, globalHistory);
        },
        listen (fn) {
            if (listener) throw new Error("A history only accepts one active listener");
            window1.addEventListener($0e856af10b3b08bf$var$PopStateEventType, handlePop);
            listener = fn;
            return ()=>{
                window1.removeEventListener($0e856af10b3b08bf$var$PopStateEventType, handlePop);
                listener = null;
            };
        },
        createHref (to) {
            return createHref(window1, to);
        },
        createURL: createURL,
        encodeLocation (to) {
            // Encode a Location the same way window.location would
            let url = createURL(to);
            return {
                pathname: url.pathname,
                search: url.search,
                hash: url.hash
            };
        },
        push: push,
        replace: replace,
        go (n) {
            return globalHistory.go(n);
        }
    };
    return history;
}
//#endregion
var $0e856af10b3b08bf$var$ResultType;
(function(ResultType) {
    ResultType["data"] = "data";
    ResultType["deferred"] = "deferred";
    ResultType["redirect"] = "redirect";
    ResultType["error"] = "error";
})($0e856af10b3b08bf$var$ResultType || ($0e856af10b3b08bf$var$ResultType = {}));
const $0e856af10b3b08bf$var$immutableRouteKeys = new Set([
    "lazy",
    "caseSensitive",
    "path",
    "id",
    "index",
    "children"
]);
function $0e856af10b3b08bf$var$isIndexRoute(route) {
    return route.index === true;
}
// Walk the route tree generating unique IDs where necessary, so we are working
// solely with AgnosticDataRouteObject's within the Router
function $0e856af10b3b08bf$export$4a6d22b32134ea5d(routes, mapRouteProperties, parentPath, manifest) {
    if (parentPath === void 0) parentPath = [];
    if (manifest === void 0) manifest = {};
    return routes.map((route, index)=>{
        let treePath = [
            ...parentPath,
            index
        ];
        let id = typeof route.id === "string" ? route.id : treePath.join("-");
        $0e856af10b3b08bf$export$3e9cee6b33872309(route.index !== true || !route.children, "Cannot specify children on an index route");
        $0e856af10b3b08bf$export$3e9cee6b33872309(!manifest[id], 'Found a route id collision on id "' + id + '".  Route ' + "id's must be globally unique within Data Router usages");
        if ($0e856af10b3b08bf$var$isIndexRoute(route)) {
            let indexRoute = $0e856af10b3b08bf$var$_extends({}, route, mapRouteProperties(route), {
                id: id
            });
            manifest[id] = indexRoute;
            return indexRoute;
        } else {
            let pathOrLayoutRoute = $0e856af10b3b08bf$var$_extends({}, route, mapRouteProperties(route), {
                id: id,
                children: undefined
            });
            manifest[id] = pathOrLayoutRoute;
            if (route.children) pathOrLayoutRoute.children = $0e856af10b3b08bf$export$4a6d22b32134ea5d(route.children, mapRouteProperties, treePath, manifest);
            return pathOrLayoutRoute;
        }
    });
}
/**
 * Matches the given routes to a location and returns the match data.
 *
 * @see https://reactrouter.com/utils/match-routes
 */ function $0e856af10b3b08bf$export$2708184779ceb39d(routes, locationArg, basename) {
    if (basename === void 0) basename = "/";
    let location = typeof locationArg === "string" ? $0e856af10b3b08bf$export$8ccf933b0513f8d0(locationArg) : locationArg;
    let pathname = $0e856af10b3b08bf$export$b69e3301ce081aa3(location.pathname || "/", basename);
    if (pathname == null) return null;
    let branches = $0e856af10b3b08bf$var$flattenRoutes(routes);
    $0e856af10b3b08bf$var$rankRouteBranches(branches);
    let matches = null;
    for(let i = 0; matches == null && i < branches.length; ++i)matches = $0e856af10b3b08bf$var$matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location
    // or from router.navigate, but we want to match against the unencoded
    // paths in the route definitions.  Memory router locations won't be
    // encoded here but there also shouldn't be anything to decode so this
    // should be a safe operation.  This avoids needing matchRoutes to be
    // history-aware.
    $0e856af10b3b08bf$var$safelyDecodeURI(pathname));
    return matches;
}
function $0e856af10b3b08bf$export$b3fac024fad9e8ff(match, loaderData) {
    let { route: route, pathname: pathname, params: params } = match;
    return {
        id: route.id,
        pathname: pathname,
        params: params,
        data: loaderData[route.id],
        handle: route.handle
    };
}
function $0e856af10b3b08bf$var$flattenRoutes(routes, branches, parentsMeta, parentPath) {
    if (branches === void 0) branches = [];
    if (parentsMeta === void 0) parentsMeta = [];
    if (parentPath === void 0) parentPath = "";
    let flattenRoute = (route, index, relativePath)=>{
        let meta = {
            relativePath: relativePath === undefined ? route.path || "" : relativePath,
            caseSensitive: route.caseSensitive === true,
            childrenIndex: index,
            route: route
        };
        if (meta.relativePath.startsWith("/")) {
            $0e856af10b3b08bf$export$3e9cee6b33872309(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
            meta.relativePath = meta.relativePath.slice(parentPath.length);
        }
        let path = $0e856af10b3b08bf$export$86d9a7913e44197e([
            parentPath,
            meta.relativePath
        ]);
        let routesMeta = parentsMeta.concat(meta);
        // Add the children before adding this route to the array, so we traverse the
        // route tree depth-first and child routes appear before their parents in
        // the "flattened" version.
        if (route.children && route.children.length > 0) {
            $0e856af10b3b08bf$export$3e9cee6b33872309(// Our types know better, but runtime JS may not!
            // @ts-expect-error
            route.index !== true, "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".'));
            $0e856af10b3b08bf$var$flattenRoutes(route.children, branches, routesMeta, path);
        }
        // Routes without a path shouldn't ever match by themselves unless they are
        // index routes, so don't add them to the list of possible branches.
        if (route.path == null && !route.index) return;
        branches.push({
            path: path,
            score: $0e856af10b3b08bf$var$computeScore(path, route.index),
            routesMeta: routesMeta
        });
    };
    routes.forEach((route, index)=>{
        var _route$path;
        // coarse-grain check for optional params
        if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) flattenRoute(route, index);
        else for (let exploded of $0e856af10b3b08bf$var$explodeOptionalSegments(route.path))flattenRoute(route, index, exploded);
    });
    return branches;
}
/**
 * Computes all combinations of optional path segments for a given path,
 * excluding combinations that are ambiguous and of lower priority.
 *
 * For example, `/one/:two?/three/:four?/:five?` explodes to:
 * - `/one/three`
 * - `/one/:two/three`
 * - `/one/three/:four`
 * - `/one/three/:five`
 * - `/one/:two/three/:four`
 * - `/one/:two/three/:five`
 * - `/one/three/:four/:five`
 * - `/one/:two/three/:four/:five`
 */ function $0e856af10b3b08bf$var$explodeOptionalSegments(path) {
    let segments = path.split("/");
    if (segments.length === 0) return [];
    let [first, ...rest] = segments;
    // Optional path segments are denoted by a trailing `?`
    let isOptional = first.endsWith("?");
    // Compute the corresponding required segment: `foo?` -> `foo`
    let required = first.replace(/\?$/, "");
    if (rest.length === 0) // Intepret empty string as omitting an optional segment
    // `["one", "", "three"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`
    return isOptional ? [
        required,
        ""
    ] : [
        required
    ];
    let restExploded = $0e856af10b3b08bf$var$explodeOptionalSegments(rest.join("/"));
    let result = [];
    // All child paths with the prefix.  Do this for all children before the
    // optional version for all children, so we get consistent ordering where the
    // parent optional aspect is preferred as required.  Otherwise, we can get
    // child sections interspersed where deeper optional segments are higher than
    // parent optional segments, where for example, /:two would explode _earlier_
    // then /:one.  By always including the parent as required _for all children_
    // first, we avoid this issue
    result.push(...restExploded.map((subpath)=>subpath === "" ? required : [
            required,
            subpath
        ].join("/")));
    // Then, if this is an optional value, add all child versions without
    if (isOptional) result.push(...restExploded);
    // for absolute paths, ensure `/` instead of empty segment
    return result.map((exploded)=>path.startsWith("/") && exploded === "" ? "/" : exploded);
}
function $0e856af10b3b08bf$var$rankRouteBranches(branches) {
    branches.sort((a, b)=>a.score !== b.score ? b.score - a.score // Higher score first
         : $0e856af10b3b08bf$var$compareIndexes(a.routesMeta.map((meta)=>meta.childrenIndex), b.routesMeta.map((meta)=>meta.childrenIndex)));
}
const $0e856af10b3b08bf$var$paramRe = /^:\w+$/;
const $0e856af10b3b08bf$var$dynamicSegmentValue = 3;
const $0e856af10b3b08bf$var$indexRouteValue = 2;
const $0e856af10b3b08bf$var$emptySegmentValue = 1;
const $0e856af10b3b08bf$var$staticSegmentValue = 10;
const $0e856af10b3b08bf$var$splatPenalty = -2;
const $0e856af10b3b08bf$var$isSplat = (s)=>s === "*";
function $0e856af10b3b08bf$var$computeScore(path, index) {
    let segments = path.split("/");
    let initialScore = segments.length;
    if (segments.some($0e856af10b3b08bf$var$isSplat)) initialScore += $0e856af10b3b08bf$var$splatPenalty;
    if (index) initialScore += $0e856af10b3b08bf$var$indexRouteValue;
    return segments.filter((s)=>!$0e856af10b3b08bf$var$isSplat(s)).reduce((score, segment)=>score + ($0e856af10b3b08bf$var$paramRe.test(segment) ? $0e856af10b3b08bf$var$dynamicSegmentValue : segment === "" ? $0e856af10b3b08bf$var$emptySegmentValue : $0e856af10b3b08bf$var$staticSegmentValue), initialScore);
}
function $0e856af10b3b08bf$var$compareIndexes(a, b) {
    let siblings = a.length === b.length && a.slice(0, -1).every((n, i)=>n === b[i]);
    return siblings ? // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0;
}
function $0e856af10b3b08bf$var$matchRouteBranch(branch, pathname) {
    let { routesMeta: routesMeta } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches = [];
    for(let i = 0; i < routesMeta.length; ++i){
        let meta = routesMeta[i];
        let end = i === routesMeta.length - 1;
        let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
        let match = $0e856af10b3b08bf$export$81336c211d5ff295({
            path: meta.relativePath,
            caseSensitive: meta.caseSensitive,
            end: end
        }, remainingPathname);
        if (!match) return null;
        Object.assign(matchedParams, match.params);
        let route = meta.route;
        matches.push({
            // TODO: Can this as be avoided?
            params: matchedParams,
            pathname: $0e856af10b3b08bf$export$86d9a7913e44197e([
                matchedPathname,
                match.pathname
            ]),
            pathnameBase: $0e856af10b3b08bf$export$a5c6d149b50c1d86($0e856af10b3b08bf$export$86d9a7913e44197e([
                matchedPathname,
                match.pathnameBase
            ])),
            route: route
        });
        if (match.pathnameBase !== "/") matchedPathname = $0e856af10b3b08bf$export$86d9a7913e44197e([
            matchedPathname,
            match.pathnameBase
        ]);
    }
    return matches;
}
/**
 * Returns a path with params interpolated.
 *
 * @see https://reactrouter.com/utils/generate-path
 */ function $0e856af10b3b08bf$export$82476f982757e71e(originalPath, params) {
    if (params === void 0) params = {};
    let path = originalPath;
    if (path.endsWith("*") && path !== "*" && !path.endsWith("/*")) {
        $0e856af10b3b08bf$export$c0e02632e14916fd(false, 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
        path = path.replace(/\*$/, "/*");
    }
    // ensure `/` is added at the beginning if the path is absolute
    const prefix = path.startsWith("/") ? "/" : "";
    const stringify = (p)=>p == null ? "" : typeof p === "string" ? p : String(p);
    const segments = path.split(/\/+/).map((segment, index, array)=>{
        const isLastSegment = index === array.length - 1;
        // only apply the splat if it's the last segment
        if (isLastSegment && segment === "*") {
            const star = "*";
            // Apply the splat
            return stringify(params[star]);
        }
        const keyMatch = segment.match(/^:(\w+)(\??)$/);
        if (keyMatch) {
            const [, key, optional] = keyMatch;
            let param = params[key];
            $0e856af10b3b08bf$export$3e9cee6b33872309(optional === "?" || param != null, 'Missing ":' + key + '" param');
            return stringify(param);
        }
        // Remove any optional markers from optional static segments
        return segment.replace(/\?$/g, "");
    })// Remove empty segments
    .filter((segment)=>!!segment);
    return prefix + segments.join("/");
}
/**
 * Performs pattern matching on a URL pathname and returns information about
 * the match.
 *
 * @see https://reactrouter.com/utils/match-path
 */ function $0e856af10b3b08bf$export$81336c211d5ff295(pattern, pathname) {
    if (typeof pattern === "string") pattern = {
        path: pattern,
        caseSensitive: false,
        end: true
    };
    let [matcher, compiledParams] = $0e856af10b3b08bf$var$compilePath(pattern.path, pattern.caseSensitive, pattern.end);
    let match = pathname.match(matcher);
    if (!match) return null;
    let matchedPathname = match[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match.slice(1);
    let params = compiledParams.reduce((memo, _ref, index)=>{
        let { paramName: paramName, isOptional: isOptional } = _ref;
        // We need to compute the pathnameBase here using the raw splat value
        // instead of using params["*"] later because it will be decoded then
        if (paramName === "*") {
            let splatValue = captureGroups[index] || "";
            pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
        }
        const value = captureGroups[index];
        if (isOptional && !value) memo[paramName] = undefined;
        else memo[paramName] = $0e856af10b3b08bf$var$safelyDecodeURIComponent(value || "", paramName);
        return memo;
    }, {});
    return {
        params: params,
        pathname: matchedPathname,
        pathnameBase: pathnameBase,
        pattern: pattern
    };
}
function $0e856af10b3b08bf$var$compilePath(path, caseSensitive, end) {
    if (caseSensitive === void 0) caseSensitive = false;
    if (end === void 0) end = true;
    $0e856af10b3b08bf$export$c0e02632e14916fd(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
    let params = [];
    let regexpSource = "^" + path.replace(/\/*\*?$/, "") // Ignore trailing / and /*, we'll handle it below
    .replace(/^\/*/, "/") // Make sure it has a leading /
    .replace(/[\\.*+^${}|()[\]]/g, "\\$&") // Escape special regex chars
    .replace(/\/:(\w+)(\?)?/g, (_, paramName, isOptional)=>{
        params.push({
            paramName: paramName,
            isOptional: isOptional != null
        });
        return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
    });
    if (path.endsWith("*")) {
        params.push({
            paramName: "*"
        });
        regexpSource += path === "*" || path === "/*" ? "(.*)$" // Already matched the initial /, just match the rest
         : "(?:\\/(.+)|\\/*)$"; // Don't include the / in params["*"]
    } else if (end) // When matching to the end, ignore trailing slashes
    regexpSource += "\\/*$";
    else if (path !== "" && path !== "/") // If our path is non-empty and contains anything beyond an initial slash,
    // then we have _some_ form of path in our regex, so we should expect to
    // match only if we find the end of this path segment.  Look for an optional
    // non-captured trailing slash (to match a portion of the URL) or the end
    // of the path (if we've matched to the end).  We used to do this with a
    // word boundary but that gives false positives on routes like
    // /user-preferences since `-` counts as a word boundary.
    regexpSource += "(?:(?=\\/|$))";
    let matcher = new RegExp(regexpSource, caseSensitive ? undefined : "i");
    return [
        matcher,
        params
    ];
}
function $0e856af10b3b08bf$var$safelyDecodeURI(value) {
    try {
        return decodeURI(value);
    } catch (error) {
        $0e856af10b3b08bf$export$c0e02632e14916fd(false, 'The URL path "' + value + '" could not be decoded because it is is a ' + "malformed URL segment. This is probably due to a bad percent " + ("encoding (" + error + ")."));
        return value;
    }
}
function $0e856af10b3b08bf$var$safelyDecodeURIComponent(value, paramName) {
    try {
        return decodeURIComponent(value);
    } catch (error) {
        $0e856af10b3b08bf$export$c0e02632e14916fd(false, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error + ")."));
        return value;
    }
}
/**
 * @private
 */ function $0e856af10b3b08bf$export$b69e3301ce081aa3(pathname, basename) {
    if (basename === "/") return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) return null;
    // We want to leave trailing slash behavior in the user's control, so if they
    // specify a basename with a trailing slash, we should support it
    let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") // pathname does not start with basename/
    return null;
    return pathname.slice(startIndex) || "/";
}
/**
 * Returns a resolved path object relative to the given pathname.
 *
 * @see https://reactrouter.com/utils/resolve-path
 */ function $0e856af10b3b08bf$export$b09f2ff0bbcb43c7(to, fromPathname) {
    if (fromPathname === void 0) fromPathname = "/";
    let { pathname: toPathname, search: search = "", hash: hash = "" } = typeof to === "string" ? $0e856af10b3b08bf$export$8ccf933b0513f8d0(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : $0e856af10b3b08bf$var$resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
        pathname: pathname,
        search: $0e856af10b3b08bf$var$normalizeSearch(search),
        hash: $0e856af10b3b08bf$var$normalizeHash(hash)
    };
}
function $0e856af10b3b08bf$var$resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment)=>{
        if (segment === "..") // Keep the root "" segment so the pathname starts at /
        {
            if (segments.length > 1) segments.pop();
        } else if (segment !== ".") segments.push(segment);
    });
    return segments.length > 1 ? segments.join("/") : "/";
}
function $0e856af10b3b08bf$var$getInvalidPathError(char, field, dest, path) {
    return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
/**
 * @private
 *
 * When processing relative navigation we want to ignore ancestor routes that
 * do not contribute to the path, such that index/pathless layout routes don't
 * interfere.
 *
 * For example, when moving a route element into an index route and/or a
 * pathless layout route, relative link behavior contained within should stay
 * the same.  Both of the following examples should link back to the root:
 *
 *   <Route path="/">
 *     <Route path="accounts" element={<Link to=".."}>
 *   </Route>
 *
 *   <Route path="/">
 *     <Route path="accounts">
 *       <Route element={<AccountsLayout />}>       // <-- Does not contribute
 *         <Route index element={<Link to=".."} />  // <-- Does not contribute
 *       </Route
 *     </Route>
 *   </Route>
 */ function $0e856af10b3b08bf$export$90ba53ce1c7fdff2(matches) {
    return matches.filter((match, index)=>index === 0 || match.route.path && match.route.path.length > 0);
}
/**
 * @private
 */ function $0e856af10b3b08bf$export$cae722b0cc860f13(toArg, routePathnames, locationPathname, isPathRelative) {
    if (isPathRelative === void 0) isPathRelative = false;
    let to;
    if (typeof toArg === "string") to = $0e856af10b3b08bf$export$8ccf933b0513f8d0(toArg);
    else {
        to = $0e856af10b3b08bf$var$_extends({}, toArg);
        $0e856af10b3b08bf$export$3e9cee6b33872309(!to.pathname || !to.pathname.includes("?"), $0e856af10b3b08bf$var$getInvalidPathError("?", "pathname", "search", to));
        $0e856af10b3b08bf$export$3e9cee6b33872309(!to.pathname || !to.pathname.includes("#"), $0e856af10b3b08bf$var$getInvalidPathError("#", "pathname", "hash", to));
        $0e856af10b3b08bf$export$3e9cee6b33872309(!to.search || !to.search.includes("#"), $0e856af10b3b08bf$var$getInvalidPathError("#", "search", "hash", to));
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from;
    // Routing is relative to the current pathname if explicitly requested.
    //
    // If a pathname is explicitly provided in `to`, it should be relative to the
    // route context. This is explained in `Note on `<Link to>` values` in our
    // migration guide from v5 as a means of disambiguation between `to` values
    // that begin with `/` and those that do not. However, this is problematic for
    // `to` values that do not provide a pathname. `to` can simply be a search or
    // hash string, in which case we should assume that the navigation is relative
    // to the current location's pathname and *not* the route pathname.
    if (toPathname == null) from = locationPathname;
    else if (isPathRelative) {
        let fromSegments = routePathnames[routePathnames.length - 1].replace(/^\//, "").split("/");
        if (toPathname.startsWith("..")) {
            let toSegments = toPathname.split("/");
            // With relative="path", each leading .. segment means "go up one URL segment"
            while(toSegments[0] === ".."){
                toSegments.shift();
                fromSegments.pop();
            }
            to.pathname = toSegments.join("/");
        }
        from = "/" + fromSegments.join("/");
    } else {
        let routePathnameIndex = routePathnames.length - 1;
        if (toPathname.startsWith("..")) {
            let toSegments = toPathname.split("/");
            // With relative="route" (the default), each leading .. segment means
            // "go up one route" instead of "go up one URL segment".  This is a key
            // difference from how <a href> works and a major reason we call this a
            // "to" value instead of a "href".
            while(toSegments[0] === ".."){
                toSegments.shift();
                routePathnameIndex -= 1;
            }
            to.pathname = toSegments.join("/");
        }
        // If there are more ".." segments than parent routes, resolve relative to
        // the root / URL.
        from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path = $0e856af10b3b08bf$export$b09f2ff0bbcb43c7(to, from);
    // Ensure the pathname has a trailing slash if the original "to" had one
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    // Or if this was a link to the current path which has a trailing slash
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) path.pathname += "/";
    return path;
}
/**
 * @private
 */ function $0e856af10b3b08bf$export$f5655dfea9d981c7(to) {
    // Empty strings should be treated the same as / paths
    return to === "" || to.pathname === "" ? "/" : typeof to === "string" ? $0e856af10b3b08bf$export$8ccf933b0513f8d0(to).pathname : to.pathname;
}
/**
 * @private
 */ const $0e856af10b3b08bf$export$86d9a7913e44197e = (paths)=>paths.join("/").replace(/\/\/+/g, "/");
/**
 * @private
 */ const $0e856af10b3b08bf$export$a5c6d149b50c1d86 = (pathname)=>pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
/**
 * @private
 */ const $0e856af10b3b08bf$var$normalizeSearch = (search)=>!search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
/**
 * @private
 */ const $0e856af10b3b08bf$var$normalizeHash = (hash)=>!hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
/**
 * This is a shortcut for creating `application/json` responses. Converts `data`
 * to JSON and sets the `Content-Type` header.
 */ const $0e856af10b3b08bf$export$7b419323e6ed4f31 = function json(data, init) {
    if (init === void 0) init = {};
    let responseInit = typeof init === "number" ? {
        status: init
    } : init;
    let headers = new Headers(responseInit.headers);
    if (!headers.has("Content-Type")) headers.set("Content-Type", "application/json; charset=utf-8");
    return new Response(JSON.stringify(data), $0e856af10b3b08bf$var$_extends({}, responseInit, {
        headers: headers
    }));
};
class $0e856af10b3b08bf$export$42a99a7a4bc0e76a extends Error {
}
class $0e856af10b3b08bf$export$61d759255b4eec65 {
    constructor(data, responseInit){
        this.pendingKeysSet = new Set();
        this.subscribers = new Set();
        this.deferredKeys = [];
        $0e856af10b3b08bf$export$3e9cee6b33872309(data && typeof data === "object" && !Array.isArray(data), "defer() only accepts plain objects");
        // Set up an AbortController + Promise we can race against to exit early
        // cancellation
        let reject;
        this.abortPromise = new Promise((_, r)=>reject = r);
        this.controller = new AbortController();
        let onAbort = ()=>reject(new $0e856af10b3b08bf$export$42a99a7a4bc0e76a("Deferred data aborted"));
        this.unlistenAbortSignal = ()=>this.controller.signal.removeEventListener("abort", onAbort);
        this.controller.signal.addEventListener("abort", onAbort);
        this.data = Object.entries(data).reduce((acc, _ref2)=>{
            let [key, value] = _ref2;
            return Object.assign(acc, {
                [key]: this.trackPromise(key, value)
            });
        }, {});
        if (this.done) // All incoming values were resolved
        this.unlistenAbortSignal();
        this.init = responseInit;
    }
    trackPromise(key, value) {
        if (!(value instanceof Promise)) return value;
        this.deferredKeys.push(key);
        this.pendingKeysSet.add(key);
        // We store a little wrapper promise that will be extended with
        // _data/_error props upon resolve/reject
        let promise = Promise.race([
            value,
            this.abortPromise
        ]).then((data)=>this.onSettle(promise, key, undefined, data), (error)=>this.onSettle(promise, key, error));
        // Register rejection listeners to avoid uncaught promise rejections on
        // errors or aborted deferred values
        promise.catch(()=>{});
        Object.defineProperty(promise, "_tracked", {
            get: ()=>true
        });
        return promise;
    }
    onSettle(promise, key, error, data) {
        if (this.controller.signal.aborted && error instanceof $0e856af10b3b08bf$export$42a99a7a4bc0e76a) {
            this.unlistenAbortSignal();
            Object.defineProperty(promise, "_error", {
                get: ()=>error
            });
            return Promise.reject(error);
        }
        this.pendingKeysSet.delete(key);
        if (this.done) // Nothing left to abort!
        this.unlistenAbortSignal();
        // If the promise was resolved/rejected with undefined, we'll throw an error as you
        // should always resolve with a value or null
        if (error === undefined && data === undefined) {
            let undefinedError = new Error('Deferred data for key "' + key + '" resolved/rejected with `undefined`, ' + "you must resolve/reject with a value or `null`.");
            Object.defineProperty(promise, "_error", {
                get: ()=>undefinedError
            });
            this.emit(false, key);
            return Promise.reject(undefinedError);
        }
        if (data === undefined) {
            Object.defineProperty(promise, "_error", {
                get: ()=>error
            });
            this.emit(false, key);
            return Promise.reject(error);
        }
        Object.defineProperty(promise, "_data", {
            get: ()=>data
        });
        this.emit(false, key);
        return data;
    }
    emit(aborted, settledKey) {
        this.subscribers.forEach((subscriber)=>subscriber(aborted, settledKey));
    }
    subscribe(fn) {
        this.subscribers.add(fn);
        return ()=>this.subscribers.delete(fn);
    }
    cancel() {
        this.controller.abort();
        this.pendingKeysSet.forEach((v, k)=>this.pendingKeysSet.delete(k));
        this.emit(true);
    }
    async resolveData(signal) {
        let aborted = false;
        if (!this.done) {
            let onAbort = ()=>this.cancel();
            signal.addEventListener("abort", onAbort);
            aborted = await new Promise((resolve)=>{
                this.subscribe((aborted)=>{
                    signal.removeEventListener("abort", onAbort);
                    if (aborted || this.done) resolve(aborted);
                });
            });
        }
        return aborted;
    }
    get done() {
        return this.pendingKeysSet.size === 0;
    }
    get unwrappedData() {
        $0e856af10b3b08bf$export$3e9cee6b33872309(this.data !== null && this.done, "Can only unwrap data on initialized and settled deferreds");
        return Object.entries(this.data).reduce((acc, _ref3)=>{
            let [key, value] = _ref3;
            return Object.assign(acc, {
                [key]: $0e856af10b3b08bf$var$unwrapTrackedPromise(value)
            });
        }, {});
    }
    get pendingKeys() {
        return Array.from(this.pendingKeysSet);
    }
}
function $0e856af10b3b08bf$var$isTrackedPromise(value) {
    return value instanceof Promise && value._tracked === true;
}
function $0e856af10b3b08bf$var$unwrapTrackedPromise(value) {
    if (!$0e856af10b3b08bf$var$isTrackedPromise(value)) return value;
    if (value._error) throw value._error;
    return value._data;
}
const $0e856af10b3b08bf$export$260e5c0943f31606 = function defer(data, init) {
    if (init === void 0) init = {};
    let responseInit = typeof init === "number" ? {
        status: init
    } : init;
    return new $0e856af10b3b08bf$export$61d759255b4eec65(data, responseInit);
};
/**
 * A redirect response. Sets the status code and the `Location` header.
 * Defaults to "302 Found".
 */ const $0e856af10b3b08bf$export$89e12c5b50f7529d = function redirect(url, init) {
    if (init === void 0) init = 302;
    let responseInit = init;
    if (typeof responseInit === "number") responseInit = {
        status: responseInit
    };
    else if (typeof responseInit.status === "undefined") responseInit.status = 302;
    let headers = new Headers(responseInit.headers);
    headers.set("Location", url);
    return new Response(null, $0e856af10b3b08bf$var$_extends({}, responseInit, {
        headers: headers
    }));
};
/**
 * A redirect response that will force a document reload to the new location.
 * Sets the status code and the `Location` header.
 * Defaults to "302 Found".
 */ const $0e856af10b3b08bf$export$a6cd19cd1951a23c = (url, init)=>{
    let response = $0e856af10b3b08bf$export$89e12c5b50f7529d(url, init);
    response.headers.set("X-Remix-Reload-Document", "true");
    return response;
};
/**
 * @private
 * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies
 *
 * We don't export the class for public use since it's an implementation
 * detail, but we export the interface above so folks can build their own
 * abstractions around instances via isRouteErrorResponse()
 */ class $0e856af10b3b08bf$export$6c6580e81da25755 {
    constructor(status, statusText, data, internal){
        if (internal === void 0) internal = false;
        this.status = status;
        this.statusText = statusText || "";
        this.internal = internal;
        if (data instanceof Error) {
            this.data = data.toString();
            this.error = data;
        } else this.data = data;
    }
}
/**
 * Check if the given error is an ErrorResponse generated from a 4xx/5xx
 * Response thrown from an action/loader
 */ function $0e856af10b3b08bf$export$972111febbeef05b(error) {
    return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
const $0e856af10b3b08bf$var$validMutationMethodsArr = [
    "post",
    "put",
    "patch",
    "delete"
];
const $0e856af10b3b08bf$var$validMutationMethods = new Set($0e856af10b3b08bf$var$validMutationMethodsArr);
const $0e856af10b3b08bf$var$validRequestMethodsArr = [
    "get",
    ...$0e856af10b3b08bf$var$validMutationMethodsArr
];
const $0e856af10b3b08bf$var$validRequestMethods = new Set($0e856af10b3b08bf$var$validRequestMethodsArr);
const $0e856af10b3b08bf$var$redirectStatusCodes = new Set([
    301,
    302,
    303,
    307,
    308
]);
const $0e856af10b3b08bf$var$redirectPreserveMethodStatusCodes = new Set([
    307,
    308
]);
const $0e856af10b3b08bf$export$ed3e14b2f9e105d0 = {
    state: "idle",
    location: undefined,
    formMethod: undefined,
    formAction: undefined,
    formEncType: undefined,
    formData: undefined,
    json: undefined,
    text: undefined
};
const $0e856af10b3b08bf$export$52eace9c284d3585 = {
    state: "idle",
    data: undefined,
    formMethod: undefined,
    formAction: undefined,
    formEncType: undefined,
    formData: undefined,
    json: undefined,
    text: undefined
};
const $0e856af10b3b08bf$export$386d57f03f0b2883 = {
    state: "unblocked",
    proceed: undefined,
    reset: undefined,
    location: undefined
};
const $0e856af10b3b08bf$var$ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
const $0e856af10b3b08bf$var$defaultMapRouteProperties = (route)=>({
        hasErrorBoundary: Boolean(route.hasErrorBoundary)
    });
const $0e856af10b3b08bf$var$TRANSITIONS_STORAGE_KEY = "remix-router-transitions";
//#endregion
////////////////////////////////////////////////////////////////////////////////
//#region createRouter
////////////////////////////////////////////////////////////////////////////////
/**
 * Create a router and listen to history POP navigations
 */ function $0e856af10b3b08bf$export$baddd0131ee8c05b(init) {
    const routerWindow = init.window ? init.window : typeof window !== "undefined" ? window : undefined;
    const isBrowser = typeof routerWindow !== "undefined" && typeof routerWindow.document !== "undefined" && typeof routerWindow.document.createElement !== "undefined";
    const isServer = !isBrowser;
    $0e856af10b3b08bf$export$3e9cee6b33872309(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
    let mapRouteProperties;
    if (init.mapRouteProperties) mapRouteProperties = init.mapRouteProperties;
    else if (init.detectErrorBoundary) {
        // If they are still using the deprecated version, wrap it with the new API
        let detectErrorBoundary = init.detectErrorBoundary;
        mapRouteProperties = (route)=>({
                hasErrorBoundary: detectErrorBoundary(route)
            });
    } else mapRouteProperties = $0e856af10b3b08bf$var$defaultMapRouteProperties;
    // Routes keyed by ID
    let manifest = {};
    // Routes in tree format for matching
    let dataRoutes = $0e856af10b3b08bf$export$4a6d22b32134ea5d(init.routes, mapRouteProperties, undefined, manifest);
    let inFlightDataRoutes;
    let basename = init.basename || "/";
    // Config driven behavior flags
    let future = $0e856af10b3b08bf$var$_extends({
        v7_fetcherPersist: false,
        v7_normalizeFormMethod: false,
        v7_prependBasename: false
    }, init.future);
    // Cleanup function for history
    let unlistenHistory = null;
    // Externally-provided functions to call on all state changes
    let subscribers = new Set();
    // Externally-provided object to hold scroll restoration locations during routing
    let savedScrollPositions = null;
    // Externally-provided function to get scroll restoration keys
    let getScrollRestorationKey = null;
    // Externally-provided function to get current scroll position
    let getScrollPosition = null;
    // One-time flag to control the initial hydration scroll restoration.  Because
    // we don't get the saved positions from <ScrollRestoration /> until _after_
    // the initial render, we need to manually trigger a separate updateState to
    // send along the restoreScrollPosition
    // Set to true if we have `hydrationData` since we assume we were SSR'd and that
    // SSR did the initial scroll restoration.
    let initialScrollRestored = init.hydrationData != null;
    let initialMatches = $0e856af10b3b08bf$export$2708184779ceb39d(dataRoutes, init.history.location, basename);
    let initialErrors = null;
    if (initialMatches == null) {
        // If we do not match a user-provided-route, fall back to the root
        // to allow the error boundary to take over
        let error = $0e856af10b3b08bf$var$getInternalRouterError(404, {
            pathname: init.history.location.pathname
        });
        let { matches: matches, route: route } = $0e856af10b3b08bf$var$getShortCircuitMatches(dataRoutes);
        initialMatches = matches;
        initialErrors = {
            [route.id]: error
        };
    }
    let initialized = // All initialMatches need to be loaded before we're ready.  If we have lazy
    // functions around still then we'll need to run them in initialize()
    !initialMatches.some((m)=>m.route.lazy) && // And we have to either have no loaders or have been provided hydrationData
    (!initialMatches.some((m)=>m.route.loader) || init.hydrationData != null);
    let router;
    let state = {
        historyAction: init.history.action,
        location: init.history.location,
        matches: initialMatches,
        initialized: initialized,
        navigation: $0e856af10b3b08bf$export$ed3e14b2f9e105d0,
        // Don't restore on initial updateState() if we were SSR'd
        restoreScrollPosition: init.hydrationData != null ? false : null,
        preventScrollReset: false,
        revalidation: "idle",
        loaderData: init.hydrationData && init.hydrationData.loaderData || {},
        actionData: init.hydrationData && init.hydrationData.actionData || null,
        errors: init.hydrationData && init.hydrationData.errors || initialErrors,
        fetchers: new Map(),
        blockers: new Map()
    };
    // -- Stateful internal variables to manage navigations --
    // Current navigation in progress (to be committed in completeNavigation)
    let pendingAction = $0e856af10b3b08bf$export$e19cd5f9376f8cee.Pop;
    // Should the current navigation prevent the scroll reset if scroll cannot
    // be restored?
    let pendingPreventScrollReset = false;
    // AbortController for the active navigation
    let pendingNavigationController;
    // Should the current navigation enable document.startViewTransition?
    let pendingViewTransitionEnabled = false;
    // Store applied view transitions so we can apply them on POP
    let appliedViewTransitions = new Map();
    // Cleanup function for persisting applied transitions to sessionStorage
    let removePageHideEventListener = null;
    // We use this to avoid touching history in completeNavigation if a
    // revalidation is entirely uninterrupted
    let isUninterruptedRevalidation = false;
    // Use this internal flag to force revalidation of all loaders:
    //  - submissions (completed or interrupted)
    //  - useRevalidator()
    //  - X-Remix-Revalidate (from redirect)
    let isRevalidationRequired = false;
    // Use this internal array to capture routes that require revalidation due
    // to a cancelled deferred on action submission
    let cancelledDeferredRoutes = [];
    // Use this internal array to capture fetcher loads that were cancelled by an
    // action navigation and require revalidation
    let cancelledFetcherLoads = [];
    // AbortControllers for any in-flight fetchers
    let fetchControllers = new Map();
    // Track loads based on the order in which they started
    let incrementingLoadId = 0;
    // Track the outstanding pending navigation data load to be compared against
    // the globally incrementing load when a fetcher load lands after a completed
    // navigation
    let pendingNavigationLoadId = -1;
    // Fetchers that triggered data reloads as a result of their actions
    let fetchReloadIds = new Map();
    // Fetchers that triggered redirect navigations
    let fetchRedirectIds = new Set();
    // Most recent href/match for fetcher.load calls for fetchers
    let fetchLoadMatches = new Map();
    // Ref-count mounted fetchers so we know when it's ok to clean them up
    let activeFetchers = new Map();
    // Fetchers that have requested a delete when using v7_fetcherPersist,
    // they'll be officially removed after they return to idle
    let deletedFetchers = new Set();
    // Store DeferredData instances for active route matches.  When a
    // route loader returns defer() we stick one in here.  Then, when a nested
    // promise resolves we update loaderData.  If a new navigation starts we
    // cancel active deferreds for eliminated routes.
    let activeDeferreds = new Map();
    // Store blocker functions in a separate Map outside of router state since
    // we don't need to update UI state if they change
    let blockerFunctions = new Map();
    // Flag to ignore the next history update, so we can revert the URL change on
    // a POP navigation that was blocked by the user without touching router state
    let ignoreNextHistoryUpdate = false;
    // Initialize the router, all side effects should be kicked off from here.
    // Implemented as a Fluent API for ease of:
    //   let router = createRouter(init).initialize();
    function initialize() {
        // If history informs us of a POP navigation, start the navigation but do not update
        // state.  We'll update our own state once the navigation completes
        unlistenHistory = init.history.listen((_ref)=>{
            let { action: historyAction, location: location, delta: delta } = _ref;
            // Ignore this event if it was just us resetting the URL from a
            // blocked POP navigation
            if (ignoreNextHistoryUpdate) {
                ignoreNextHistoryUpdate = false;
                return;
            }
            $0e856af10b3b08bf$export$c0e02632e14916fd(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
            let blockerKey = shouldBlockNavigation({
                currentLocation: state.location,
                nextLocation: location,
                historyAction: historyAction
            });
            if (blockerKey && delta != null) {
                // Restore the URL to match the current UI, but don't update router state
                ignoreNextHistoryUpdate = true;
                init.history.go(delta * -1);
                // Put the blocker into a blocked state
                updateBlocker(blockerKey, {
                    state: "blocked",
                    location: location,
                    proceed () {
                        updateBlocker(blockerKey, {
                            state: "proceeding",
                            proceed: undefined,
                            reset: undefined,
                            location: location
                        });
                        // Re-do the same POP navigation we just blocked
                        init.history.go(delta);
                    },
                    reset () {
                        let blockers = new Map(state.blockers);
                        blockers.set(blockerKey, $0e856af10b3b08bf$export$386d57f03f0b2883);
                        updateState({
                            blockers: blockers
                        });
                    }
                });
                return;
            }
            return startNavigation(historyAction, location);
        });
        if (isBrowser) {
            // FIXME: This feels gross.  How can we cleanup the lines between
            // scrollRestoration/appliedTransitions persistance?
            $0e856af10b3b08bf$var$restoreAppliedTransitions(routerWindow, appliedViewTransitions);
            let _saveAppliedTransitions = ()=>$0e856af10b3b08bf$var$persistAppliedTransitions(routerWindow, appliedViewTransitions);
            routerWindow.addEventListener("pagehide", _saveAppliedTransitions);
            removePageHideEventListener = ()=>routerWindow.removeEventListener("pagehide", _saveAppliedTransitions);
        }
        // Kick off initial data load if needed.  Use Pop to avoid modifying history
        // Note we don't do any handling of lazy here.  For SPA's it'll get handled
        // in the normal navigation flow.  For SSR it's expected that lazy modules are
        // resolved prior to router creation since we can't go into a fallbackElement
        // UI for SSR'd apps
        if (!state.initialized) startNavigation($0e856af10b3b08bf$export$e19cd5f9376f8cee.Pop, state.location);
        return router;
    }
    // Clean up a router and it's side effects
    function dispose() {
        if (unlistenHistory) unlistenHistory();
        if (removePageHideEventListener) removePageHideEventListener();
        subscribers.clear();
        pendingNavigationController && pendingNavigationController.abort();
        state.fetchers.forEach((_, key)=>deleteFetcher(key));
        state.blockers.forEach((_, key)=>deleteBlocker(key));
    }
    // Subscribe to state updates for the router
    function subscribe(fn) {
        subscribers.add(fn);
        return ()=>subscribers.delete(fn);
    }
    // Update our state and notify the calling context of the change
    function updateState(newState, opts) {
        if (opts === void 0) opts = {};
        state = $0e856af10b3b08bf$var$_extends({}, state, newState);
        // Prep fetcher cleanup so we can tell the UI which fetcher data entries
        // can be removed
        let completedFetchers = [];
        let deletedFetchersKeys = [];
        if (future.v7_fetcherPersist) state.fetchers.forEach((fetcher, key)=>{
            if (fetcher.state === "idle") {
                if (deletedFetchers.has(key)) // Unmounted from the UI and can be totally removed
                deletedFetchersKeys.push(key);
                else // Returned to idle but still mounted in the UI, so semi-remains for
                // revalidations and such
                completedFetchers.push(key);
            }
        });
        // Iterate over a local copy so that if flushSync is used and we end up
        // removing and adding a new subscriber due to the useCallback dependencies,
        // we don't get ourselves into a loop calling the new subscriber immediately
        [
            ...subscribers
        ].forEach((subscriber)=>subscriber(state, {
                deletedFetchers: deletedFetchersKeys,
                unstable_viewTransitionOpts: opts.viewTransitionOpts,
                unstable_flushSync: opts.flushSync === true
            }));
        // Remove idle fetchers from state since we only care about in-flight fetchers.
        if (future.v7_fetcherPersist) {
            completedFetchers.forEach((key)=>state.fetchers.delete(key));
            deletedFetchersKeys.forEach((key)=>deleteFetcher(key));
        }
    }
    // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION
    // and setting state.[historyAction/location/matches] to the new route.
    // - Location is a required param
    // - Navigation will always be set to IDLE_NAVIGATION
    // - Can pass any other state in newState
    function completeNavigation(location, newState, _temp) {
        var _location$state, _location$state2;
        let { flushSync: flushSync } = _temp === void 0 ? {} : _temp;
        // Deduce if we're in a loading/actionReload state:
        // - We have committed actionData in the store
        // - The current navigation was a mutation submission
        // - We're past the submitting state and into the loading state
        // - The location being loaded is not the result of a redirect
        let isActionReload = state.actionData != null && state.navigation.formMethod != null && $0e856af10b3b08bf$var$isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;
        let actionData;
        if (newState.actionData) {
            if (Object.keys(newState.actionData).length > 0) actionData = newState.actionData;
            else // Empty actionData -> clear prior actionData due to an action error
            actionData = null;
        } else if (isActionReload) // Keep the current data if we're wrapping up the action reload
        actionData = state.actionData;
        else // Clear actionData on any other completed navigations
        actionData = null;
        // Always preserve any existing loaderData from re-used routes
        let loaderData = newState.loaderData ? $0e856af10b3b08bf$var$mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;
        // On a successful navigation we can assume we got through all blockers
        // so we can start fresh
        let blockers = state.blockers;
        if (blockers.size > 0) {
            blockers = new Map(blockers);
            blockers.forEach((_, k)=>blockers.set(k, $0e856af10b3b08bf$export$386d57f03f0b2883));
        }
        // Always respect the user flag.  Otherwise don't reset on mutation
        // submission navigations unless they redirect
        let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && $0e856af10b3b08bf$var$isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;
        if (inFlightDataRoutes) {
            dataRoutes = inFlightDataRoutes;
            inFlightDataRoutes = undefined;
        }
        if (isUninterruptedRevalidation) ;
        else if (pendingAction === $0e856af10b3b08bf$export$e19cd5f9376f8cee.Pop) ;
        else if (pendingAction === $0e856af10b3b08bf$export$e19cd5f9376f8cee.Push) init.history.push(location, location.state);
        else if (pendingAction === $0e856af10b3b08bf$export$e19cd5f9376f8cee.Replace) init.history.replace(location, location.state);
        let viewTransitionOpts;
        // On POP, enable transitions if they were enabled on the original navigation
        if (pendingAction === $0e856af10b3b08bf$export$e19cd5f9376f8cee.Pop) {
            // Forward takes precedence so they behave like the original navigation
            let priorPaths = appliedViewTransitions.get(state.location.pathname);
            if (priorPaths && priorPaths.has(location.pathname)) viewTransitionOpts = {
                currentLocation: state.location,
                nextLocation: location
            };
            else if (appliedViewTransitions.has(location.pathname)) // If we don't have a previous forward nav, assume we're popping back to
            // the new location and enable if that location previously enabled
            viewTransitionOpts = {
                currentLocation: location,
                nextLocation: state.location
            };
        } else if (pendingViewTransitionEnabled) {
            // Store the applied transition on PUSH/REPLACE
            let toPaths = appliedViewTransitions.get(state.location.pathname);
            if (toPaths) toPaths.add(location.pathname);
            else {
                toPaths = new Set([
                    location.pathname
                ]);
                appliedViewTransitions.set(state.location.pathname, toPaths);
            }
            viewTransitionOpts = {
                currentLocation: state.location,
                nextLocation: location
            };
        }
        updateState($0e856af10b3b08bf$var$_extends({}, newState, {
            actionData: actionData,
            loaderData: loaderData,
            historyAction: pendingAction,
            location: location,
            initialized: true,
            navigation: $0e856af10b3b08bf$export$ed3e14b2f9e105d0,
            revalidation: "idle",
            restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),
            preventScrollReset: preventScrollReset,
            blockers: blockers
        }), {
            viewTransitionOpts: viewTransitionOpts,
            flushSync: flushSync === true
        });
        // Reset stateful navigation vars
        pendingAction = $0e856af10b3b08bf$export$e19cd5f9376f8cee.Pop;
        pendingPreventScrollReset = false;
        pendingViewTransitionEnabled = false;
        isUninterruptedRevalidation = false;
        isRevalidationRequired = false;
        cancelledDeferredRoutes = [];
        cancelledFetcherLoads = [];
    }
    // Trigger a navigation event, which can either be a numerical POP or a PUSH
    // replace with an optional submission
    async function navigate(to, opts) {
        if (typeof to === "number") {
            init.history.go(to);
            return;
        }
        let normalizedPath = $0e856af10b3b08bf$var$normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);
        let { path: path, submission: submission, error: error } = $0e856af10b3b08bf$var$normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);
        let currentLocation = state.location;
        let nextLocation = $0e856af10b3b08bf$var$createLocation(state.location, path, opts && opts.state);
        // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded
        // URL from window.location, so we need to encode it here so the behavior
        // remains the same as POP and non-data-router usages.  new URL() does all
        // the same encoding we'd get from a history.pushState/window.location read
        // without having to touch history
        nextLocation = $0e856af10b3b08bf$var$_extends({}, nextLocation, init.history.encodeLocation(nextLocation));
        let userReplace = opts && opts.replace != null ? opts.replace : undefined;
        let historyAction = $0e856af10b3b08bf$export$e19cd5f9376f8cee.Push;
        if (userReplace === true) historyAction = $0e856af10b3b08bf$export$e19cd5f9376f8cee.Replace;
        else if (userReplace === false) ;
        else if (submission != null && $0e856af10b3b08bf$var$isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) // By default on submissions to the current location we REPLACE so that
        // users don't have to double-click the back button to get to the prior
        // location.  If the user redirects to a different location from the
        // action/loader this will be ignored and the redirect will be a PUSH
        historyAction = $0e856af10b3b08bf$export$e19cd5f9376f8cee.Replace;
        let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : undefined;
        let flushSync = (opts && opts.unstable_flushSync) === true;
        let blockerKey = shouldBlockNavigation({
            currentLocation: currentLocation,
            nextLocation: nextLocation,
            historyAction: historyAction
        });
        if (blockerKey) {
            // Put the blocker into a blocked state
            updateBlocker(blockerKey, {
                state: "blocked",
                location: nextLocation,
                proceed () {
                    updateBlocker(blockerKey, {
                        state: "proceeding",
                        proceed: undefined,
                        reset: undefined,
                        location: nextLocation
                    });
                    // Send the same navigation through
                    navigate(to, opts);
                },
                reset () {
                    let blockers = new Map(state.blockers);
                    blockers.set(blockerKey, $0e856af10b3b08bf$export$386d57f03f0b2883);
                    updateState({
                        blockers: blockers
                    });
                }
            });
            return;
        }
        return await startNavigation(historyAction, nextLocation, {
            submission: submission,
            // Send through the formData serialization error if we have one so we can
            // render at the right error boundary after we match routes
            pendingError: error,
            preventScrollReset: preventScrollReset,
            replace: opts && opts.replace,
            enableViewTransition: opts && opts.unstable_viewTransition,
            flushSync: flushSync
        });
    }
    // Revalidate all current loaders.  If a navigation is in progress or if this
    // is interrupted by a navigation, allow this to "succeed" by calling all
    // loaders during the next loader round
    function revalidate() {
        interruptActiveLoads();
        updateState({
            revalidation: "loading"
        });
        // If we're currently submitting an action, we don't need to start a new
        // navigation, we'll just let the follow up loader execution call all loaders
        if (state.navigation.state === "submitting") return;
        // If we're currently in an idle state, start a new navigation for the current
        // action/location and mark it as uninterrupted, which will skip the history
        // update in completeNavigation
        if (state.navigation.state === "idle") {
            startNavigation(state.historyAction, state.location, {
                startUninterruptedRevalidation: true
            });
            return;
        }
        // Otherwise, if we're currently in a loading state, just start a new
        // navigation to the navigation.location but do not trigger an uninterrupted
        // revalidation so that history correctly updates once the navigation completes
        startNavigation(pendingAction || state.historyAction, state.navigation.location, {
            overrideNavigation: state.navigation
        });
    }
    // Start a navigation to the given action/location.  Can optionally provide a
    // overrideNavigation which will override the normalLoad in the case of a redirect
    // navigation
    async function startNavigation(historyAction, location, opts) {
        // Abort any in-progress navigations and start a new one. Unset any ongoing
        // uninterrupted revalidations unless told otherwise, since we want this
        // new navigation to update history normally
        pendingNavigationController && pendingNavigationController.abort();
        pendingNavigationController = null;
        pendingAction = historyAction;
        isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;
        // Save the current scroll position every time we start a new navigation,
        // and track whether we should reset scroll on completion
        saveScrollPosition(state.location, state.matches);
        pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
        pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let loadingNavigation = opts && opts.overrideNavigation;
        let matches = $0e856af10b3b08bf$export$2708184779ceb39d(routesToUse, location, basename);
        let flushSync = (opts && opts.flushSync) === true;
        // Short circuit with a 404 on the root error boundary if we match nothing
        if (!matches) {
            let error = $0e856af10b3b08bf$var$getInternalRouterError(404, {
                pathname: location.pathname
            });
            let { matches: notFoundMatches, route: route } = $0e856af10b3b08bf$var$getShortCircuitMatches(routesToUse);
            // Cancel all pending deferred on 404s since we don't keep any routes
            cancelActiveDeferreds();
            completeNavigation(location, {
                matches: notFoundMatches,
                loaderData: {},
                errors: {
                    [route.id]: error
                }
            }, {
                flushSync: flushSync
            });
            return;
        }
        // Short circuit if it's only a hash change and not a revalidation or
        // mutation submission.
        //
        // Ignore on initial page loads because since the initial load will always
        // be "same hash".  For example, on /page#hash and submit a <Form method="post">
        // which will default to a navigation to /page
        if (state.initialized && !isRevalidationRequired && $0e856af10b3b08bf$var$isHashChangeOnly(state.location, location) && !(opts && opts.submission && $0e856af10b3b08bf$var$isMutationMethod(opts.submission.formMethod))) {
            completeNavigation(location, {
                matches: matches
            }, {
                flushSync: flushSync
            });
            return;
        }
        // Create a controller/Request for this navigation
        pendingNavigationController = new AbortController();
        let request = $0e856af10b3b08bf$var$createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);
        let pendingActionData;
        let pendingError;
        if (opts && opts.pendingError) // If we have a pendingError, it means the user attempted a GET submission
        // with binary FormData so assign here and skip to handleLoaders.  That
        // way we handle calling loaders above the boundary etc.  It's not really
        // different from an actionError in that sense.
        pendingError = {
            [$0e856af10b3b08bf$var$findNearestBoundary(matches).route.id]: opts.pendingError
        };
        else if (opts && opts.submission && $0e856af10b3b08bf$var$isMutationMethod(opts.submission.formMethod)) {
            // Call action if we received an action submission
            let actionOutput = await handleAction(request, location, opts.submission, matches, {
                replace: opts.replace,
                flushSync: flushSync
            });
            if (actionOutput.shortCircuited) return;
            pendingActionData = actionOutput.pendingActionData;
            pendingError = actionOutput.pendingActionError;
            loadingNavigation = $0e856af10b3b08bf$var$getLoadingNavigation(location, opts.submission);
            flushSync = false;
            // Create a GET request for the loaders
            request = new Request(request.url, {
                signal: request.signal
            });
        }
        // Call loaders
        let { shortCircuited: shortCircuited, loaderData: loaderData, errors: errors } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, flushSync, pendingActionData, pendingError);
        if (shortCircuited) return;
        // Clean up now that the action/loaders have completed.  Don't clean up if
        // we short circuited because pendingNavigationController will have already
        // been assigned to a new controller for the next navigation
        pendingNavigationController = null;
        completeNavigation(location, $0e856af10b3b08bf$var$_extends({
            matches: matches
        }, pendingActionData ? {
            actionData: pendingActionData
        } : {}, {
            loaderData: loaderData,
            errors: errors
        }));
    }
    // Call the action matched by the leaf route for this navigation and handle
    // redirects/errors
    async function handleAction(request, location, submission, matches, opts) {
        if (opts === void 0) opts = {};
        interruptActiveLoads();
        // Put us in a submitting state
        let navigation = $0e856af10b3b08bf$var$getSubmittingNavigation(location, submission);
        updateState({
            navigation: navigation
        }, {
            flushSync: opts.flushSync === true
        });
        // Call our action and get the result
        let result;
        let actionMatch = $0e856af10b3b08bf$var$getTargetMatch(matches, location);
        if (!actionMatch.route.action && !actionMatch.route.lazy) result = {
            type: $0e856af10b3b08bf$var$ResultType.error,
            error: $0e856af10b3b08bf$var$getInternalRouterError(405, {
                method: request.method,
                pathname: location.pathname,
                routeId: actionMatch.route.id
            })
        };
        else {
            result = await $0e856af10b3b08bf$var$callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties, basename);
            if (request.signal.aborted) return {
                shortCircuited: true
            };
        }
        if ($0e856af10b3b08bf$var$isRedirectResult(result)) {
            let replace;
            if (opts && opts.replace != null) replace = opts.replace;
            else // If the user didn't explicity indicate replace behavior, replace if
            // we redirected to the exact same location we're currently at to avoid
            // double back-buttons
            replace = result.location === state.location.pathname + state.location.search;
            await startRedirectNavigation(state, result, {
                submission: submission,
                replace: replace
            });
            return {
                shortCircuited: true
            };
        }
        if ($0e856af10b3b08bf$var$isErrorResult(result)) {
            // Store off the pending error - we use it to determine which loaders
            // to call and will commit it when we complete the navigation
            let boundaryMatch = $0e856af10b3b08bf$var$findNearestBoundary(matches, actionMatch.route.id);
            // By default, all submissions are REPLACE navigations, but if the
            // action threw an error that'll be rendered in an errorElement, we fall
            // back to PUSH so that the user can use the back button to get back to
            // the pre-submission form location to try again
            if ((opts && opts.replace) !== true) pendingAction = $0e856af10b3b08bf$export$e19cd5f9376f8cee.Push;
            return {
                // Send back an empty object we can use to clear out any prior actionData
                pendingActionData: {},
                pendingActionError: {
                    [boundaryMatch.route.id]: result.error
                }
            };
        }
        if ($0e856af10b3b08bf$var$isDeferredResult(result)) throw $0e856af10b3b08bf$var$getInternalRouterError(400, {
            type: "defer-action"
        });
        return {
            pendingActionData: {
                [actionMatch.route.id]: result.data
            }
        };
    }
    // Call all applicable loaders for the given matches, handling redirects,
    // errors, etc.
    async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, flushSync, pendingActionData, pendingError) {
        // Figure out the right navigation we want to use for data loading
        let loadingNavigation = overrideNavigation || $0e856af10b3b08bf$var$getLoadingNavigation(location, submission);
        // If this was a redirect from an action we don't have a "submission" but
        // we have it on the loading navigation so use that if available
        let activeSubmission = submission || fetcherSubmission || $0e856af10b3b08bf$var$getSubmissionFromNavigation(loadingNavigation);
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let [matchesToLoad, revalidatingFetchers] = $0e856af10b3b08bf$var$getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);
        // Cancel pending deferreds for no-longer-matched routes or routes we're
        // about to reload.  Note that if this is an action reload we would have
        // already cancelled all pending deferreds so this would be a no-op
        cancelActiveDeferreds((routeId)=>!(matches && matches.some((m)=>m.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m)=>m.route.id === routeId));
        pendingNavigationLoadId = ++incrementingLoadId;
        // Short circuit if we have no loaders to run
        if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {
            let updatedFetchers = markFetchRedirectsDone();
            completeNavigation(location, $0e856af10b3b08bf$var$_extends({
                matches: matches,
                loaderData: {},
                // Commit pending error if we're short circuiting
                errors: pendingError || null
            }, pendingActionData ? {
                actionData: pendingActionData
            } : {}, updatedFetchers ? {
                fetchers: new Map(state.fetchers)
            } : {}), {
                flushSync: flushSync
            });
            return {
                shortCircuited: true
            };
        }
        // If this is an uninterrupted revalidation, we remain in our current idle
        // state.  If not, we need to switch to our loading state and load data,
        // preserving any new action data or existing action data (in the case of
        // a revalidation interrupting an actionReload)
        if (!isUninterruptedRevalidation) {
            revalidatingFetchers.forEach((rf)=>{
                let fetcher = state.fetchers.get(rf.key);
                let revalidatingFetcher = $0e856af10b3b08bf$var$getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);
                state.fetchers.set(rf.key, revalidatingFetcher);
            });
            let actionData = pendingActionData || state.actionData;
            updateState($0e856af10b3b08bf$var$_extends({
                navigation: loadingNavigation
            }, actionData ? Object.keys(actionData).length === 0 ? {
                actionData: null
            } : {
                actionData: actionData
            } : {}, revalidatingFetchers.length > 0 ? {
                fetchers: new Map(state.fetchers)
            } : {}), {
                flushSync: flushSync
            });
        }
        revalidatingFetchers.forEach((rf)=>{
            if (fetchControllers.has(rf.key)) abortFetcher(rf.key);
            if (rf.controller) // Fetchers use an independent AbortController so that aborting a fetcher
            // (via deleteFetcher) does not abort the triggering navigation that
            // triggered the revalidation
            fetchControllers.set(rf.key, rf.controller);
        });
        // Proxy navigation abort through to revalidation fetchers
        let abortPendingFetchRevalidations = ()=>revalidatingFetchers.forEach((f)=>abortFetcher(f.key));
        if (pendingNavigationController) pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);
        let { results: results, loaderResults: loaderResults, fetcherResults: fetcherResults } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);
        if (request.signal.aborted) return {
            shortCircuited: true
        };
        // Clean up _after_ loaders have completed.  Don't clean up if we short
        // circuited because fetchControllers would have been aborted and
        // reassigned to new controllers for the next navigation
        if (pendingNavigationController) pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
        revalidatingFetchers.forEach((rf)=>fetchControllers.delete(rf.key));
        // If any loaders returned a redirect Response, start a new REPLACE navigation
        let redirect = $0e856af10b3b08bf$var$findRedirect(results);
        if (redirect) {
            if (redirect.idx >= matchesToLoad.length) {
                // If this redirect came from a fetcher make sure we mark it in
                // fetchRedirectIds so it doesn't get revalidated on the next set of
                // loader executions
                let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;
                fetchRedirectIds.add(fetcherKey);
            }
            await startRedirectNavigation(state, redirect.result, {
                replace: replace
            });
            return {
                shortCircuited: true
            };
        }
        // Process and commit output from loaders
        let { loaderData: loaderData, errors: errors } = $0e856af10b3b08bf$var$processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);
        // Wire up subscribers to update loaderData as promises settle
        activeDeferreds.forEach((deferredData, routeId)=>{
            deferredData.subscribe((aborted)=>{
                // Note: No need to updateState here since the TrackedPromise on
                // loaderData is stable across resolve/reject
                // Remove this instance if we were aborted or if promises have settled
                if (aborted || deferredData.done) activeDeferreds.delete(routeId);
            });
        });
        let updatedFetchers = markFetchRedirectsDone();
        let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
        let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
        return $0e856af10b3b08bf$var$_extends({
            loaderData: loaderData,
            errors: errors
        }, shouldUpdateFetchers ? {
            fetchers: new Map(state.fetchers)
        } : {});
    }
    // Trigger a fetcher load/submit for the given fetcher key
    function fetch(key, routeId, href, opts) {
        if (isServer) throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
        if (fetchControllers.has(key)) abortFetcher(key);
        let flushSync = (opts && opts.unstable_flushSync) === true;
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let normalizedPath = $0e856af10b3b08bf$var$normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);
        let matches = $0e856af10b3b08bf$export$2708184779ceb39d(routesToUse, normalizedPath, basename);
        if (!matches) {
            setFetcherError(key, routeId, $0e856af10b3b08bf$var$getInternalRouterError(404, {
                pathname: normalizedPath
            }), {
                flushSync: flushSync
            });
            return;
        }
        let { path: path, submission: submission, error: error } = $0e856af10b3b08bf$var$normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);
        if (error) {
            setFetcherError(key, routeId, error, {
                flushSync: flushSync
            });
            return;
        }
        let match = $0e856af10b3b08bf$var$getTargetMatch(matches, path);
        pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
        if (submission && $0e856af10b3b08bf$var$isMutationMethod(submission.formMethod)) {
            handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);
            return;
        }
        // Store off the match so we can call it's shouldRevalidate on subsequent
        // revalidations
        fetchLoadMatches.set(key, {
            routeId: routeId,
            path: path
        });
        handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);
    }
    // Call the action for the matched fetcher.submit(), and then handle redirects,
    // errors, and revalidation
    async function handleFetcherAction(key, routeId, path, match, requestMatches, flushSync, submission) {
        interruptActiveLoads();
        fetchLoadMatches.delete(key);
        if (!match.route.action && !match.route.lazy) {
            let error = $0e856af10b3b08bf$var$getInternalRouterError(405, {
                method: submission.formMethod,
                pathname: path,
                routeId: routeId
            });
            setFetcherError(key, routeId, error, {
                flushSync: flushSync
            });
            return;
        }
        // Put this fetcher into it's submitting state
        let existingFetcher = state.fetchers.get(key);
        updateFetcherState(key, $0e856af10b3b08bf$var$getSubmittingFetcher(submission, existingFetcher), {
            flushSync: flushSync
        });
        // Call the action for the fetcher
        let abortController = new AbortController();
        let fetchRequest = $0e856af10b3b08bf$var$createClientSideRequest(init.history, path, abortController.signal, submission);
        fetchControllers.set(key, abortController);
        let originatingLoadId = incrementingLoadId;
        let actionResult = await $0e856af10b3b08bf$var$callLoaderOrAction("action", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);
        if (fetchRequest.signal.aborted) {
            // We can delete this so long as we weren't aborted by our own fetcher
            // re-submit which would have put _new_ controller is in fetchControllers
            if (fetchControllers.get(key) === abortController) fetchControllers.delete(key);
            return;
        }
        if (deletedFetchers.has(key)) {
            updateFetcherState(key, $0e856af10b3b08bf$var$getDoneFetcher(undefined));
            return;
        }
        if ($0e856af10b3b08bf$var$isRedirectResult(actionResult)) {
            fetchControllers.delete(key);
            if (pendingNavigationLoadId > originatingLoadId) {
                // A new navigation was kicked off after our action started, so that
                // should take precedence over this redirect navigation.  We already
                // set isRevalidationRequired so all loaders for the new route should
                // fire unless opted out via shouldRevalidate
                updateFetcherState(key, $0e856af10b3b08bf$var$getDoneFetcher(undefined));
                return;
            } else {
                fetchRedirectIds.add(key);
                updateFetcherState(key, $0e856af10b3b08bf$var$getLoadingFetcher(submission));
                return startRedirectNavigation(state, actionResult, {
                    fetcherSubmission: submission
                });
            }
        }
        // Process any non-redirect errors thrown
        if ($0e856af10b3b08bf$var$isErrorResult(actionResult)) {
            setFetcherError(key, routeId, actionResult.error);
            return;
        }
        if ($0e856af10b3b08bf$var$isDeferredResult(actionResult)) throw $0e856af10b3b08bf$var$getInternalRouterError(400, {
            type: "defer-action"
        });
        // Start the data load for current matches, or the next location if we're
        // in the middle of a navigation
        let nextLocation = state.navigation.location || state.location;
        let revalidationRequest = $0e856af10b3b08bf$var$createClientSideRequest(init.history, nextLocation, abortController.signal);
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let matches = state.navigation.state !== "idle" ? $0e856af10b3b08bf$export$2708184779ceb39d(routesToUse, state.navigation.location, basename) : state.matches;
        $0e856af10b3b08bf$export$3e9cee6b33872309(matches, "Didn't find any matches after fetcher action");
        let loadId = ++incrementingLoadId;
        fetchReloadIds.set(key, loadId);
        let loadFetcher = $0e856af10b3b08bf$var$getLoadingFetcher(submission, actionResult.data);
        state.fetchers.set(key, loadFetcher);
        let [matchesToLoad, revalidatingFetchers] = $0e856af10b3b08bf$var$getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {
            [match.route.id]: actionResult.data
        }, undefined // No need to send through errors since we short circuit above
        );
        // Put all revalidating fetchers into the loading state, except for the
        // current fetcher which we want to keep in it's current loading state which
        // contains it's action submission info + action data
        revalidatingFetchers.filter((rf)=>rf.key !== key).forEach((rf)=>{
            let staleKey = rf.key;
            let existingFetcher = state.fetchers.get(staleKey);
            let revalidatingFetcher = $0e856af10b3b08bf$var$getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);
            state.fetchers.set(staleKey, revalidatingFetcher);
            if (fetchControllers.has(staleKey)) abortFetcher(staleKey);
            if (rf.controller) fetchControllers.set(staleKey, rf.controller);
        });
        updateState({
            fetchers: new Map(state.fetchers)
        });
        let abortPendingFetchRevalidations = ()=>revalidatingFetchers.forEach((rf)=>abortFetcher(rf.key));
        abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);
        let { results: results, loaderResults: loaderResults, fetcherResults: fetcherResults } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
        if (abortController.signal.aborted) return;
        abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
        fetchReloadIds.delete(key);
        fetchControllers.delete(key);
        revalidatingFetchers.forEach((r)=>fetchControllers.delete(r.key));
        let redirect = $0e856af10b3b08bf$var$findRedirect(results);
        if (redirect) {
            if (redirect.idx >= matchesToLoad.length) {
                // If this redirect came from a fetcher make sure we mark it in
                // fetchRedirectIds so it doesn't get revalidated on the next set of
                // loader executions
                let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;
                fetchRedirectIds.add(fetcherKey);
            }
            return startRedirectNavigation(state, redirect.result);
        }
        // Process and commit output from loaders
        let { loaderData: loaderData, errors: errors } = $0e856af10b3b08bf$var$processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);
        // Since we let revalidations complete even if the submitting fetcher was
        // deleted, only put it back to idle if it hasn't been deleted
        if (state.fetchers.has(key)) {
            let doneFetcher = $0e856af10b3b08bf$var$getDoneFetcher(actionResult.data);
            state.fetchers.set(key, doneFetcher);
        }
        abortStaleFetchLoads(loadId);
        // If we are currently in a navigation loading state and this fetcher is
        // more recent than the navigation, we want the newer data so abort the
        // navigation and complete it with the fetcher data
        if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {
            $0e856af10b3b08bf$export$3e9cee6b33872309(pendingAction, "Expected pending action");
            pendingNavigationController && pendingNavigationController.abort();
            completeNavigation(state.navigation.location, {
                matches: matches,
                loaderData: loaderData,
                errors: errors,
                fetchers: new Map(state.fetchers)
            });
        } else {
            // otherwise just update with the fetcher data, preserving any existing
            // loaderData for loaders that did not need to reload.  We have to
            // manually merge here since we aren't going through completeNavigation
            updateState({
                errors: errors,
                loaderData: $0e856af10b3b08bf$var$mergeLoaderData(state.loaderData, loaderData, matches, errors),
                fetchers: new Map(state.fetchers)
            });
            isRevalidationRequired = false;
        }
    }
    // Call the matched loader for fetcher.load(), handling redirects, errors, etc.
    async function handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission) {
        let existingFetcher = state.fetchers.get(key);
        updateFetcherState(key, $0e856af10b3b08bf$var$getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {
            flushSync: flushSync
        });
        // Call the loader for this fetcher route match
        let abortController = new AbortController();
        let fetchRequest = $0e856af10b3b08bf$var$createClientSideRequest(init.history, path, abortController.signal);
        fetchControllers.set(key, abortController);
        let originatingLoadId = incrementingLoadId;
        let result = await $0e856af10b3b08bf$var$callLoaderOrAction("loader", fetchRequest, match, matches, manifest, mapRouteProperties, basename);
        // Deferred isn't supported for fetcher loads, await everything and treat it
        // as a normal load.  resolveDeferredData will return undefined if this
        // fetcher gets aborted, so we just leave result untouched and short circuit
        // below if that happens
        if ($0e856af10b3b08bf$var$isDeferredResult(result)) result = await $0e856af10b3b08bf$var$resolveDeferredData(result, fetchRequest.signal, true) || result;
        // We can delete this so long as we weren't aborted by our our own fetcher
        // re-load which would have put _new_ controller is in fetchControllers
        if (fetchControllers.get(key) === abortController) fetchControllers.delete(key);
        if (fetchRequest.signal.aborted) return;
        if (deletedFetchers.has(key)) {
            updateFetcherState(key, $0e856af10b3b08bf$var$getDoneFetcher(undefined));
            return;
        }
        // If the loader threw a redirect Response, start a new REPLACE navigation
        if ($0e856af10b3b08bf$var$isRedirectResult(result)) {
            if (pendingNavigationLoadId > originatingLoadId) {
                // A new navigation was kicked off after our loader started, so that
                // should take precedence over this redirect navigation
                updateFetcherState(key, $0e856af10b3b08bf$var$getDoneFetcher(undefined));
                return;
            } else {
                fetchRedirectIds.add(key);
                await startRedirectNavigation(state, result);
                return;
            }
        }
        // Process any non-redirect errors thrown
        if ($0e856af10b3b08bf$var$isErrorResult(result)) {
            setFetcherError(key, routeId, result.error);
            return;
        }
        $0e856af10b3b08bf$export$3e9cee6b33872309(!$0e856af10b3b08bf$var$isDeferredResult(result), "Unhandled fetcher deferred data");
        // Put the fetcher back into an idle state
        updateFetcherState(key, $0e856af10b3b08bf$var$getDoneFetcher(result.data));
    }
    /**
   * Utility function to handle redirects returned from an action or loader.
   * Normally, a redirect "replaces" the navigation that triggered it.  So, for
   * example:
   *
   *  - user is on /a
   *  - user clicks a link to /b
   *  - loader for /b redirects to /c
   *
   * In a non-JS app the browser would track the in-flight navigation to /b and
   * then replace it with /c when it encountered the redirect response.  In
   * the end it would only ever update the URL bar with /c.
   *
   * In client-side routing using pushState/replaceState, we aim to emulate
   * this behavior and we also do not update history until the end of the
   * navigation (including processed redirects).  This means that we never
   * actually touch history until we've processed redirects, so we just use
   * the history action from the original navigation (PUSH or REPLACE).
   */ async function startRedirectNavigation(state, redirect, _temp2) {
        let { submission: submission, fetcherSubmission: fetcherSubmission, replace: replace } = _temp2 === void 0 ? {} : _temp2;
        if (redirect.revalidate) isRevalidationRequired = true;
        let redirectLocation = $0e856af10b3b08bf$var$createLocation(state.location, redirect.location, {
            _isRedirect: true
        });
        $0e856af10b3b08bf$export$3e9cee6b33872309(redirectLocation, "Expected a location on the redirect navigation");
        if (isBrowser) {
            let isDocumentReload = false;
            if (redirect.reloadDocument) // Hard reload if the response contained X-Remix-Reload-Document
            isDocumentReload = true;
            else if ($0e856af10b3b08bf$var$ABSOLUTE_URL_REGEX.test(redirect.location)) {
                const url = init.history.createURL(redirect.location);
                isDocumentReload = // Hard reload if it's an absolute URL to a new origin
                url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename
                $0e856af10b3b08bf$export$b69e3301ce081aa3(url.pathname, basename) == null;
            }
            if (isDocumentReload) {
                if (replace) routerWindow.location.replace(redirect.location);
                else routerWindow.location.assign(redirect.location);
                return;
            }
        }
        // There's no need to abort on redirects, since we don't detect the
        // redirect until the action/loaders have settled
        pendingNavigationController = null;
        let redirectHistoryAction = replace === true ? $0e856af10b3b08bf$export$e19cd5f9376f8cee.Replace : $0e856af10b3b08bf$export$e19cd5f9376f8cee.Push;
        // Use the incoming submission if provided, fallback on the active one in
        // state.navigation
        let { formMethod: formMethod, formAction: formAction, formEncType: formEncType } = state.navigation;
        if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) submission = $0e856af10b3b08bf$var$getSubmissionFromNavigation(state.navigation);
        // If this was a 307/308 submission we want to preserve the HTTP method and
        // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the
        // redirected location
        let activeSubmission = submission || fetcherSubmission;
        if ($0e856af10b3b08bf$var$redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && $0e856af10b3b08bf$var$isMutationMethod(activeSubmission.formMethod)) await startNavigation(redirectHistoryAction, redirectLocation, {
            submission: $0e856af10b3b08bf$var$_extends({}, activeSubmission, {
                formAction: redirect.location
            }),
            // Preserve this flag across redirects
            preventScrollReset: pendingPreventScrollReset
        });
        else {
            // If we have a navigation submission, we will preserve it through the
            // redirect navigation
            let overrideNavigation = $0e856af10b3b08bf$var$getLoadingNavigation(redirectLocation, submission);
            await startNavigation(redirectHistoryAction, redirectLocation, {
                overrideNavigation: overrideNavigation,
                fetcherSubmission: // Send fetcher submissions through for shouldRevalidate
                fetcherSubmission,
                // Preserve this flag across redirects
                preventScrollReset: pendingPreventScrollReset
            });
        }
    }
    async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {
        // Call all navigation loaders and revalidating fetcher loaders in parallel,
        // then slice off the results into separate arrays so we can handle them
        // accordingly
        let results = await Promise.all([
            ...matchesToLoad.map((match)=>$0e856af10b3b08bf$var$callLoaderOrAction("loader", request, match, matches, manifest, mapRouteProperties, basename)),
            ...fetchersToLoad.map((f)=>{
                if (f.matches && f.match && f.controller) return $0e856af10b3b08bf$var$callLoaderOrAction("loader", $0e856af10b3b08bf$var$createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);
                else {
                    let error = {
                        type: $0e856af10b3b08bf$var$ResultType.error,
                        error: $0e856af10b3b08bf$var$getInternalRouterError(404, {
                            pathname: f.path
                        })
                    };
                    return error;
                }
            })
        ]);
        let loaderResults = results.slice(0, matchesToLoad.length);
        let fetcherResults = results.slice(matchesToLoad.length);
        await Promise.all([
            $0e856af10b3b08bf$var$resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(()=>request.signal), false, state.loaderData),
            $0e856af10b3b08bf$var$resolveDeferredResults(currentMatches, fetchersToLoad.map((f)=>f.match), fetcherResults, fetchersToLoad.map((f)=>f.controller ? f.controller.signal : null), true)
        ]);
        return {
            results: results,
            loaderResults: loaderResults,
            fetcherResults: fetcherResults
        };
    }
    function interruptActiveLoads() {
        // Every interruption triggers a revalidation
        isRevalidationRequired = true;
        // Cancel pending route-level deferreds and mark cancelled routes for
        // revalidation
        cancelledDeferredRoutes.push(...cancelActiveDeferreds());
        // Abort in-flight fetcher loads
        fetchLoadMatches.forEach((_, key)=>{
            if (fetchControllers.has(key)) {
                cancelledFetcherLoads.push(key);
                abortFetcher(key);
            }
        });
    }
    function updateFetcherState(key, fetcher, opts) {
        if (opts === void 0) opts = {};
        state.fetchers.set(key, fetcher);
        updateState({
            fetchers: new Map(state.fetchers)
        }, {
            flushSync: (opts && opts.flushSync) === true
        });
    }
    function setFetcherError(key, routeId, error, opts) {
        if (opts === void 0) opts = {};
        let boundaryMatch = $0e856af10b3b08bf$var$findNearestBoundary(state.matches, routeId);
        deleteFetcher(key);
        updateState({
            errors: {
                [boundaryMatch.route.id]: error
            },
            fetchers: new Map(state.fetchers)
        }, {
            flushSync: (opts && opts.flushSync) === true
        });
    }
    function getFetcher(key) {
        if (future.v7_fetcherPersist) {
            activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);
            // If this fetcher was previously marked for deletion, unmark it since we
            // have a new instance
            if (deletedFetchers.has(key)) deletedFetchers.delete(key);
        }
        return state.fetchers.get(key) || $0e856af10b3b08bf$export$52eace9c284d3585;
    }
    function deleteFetcher(key) {
        let fetcher = state.fetchers.get(key);
        // Don't abort the controller if this is a deletion of a fetcher.submit()
        // in it's loading phase since - we don't want to abort the corresponding
        // revalidation and want them to complete and land
        if (fetchControllers.has(key) && !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key))) abortFetcher(key);
        fetchLoadMatches.delete(key);
        fetchReloadIds.delete(key);
        fetchRedirectIds.delete(key);
        deletedFetchers.delete(key);
        state.fetchers.delete(key);
    }
    function deleteFetcherAndUpdateState(key) {
        if (future.v7_fetcherPersist) {
            let count = (activeFetchers.get(key) || 0) - 1;
            if (count <= 0) {
                activeFetchers.delete(key);
                deletedFetchers.add(key);
            } else activeFetchers.set(key, count);
        } else deleteFetcher(key);
        updateState({
            fetchers: new Map(state.fetchers)
        });
    }
    function abortFetcher(key) {
        let controller = fetchControllers.get(key);
        $0e856af10b3b08bf$export$3e9cee6b33872309(controller, "Expected fetch controller: " + key);
        controller.abort();
        fetchControllers.delete(key);
    }
    function markFetchersDone(keys) {
        for (let key of keys){
            let fetcher = getFetcher(key);
            let doneFetcher = $0e856af10b3b08bf$var$getDoneFetcher(fetcher.data);
            state.fetchers.set(key, doneFetcher);
        }
    }
    function markFetchRedirectsDone() {
        let doneKeys = [];
        let updatedFetchers = false;
        for (let key of fetchRedirectIds){
            let fetcher = state.fetchers.get(key);
            $0e856af10b3b08bf$export$3e9cee6b33872309(fetcher, "Expected fetcher: " + key);
            if (fetcher.state === "loading") {
                fetchRedirectIds.delete(key);
                doneKeys.push(key);
                updatedFetchers = true;
            }
        }
        markFetchersDone(doneKeys);
        return updatedFetchers;
    }
    function abortStaleFetchLoads(landedId) {
        let yeetedKeys = [];
        for (let [key, id] of fetchReloadIds)if (id < landedId) {
            let fetcher = state.fetchers.get(key);
            $0e856af10b3b08bf$export$3e9cee6b33872309(fetcher, "Expected fetcher: " + key);
            if (fetcher.state === "loading") {
                abortFetcher(key);
                fetchReloadIds.delete(key);
                yeetedKeys.push(key);
            }
        }
        markFetchersDone(yeetedKeys);
        return yeetedKeys.length > 0;
    }
    function getBlocker(key, fn) {
        let blocker = state.blockers.get(key) || $0e856af10b3b08bf$export$386d57f03f0b2883;
        if (blockerFunctions.get(key) !== fn) blockerFunctions.set(key, fn);
        return blocker;
    }
    function deleteBlocker(key) {
        state.blockers.delete(key);
        blockerFunctions.delete(key);
    }
    // Utility function to update blockers, ensuring valid state transitions
    function updateBlocker(key, newBlocker) {
        let blocker = state.blockers.get(key) || $0e856af10b3b08bf$export$386d57f03f0b2883;
        // Poor mans state machine :)
        // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM
        $0e856af10b3b08bf$export$3e9cee6b33872309(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);
        let blockers = new Map(state.blockers);
        blockers.set(key, newBlocker);
        updateState({
            blockers: blockers
        });
    }
    function shouldBlockNavigation(_ref2) {
        let { currentLocation: currentLocation, nextLocation: nextLocation, historyAction: historyAction } = _ref2;
        if (blockerFunctions.size === 0) return;
        // We ony support a single active blocker at the moment since we don't have
        // any compelling use cases for multi-blocker yet
        if (blockerFunctions.size > 1) $0e856af10b3b08bf$export$c0e02632e14916fd(false, "A router only supports one blocker at a time");
        let entries = Array.from(blockerFunctions.entries());
        let [blockerKey, blockerFunction] = entries[entries.length - 1];
        let blocker = state.blockers.get(blockerKey);
        if (blocker && blocker.state === "proceeding") // If the blocker is currently proceeding, we don't need to re-check
        // it and can let this navigation continue
        return;
        // At this point, we know we're unblocked/blocked so we need to check the
        // user-provided blocker function
        if (blockerFunction({
            currentLocation: currentLocation,
            nextLocation: nextLocation,
            historyAction: historyAction
        })) return blockerKey;
    }
    function cancelActiveDeferreds(predicate) {
        let cancelledRouteIds = [];
        activeDeferreds.forEach((dfd, routeId)=>{
            if (!predicate || predicate(routeId)) {
                // Cancel the deferred - but do not remove from activeDeferreds here -
                // we rely on the subscribers to do that so our tests can assert proper
                // cleanup via _internalActiveDeferreds
                dfd.cancel();
                cancelledRouteIds.push(routeId);
                activeDeferreds.delete(routeId);
            }
        });
        return cancelledRouteIds;
    }
    // Opt in to capturing and reporting scroll positions during navigations,
    // used by the <ScrollRestoration> component
    function enableScrollRestoration(positions, getPosition, getKey) {
        savedScrollPositions = positions;
        getScrollPosition = getPosition;
        getScrollRestorationKey = getKey || null;
        // Perform initial hydration scroll restoration, since we miss the boat on
        // the initial updateState() because we've not yet rendered <ScrollRestoration/>
        // and therefore have no savedScrollPositions available
        if (!initialScrollRestored && state.navigation === $0e856af10b3b08bf$export$ed3e14b2f9e105d0) {
            initialScrollRestored = true;
            let y = getSavedScrollPosition(state.location, state.matches);
            if (y != null) updateState({
                restoreScrollPosition: y
            });
        }
        return ()=>{
            savedScrollPositions = null;
            getScrollPosition = null;
            getScrollRestorationKey = null;
        };
    }
    function getScrollKey(location, matches) {
        if (getScrollRestorationKey) {
            let key = getScrollRestorationKey(location, matches.map((m)=>$0e856af10b3b08bf$export$b3fac024fad9e8ff(m, state.loaderData)));
            return key || location.key;
        }
        return location.key;
    }
    function saveScrollPosition(location, matches) {
        if (savedScrollPositions && getScrollPosition) {
            let key = getScrollKey(location, matches);
            savedScrollPositions[key] = getScrollPosition();
        }
    }
    function getSavedScrollPosition(location, matches) {
        if (savedScrollPositions) {
            let key = getScrollKey(location, matches);
            let y = savedScrollPositions[key];
            if (typeof y === "number") return y;
        }
        return null;
    }
    function _internalSetRoutes(newRoutes) {
        manifest = {};
        inFlightDataRoutes = $0e856af10b3b08bf$export$4a6d22b32134ea5d(newRoutes, mapRouteProperties, undefined, manifest);
    }
    router = {
        get basename () {
            return basename;
        },
        get state () {
            return state;
        },
        get routes () {
            return dataRoutes;
        },
        get window () {
            return routerWindow;
        },
        initialize: initialize,
        subscribe: subscribe,
        enableScrollRestoration: enableScrollRestoration,
        navigate: navigate,
        fetch: fetch,
        revalidate: revalidate,
        // Passthrough to history-aware createHref used by useHref so we get proper
        // hash-aware URLs in DOM paths
        createHref: (to)=>init.history.createHref(to),
        encodeLocation: (to)=>init.history.encodeLocation(to),
        getFetcher: getFetcher,
        deleteFetcher: deleteFetcherAndUpdateState,
        dispose: dispose,
        getBlocker: getBlocker,
        deleteBlocker: deleteBlocker,
        _internalFetchControllers: fetchControllers,
        _internalActiveDeferreds: activeDeferreds,
        _internalSetRoutes: // TODO: Remove setRoutes, it's temporary to avoid dealing with
        // updating the tree while validating the update algorithm.
        _internalSetRoutes
    };
    return router;
}
//#endregion
////////////////////////////////////////////////////////////////////////////////
//#region createStaticHandler
////////////////////////////////////////////////////////////////////////////////
const $0e856af10b3b08bf$export$4d0306f8f6a4585b = Symbol("deferred");
function $0e856af10b3b08bf$export$3336b097a6fbc59a(routes, opts) {
    $0e856af10b3b08bf$export$3e9cee6b33872309(routes.length > 0, "You must provide a non-empty routes array to createStaticHandler");
    let manifest = {};
    let basename = (opts ? opts.basename : null) || "/";
    let mapRouteProperties;
    if (opts != null && opts.mapRouteProperties) mapRouteProperties = opts.mapRouteProperties;
    else if (opts != null && opts.detectErrorBoundary) {
        // If they are still using the deprecated version, wrap it with the new API
        let detectErrorBoundary = opts.detectErrorBoundary;
        mapRouteProperties = (route)=>({
                hasErrorBoundary: detectErrorBoundary(route)
            });
    } else mapRouteProperties = $0e856af10b3b08bf$var$defaultMapRouteProperties;
    let dataRoutes = $0e856af10b3b08bf$export$4a6d22b32134ea5d(routes, mapRouteProperties, undefined, manifest);
    /**
   * The query() method is intended for document requests, in which we want to
   * call an optional action and potentially multiple loaders for all nested
   * routes.  It returns a StaticHandlerContext object, which is very similar
   * to the router state (location, loaderData, actionData, errors, etc.) and
   * also adds SSR-specific information such as the statusCode and headers
   * from action/loaders Responses.
   *
   * It _should_ never throw and should report all errors through the
   * returned context.errors object, properly associating errors to their error
   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be
   * used to emulate React error boundaries during SSr by performing a second
   * pass only down to the boundaryId.
   *
   * The one exception where we do not return a StaticHandlerContext is when a
   * redirect response is returned or thrown from any action/loader.  We
   * propagate that out and return the raw Response so the HTTP server can
   * return it directly.
   */ async function query(request, _temp3) {
        let { requestContext: requestContext } = _temp3 === void 0 ? {} : _temp3;
        let url = new URL(request.url);
        let method = request.method;
        let location = $0e856af10b3b08bf$var$createLocation("", $0e856af10b3b08bf$export$fe53371bee54353d(url), null, "default");
        let matches = $0e856af10b3b08bf$export$2708184779ceb39d(dataRoutes, location, basename);
        // SSR supports HEAD requests while SPA doesn't
        if (!$0e856af10b3b08bf$var$isValidMethod(method) && method !== "HEAD") {
            let error = $0e856af10b3b08bf$var$getInternalRouterError(405, {
                method: method
            });
            let { matches: methodNotAllowedMatches, route: route } = $0e856af10b3b08bf$var$getShortCircuitMatches(dataRoutes);
            return {
                basename: basename,
                location: location,
                matches: methodNotAllowedMatches,
                loaderData: {},
                actionData: null,
                errors: {
                    [route.id]: error
                },
                statusCode: error.status,
                loaderHeaders: {},
                actionHeaders: {},
                activeDeferreds: null
            };
        } else if (!matches) {
            let error = $0e856af10b3b08bf$var$getInternalRouterError(404, {
                pathname: location.pathname
            });
            let { matches: notFoundMatches, route: route } = $0e856af10b3b08bf$var$getShortCircuitMatches(dataRoutes);
            return {
                basename: basename,
                location: location,
                matches: notFoundMatches,
                loaderData: {},
                actionData: null,
                errors: {
                    [route.id]: error
                },
                statusCode: error.status,
                loaderHeaders: {},
                actionHeaders: {},
                activeDeferreds: null
            };
        }
        let result = await queryImpl(request, location, matches, requestContext);
        if ($0e856af10b3b08bf$var$isResponse(result)) return result;
        // When returning StaticHandlerContext, we patch back in the location here
        // since we need it for React Context.  But this helps keep our submit and
        // loadRouteData operating on a Request instead of a Location
        return $0e856af10b3b08bf$var$_extends({
            location: location,
            basename: basename
        }, result);
    }
    /**
   * The queryRoute() method is intended for targeted route requests, either
   * for fetch ?_data requests or resource route requests.  In this case, we
   * are only ever calling a single action or loader, and we are returning the
   * returned value directly.  In most cases, this will be a Response returned
   * from the action/loader, but it may be a primitive or other value as well -
   * and in such cases the calling context should handle that accordingly.
   *
   * We do respect the throw/return differentiation, so if an action/loader
   * throws, then this method will throw the value.  This is important so we
   * can do proper boundary identification in Remix where a thrown Response
   * must go to the Catch Boundary but a returned Response is happy-path.
   *
   * One thing to note is that any Router-initiated Errors that make sense
   * to associate with a status code will be thrown as an ErrorResponse
   * instance which include the raw Error, such that the calling context can
   * serialize the error as they see fit while including the proper response
   * code.  Examples here are 404 and 405 errors that occur prior to reaching
   * any user-defined loaders.
   */ async function queryRoute(request, _temp4) {
        let { routeId: routeId, requestContext: requestContext } = _temp4 === void 0 ? {} : _temp4;
        let url = new URL(request.url);
        let method = request.method;
        let location = $0e856af10b3b08bf$var$createLocation("", $0e856af10b3b08bf$export$fe53371bee54353d(url), null, "default");
        let matches = $0e856af10b3b08bf$export$2708184779ceb39d(dataRoutes, location, basename);
        // SSR supports HEAD requests while SPA doesn't
        if (!$0e856af10b3b08bf$var$isValidMethod(method) && method !== "HEAD" && method !== "OPTIONS") throw $0e856af10b3b08bf$var$getInternalRouterError(405, {
            method: method
        });
        else if (!matches) throw $0e856af10b3b08bf$var$getInternalRouterError(404, {
            pathname: location.pathname
        });
        let match = routeId ? matches.find((m)=>m.route.id === routeId) : $0e856af10b3b08bf$var$getTargetMatch(matches, location);
        if (routeId && !match) throw $0e856af10b3b08bf$var$getInternalRouterError(403, {
            pathname: location.pathname,
            routeId: routeId
        });
        else if (!match) // This should never hit I don't think?
        throw $0e856af10b3b08bf$var$getInternalRouterError(404, {
            pathname: location.pathname
        });
        let result = await queryImpl(request, location, matches, requestContext, match);
        if ($0e856af10b3b08bf$var$isResponse(result)) return result;
        let error = result.errors ? Object.values(result.errors)[0] : undefined;
        if (error !== undefined) // If we got back result.errors, that means the loader/action threw
        // _something_ that wasn't a Response, but it's not guaranteed/required
        // to be an `instanceof Error` either, so we have to use throw here to
        // preserve the "error" state outside of queryImpl.
        throw error;
        // Pick off the right state value to return
        if (result.actionData) return Object.values(result.actionData)[0];
        if (result.loaderData) {
            var _result$activeDeferre;
            let data = Object.values(result.loaderData)[0];
            if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) data[$0e856af10b3b08bf$export$4d0306f8f6a4585b] = result.activeDeferreds[match.route.id];
            return data;
        }
        return undefined;
    }
    async function queryImpl(request, location, matches, requestContext, routeMatch) {
        $0e856af10b3b08bf$export$3e9cee6b33872309(request.signal, "query()/queryRoute() requests must contain an AbortController signal");
        try {
            if ($0e856af10b3b08bf$var$isMutationMethod(request.method.toLowerCase())) {
                let result = await submit(request, matches, routeMatch || $0e856af10b3b08bf$var$getTargetMatch(matches, location), requestContext, routeMatch != null);
                return result;
            }
            let result = await loadRouteData(request, matches, requestContext, routeMatch);
            return $0e856af10b3b08bf$var$isResponse(result) ? result : $0e856af10b3b08bf$var$_extends({}, result, {
                actionData: null,
                actionHeaders: {}
            });
        } catch (e) {
            // If the user threw/returned a Response in callLoaderOrAction, we throw
            // it to bail out and then return or throw here based on whether the user
            // returned or threw
            if ($0e856af10b3b08bf$var$isQueryRouteResponse(e)) {
                if (e.type === $0e856af10b3b08bf$var$ResultType.error) throw e.response;
                return e.response;
            }
            // Redirects are always returned since they don't propagate to catch
            // boundaries
            if ($0e856af10b3b08bf$var$isRedirectResponse(e)) return e;
            throw e;
        }
    }
    async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {
        let result;
        if (!actionMatch.route.action && !actionMatch.route.lazy) {
            let error = $0e856af10b3b08bf$var$getInternalRouterError(405, {
                method: request.method,
                pathname: new URL(request.url).pathname,
                routeId: actionMatch.route.id
            });
            if (isRouteRequest) throw error;
            result = {
                type: $0e856af10b3b08bf$var$ResultType.error,
                error: error
            };
        } else {
            result = await $0e856af10b3b08bf$var$callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties, basename, {
                isStaticRequest: true,
                isRouteRequest: isRouteRequest,
                requestContext: requestContext
            });
            if (request.signal.aborted) {
                let method = isRouteRequest ? "queryRoute" : "query";
                throw new Error(method + "() call aborted: " + request.method + " " + request.url);
            }
        }
        if ($0e856af10b3b08bf$var$isRedirectResult(result)) // Uhhhh - this should never happen, we should always throw these from
        // callLoaderOrAction, but the type narrowing here keeps TS happy and we
        // can get back on the "throw all redirect responses" train here should
        // this ever happen :/
        throw new Response(null, {
            status: result.status,
            headers: {
                Location: result.location
            }
        });
        if ($0e856af10b3b08bf$var$isDeferredResult(result)) {
            let error = $0e856af10b3b08bf$var$getInternalRouterError(400, {
                type: "defer-action"
            });
            if (isRouteRequest) throw error;
            result = {
                type: $0e856af10b3b08bf$var$ResultType.error,
                error: error
            };
        }
        if (isRouteRequest) {
            // Note: This should only be non-Response values if we get here, since
            // isRouteRequest should throw any Response received in callLoaderOrAction
            if ($0e856af10b3b08bf$var$isErrorResult(result)) throw result.error;
            return {
                matches: [
                    actionMatch
                ],
                loaderData: {},
                actionData: {
                    [actionMatch.route.id]: result.data
                },
                errors: null,
                // Note: statusCode + headers are unused here since queryRoute will
                // return the raw Response or value
                statusCode: 200,
                loaderHeaders: {},
                actionHeaders: {},
                activeDeferreds: null
            };
        }
        if ($0e856af10b3b08bf$var$isErrorResult(result)) {
            // Store off the pending error - we use it to determine which loaders
            // to call and will commit it when we complete the navigation
            let boundaryMatch = $0e856af10b3b08bf$var$findNearestBoundary(matches, actionMatch.route.id);
            let context = await loadRouteData(request, matches, requestContext, undefined, {
                [boundaryMatch.route.id]: result.error
            });
            // action status codes take precedence over loader status codes
            return $0e856af10b3b08bf$var$_extends({}, context, {
                statusCode: $0e856af10b3b08bf$export$972111febbeef05b(result.error) ? result.error.status : 500,
                actionData: null,
                actionHeaders: $0e856af10b3b08bf$var$_extends({}, result.headers ? {
                    [actionMatch.route.id]: result.headers
                } : {})
            });
        }
        // Create a GET request for the loaders
        let loaderRequest = new Request(request.url, {
            headers: request.headers,
            redirect: request.redirect,
            signal: request.signal
        });
        let context = await loadRouteData(loaderRequest, matches, requestContext);
        return $0e856af10b3b08bf$var$_extends({}, context, result.statusCode ? {
            statusCode: result.statusCode
        } : {}, {
            actionData: {
                [actionMatch.route.id]: result.data
            },
            actionHeaders: $0e856af10b3b08bf$var$_extends({}, result.headers ? {
                [actionMatch.route.id]: result.headers
            } : {})
        });
    }
    async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {
        let isRouteRequest = routeMatch != null;
        // Short circuit if we have no loaders to run (queryRoute())
        if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) throw $0e856af10b3b08bf$var$getInternalRouterError(400, {
            method: request.method,
            pathname: new URL(request.url).pathname,
            routeId: routeMatch == null ? void 0 : routeMatch.route.id
        });
        let requestMatches = routeMatch ? [
            routeMatch
        ] : $0e856af10b3b08bf$var$getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);
        let matchesToLoad = requestMatches.filter((m)=>m.route.loader || m.route.lazy);
        // Short circuit if we have no loaders to run (query())
        if (matchesToLoad.length === 0) return {
            matches: matches,
            // Add a null for all matched routes for proper revalidation on the client
            loaderData: matches.reduce((acc, m)=>Object.assign(acc, {
                    [m.route.id]: null
                }), {}),
            errors: pendingActionError || null,
            statusCode: 200,
            loaderHeaders: {},
            activeDeferreds: null
        };
        let results = await Promise.all([
            ...matchesToLoad.map((match)=>$0e856af10b3b08bf$var$callLoaderOrAction("loader", request, match, matches, manifest, mapRouteProperties, basename, {
                    isStaticRequest: true,
                    isRouteRequest: isRouteRequest,
                    requestContext: requestContext
                }))
        ]);
        if (request.signal.aborted) {
            let method = isRouteRequest ? "queryRoute" : "query";
            throw new Error(method + "() call aborted: " + request.method + " " + request.url);
        }
        // Process and commit output from loaders
        let activeDeferreds = new Map();
        let context = $0e856af10b3b08bf$var$processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);
        // Add a null for any non-loader matches for proper revalidation on the client
        let executedLoaders = new Set(matchesToLoad.map((match)=>match.route.id));
        matches.forEach((match)=>{
            if (!executedLoaders.has(match.route.id)) context.loaderData[match.route.id] = null;
        });
        return $0e856af10b3b08bf$var$_extends({}, context, {
            matches: matches,
            activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null
        });
    }
    return {
        dataRoutes: dataRoutes,
        query: query,
        queryRoute: queryRoute
    };
}
//#endregion
////////////////////////////////////////////////////////////////////////////////
//#region Helpers
////////////////////////////////////////////////////////////////////////////////
/**
 * Given an existing StaticHandlerContext and an error thrown at render time,
 * provide an updated StaticHandlerContext suitable for a second SSR render
 */ function $0e856af10b3b08bf$export$fec11da027c70692(routes, context, error) {
    let newContext = $0e856af10b3b08bf$var$_extends({}, context, {
        statusCode: 500,
        errors: {
            [context._deepestRenderedBoundaryId || routes[0].id]: error
        }
    });
    return newContext;
}
function $0e856af10b3b08bf$var$isSubmissionNavigation(opts) {
    return opts != null && ("formData" in opts && opts.formData != null || "body" in opts && opts.body !== undefined);
}
function $0e856af10b3b08bf$var$normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {
    let contextualMatches;
    let activeRouteMatch;
    if (fromRouteId) {
        // Grab matches up to the calling route so our route-relative logic is
        // relative to the correct source route
        contextualMatches = [];
        for (let match of matches){
            contextualMatches.push(match);
            if (match.route.id === fromRouteId) {
                activeRouteMatch = match;
                break;
            }
        }
    } else {
        contextualMatches = matches;
        activeRouteMatch = matches[matches.length - 1];
    }
    // Resolve the relative path
    let path = $0e856af10b3b08bf$export$cae722b0cc860f13(to ? to : ".", $0e856af10b3b08bf$export$90ba53ce1c7fdff2(contextualMatches).map((m)=>m.pathnameBase), $0e856af10b3b08bf$export$b69e3301ce081aa3(location.pathname, basename) || location.pathname, relative === "path");
    // When `to` is not specified we inherit search/hash from the current
    // location, unlike when to="." and we just inherit the path.
    // See https://github.com/remix-run/remix/issues/927
    if (to == null) {
        path.search = location.search;
        path.hash = location.hash;
    }
    // Add an ?index param for matched index routes if we don't already have one
    if ((to == null || to === "" || to === ".") && activeRouteMatch && activeRouteMatch.route.index && !$0e856af10b3b08bf$var$hasNakedIndexQuery(path.search)) path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    // If we're operating within a basename, prepend it to the pathname.  If
    // this is a root navigation, then just use the raw basename which allows
    // the basename to have full control over the presence of a trailing slash
    // on root actions
    if (prependBasename && basename !== "/") path.pathname = path.pathname === "/" ? basename : $0e856af10b3b08bf$export$86d9a7913e44197e([
        basename,
        path.pathname
    ]);
    return $0e856af10b3b08bf$export$fe53371bee54353d(path);
}
// Normalize navigation options by converting formMethod=GET formData objects to
// URLSearchParams so they behave identically to links with query params
function $0e856af10b3b08bf$var$normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {
    // Return location verbatim on non-submission navigations
    if (!opts || !$0e856af10b3b08bf$var$isSubmissionNavigation(opts)) return {
        path: path
    };
    if (opts.formMethod && !$0e856af10b3b08bf$var$isValidMethod(opts.formMethod)) return {
        path: path,
        error: $0e856af10b3b08bf$var$getInternalRouterError(405, {
            method: opts.formMethod
        })
    };
    let getInvalidBodyError = ()=>({
            path: path,
            error: $0e856af10b3b08bf$var$getInternalRouterError(400, {
                type: "invalid-body"
            })
        });
    // Create a Submission on non-GET navigations
    let rawFormMethod = opts.formMethod || "get";
    let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();
    let formAction = $0e856af10b3b08bf$var$stripHashFromPath(path);
    if (opts.body !== undefined) {
        if (opts.formEncType === "text/plain") {
            // text only support POST/PUT/PATCH/DELETE submissions
            if (!$0e856af10b3b08bf$var$isMutationMethod(formMethod)) return getInvalidBodyError();
            let text = typeof opts.body === "string" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data
            Array.from(opts.body.entries()).reduce((acc, _ref3)=>{
                let [name, value] = _ref3;
                return "" + acc + name + "=" + value + "\n";
            }, "") : String(opts.body);
            return {
                path: path,
                submission: {
                    formMethod: formMethod,
                    formAction: formAction,
                    formEncType: opts.formEncType,
                    formData: undefined,
                    json: undefined,
                    text: text
                }
            };
        } else if (opts.formEncType === "application/json") {
            // json only supports POST/PUT/PATCH/DELETE submissions
            if (!$0e856af10b3b08bf$var$isMutationMethod(formMethod)) return getInvalidBodyError();
            try {
                let json = typeof opts.body === "string" ? JSON.parse(opts.body) : opts.body;
                return {
                    path: path,
                    submission: {
                        formMethod: formMethod,
                        formAction: formAction,
                        formEncType: opts.formEncType,
                        formData: undefined,
                        json: json,
                        text: undefined
                    }
                };
            } catch (e) {
                return getInvalidBodyError();
            }
        }
    }
    $0e856af10b3b08bf$export$3e9cee6b33872309(typeof FormData === "function", "FormData is not available in this environment");
    let searchParams;
    let formData;
    if (opts.formData) {
        searchParams = $0e856af10b3b08bf$var$convertFormDataToSearchParams(opts.formData);
        formData = opts.formData;
    } else if (opts.body instanceof FormData) {
        searchParams = $0e856af10b3b08bf$var$convertFormDataToSearchParams(opts.body);
        formData = opts.body;
    } else if (opts.body instanceof URLSearchParams) {
        searchParams = opts.body;
        formData = $0e856af10b3b08bf$var$convertSearchParamsToFormData(searchParams);
    } else if (opts.body == null) {
        searchParams = new URLSearchParams();
        formData = new FormData();
    } else try {
        searchParams = new URLSearchParams(opts.body);
        formData = $0e856af10b3b08bf$var$convertSearchParamsToFormData(searchParams);
    } catch (e) {
        return getInvalidBodyError();
    }
    let submission = {
        formMethod: formMethod,
        formAction: formAction,
        formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
        formData: formData,
        json: undefined,
        text: undefined
    };
    if ($0e856af10b3b08bf$var$isMutationMethod(submission.formMethod)) return {
        path: path,
        submission: submission
    };
    // Flatten submission onto URLSearchParams for GET submissions
    let parsedPath = $0e856af10b3b08bf$export$8ccf933b0513f8d0(path);
    // On GET navigation submissions we can drop the ?index param from the
    // resulting location since all loaders will run.  But fetcher GET submissions
    // only run a single loader so we need to preserve any incoming ?index params
    if (isFetcher && parsedPath.search && $0e856af10b3b08bf$var$hasNakedIndexQuery(parsedPath.search)) searchParams.append("index", "");
    parsedPath.search = "?" + searchParams;
    return {
        path: $0e856af10b3b08bf$export$fe53371bee54353d(parsedPath),
        submission: submission
    };
}
// Filter out all routes below any caught error as they aren't going to
// render so we don't need to load them
function $0e856af10b3b08bf$var$getLoaderMatchesUntilBoundary(matches, boundaryId) {
    let boundaryMatches = matches;
    if (boundaryId) {
        let index = matches.findIndex((m)=>m.route.id === boundaryId);
        if (index >= 0) boundaryMatches = matches.slice(0, index);
    }
    return boundaryMatches;
}
function $0e856af10b3b08bf$var$getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {
    let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;
    let currentUrl = history.createURL(state.location);
    let nextUrl = history.createURL(location);
    // Pick navigation matches that are net-new or qualify for revalidation
    let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;
    let boundaryMatches = $0e856af10b3b08bf$var$getLoaderMatchesUntilBoundary(matches, boundaryId);
    let navigationMatches = boundaryMatches.filter((match, index)=>{
        if (match.route.lazy) // We haven't loaded this route yet so we don't know if it's got a loader!
        return true;
        if (match.route.loader == null) return false;
        // Always call the loader on new route instances and pending defer cancellations
        if ($0e856af10b3b08bf$var$isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some((id)=>id === match.route.id)) return true;
        // This is the default implementation for when we revalidate.  If the route
        // provides it's own implementation, then we give them full control but
        // provide this value so they can leverage it if needed after they check
        // their own specific use cases
        let currentRouteMatch = state.matches[index];
        let nextRouteMatch = match;
        return $0e856af10b3b08bf$var$shouldRevalidateLoader(match, $0e856af10b3b08bf$var$_extends({
            currentUrl: currentUrl,
            currentParams: currentRouteMatch.params,
            nextUrl: nextUrl,
            nextParams: nextRouteMatch.params
        }, submission, {
            actionResult: actionResult,
            defaultShouldRevalidate: // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
            isRevalidationRequired || // Clicked the same link, resubmitted a GET form
            currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders
            currentUrl.search !== nextUrl.search || $0e856af10b3b08bf$var$isNewRouteInstance(currentRouteMatch, nextRouteMatch)
        }));
    });
    // Pick fetcher.loads that need to be revalidated
    let revalidatingFetchers = [];
    fetchLoadMatches.forEach((f, key)=>{
        // Don't revalidate if fetcher won't be present in the subsequent render
        if (!matches.some((m)=>m.route.id === f.routeId) || deletedFetchers.has(key)) return;
        let fetcherMatches = $0e856af10b3b08bf$export$2708184779ceb39d(routesToUse, f.path, basename);
        // If the fetcher path no longer matches, push it in with null matches so
        // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is
        // currently only a use-case for Remix HMR where the route tree can change
        // at runtime and remove a route previously loaded via a fetcher
        if (!fetcherMatches) {
            revalidatingFetchers.push({
                key: key,
                routeId: f.routeId,
                path: f.path,
                matches: null,
                match: null,
                controller: null
            });
            return;
        }
        // Revalidating fetchers are decoupled from the route matches since they
        // load from a static href.  They revalidate based on explicit revalidation
        // (submission, useRevalidator, or X-Remix-Revalidate)
        let fetcher = state.fetchers.get(key);
        let fetcherMatch = $0e856af10b3b08bf$var$getTargetMatch(fetcherMatches, f.path);
        let shouldRevalidate = false;
        if (fetchRedirectIds.has(key)) // Never trigger a revalidation of an actively redirecting fetcher
        shouldRevalidate = false;
        else if (cancelledFetcherLoads.includes(key)) // Always revalidate if the fetcher was cancelled
        shouldRevalidate = true;
        else if (fetcher && fetcher.state !== "idle" && fetcher.data === undefined) // If the fetcher hasn't ever completed loading yet, then this isn't a
        // revalidation, it would just be a brand new load if an explicit
        // revalidation is required
        shouldRevalidate = isRevalidationRequired;
        else // Otherwise fall back on any user-defined shouldRevalidate, defaulting
        // to explicit revalidations only
        shouldRevalidate = $0e856af10b3b08bf$var$shouldRevalidateLoader(fetcherMatch, $0e856af10b3b08bf$var$_extends({
            currentUrl: currentUrl,
            currentParams: state.matches[state.matches.length - 1].params,
            nextUrl: nextUrl,
            nextParams: matches[matches.length - 1].params
        }, submission, {
            actionResult: actionResult,
            defaultShouldRevalidate: isRevalidationRequired
        }));
        if (shouldRevalidate) revalidatingFetchers.push({
            key: key,
            routeId: f.routeId,
            path: f.path,
            matches: fetcherMatches,
            match: fetcherMatch,
            controller: new AbortController()
        });
    });
    return [
        navigationMatches,
        revalidatingFetchers
    ];
}
function $0e856af10b3b08bf$var$isNewLoader(currentLoaderData, currentMatch, match) {
    let isNew = // [a] -> [a, b]
    !currentMatch || // [a, b] -> [a, c]
    match.route.id !== currentMatch.route.id;
    // Handle the case that we don't have data for a re-used route, potentially
    // from a prior error or from a cancelled pending deferred
    let isMissingData = currentLoaderData[match.route.id] === undefined;
    // Always load if this is a net-new route or we don't yet have data
    return isNew || isMissingData;
}
function $0e856af10b3b08bf$var$isNewRouteInstance(currentMatch, match) {
    let currentPath = currentMatch.route.path;
    return(// param change for this match, /users/123 -> /users/456
    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path
    // e.g. /files/images/avatar.jpg -> files/finances.xls
    currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match.params["*"]);
}
function $0e856af10b3b08bf$var$shouldRevalidateLoader(loaderMatch, arg) {
    if (loaderMatch.route.shouldRevalidate) {
        let routeChoice = loaderMatch.route.shouldRevalidate(arg);
        if (typeof routeChoice === "boolean") return routeChoice;
    }
    return arg.defaultShouldRevalidate;
}
/**
 * Execute route.lazy() methods to lazily load route modules (loader, action,
 * shouldRevalidate) and update the routeManifest in place which shares objects
 * with dataRoutes so those get updated as well.
 */ async function $0e856af10b3b08bf$var$loadLazyRouteModule(route, mapRouteProperties, manifest) {
    if (!route.lazy) return;
    let lazyRoute = await route.lazy();
    // If the lazy route function was executed and removed by another parallel
    // call then we can return - first lazy() to finish wins because the return
    // value of lazy is expected to be static
    if (!route.lazy) return;
    let routeToUpdate = manifest[route.id];
    $0e856af10b3b08bf$export$3e9cee6b33872309(routeToUpdate, "No route found in manifest");
    // Update the route in place.  This should be safe because there's no way
    // we could yet be sitting on this route as we can't get there without
    // resolving lazy() first.
    //
    // This is different than the HMR "update" use-case where we may actively be
    // on the route being updated.  The main concern boils down to "does this
    // mutation affect any ongoing navigations or any current state.matches
    // values?".  If not, it should be safe to update in place.
    let routeUpdates = {};
    for(let lazyRouteProperty in lazyRoute){
        let staticRouteValue = routeToUpdate[lazyRouteProperty];
        let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based
        // on the route updates
        lazyRouteProperty !== "hasErrorBoundary";
        $0e856af10b3b08bf$export$c0e02632e14916fd(!isPropertyStaticallyDefined, 'Route "' + routeToUpdate.id + '" has a static property "' + lazyRouteProperty + '" ' + "defined but its lazy function is also returning a value for this property. " + ('The lazy route property "' + lazyRouteProperty + '" will be ignored.'));
        if (!isPropertyStaticallyDefined && !$0e856af10b3b08bf$var$immutableRouteKeys.has(lazyRouteProperty)) routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];
    }
    // Mutate the route with the provided updates.  Do this first so we pass
    // the updated version to mapRouteProperties
    Object.assign(routeToUpdate, routeUpdates);
    // Mutate the `hasErrorBoundary` property on the route based on the route
    // updates and remove the `lazy` function so we don't resolve the lazy
    // route again.
    Object.assign(routeToUpdate, $0e856af10b3b08bf$var$_extends({}, mapRouteProperties(routeToUpdate), {
        lazy: undefined
    }));
}
async function $0e856af10b3b08bf$var$callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, opts) {
    if (opts === void 0) opts = {};
    let resultType;
    let result;
    let onReject;
    let runHandler = (handler)=>{
        // Setup a promise we can race against so that abort signals short circuit
        let reject;
        let abortPromise = new Promise((_, r)=>reject = r);
        onReject = ()=>reject();
        request.signal.addEventListener("abort", onReject);
        return Promise.race([
            handler({
                request: request,
                params: match.params,
                context: opts.requestContext
            }),
            abortPromise
        ]);
    };
    try {
        let handler = match.route[type];
        if (match.route.lazy) {
            if (handler) {
                // Run statically defined handler in parallel with lazy()
                let handlerError;
                let values = await Promise.all([
                    // If the handler throws, don't let it immediately bubble out,
                    // since we need to let the lazy() execution finish so we know if this
                    // route has a boundary that can handle the error
                    runHandler(handler).catch((e)=>{
                        handlerError = e;
                    }),
                    $0e856af10b3b08bf$var$loadLazyRouteModule(match.route, mapRouteProperties, manifest)
                ]);
                if (handlerError) throw handlerError;
                result = values[0];
            } else {
                // Load lazy route module, then run any returned handler
                await $0e856af10b3b08bf$var$loadLazyRouteModule(match.route, mapRouteProperties, manifest);
                handler = match.route[type];
                if (handler) // Handler still run even if we got interrupted to maintain consistency
                // with un-abortable behavior of handler execution on non-lazy or
                // previously-lazy-loaded routes
                result = await runHandler(handler);
                else if (type === "action") {
                    let url = new URL(request.url);
                    let pathname = url.pathname + url.search;
                    throw $0e856af10b3b08bf$var$getInternalRouterError(405, {
                        method: request.method,
                        pathname: pathname,
                        routeId: match.route.id
                    });
                } else // lazy() route has no loader to run.  Short circuit here so we don't
                // hit the invariant below that errors on returning undefined.
                return {
                    type: $0e856af10b3b08bf$var$ResultType.data,
                    data: undefined
                };
            }
        } else if (!handler) {
            let url = new URL(request.url);
            let pathname = url.pathname + url.search;
            throw $0e856af10b3b08bf$var$getInternalRouterError(404, {
                pathname: pathname
            });
        } else result = await runHandler(handler);
        $0e856af10b3b08bf$export$3e9cee6b33872309(result !== undefined, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ('"' + match.route.id + "\" but didn't return anything from your `" + type + "` ") + "function. Please return a value or `null`.");
    } catch (e) {
        resultType = $0e856af10b3b08bf$var$ResultType.error;
        result = e;
    } finally{
        if (onReject) request.signal.removeEventListener("abort", onReject);
    }
    if ($0e856af10b3b08bf$var$isResponse(result)) {
        let status = result.status;
        // Process redirects
        if ($0e856af10b3b08bf$var$redirectStatusCodes.has(status)) {
            let location = result.headers.get("Location");
            $0e856af10b3b08bf$export$3e9cee6b33872309(location, "Redirects returned/thrown from loaders/actions must have a Location header");
            // Support relative routing in internal redirects
            if (!$0e856af10b3b08bf$var$ABSOLUTE_URL_REGEX.test(location)) location = $0e856af10b3b08bf$var$normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);
            else if (!opts.isStaticRequest) {
                // Strip off the protocol+origin for same-origin + same-basename absolute
                // redirects. If this is a static request, we can let it go back to the
                // browser as-is
                let currentUrl = new URL(request.url);
                let url = location.startsWith("//") ? new URL(currentUrl.protocol + location) : new URL(location);
                let isSameBasename = $0e856af10b3b08bf$export$b69e3301ce081aa3(url.pathname, basename) != null;
                if (url.origin === currentUrl.origin && isSameBasename) location = url.pathname + url.search + url.hash;
            }
            // Don't process redirects in the router during static requests requests.
            // Instead, throw the Response and let the server handle it with an HTTP
            // redirect.  We also update the Location header in place in this flow so
            // basename and relative routing is taken into account
            if (opts.isStaticRequest) {
                result.headers.set("Location", location);
                throw result;
            }
            return {
                type: $0e856af10b3b08bf$var$ResultType.redirect,
                status: status,
                location: location,
                revalidate: result.headers.get("X-Remix-Revalidate") !== null,
                reloadDocument: result.headers.get("X-Remix-Reload-Document") !== null
            };
        }
        // For SSR single-route requests, we want to hand Responses back directly
        // without unwrapping.  We do this with the QueryRouteResponse wrapper
        // interface so we can know whether it was returned or thrown
        if (opts.isRouteRequest) {
            let queryRouteResponse = {
                type: resultType === $0e856af10b3b08bf$var$ResultType.error ? $0e856af10b3b08bf$var$ResultType.error : $0e856af10b3b08bf$var$ResultType.data,
                response: result
            };
            throw queryRouteResponse;
        }
        let data;
        let contentType = result.headers.get("Content-Type");
        // Check between word boundaries instead of startsWith() due to the last
        // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type
        if (contentType && /\bapplication\/json\b/.test(contentType)) data = await result.json();
        else data = await result.text();
        if (resultType === $0e856af10b3b08bf$var$ResultType.error) return {
            type: resultType,
            error: new $0e856af10b3b08bf$export$6c6580e81da25755(status, result.statusText, data),
            headers: result.headers
        };
        return {
            type: $0e856af10b3b08bf$var$ResultType.data,
            data: data,
            statusCode: result.status,
            headers: result.headers
        };
    }
    if (resultType === $0e856af10b3b08bf$var$ResultType.error) return {
        type: resultType,
        error: result
    };
    if ($0e856af10b3b08bf$export$fbcedacb60443473(result)) {
        var _result$init, _result$init2;
        return {
            type: $0e856af10b3b08bf$var$ResultType.deferred,
            deferredData: result,
            statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,
            headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)
        };
    }
    return {
        type: $0e856af10b3b08bf$var$ResultType.data,
        data: result
    };
}
// Utility method for creating the Request instances for loaders/actions during
// client-side navigations and fetches.  During SSR we will always have a
// Request instance from the static handler (query/queryRoute)
function $0e856af10b3b08bf$var$createClientSideRequest(history, location, signal, submission) {
    let url = history.createURL($0e856af10b3b08bf$var$stripHashFromPath(location)).toString();
    let init = {
        signal: signal
    };
    if (submission && $0e856af10b3b08bf$var$isMutationMethod(submission.formMethod)) {
        let { formMethod: formMethod, formEncType: formEncType } = submission;
        // Didn't think we needed this but it turns out unlike other methods, patch
        // won't be properly normalized to uppercase and results in a 405 error.
        // See: https://fetch.spec.whatwg.org/#concept-method
        init.method = formMethod.toUpperCase();
        if (formEncType === "application/json") {
            init.headers = new Headers({
                "Content-Type": formEncType
            });
            init.body = JSON.stringify(submission.json);
        } else if (formEncType === "text/plain") // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)
        init.body = submission.text;
        else if (formEncType === "application/x-www-form-urlencoded" && submission.formData) // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)
        init.body = $0e856af10b3b08bf$var$convertFormDataToSearchParams(submission.formData);
        else // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)
        init.body = submission.formData;
    }
    return new Request(url, init);
}
function $0e856af10b3b08bf$var$convertFormDataToSearchParams(formData) {
    let searchParams = new URLSearchParams();
    for (let [key, value] of formData.entries())// https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs
    searchParams.append(key, typeof value === "string" ? value : value.name);
    return searchParams;
}
function $0e856af10b3b08bf$var$convertSearchParamsToFormData(searchParams) {
    let formData = new FormData();
    for (let [key, value] of searchParams.entries())formData.append(key, value);
    return formData;
}
function $0e856af10b3b08bf$var$processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {
    // Fill in loaderData/errors from our loaders
    let loaderData = {};
    let errors = null;
    let statusCode;
    let foundError = false;
    let loaderHeaders = {};
    // Process loader results into state.loaderData/state.errors
    results.forEach((result, index)=>{
        let id = matchesToLoad[index].route.id;
        $0e856af10b3b08bf$export$3e9cee6b33872309(!$0e856af10b3b08bf$var$isRedirectResult(result), "Cannot handle redirect results in processLoaderData");
        if ($0e856af10b3b08bf$var$isErrorResult(result)) {
            // Look upwards from the matched route for the closest ancestor
            // error boundary, defaulting to the root match
            let boundaryMatch = $0e856af10b3b08bf$var$findNearestBoundary(matches, id);
            let error = result.error;
            // If we have a pending action error, we report it at the highest-route
            // that throws a loader error, and then clear it out to indicate that
            // it was consumed
            if (pendingError) {
                error = Object.values(pendingError)[0];
                pendingError = undefined;
            }
            errors = errors || {};
            // Prefer higher error values if lower errors bubble to the same boundary
            if (errors[boundaryMatch.route.id] == null) errors[boundaryMatch.route.id] = error;
            // Clear our any prior loaderData for the throwing route
            loaderData[id] = undefined;
            // Once we find our first (highest) error, we set the status code and
            // prevent deeper status codes from overriding
            if (!foundError) {
                foundError = true;
                statusCode = $0e856af10b3b08bf$export$972111febbeef05b(result.error) ? result.error.status : 500;
            }
            if (result.headers) loaderHeaders[id] = result.headers;
        } else {
            if ($0e856af10b3b08bf$var$isDeferredResult(result)) {
                activeDeferreds.set(id, result.deferredData);
                loaderData[id] = result.deferredData.data;
            } else loaderData[id] = result.data;
            // Error status codes always override success status codes, but if all
            // loaders are successful we take the deepest status code.
            if (result.statusCode != null && result.statusCode !== 200 && !foundError) statusCode = result.statusCode;
            if (result.headers) loaderHeaders[id] = result.headers;
        }
    });
    // If we didn't consume the pending action error (i.e., all loaders
    // resolved), then consume it here.  Also clear out any loaderData for the
    // throwing route
    if (pendingError) {
        errors = pendingError;
        loaderData[Object.keys(pendingError)[0]] = undefined;
    }
    return {
        loaderData: loaderData,
        errors: errors,
        statusCode: statusCode || 200,
        loaderHeaders: loaderHeaders
    };
}
function $0e856af10b3b08bf$var$processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {
    let { loaderData: loaderData, errors: errors } = $0e856af10b3b08bf$var$processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);
    // Process results from our revalidating fetchers
    for(let index = 0; index < revalidatingFetchers.length; index++){
        let { key: key, match: match, controller: controller } = revalidatingFetchers[index];
        $0e856af10b3b08bf$export$3e9cee6b33872309(fetcherResults !== undefined && fetcherResults[index] !== undefined, "Did not find corresponding fetcher result");
        let result = fetcherResults[index];
        // Process fetcher non-redirect errors
        if (controller && controller.signal.aborted) continue;
        else if ($0e856af10b3b08bf$var$isErrorResult(result)) {
            let boundaryMatch = $0e856af10b3b08bf$var$findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);
            if (!(errors && errors[boundaryMatch.route.id])) errors = $0e856af10b3b08bf$var$_extends({}, errors, {
                [boundaryMatch.route.id]: result.error
            });
            state.fetchers.delete(key);
        } else if ($0e856af10b3b08bf$var$isRedirectResult(result)) // Should never get here, redirects should get processed above, but we
        // keep this to type narrow to a success result in the else
        $0e856af10b3b08bf$export$3e9cee6b33872309(false, "Unhandled fetcher revalidation redirect");
        else if ($0e856af10b3b08bf$var$isDeferredResult(result)) // Should never get here, deferred data should be awaited for fetchers
        // in resolveDeferredResults
        $0e856af10b3b08bf$export$3e9cee6b33872309(false, "Unhandled fetcher deferred data");
        else {
            let doneFetcher = $0e856af10b3b08bf$var$getDoneFetcher(result.data);
            state.fetchers.set(key, doneFetcher);
        }
    }
    return {
        loaderData: loaderData,
        errors: errors
    };
}
function $0e856af10b3b08bf$var$mergeLoaderData(loaderData, newLoaderData, matches, errors) {
    let mergedLoaderData = $0e856af10b3b08bf$var$_extends({}, newLoaderData);
    for (let match of matches){
        let id = match.route.id;
        if (newLoaderData.hasOwnProperty(id)) {
            if (newLoaderData[id] !== undefined) mergedLoaderData[id] = newLoaderData[id];
        } else if (loaderData[id] !== undefined && match.route.loader) // Preserve existing keys not included in newLoaderData and where a loader
        // wasn't removed by HMR
        mergedLoaderData[id] = loaderData[id];
        if (errors && errors.hasOwnProperty(id)) break;
    }
    return mergedLoaderData;
}
// Find the nearest error boundary, looking upwards from the leaf route (or the
// route specified by routeId) for the closest ancestor error boundary,
// defaulting to the root match
function $0e856af10b3b08bf$var$findNearestBoundary(matches, routeId) {
    let eligibleMatches = routeId ? matches.slice(0, matches.findIndex((m)=>m.route.id === routeId) + 1) : [
        ...matches
    ];
    return eligibleMatches.reverse().find((m)=>m.route.hasErrorBoundary === true) || matches[0];
}
function $0e856af10b3b08bf$var$getShortCircuitMatches(routes) {
    // Prefer a root layout route if present, otherwise shim in a route object
    let route = routes.length === 1 ? routes[0] : routes.find((r)=>r.index || !r.path || r.path === "/") || {
        id: "__shim-error-route__"
    };
    return {
        matches: [
            {
                params: {},
                pathname: "",
                pathnameBase: "",
                route: route
            }
        ],
        route: route
    };
}
function $0e856af10b3b08bf$var$getInternalRouterError(status, _temp5) {
    let { pathname: pathname, routeId: routeId, method: method, type: type } = _temp5 === void 0 ? {} : _temp5;
    let statusText = "Unknown Server Error";
    let errorMessage = "Unknown @remix-run/router error";
    if (status === 400) {
        statusText = "Bad Request";
        if (method && pathname && routeId) errorMessage = "You made a " + method + ' request to "' + pathname + '" but ' + ('did not provide a `loader` for route "' + routeId + '", ') + "so there is no way to handle the request.";
        else if (type === "defer-action") errorMessage = "defer() is not supported in actions";
        else if (type === "invalid-body") errorMessage = "Unable to encode submission body";
    } else if (status === 403) {
        statusText = "Forbidden";
        errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"';
    } else if (status === 404) {
        statusText = "Not Found";
        errorMessage = 'No route matches URL "' + pathname + '"';
    } else if (status === 405) {
        statusText = "Method Not Allowed";
        if (method && pathname && routeId) errorMessage = "You made a " + method.toUpperCase() + ' request to "' + pathname + '" but ' + ('did not provide an `action` for route "' + routeId + '", ') + "so there is no way to handle the request.";
        else if (method) errorMessage = 'Invalid request method "' + method.toUpperCase() + '"';
    }
    return new $0e856af10b3b08bf$export$6c6580e81da25755(status || 500, statusText, new Error(errorMessage), true);
}
// Find any returned redirect errors, starting from the lowest match
function $0e856af10b3b08bf$var$findRedirect(results) {
    for(let i = results.length - 1; i >= 0; i--){
        let result = results[i];
        if ($0e856af10b3b08bf$var$isRedirectResult(result)) return {
            result: result,
            idx: i
        };
    }
}
function $0e856af10b3b08bf$var$stripHashFromPath(path) {
    let parsedPath = typeof path === "string" ? $0e856af10b3b08bf$export$8ccf933b0513f8d0(path) : path;
    return $0e856af10b3b08bf$export$fe53371bee54353d($0e856af10b3b08bf$var$_extends({}, parsedPath, {
        hash: ""
    }));
}
function $0e856af10b3b08bf$var$isHashChangeOnly(a, b) {
    if (a.pathname !== b.pathname || a.search !== b.search) return false;
    if (a.hash === "") // /page -> /page#hash
    return b.hash !== "";
    else if (a.hash === b.hash) // /page#hash -> /page#hash
    return true;
    else if (b.hash !== "") // /page#hash -> /page#other
    return true;
    // If the hash is removed the browser will re-perform a request to the server
    // /page#hash -> /page
    return false;
}
function $0e856af10b3b08bf$var$isDeferredResult(result) {
    return result.type === $0e856af10b3b08bf$var$ResultType.deferred;
}
function $0e856af10b3b08bf$var$isErrorResult(result) {
    return result.type === $0e856af10b3b08bf$var$ResultType.error;
}
function $0e856af10b3b08bf$var$isRedirectResult(result) {
    return (result && result.type) === $0e856af10b3b08bf$var$ResultType.redirect;
}
function $0e856af10b3b08bf$export$fbcedacb60443473(value) {
    let deferred = value;
    return deferred && typeof deferred === "object" && typeof deferred.data === "object" && typeof deferred.subscribe === "function" && typeof deferred.cancel === "function" && typeof deferred.resolveData === "function";
}
function $0e856af10b3b08bf$var$isResponse(value) {
    return value != null && typeof value.status === "number" && typeof value.statusText === "string" && typeof value.headers === "object" && typeof value.body !== "undefined";
}
function $0e856af10b3b08bf$var$isRedirectResponse(result) {
    if (!$0e856af10b3b08bf$var$isResponse(result)) return false;
    let status = result.status;
    let location = result.headers.get("Location");
    return status >= 300 && status <= 399 && location != null;
}
function $0e856af10b3b08bf$var$isQueryRouteResponse(obj) {
    return obj && $0e856af10b3b08bf$var$isResponse(obj.response) && (obj.type === $0e856af10b3b08bf$var$ResultType.data || obj.type === $0e856af10b3b08bf$var$ResultType.error);
}
function $0e856af10b3b08bf$var$isValidMethod(method) {
    return $0e856af10b3b08bf$var$validRequestMethods.has(method.toLowerCase());
}
function $0e856af10b3b08bf$var$isMutationMethod(method) {
    return $0e856af10b3b08bf$var$validMutationMethods.has(method.toLowerCase());
}
async function $0e856af10b3b08bf$var$resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {
    for(let index = 0; index < results.length; index++){
        let result = results[index];
        let match = matchesToLoad[index];
        // If we don't have a match, then we can have a deferred result to do
        // anything with.  This is for revalidating fetchers where the route was
        // removed during HMR
        if (!match) continue;
        let currentMatch = currentMatches.find((m)=>m.route.id === match.route.id);
        let isRevalidatingLoader = currentMatch != null && !$0e856af10b3b08bf$var$isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;
        if ($0e856af10b3b08bf$var$isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {
            // Note: we do not have to touch activeDeferreds here since we race them
            // against the signal in resolveDeferredData and they'll get aborted
            // there if needed
            let signal = signals[index];
            $0e856af10b3b08bf$export$3e9cee6b33872309(signal, "Expected an AbortSignal for revalidating fetcher deferred result");
            await $0e856af10b3b08bf$var$resolveDeferredData(result, signal, isFetcher).then((result)=>{
                if (result) results[index] = result || results[index];
            });
        }
    }
}
async function $0e856af10b3b08bf$var$resolveDeferredData(result, signal, unwrap) {
    if (unwrap === void 0) unwrap = false;
    let aborted = await result.deferredData.resolveData(signal);
    if (aborted) return;
    if (unwrap) try {
        return {
            type: $0e856af10b3b08bf$var$ResultType.data,
            data: result.deferredData.unwrappedData
        };
    } catch (e) {
        // Handle any TrackedPromise._error values encountered while unwrapping
        return {
            type: $0e856af10b3b08bf$var$ResultType.error,
            error: e
        };
    }
    return {
        type: $0e856af10b3b08bf$var$ResultType.data,
        data: result.deferredData.data
    };
}
function $0e856af10b3b08bf$var$hasNakedIndexQuery(search) {
    return new URLSearchParams(search).getAll("index").some((v)=>v === "");
}
function $0e856af10b3b08bf$var$getTargetMatch(matches, location) {
    let search = typeof location === "string" ? $0e856af10b3b08bf$export$8ccf933b0513f8d0(location).search : location.search;
    if (matches[matches.length - 1].route.index && $0e856af10b3b08bf$var$hasNakedIndexQuery(search || "")) // Return the leaf index route when index is present
    return matches[matches.length - 1];
    // Otherwise grab the deepest "path contributing" match (ignoring index and
    // pathless layout routes)
    let pathMatches = $0e856af10b3b08bf$export$90ba53ce1c7fdff2(matches);
    return pathMatches[pathMatches.length - 1];
}
function $0e856af10b3b08bf$var$getSubmissionFromNavigation(navigation) {
    let { formMethod: formMethod, formAction: formAction, formEncType: formEncType, text: text, formData: formData, json: json } = navigation;
    if (!formMethod || !formAction || !formEncType) return;
    if (text != null) return {
        formMethod: formMethod,
        formAction: formAction,
        formEncType: formEncType,
        formData: undefined,
        json: undefined,
        text: text
    };
    else if (formData != null) return {
        formMethod: formMethod,
        formAction: formAction,
        formEncType: formEncType,
        formData: formData,
        json: undefined,
        text: undefined
    };
    else if (json !== undefined) return {
        formMethod: formMethod,
        formAction: formAction,
        formEncType: formEncType,
        formData: undefined,
        json: json,
        text: undefined
    };
}
function $0e856af10b3b08bf$var$getLoadingNavigation(location, submission) {
    if (submission) {
        let navigation = {
            state: "loading",
            location: location,
            formMethod: submission.formMethod,
            formAction: submission.formAction,
            formEncType: submission.formEncType,
            formData: submission.formData,
            json: submission.json,
            text: submission.text
        };
        return navigation;
    } else {
        let navigation = {
            state: "loading",
            location: location,
            formMethod: undefined,
            formAction: undefined,
            formEncType: undefined,
            formData: undefined,
            json: undefined,
            text: undefined
        };
        return navigation;
    }
}
function $0e856af10b3b08bf$var$getSubmittingNavigation(location, submission) {
    let navigation = {
        state: "submitting",
        location: location,
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text
    };
    return navigation;
}
function $0e856af10b3b08bf$var$getLoadingFetcher(submission, data) {
    if (submission) {
        let fetcher = {
            state: "loading",
            formMethod: submission.formMethod,
            formAction: submission.formAction,
            formEncType: submission.formEncType,
            formData: submission.formData,
            json: submission.json,
            text: submission.text,
            data: data
        };
        return fetcher;
    } else {
        let fetcher = {
            state: "loading",
            formMethod: undefined,
            formAction: undefined,
            formEncType: undefined,
            formData: undefined,
            json: undefined,
            text: undefined,
            data: data
        };
        return fetcher;
    }
}
function $0e856af10b3b08bf$var$getSubmittingFetcher(submission, existingFetcher) {
    let fetcher = {
        state: "submitting",
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text,
        data: existingFetcher ? existingFetcher.data : undefined
    };
    return fetcher;
}
function $0e856af10b3b08bf$var$getDoneFetcher(data) {
    let fetcher = {
        state: "idle",
        formMethod: undefined,
        formAction: undefined,
        formEncType: undefined,
        formData: undefined,
        json: undefined,
        text: undefined,
        data: data
    };
    return fetcher;
}
function $0e856af10b3b08bf$var$restoreAppliedTransitions(_window, transitions) {
    try {
        let sessionPositions = _window.sessionStorage.getItem($0e856af10b3b08bf$var$TRANSITIONS_STORAGE_KEY);
        if (sessionPositions) {
            let json = JSON.parse(sessionPositions);
            for (let [k, v] of Object.entries(json || {}))if (v && Array.isArray(v)) transitions.set(k, new Set(v || []));
        }
    } catch (e) {
    // no-op, use default empty object
    }
}
function $0e856af10b3b08bf$var$persistAppliedTransitions(_window, transitions) {
    if (transitions.size > 0) {
        let json = {};
        for (let [k, v] of transitions)json[k] = [
            ...v
        ];
        try {
            _window.sessionStorage.setItem($0e856af10b3b08bf$var$TRANSITIONS_STORAGE_KEY, JSON.stringify(json));
        } catch (error) {
            $0e856af10b3b08bf$export$c0e02632e14916fd(false, "Failed to save applied view transitions in sessionStorage (" + error + ").");
        }
    }
}


function $5b1ea468d903474a$var$_extends() {
    $5b1ea468d903474a$var$_extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return $5b1ea468d903474a$var$_extends.apply(this, arguments);
}
// Create react-specific types from the agnostic types in @remix-run/router to
// export from react-router
const $5b1ea468d903474a$export$3add0d5dce533e2e = /*#__PURE__*/ $d4J5n.createContext(null);
const $5b1ea468d903474a$export$145dfa71566a64dc = /*#__PURE__*/ $d4J5n.createContext(null);
const $5b1ea468d903474a$var$AwaitContext = /*#__PURE__*/ $d4J5n.createContext(null);
/**
 * A Navigator is a "location changer"; it's how you get to different locations.
 *
 * Every history instance conforms to the Navigator interface, but the
 * distinction is useful primarily when it comes to the low-level `<Router>` API
 * where both the location and a navigator must be provided separately in order
 * to avoid "tearing" that may occur in a suspense-enabled app if the action
 * and/or location were to be read directly from the history instance.
 */ const $5b1ea468d903474a$export$26749e8557646306 = /*#__PURE__*/ $d4J5n.createContext(null);
const $5b1ea468d903474a$export$c7914228fb69b0f5 = /*#__PURE__*/ $d4J5n.createContext(null);
const $5b1ea468d903474a$export$9072aa6dd1f93057 = /*#__PURE__*/ $d4J5n.createContext({
    outlet: null,
    matches: [],
    isDataRoute: false
});
const $5b1ea468d903474a$var$RouteErrorContext = /*#__PURE__*/ $d4J5n.createContext(null);
/**
 * Returns the full href for the given "to" value. This is useful for building
 * custom links that are also accessible and preserve right-click behavior.
 *
 * @see https://reactrouter.com/hooks/use-href
 */ function $5b1ea468d903474a$export$b66bb29c5006f12f(to, _temp) {
    let { relative: relative } = _temp === void 0 ? {} : _temp;
    !$5b1ea468d903474a$export$9c954a9d03d32f4a() && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    let { basename: basename, navigator: navigator } = $d4J5n.useContext($5b1ea468d903474a$export$26749e8557646306);
    let { hash: hash, pathname: pathname, search: search } = $5b1ea468d903474a$export$e75d2a2d1b3c245b(to, {
        relative: relative
    });
    let joinedPathname = pathname;
    // If we're operating within a basename, prepend it to the pathname prior
    // to creating the href.  If this is a root navigation, then just use the raw
    // basename which allows the basename to have full control over the presence
    // of a trailing slash on root links
    if (basename !== "/") joinedPathname = pathname === "/" ? basename : (0, $0e856af10b3b08bf$export$86d9a7913e44197e)([
        basename,
        pathname
    ]);
    return navigator.createHref({
        pathname: joinedPathname,
        search: search,
        hash: hash
    });
}
/**
 * Returns true if this component is a descendant of a `<Router>`.
 *
 * @see https://reactrouter.com/hooks/use-in-router-context
 */ function $5b1ea468d903474a$export$9c954a9d03d32f4a() {
    return $d4J5n.useContext($5b1ea468d903474a$export$c7914228fb69b0f5) != null;
}
/**
 * Returns the current location object, which represents the current URL in web
 * browsers.
 *
 * Note: If you're using this it may mean you're doing some of your own
 * "routing" in your app, and we'd like to know what your use case is. We may
 * be able to provide something higher-level to better suit your needs.
 *
 * @see https://reactrouter.com/hooks/use-location
 */ function $5b1ea468d903474a$export$45d76561a5302f2b() {
    !$5b1ea468d903474a$export$9c954a9d03d32f4a() && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    return $d4J5n.useContext($5b1ea468d903474a$export$c7914228fb69b0f5).location;
}
/**
 * Returns the current navigation action which describes how the router came to
 * the current location, either by a pop, push, or replace on the history stack.
 *
 * @see https://reactrouter.com/hooks/use-navigation-type
 */ function $5b1ea468d903474a$export$1b3f31771c5d07c() {
    return $d4J5n.useContext($5b1ea468d903474a$export$c7914228fb69b0f5).navigationType;
}
/**
 * Returns a PathMatch object if the given pattern matches the current URL.
 * This is useful for components that need to know "active" state, e.g.
 * `<NavLink>`.
 *
 * @see https://reactrouter.com/hooks/use-match
 */ function $5b1ea468d903474a$export$6c330e8992e8a295(pattern) {
    !$5b1ea468d903474a$export$9c954a9d03d32f4a() && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    let { pathname: pathname } = $5b1ea468d903474a$export$45d76561a5302f2b();
    return $d4J5n.useMemo(()=>(0, $0e856af10b3b08bf$export$81336c211d5ff295)(pattern, pathname), [
        pathname,
        pattern
    ]);
}
/**
 * The interface for the navigate() function returned from useNavigate().
 */ const $5b1ea468d903474a$var$navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
// Mute warnings for calls to useNavigate in SSR environments
function $5b1ea468d903474a$var$useIsomorphicLayoutEffect(cb) {
    let isStatic = $d4J5n.useContext($5b1ea468d903474a$export$26749e8557646306).static;
    if (!isStatic) // We should be able to get rid of this once react 18.3 is released
    // See: https://github.com/facebook/react/pull/26395
    // eslint-disable-next-line react-hooks/rules-of-hooks
    $d4J5n.useLayoutEffect(cb);
}
/**
 * Returns an imperative method for changing the location. Used by `<Link>`s, but
 * may also be used by other elements to change the location.
 *
 * @see https://reactrouter.com/hooks/use-navigate
 */ function $5b1ea468d903474a$export$9770f232ac06a008() {
    let { isDataRoute: isDataRoute } = $d4J5n.useContext($5b1ea468d903474a$export$9072aa6dd1f93057);
    // Conditional usage is OK here because the usage of a data router is static
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return isDataRoute ? $5b1ea468d903474a$var$useNavigateStable() : $5b1ea468d903474a$var$useNavigateUnstable();
}
function $5b1ea468d903474a$var$useNavigateUnstable() {
    !$5b1ea468d903474a$export$9c954a9d03d32f4a() && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    let dataRouterContext = $d4J5n.useContext($5b1ea468d903474a$export$3add0d5dce533e2e);
    let { basename: basename, navigator: navigator } = $d4J5n.useContext($5b1ea468d903474a$export$26749e8557646306);
    let { matches: matches } = $d4J5n.useContext($5b1ea468d903474a$export$9072aa6dd1f93057);
    let { pathname: locationPathname } = $5b1ea468d903474a$export$45d76561a5302f2b();
    let routePathnamesJson = JSON.stringify((0, $0e856af10b3b08bf$export$90ba53ce1c7fdff2)(matches).map((match)=>match.pathnameBase));
    let activeRef = $d4J5n.useRef(false);
    $5b1ea468d903474a$var$useIsomorphicLayoutEffect(()=>{
        activeRef.current = true;
    });
    let navigate = $d4J5n.useCallback(function(to, options) {
        if (options === void 0) options = {};
        // Short circuit here since if this happens on first render the navigate
        // is useless because we haven't wired up our history listener yet
        if (!activeRef.current) return;
        if (typeof to === "number") {
            navigator.go(to);
            return;
        }
        let path = (0, $0e856af10b3b08bf$export$cae722b0cc860f13)(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
        // If we're operating within a basename, prepend it to the pathname prior
        // to handing off to history (but only if we're not in a data router,
        // otherwise it'll prepend the basename inside of the router).
        // If this is a root navigation, then we navigate to the raw basename
        // which allows the basename to have full control over the presence of a
        // trailing slash on root links
        if (dataRouterContext == null && basename !== "/") path.pathname = path.pathname === "/" ? basename : (0, $0e856af10b3b08bf$export$86d9a7913e44197e)([
            basename,
            path.pathname
        ]);
        (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);
    }, [
        basename,
        navigator,
        routePathnamesJson,
        locationPathname,
        dataRouterContext
    ]);
    return navigate;
}
const $5b1ea468d903474a$var$OutletContext = /*#__PURE__*/ $d4J5n.createContext(null);
/**
 * Returns the context (if provided) for the child route at this level of the route
 * hierarchy.
 * @see https://reactrouter.com/hooks/use-outlet-context
 */ function $5b1ea468d903474a$export$4138103a3ae699cc() {
    return $d4J5n.useContext($5b1ea468d903474a$var$OutletContext);
}
/**
 * Returns the element for the child route at this level of the route
 * hierarchy. Used internally by `<Outlet>` to render child routes.
 *
 * @see https://reactrouter.com/hooks/use-outlet
 */ function $5b1ea468d903474a$export$a3be3530d8e40d0b(context) {
    let outlet = $d4J5n.useContext($5b1ea468d903474a$export$9072aa6dd1f93057).outlet;
    if (outlet) return /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$var$OutletContext.Provider, {
        value: context
    }, outlet);
    return outlet;
}
/**
 * Returns an object of key/value pairs of the dynamic params from the current
 * URL that were matched by the route path.
 *
 * @see https://reactrouter.com/hooks/use-params
 */ function $5b1ea468d903474a$export$99eaa27ddbbb95ef() {
    let { matches: matches } = $d4J5n.useContext($5b1ea468d903474a$export$9072aa6dd1f93057);
    let routeMatch = matches[matches.length - 1];
    return routeMatch ? routeMatch.params : {};
}
/**
 * Resolves the pathname of the given `to` value against the current location.
 *
 * @see https://reactrouter.com/hooks/use-resolved-path
 */ function $5b1ea468d903474a$export$e75d2a2d1b3c245b(to, _temp2) {
    let { relative: relative } = _temp2 === void 0 ? {} : _temp2;
    let { matches: matches } = $d4J5n.useContext($5b1ea468d903474a$export$9072aa6dd1f93057);
    let { pathname: locationPathname } = $5b1ea468d903474a$export$45d76561a5302f2b();
    let routePathnamesJson = JSON.stringify((0, $0e856af10b3b08bf$export$90ba53ce1c7fdff2)(matches).map((match)=>match.pathnameBase));
    return $d4J5n.useMemo(()=>(0, $0e856af10b3b08bf$export$cae722b0cc860f13)(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [
        to,
        routePathnamesJson,
        locationPathname,
        relative
    ]);
}
/**
 * Returns the element of the route that matched the current location, prepared
 * with the correct context to render the remainder of the route tree. Route
 * elements in the tree must render an `<Outlet>` to render their child route's
 * element.
 *
 * @see https://reactrouter.com/hooks/use-routes
 */ function $5b1ea468d903474a$export$5d3fca4a98652595(routes, locationArg) {
    return $5b1ea468d903474a$export$5fcee62552a12fbf(routes, locationArg);
}
// Internal implementation with accept optional param for RouterProvider usage
function $5b1ea468d903474a$export$5fcee62552a12fbf(routes, locationArg, dataRouterState) {
    !$5b1ea468d903474a$export$9c954a9d03d32f4a() && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    let { navigator: navigator } = $d4J5n.useContext($5b1ea468d903474a$export$26749e8557646306);
    let { matches: parentMatches } = $d4J5n.useContext($5b1ea468d903474a$export$9072aa6dd1f93057);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    let locationFromContext = $5b1ea468d903474a$export$45d76561a5302f2b();
    let location;
    if (locationArg) {
        var _parsedLocationArg$pa;
        let parsedLocationArg = typeof locationArg === "string" ? (0, $0e856af10b3b08bf$export$8ccf933b0513f8d0)(locationArg) : locationArg;
        !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
        location = parsedLocationArg;
    } else location = locationFromContext;
    let pathname = location.pathname || "/";
    let remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
    let matches = (0, $0e856af10b3b08bf$export$2708184779ceb39d)(routes, {
        pathname: remainingPathname
    });
    let renderedMatches = $5b1ea468d903474a$var$_renderMatches(matches && matches.map((match)=>Object.assign({}, match, {
            params: Object.assign({}, parentParams, match.params),
            pathname: (0, $0e856af10b3b08bf$export$86d9a7913e44197e)([
                parentPathnameBase,
                // Re-encode pathnames that were decoded inside matchRoutes
                navigator.encodeLocation ? navigator.encodeLocation(match.pathname).pathname : match.pathname
            ]),
            pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : (0, $0e856af10b3b08bf$export$86d9a7913e44197e)([
                parentPathnameBase,
                // Re-encode pathnames that were decoded inside matchRoutes
                navigator.encodeLocation ? navigator.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
            ])
        })), parentMatches, dataRouterState);
    // When a user passes in a `locationArg`, the associated routes need to
    // be wrapped in a new `LocationContext.Provider` in order for `useLocation`
    // to use the scoped location instead of the global location.
    if (locationArg && renderedMatches) return /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$export$c7914228fb69b0f5.Provider, {
        value: {
            location: $5b1ea468d903474a$var$_extends({
                pathname: "/",
                search: "",
                hash: "",
                state: null,
                key: "default"
            }, location),
            navigationType: (0, $0e856af10b3b08bf$export$e19cd5f9376f8cee).Pop
        }
    }, renderedMatches);
    return renderedMatches;
}
function $5b1ea468d903474a$var$DefaultErrorComponent() {
    let error = $5b1ea468d903474a$export$ed527bf60f6e05f2();
    let message = (0, $0e856af10b3b08bf$export$972111febbeef05b)(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
    let stack = error instanceof Error ? error.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = {
        padding: "0.5rem",
        backgroundColor: lightgrey
    };
    let codeStyles = {
        padding: "2px 4px",
        backgroundColor: lightgrey
    };
    let devInfo = null;
    return /*#__PURE__*/ $d4J5n.createElement($d4J5n.Fragment, null, /*#__PURE__*/ $d4J5n.createElement("h2", null, "Unexpected Application Error!"), /*#__PURE__*/ $d4J5n.createElement("h3", {
        style: {
            fontStyle: "italic"
        }
    }, message), stack ? /*#__PURE__*/ $d4J5n.createElement("pre", {
        style: preStyles
    }, stack) : null, devInfo);
}
const $5b1ea468d903474a$var$defaultErrorElement = /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$var$DefaultErrorComponent, null);
class $5b1ea468d903474a$var$RenderErrorBoundary extends $d4J5n.Component {
    constructor(props){
        super(props);
        this.state = {
            location: props.location,
            revalidation: props.revalidation,
            error: props.error
        };
    }
    static getDerivedStateFromError(error) {
        return {
            error: error
        };
    }
    static getDerivedStateFromProps(props, state) {
        // When we get into an error state, the user will likely click "back" to the
        // previous page that didn't have an error. Because this wraps the entire
        // application, that will have no effect--the error page continues to display.
        // This gives us a mechanism to recover from the error when the location changes.
        //
        // Whether we're in an error state or not, we update the location in state
        // so that when we are in an error state, it gets reset when a new location
        // comes in and the user recovers from the error.
        if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") return {
            error: props.error,
            location: props.location,
            revalidation: props.revalidation
        };
        // If we're not changing locations, preserve the location but still surface
        // any new errors that may come through. We retain the existing error, we do
        // this because the error provided from the app state may be cleared without
        // the location changing.
        return {
            error: props.error || state.error,
            location: state.location,
            revalidation: props.revalidation || state.revalidation
        };
    }
    componentDidCatch(error, errorInfo) {
        console.error("React Router caught the following error during render", error, errorInfo);
    }
    render() {
        return this.state.error ? /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$export$9072aa6dd1f93057.Provider, {
            value: this.props.routeContext
        }, /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$var$RouteErrorContext.Provider, {
            value: this.state.error,
            children: this.props.component
        })) : this.props.children;
    }
}
function $5b1ea468d903474a$var$RenderedRoute(_ref) {
    let { routeContext: routeContext, match: match, children: children } = _ref;
    let dataRouterContext = $d4J5n.useContext($5b1ea468d903474a$export$3add0d5dce533e2e);
    // Track how deep we got in our render pass to emulate SSR componentDidCatch
    // in a DataStaticRouter
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
    return /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$export$9072aa6dd1f93057.Provider, {
        value: routeContext
    }, children);
}
function $5b1ea468d903474a$var$_renderMatches(matches, parentMatches, dataRouterState) {
    var _dataRouterState2;
    if (parentMatches === void 0) parentMatches = [];
    if (dataRouterState === void 0) dataRouterState = null;
    if (matches == null) {
        var _dataRouterState;
        if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) // Don't bail if we have data router errors so we can render them in the
        // boundary.  Use the pre-matched (or shimmed) matches
        matches = dataRouterState.matches;
        else return null;
    }
    let renderedMatches = matches;
    // If we have data errors, trim matches to the highest error boundary
    let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
    if (errors != null) {
        let errorIndex = renderedMatches.findIndex((m)=>m.route.id && (errors == null ? void 0 : errors[m.route.id]));
        !(errorIndex >= 0) && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
        renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
    }
    return renderedMatches.reduceRight((outlet, match, index)=>{
        let error = match.route.id ? errors == null ? void 0 : errors[match.route.id] : null;
        // Only data routers handle errors
        let errorElement = null;
        if (dataRouterState) errorElement = match.route.errorElement || $5b1ea468d903474a$var$defaultErrorElement;
        let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));
        let getChildren = ()=>{
            let children;
            if (error) children = errorElement;
            else if (match.route.Component) // Note: This is a de-optimized path since React won't re-use the
            // ReactElement since it's identity changes with each new
            // React.createElement call.  We keep this so folks can use
            // `<Route Component={...}>` in `<Routes>` but generally `Component`
            // usage is only advised in `RouterProvider` when we can convert it to
            // `element` ahead of time.
            children = /*#__PURE__*/ $d4J5n.createElement(match.route.Component, null);
            else if (match.route.element) children = match.route.element;
            else children = outlet;
            return /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$var$RenderedRoute, {
                match: match,
                routeContext: {
                    outlet: outlet,
                    matches: matches,
                    isDataRoute: dataRouterState != null
                },
                children: children
            });
        };
        // Only wrap in an error boundary within data router usages when we have an
        // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to
        // an ancestor ErrorBoundary/errorElement
        return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$var$RenderErrorBoundary, {
            location: dataRouterState.location,
            revalidation: dataRouterState.revalidation,
            component: errorElement,
            error: error,
            children: getChildren(),
            routeContext: {
                outlet: null,
                matches: matches,
                isDataRoute: true
            }
        }) : getChildren();
    }, null);
}
var $5b1ea468d903474a$var$DataRouterHook = /*#__PURE__*/ function(DataRouterHook) {
    DataRouterHook["UseBlocker"] = "useBlocker";
    DataRouterHook["UseRevalidator"] = "useRevalidator";
    DataRouterHook["UseNavigateStable"] = "useNavigate";
    return DataRouterHook;
}($5b1ea468d903474a$var$DataRouterHook || {});
var $5b1ea468d903474a$var$DataRouterStateHook = /*#__PURE__*/ function(DataRouterStateHook) {
    DataRouterStateHook["UseBlocker"] = "useBlocker";
    DataRouterStateHook["UseLoaderData"] = "useLoaderData";
    DataRouterStateHook["UseActionData"] = "useActionData";
    DataRouterStateHook["UseRouteError"] = "useRouteError";
    DataRouterStateHook["UseNavigation"] = "useNavigation";
    DataRouterStateHook["UseRouteLoaderData"] = "useRouteLoaderData";
    DataRouterStateHook["UseMatches"] = "useMatches";
    DataRouterStateHook["UseRevalidator"] = "useRevalidator";
    DataRouterStateHook["UseNavigateStable"] = "useNavigate";
    DataRouterStateHook["UseRouteId"] = "useRouteId";
    return DataRouterStateHook;
}($5b1ea468d903474a$var$DataRouterStateHook || {});
function $5b1ea468d903474a$var$getDataRouterConsoleError(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
}
function $5b1ea468d903474a$var$useDataRouterContext(hookName) {
    let ctx = $d4J5n.useContext($5b1ea468d903474a$export$3add0d5dce533e2e);
    !ctx && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    return ctx;
}
function $5b1ea468d903474a$var$useDataRouterState(hookName) {
    let state = $d4J5n.useContext($5b1ea468d903474a$export$145dfa71566a64dc);
    !state && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    return state;
}
function $5b1ea468d903474a$var$useRouteContext(hookName) {
    let route = $d4J5n.useContext($5b1ea468d903474a$export$9072aa6dd1f93057);
    !route && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    return route;
}
// Internal version with hookName-aware debugging
function $5b1ea468d903474a$var$useCurrentRouteId(hookName) {
    let route = $5b1ea468d903474a$var$useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    !thisRoute.route.id && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    return thisRoute.route.id;
}
/**
 * Returns the ID for the nearest contextual route
 */ function $5b1ea468d903474a$export$5fc8298006ad9e58() {
    return $5b1ea468d903474a$var$useCurrentRouteId($5b1ea468d903474a$var$DataRouterStateHook.UseRouteId);
}
/**
 * Returns the current navigation, defaulting to an "idle" navigation when
 * no navigation is in progress
 */ function $5b1ea468d903474a$export$d0fd4b7106de2769() {
    let state = $5b1ea468d903474a$var$useDataRouterState($5b1ea468d903474a$var$DataRouterStateHook.UseNavigation);
    return state.navigation;
}
/**
 * Returns a revalidate function for manually triggering revalidation, as well
 * as the current state of any manual revalidations
 */ function $5b1ea468d903474a$export$600dc272ed516c15() {
    let dataRouterContext = $5b1ea468d903474a$var$useDataRouterContext($5b1ea468d903474a$var$DataRouterHook.UseRevalidator);
    let state = $5b1ea468d903474a$var$useDataRouterState($5b1ea468d903474a$var$DataRouterStateHook.UseRevalidator);
    return $d4J5n.useMemo(()=>({
            revalidate: dataRouterContext.router.revalidate,
            state: state.revalidation
        }), [
        dataRouterContext.router.revalidate,
        state.revalidation
    ]);
}
/**
 * Returns the active route matches, useful for accessing loaderData for
 * parent/child routes or the route "handle" property
 */ function $5b1ea468d903474a$export$2378eb7f5ff86053() {
    let { matches: matches, loaderData: loaderData } = $5b1ea468d903474a$var$useDataRouterState($5b1ea468d903474a$var$DataRouterStateHook.UseMatches);
    return $d4J5n.useMemo(()=>matches.map((m)=>(0, $0e856af10b3b08bf$export$b3fac024fad9e8ff)(m, loaderData)), [
        matches,
        loaderData
    ]);
}
/**
 * Returns the loader data for the nearest ancestor Route loader
 */ function $5b1ea468d903474a$export$1448a5050d252c4d() {
    let state = $5b1ea468d903474a$var$useDataRouterState($5b1ea468d903474a$var$DataRouterStateHook.UseLoaderData);
    let routeId = $5b1ea468d903474a$var$useCurrentRouteId($5b1ea468d903474a$var$DataRouterStateHook.UseLoaderData);
    if (state.errors && state.errors[routeId] != null) {
        console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");
        return undefined;
    }
    return state.loaderData[routeId];
}
/**
 * Returns the loaderData for the given routeId
 */ function $5b1ea468d903474a$export$fd5d37484eab868d(routeId) {
    let state = $5b1ea468d903474a$var$useDataRouterState($5b1ea468d903474a$var$DataRouterStateHook.UseRouteLoaderData);
    return state.loaderData[routeId];
}
/**
 * Returns the action data for the nearest ancestor Route action
 */ function $5b1ea468d903474a$export$fdc00f3f26066d5e() {
    let state = $5b1ea468d903474a$var$useDataRouterState($5b1ea468d903474a$var$DataRouterStateHook.UseActionData);
    let routeId = $5b1ea468d903474a$var$useCurrentRouteId($5b1ea468d903474a$var$DataRouterStateHook.UseLoaderData);
    return state.actionData ? state.actionData[routeId] : undefined;
}
/**
 * Returns the nearest ancestor Route error, which could be a loader/action
 * error or a render error.  This is intended to be called from your
 * ErrorBoundary/errorElement to display a proper error message.
 */ function $5b1ea468d903474a$export$ed527bf60f6e05f2() {
    var _state$errors;
    let error = $d4J5n.useContext($5b1ea468d903474a$var$RouteErrorContext);
    let state = $5b1ea468d903474a$var$useDataRouterState($5b1ea468d903474a$var$DataRouterStateHook.UseRouteError);
    let routeId = $5b1ea468d903474a$var$useCurrentRouteId($5b1ea468d903474a$var$DataRouterStateHook.UseRouteError);
    // If this was a render error, we put it in a RouteError context inside
    // of RenderErrorBoundary
    if (error) return error;
    // Otherwise look for errors from our data router state
    return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
}
/**
 * Returns the happy-path data from the nearest ancestor `<Await />` value
 */ function $5b1ea468d903474a$export$78a72ddb39bdd145() {
    let value = $d4J5n.useContext($5b1ea468d903474a$var$AwaitContext);
    return value == null ? void 0 : value._data;
}
/**
 * Returns the error from the nearest ancestor `<Await />` value
 */ function $5b1ea468d903474a$export$17f53340677d5831() {
    let value = $d4J5n.useContext($5b1ea468d903474a$var$AwaitContext);
    return value == null ? void 0 : value._error;
}
let $5b1ea468d903474a$var$blockerId = 0;
/**
 * Allow the application to block navigations within the SPA and present the
 * user a confirmation dialog to confirm the navigation.  Mostly used to avoid
 * using half-filled form data.  This does not handle hard-reloads or
 * cross-origin navigations.
 */ function $5b1ea468d903474a$export$b273b3273281a049(shouldBlock) {
    let { router: router, basename: basename } = $5b1ea468d903474a$var$useDataRouterContext($5b1ea468d903474a$var$DataRouterHook.UseBlocker);
    let state = $5b1ea468d903474a$var$useDataRouterState($5b1ea468d903474a$var$DataRouterStateHook.UseBlocker);
    let [blockerKey, setBlockerKey] = $d4J5n.useState("");
    let blockerFunction = $d4J5n.useCallback((arg)=>{
        if (typeof shouldBlock !== "function") return !!shouldBlock;
        if (basename === "/") return shouldBlock(arg);
        // If they provided us a function and we've got an active basename, strip
        // it from the locations we expose to the user to match the behavior of
        // useLocation
        let { currentLocation: currentLocation, nextLocation: nextLocation, historyAction: historyAction } = arg;
        return shouldBlock({
            currentLocation: $5b1ea468d903474a$var$_extends({}, currentLocation, {
                pathname: (0, $0e856af10b3b08bf$export$b69e3301ce081aa3)(currentLocation.pathname, basename) || currentLocation.pathname
            }),
            nextLocation: $5b1ea468d903474a$var$_extends({}, nextLocation, {
                pathname: (0, $0e856af10b3b08bf$export$b69e3301ce081aa3)(nextLocation.pathname, basename) || nextLocation.pathname
            }),
            historyAction: historyAction
        });
    }, [
        basename,
        shouldBlock
    ]);
    // This effect is in charge of blocker key assignment and deletion (which is
    // tightly coupled to the key)
    $d4J5n.useEffect(()=>{
        let key = String(++$5b1ea468d903474a$var$blockerId);
        setBlockerKey(key);
        return ()=>router.deleteBlocker(key);
    }, [
        router
    ]);
    // This effect handles assigning the blockerFunction.  This is to handle
    // unstable blocker function identities, and happens only after the prior
    // effect so we don't get an orphaned blockerFunction in the router with a
    // key of "".  Until then we just have the IDLE_BLOCKER.
    $d4J5n.useEffect(()=>{
        if (blockerKey !== "") router.getBlocker(blockerKey, blockerFunction);
    }, [
        router,
        blockerKey,
        blockerFunction
    ]);
    // Prefer the blocker from `state` not `router.state` since DataRouterContext
    // is memoized so this ensures we update on blocker state updates
    return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : (0, $0e856af10b3b08bf$export$386d57f03f0b2883);
}
/**
 * Stable version of useNavigate that is used when we are in the context of
 * a RouterProvider.
 */ function $5b1ea468d903474a$var$useNavigateStable() {
    let { router: router } = $5b1ea468d903474a$var$useDataRouterContext($5b1ea468d903474a$var$DataRouterHook.UseNavigateStable);
    let id = $5b1ea468d903474a$var$useCurrentRouteId($5b1ea468d903474a$var$DataRouterStateHook.UseNavigateStable);
    let activeRef = $d4J5n.useRef(false);
    $5b1ea468d903474a$var$useIsomorphicLayoutEffect(()=>{
        activeRef.current = true;
    });
    let navigate = $d4J5n.useCallback(function(to, options) {
        if (options === void 0) options = {};
        // Short circuit here since if this happens on first render the navigate
        // is useless because we haven't wired up our router subscriber yet
        if (!activeRef.current) return;
        if (typeof to === "number") router.navigate(to);
        else router.navigate(to, $5b1ea468d903474a$var$_extends({
            fromRouteId: id
        }, options));
    }, [
        router,
        id
    ]);
    return navigate;
}
const $5b1ea468d903474a$var$alreadyWarned = {};
function $5b1ea468d903474a$var$warningOnce(key, cond, message) {
    if (!cond && !$5b1ea468d903474a$var$alreadyWarned[key]) $5b1ea468d903474a$var$alreadyWarned[key] = true;
}
/**
  Webpack + React 17 fails to compile on any of the following because webpack
  complains that `startTransition` doesn't exist in `React`:
  * import { startTransition } from "react"
  * import * as React from from "react";
    "startTransition" in React ? React.startTransition(() => setState()) : setState()
  * import * as React from from "react";
    "startTransition" in React ? React["startTransition"](() => setState()) : setState()

  Moving it to a constant such as the following solves the Webpack/React 17 issue:
  * import * as React from from "react";
    const START_TRANSITION = "startTransition";
    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()

  However, that introduces webpack/terser minification issues in production builds
  in React 18 where minification/obfuscation ends up removing the call of
  React.startTransition entirely from the first half of the ternary.  Grabbing
  this exported reference once up front resolves that issue.

  See https://github.com/remix-run/react-router/issues/10579
*/ const $5b1ea468d903474a$var$START_TRANSITION = "startTransition";
const $5b1ea468d903474a$var$startTransitionImpl = $d4J5n[$5b1ea468d903474a$var$START_TRANSITION];
/**
 * Given a Remix Router instance, render the appropriate UI
 */ function $5b1ea468d903474a$export$323e4fc2fa4753fb(_ref) {
    let { fallbackElement: fallbackElement, router: router, future: future } = _ref;
    let [state, setStateImpl] = $d4J5n.useState(router.state);
    let { v7_startTransition: v7_startTransition } = future || {};
    let setState = $d4J5n.useCallback((newState)=>{
        if (v7_startTransition && $5b1ea468d903474a$var$startTransitionImpl) $5b1ea468d903474a$var$startTransitionImpl(()=>setStateImpl(newState));
        else setStateImpl(newState);
    }, [
        setStateImpl,
        v7_startTransition
    ]);
    // Need to use a layout effect here so we are subscribed early enough to
    // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)
    $d4J5n.useLayoutEffect(()=>router.subscribe(setState), [
        router,
        setState
    ]);
    let navigator = $d4J5n.useMemo(()=>{
        return {
            createHref: router.createHref,
            encodeLocation: router.encodeLocation,
            go: (n)=>router.navigate(n),
            push: (to, state, opts)=>router.navigate(to, {
                    state: state,
                    preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
                }),
            replace: (to, state, opts)=>router.navigate(to, {
                    replace: true,
                    state: state,
                    preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
                })
        };
    }, [
        router
    ]);
    let basename = router.basename || "/";
    let dataRouterContext = $d4J5n.useMemo(()=>({
            router: router,
            navigator: navigator,
            static: false,
            basename: basename
        }), [
        router,
        navigator,
        basename
    ]);
    // The fragment and {null} here are important!  We need them to keep React 18's
    // useId happy when we are server-rendering since we may have a <script> here
    // containing the hydrated server-side staticContext (from StaticRouterProvider).
    // useId relies on the component tree structure to generate deterministic id's
    // so we need to ensure it remains the same on the client even though
    // we don't need the <script> tag
    return /*#__PURE__*/ $d4J5n.createElement($d4J5n.Fragment, null, /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$export$3add0d5dce533e2e.Provider, {
        value: dataRouterContext
    }, /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$export$145dfa71566a64dc.Provider, {
        value: state
    }, /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$export$55185c17a0fcbe46, {
        basename: basename,
        location: state.location,
        navigationType: state.historyAction,
        navigator: navigator
    }, state.initialized ? /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$var$DataRoutes, {
        routes: router.routes,
        state: state
    }) : fallbackElement))), null);
}
function $5b1ea468d903474a$var$DataRoutes(_ref2) {
    let { routes: routes, state: state } = _ref2;
    return $5b1ea468d903474a$export$5fcee62552a12fbf(routes, undefined, state);
}
/**
 * A `<Router>` that stores all entries in memory.
 *
 * @see https://reactrouter.com/router-components/memory-router
 */ function $5b1ea468d903474a$export$ae46f04cfaffe093(_ref3) {
    let { basename: basename, children: children, initialEntries: initialEntries, initialIndex: initialIndex, future: future } = _ref3;
    let historyRef = $d4J5n.useRef();
    if (historyRef.current == null) historyRef.current = (0, $0e856af10b3b08bf$export$2b76ad033c6e6d08)({
        initialEntries: initialEntries,
        initialIndex: initialIndex,
        v5Compat: true
    });
    let history = historyRef.current;
    let [state, setStateImpl] = $d4J5n.useState({
        action: history.action,
        location: history.location
    });
    let { v7_startTransition: v7_startTransition } = future || {};
    let setState = $d4J5n.useCallback((newState)=>{
        v7_startTransition && $5b1ea468d903474a$var$startTransitionImpl ? $5b1ea468d903474a$var$startTransitionImpl(()=>setStateImpl(newState)) : setStateImpl(newState);
    }, [
        setStateImpl,
        v7_startTransition
    ]);
    $d4J5n.useLayoutEffect(()=>history.listen(setState), [
        history,
        setState
    ]);
    return /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$export$55185c17a0fcbe46, {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history
    });
}
/**
 * Changes the current location.
 *
 * Note: This API is mostly useful in React.Component subclasses that are not
 * able to use hooks. In functional components, we recommend you use the
 * `useNavigate` hook instead.
 *
 * @see https://reactrouter.com/components/navigate
 */ function $5b1ea468d903474a$export$444b3ab0cb9aec40(_ref4) {
    let { to: to, replace: replace, state: state, relative: relative } = _ref4;
    !$5b1ea468d903474a$export$9c954a9d03d32f4a() && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    let { matches: matches } = $d4J5n.useContext($5b1ea468d903474a$export$9072aa6dd1f93057);
    let { pathname: locationPathname } = $5b1ea468d903474a$export$45d76561a5302f2b();
    let navigate = $5b1ea468d903474a$export$9770f232ac06a008();
    // Resolve the path outside of the effect so that when effects run twice in
    // StrictMode they navigate to the same place
    let path = (0, $0e856af10b3b08bf$export$cae722b0cc860f13)(to, (0, $0e856af10b3b08bf$export$90ba53ce1c7fdff2)(matches).map((match)=>match.pathnameBase), locationPathname, relative === "path");
    let jsonPath = JSON.stringify(path);
    $d4J5n.useEffect(()=>navigate(JSON.parse(jsonPath), {
            replace: replace,
            state: state,
            relative: relative
        }), [
        navigate,
        jsonPath,
        relative,
        replace,
        state
    ]);
    return null;
}
/**
 * Renders the child route's element, if there is one.
 *
 * @see https://reactrouter.com/components/outlet
 */ function $5b1ea468d903474a$export$910ae8079b2c2852(props) {
    return $5b1ea468d903474a$export$a3be3530d8e40d0b(props.context);
}
/**
 * Declares an element that should be rendered at a certain URL path.
 *
 * @see https://reactrouter.com/components/route
 */ function $5b1ea468d903474a$export$e7b0ac011bb776c6(_props) {
    (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
}
/**
 * Provides location context for the rest of the app.
 *
 * Note: You usually won't render a `<Router>` directly. Instead, you'll render a
 * router that is more specific to your environment such as a `<BrowserRouter>`
 * in web browsers or a `<StaticRouter>` for server rendering.
 *
 * @see https://reactrouter.com/router-components/router
 */ function $5b1ea468d903474a$export$55185c17a0fcbe46(_ref5) {
    let { basename: basenameProp = "/", children: children = null, location: locationProp, navigationType: navigationType = (0, $0e856af10b3b08bf$export$e19cd5f9376f8cee).Pop, navigator: navigator, static: staticProp = false } = _ref5;
    !!$5b1ea468d903474a$export$9c954a9d03d32f4a() && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    // Preserve trailing slashes on basename, so we can let the user control
    // the enforcement of trailing slashes throughout the app
    let basename = basenameProp.replace(/^\/*/, "/");
    let navigationContext = $d4J5n.useMemo(()=>({
            basename: basename,
            navigator: navigator,
            static: staticProp
        }), [
        basename,
        navigator,
        staticProp
    ]);
    if (typeof locationProp === "string") locationProp = (0, $0e856af10b3b08bf$export$8ccf933b0513f8d0)(locationProp);
    let { pathname: pathname = "/", search: search = "", hash: hash = "", state: state = null, key: key = "default" } = locationProp;
    let locationContext = $d4J5n.useMemo(()=>{
        let trailingPathname = (0, $0e856af10b3b08bf$export$b69e3301ce081aa3)(pathname, basename);
        if (trailingPathname == null) return null;
        return {
            location: {
                pathname: trailingPathname,
                search: search,
                hash: hash,
                state: state,
                key: key
            },
            navigationType: navigationType
        };
    }, [
        basename,
        pathname,
        search,
        hash,
        state,
        key,
        navigationType
    ]);
    if (locationContext == null) return null;
    return /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$export$26749e8557646306.Provider, {
        value: navigationContext
    }, /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$export$c7914228fb69b0f5.Provider, {
        children: children,
        value: locationContext
    }));
}
/**
 * A container for a nested tree of `<Route>` elements that renders the branch
 * that best matches the current location.
 *
 * @see https://reactrouter.com/components/routes
 */ function $5b1ea468d903474a$export$3565eb3d00ca5a74(_ref6) {
    let { children: children, location: location } = _ref6;
    return $5b1ea468d903474a$export$5d3fca4a98652595($5b1ea468d903474a$export$16da398f5434bdec(children), location);
}
/**
 * Component to use for rendering lazily loaded data from returning defer()
 * in a loader function
 */ function $5b1ea468d903474a$export$6ddabde395c8c576(_ref7) {
    let { children: children, errorElement: errorElement, resolve: resolve } = _ref7;
    return /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$var$AwaitErrorBoundary, {
        resolve: resolve,
        errorElement: errorElement
    }, /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$var$ResolveAwait, null, children));
}
var $5b1ea468d903474a$var$AwaitRenderStatus = /*#__PURE__*/ function(AwaitRenderStatus) {
    AwaitRenderStatus[AwaitRenderStatus["pending"] = 0] = "pending";
    AwaitRenderStatus[AwaitRenderStatus["success"] = 1] = "success";
    AwaitRenderStatus[AwaitRenderStatus["error"] = 2] = "error";
    return AwaitRenderStatus;
}($5b1ea468d903474a$var$AwaitRenderStatus || {});
const $5b1ea468d903474a$var$neverSettledPromise = new Promise(()=>{});
class $5b1ea468d903474a$var$AwaitErrorBoundary extends $d4J5n.Component {
    constructor(props){
        super(props);
        this.state = {
            error: null
        };
    }
    static getDerivedStateFromError(error) {
        return {
            error: error
        };
    }
    componentDidCatch(error, errorInfo) {
        console.error("<Await> caught the following error during render", error, errorInfo);
    }
    render() {
        let { children: children, errorElement: errorElement, resolve: resolve } = this.props;
        let promise = null;
        let status = $5b1ea468d903474a$var$AwaitRenderStatus.pending;
        if (!(resolve instanceof Promise)) {
            // Didn't get a promise - provide as a resolved promise
            status = $5b1ea468d903474a$var$AwaitRenderStatus.success;
            promise = Promise.resolve();
            Object.defineProperty(promise, "_tracked", {
                get: ()=>true
            });
            Object.defineProperty(promise, "_data", {
                get: ()=>resolve
            });
        } else if (this.state.error) {
            // Caught a render error, provide it as a rejected promise
            status = $5b1ea468d903474a$var$AwaitRenderStatus.error;
            let renderError = this.state.error;
            promise = Promise.reject().catch(()=>{}); // Avoid unhandled rejection warnings
            Object.defineProperty(promise, "_tracked", {
                get: ()=>true
            });
            Object.defineProperty(promise, "_error", {
                get: ()=>renderError
            });
        } else if (resolve._tracked) {
            // Already tracked promise - check contents
            promise = resolve;
            status = promise._error !== undefined ? $5b1ea468d903474a$var$AwaitRenderStatus.error : promise._data !== undefined ? $5b1ea468d903474a$var$AwaitRenderStatus.success : $5b1ea468d903474a$var$AwaitRenderStatus.pending;
        } else {
            // Raw (untracked) promise - track it
            status = $5b1ea468d903474a$var$AwaitRenderStatus.pending;
            Object.defineProperty(resolve, "_tracked", {
                get: ()=>true
            });
            promise = resolve.then((data)=>Object.defineProperty(resolve, "_data", {
                    get: ()=>data
                }), (error)=>Object.defineProperty(resolve, "_error", {
                    get: ()=>error
                }));
        }
        if (status === $5b1ea468d903474a$var$AwaitRenderStatus.error && promise._error instanceof (0, $0e856af10b3b08bf$export$42a99a7a4bc0e76a)) // Freeze the UI by throwing a never resolved promise
        throw $5b1ea468d903474a$var$neverSettledPromise;
        if (status === $5b1ea468d903474a$var$AwaitRenderStatus.error && !errorElement) // No errorElement, throw to the nearest route-level error boundary
        throw promise._error;
        if (status === $5b1ea468d903474a$var$AwaitRenderStatus.error) // Render via our errorElement
        return /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$var$AwaitContext.Provider, {
            value: promise,
            children: errorElement
        });
        if (status === $5b1ea468d903474a$var$AwaitRenderStatus.success) // Render children with resolved value
        return /*#__PURE__*/ $d4J5n.createElement($5b1ea468d903474a$var$AwaitContext.Provider, {
            value: promise,
            children: children
        });
        // Throw to the suspense boundary
        throw promise;
    }
}
/**
 * @private
 * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`
 */ function $5b1ea468d903474a$var$ResolveAwait(_ref8) {
    let { children: children } = _ref8;
    let data = $5b1ea468d903474a$export$78a72ddb39bdd145();
    let toRender = typeof children === "function" ? children(data) : children;
    return /*#__PURE__*/ $d4J5n.createElement($d4J5n.Fragment, null, toRender);
}
///////////////////////////////////////////////////////////////////////////////
// UTILS
///////////////////////////////////////////////////////////////////////////////
/**
 * Creates a route config from a React "children" object, which is usually
 * either a `<Route>` element or an array of them. Used internally by
 * `<Routes>` to create a route config from its children.
 *
 * @see https://reactrouter.com/utils/create-routes-from-children
 */ function $5b1ea468d903474a$export$16da398f5434bdec(children, parentPath) {
    if (parentPath === void 0) parentPath = [];
    let routes = [];
    $d4J5n.Children.forEach(children, (element, index)=>{
        if (!/*#__PURE__*/ $d4J5n.isValidElement(element)) // Ignore non-elements. This allows people to more easily inline
        // conditionals in their route config.
        return;
        let treePath = [
            ...parentPath,
            index
        ];
        if (element.type === $d4J5n.Fragment) {
            // Transparently support React.Fragment and its children.
            routes.push.apply(routes, $5b1ea468d903474a$export$16da398f5434bdec(element.props.children, treePath));
            return;
        }
        !(element.type === $5b1ea468d903474a$export$e7b0ac011bb776c6) && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
        !(!element.props.index || !element.props.children) && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
        let route = {
            id: element.props.id || treePath.join("-"),
            caseSensitive: element.props.caseSensitive,
            element: element.props.element,
            Component: element.props.Component,
            index: element.props.index,
            path: element.props.path,
            loader: element.props.loader,
            action: element.props.action,
            errorElement: element.props.errorElement,
            ErrorBoundary: element.props.ErrorBoundary,
            hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
            shouldRevalidate: element.props.shouldRevalidate,
            handle: element.props.handle,
            lazy: element.props.lazy
        };
        if (element.props.children) route.children = $5b1ea468d903474a$export$16da398f5434bdec(element.props.children, treePath);
        routes.push(route);
    });
    return routes;
}
/**
 * Renders the result of `matchRoutes()` into a React element.
 */ function $5b1ea468d903474a$export$daf73786167a7f72(matches) {
    return $5b1ea468d903474a$var$_renderMatches(matches);
}
function $5b1ea468d903474a$export$52b333d321859367(route) {
    let updates = {
        // Note: this check also occurs in createRoutesFromChildren so update
        // there if you change this -- please and thank you!
        hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null
    };
    if (route.Component) Object.assign(updates, {
        element: /*#__PURE__*/ $d4J5n.createElement(route.Component),
        Component: undefined
    });
    if (route.ErrorBoundary) Object.assign(updates, {
        errorElement: /*#__PURE__*/ $d4J5n.createElement(route.ErrorBoundary),
        ErrorBoundary: undefined
    });
    return updates;
}
function $5b1ea468d903474a$export$f30f7e456d254e83(routes, opts) {
    return (0, $0e856af10b3b08bf$export$baddd0131ee8c05b)({
        basename: opts == null ? void 0 : opts.basename,
        future: $5b1ea468d903474a$var$_extends({}, opts == null ? void 0 : opts.future, {
            v7_prependBasename: true
        }),
        history: (0, $0e856af10b3b08bf$export$2b76ad033c6e6d08)({
            initialEntries: opts == null ? void 0 : opts.initialEntries,
            initialIndex: opts == null ? void 0 : opts.initialIndex
        }),
        hydrationData: opts == null ? void 0 : opts.hydrationData,
        routes: routes,
        mapRouteProperties: $5b1ea468d903474a$export$52b333d321859367
    }).initialize();
}


const $d92a12d3199f1fd9$export$61776738076f0932 = ()=>{
    let navigate = (0, $5b1ea468d903474a$export$9770f232ac06a008)();
    const routeChange = ()=>{
        let path = `/detail`;
        navigate(path);
    };
    return /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
        className: "button-chanel",
        onClick: routeChange,
        children: [
            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                className: "overlap-group",
                children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                    className: "div",
                    children: "See Chanel"
                })
            }),
            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                className: "image",
                alt: "Image",
                src: "/img/image-1.png"
            }),
            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                className: "p",
                children: "Watch DirecTV Sports online live and direct"
            }),
            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                className: "text-wrapper-2",
                children: "D Sports"
            }),
            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                className: "line",
                alt: "Line",
                src: "/img/line-1.svg"
            })
        ]
    });
};




/*
We're constantly improving the code you see. 
Please share your feedback here: https://form.asana.com/?k=uvp-HPgd3_hyoXRBw1IcNg&d=1152665201300829
*/ 
parcelRequire("d4J5n");

const $79f17ec0cd7bcad3$export$b89a827e9254211a = ({ className: className })=>{
    return /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
        className: `frame ${className}`,
        children: [
            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                className: "text-wrapper",
                children: "22:35"
            }),
            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                className: "ri-football-fill",
                alt: "Ri football fill",
                src: "/img/ri-football-fill.svg"
            }),
            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                className: "eliminatorias",
                children: " Eliminatorias Eurocopa: Espa\xf1a vs. Chipre"
            })
        ]
    });
};






var $d4J5n = parcelRequire("d4J5n");
/**
 * @license
 * Video.js 8.9.0 <http://videojs.com/>
 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
 * Available under Apache License Version 2.0
 * <https://github.com/videojs/video.js/blob/main/LICENSE>
 *
 * Includes vtt.js <https://github.com/mozilla/vtt.js>
 * Available under Apache License Version 2.0
 * <https://github.com/mozilla/vtt.js/blob/main/LICENSE>
 */ 
var $cktB7 = parcelRequire("cktB7");

var $hiZ2X = parcelRequire("hiZ2X");

var $kplZx = parcelRequire("kplZx");
var $be8f37289c893610$exports = {};
$be8f37289c893610$exports = $be8f37289c893610$var$SafeParseTuple;
function $be8f37289c893610$var$SafeParseTuple(obj, reviver) {
    var json;
    var error = null;
    try {
        json = JSON.parse(obj, reviver);
    } catch (err) {
        error = err;
    }
    return [
        error,
        json
    ];
}


var $cd8ca4e7fb39bc63$exports = {};
"use strict";

var $cktB7 = parcelRequire("cktB7");
var $a41f6c2ef6e36772$exports = {};
function $a41f6c2ef6e36772$var$_extends() {
    $a41f6c2ef6e36772$exports = $a41f6c2ef6e36772$var$_extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    }, $a41f6c2ef6e36772$exports.__esModule = true, $a41f6c2ef6e36772$exports["default"] = $a41f6c2ef6e36772$exports;
    return $a41f6c2ef6e36772$var$_extends.apply(this, arguments);
}
$a41f6c2ef6e36772$exports = $a41f6c2ef6e36772$var$_extends, $a41f6c2ef6e36772$exports.__esModule = true, $a41f6c2ef6e36772$exports["default"] = $a41f6c2ef6e36772$exports;


var $e002f6dd4b5b9867$exports = {};
$e002f6dd4b5b9867$exports = $e002f6dd4b5b9867$var$isFunction;
var $e002f6dd4b5b9867$var$toString = Object.prototype.toString;
function $e002f6dd4b5b9867$var$isFunction(fn) {
    if (!fn) return false;
    var string = $e002f6dd4b5b9867$var$toString.call(fn);
    return string === "[object Function]" || typeof fn === "function" && string !== "[object RegExp]" || typeof window !== "undefined" && // IE8 and below
    (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt);
}



$cd8ca4e7fb39bc63$var$createXHR.httpHandler = (parcelRequire("4qCb0"));
/**
 * @license
 * slighly modified parse-headers 2.0.2 <https://github.com/kesla/parse-headers/>
 * Copyright (c) 2014 David Björklund
 * Available under the MIT license
 * <https://github.com/kesla/parse-headers/blob/master/LICENCE>
 */ var $cd8ca4e7fb39bc63$var$parseHeaders = function parseHeaders(headers) {
    var result = {};
    if (!headers) return result;
    headers.trim().split("\n").forEach(function(row) {
        var index = row.indexOf(":");
        var key = row.slice(0, index).trim().toLowerCase();
        var value = row.slice(index + 1).trim();
        if (typeof result[key] === "undefined") result[key] = value;
        else if (Array.isArray(result[key])) result[key].push(value);
        else result[key] = [
            result[key],
            value
        ];
    });
    return result;
};
$cd8ca4e7fb39bc63$exports = $cd8ca4e7fb39bc63$var$createXHR; // Allow use of default import syntax in TypeScript
$cd8ca4e7fb39bc63$exports.default = $cd8ca4e7fb39bc63$var$createXHR;
$cd8ca4e7fb39bc63$var$createXHR.XMLHttpRequest = $cktB7.XMLHttpRequest || $cd8ca4e7fb39bc63$var$noop;
$cd8ca4e7fb39bc63$var$createXHR.XDomainRequest = "withCredentials" in new $cd8ca4e7fb39bc63$var$createXHR.XMLHttpRequest() ? $cd8ca4e7fb39bc63$var$createXHR.XMLHttpRequest : $cktB7.XDomainRequest;
$cd8ca4e7fb39bc63$var$forEachArray([
    "get",
    "put",
    "post",
    "patch",
    "head",
    "delete"
], function(method) {
    $cd8ca4e7fb39bc63$var$createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
        options = $cd8ca4e7fb39bc63$var$initParams(uri, options, callback);
        options.method = method.toUpperCase();
        return $cd8ca4e7fb39bc63$var$_createXHR(options);
    };
});
function $cd8ca4e7fb39bc63$var$forEachArray(array, iterator) {
    for(var i = 0; i < array.length; i++)iterator(array[i]);
}
function $cd8ca4e7fb39bc63$var$isEmpty(obj) {
    for(var i in obj){
        if (obj.hasOwnProperty(i)) return false;
    }
    return true;
}
function $cd8ca4e7fb39bc63$var$initParams(uri, options, callback) {
    var params = uri;
    if ($e002f6dd4b5b9867$exports(options)) {
        callback = options;
        if (typeof uri === "string") params = {
            uri: uri
        };
    } else params = $a41f6c2ef6e36772$exports({}, options, {
        uri: uri
    });
    params.callback = callback;
    return params;
}
function $cd8ca4e7fb39bc63$var$createXHR(uri, options, callback) {
    options = $cd8ca4e7fb39bc63$var$initParams(uri, options, callback);
    return $cd8ca4e7fb39bc63$var$_createXHR(options);
}
function $cd8ca4e7fb39bc63$var$_createXHR(options) {
    if (typeof options.callback === "undefined") throw new Error("callback argument missing");
    var called = false;
    var callback = function cbOnce(err, response, body) {
        if (!called) {
            called = true;
            options.callback(err, response, body);
        }
    };
    function readystatechange() {
        if (xhr.readyState === 4) setTimeout(loadFunc, 0);
    }
    function getBody() {
        // Chrome with requestType=blob throws errors arround when even testing access to responseText
        var body = undefined;
        if (xhr.response) body = xhr.response;
        else body = xhr.responseText || $cd8ca4e7fb39bc63$var$getXml(xhr);
        if (isJson) try {
            body = JSON.parse(body);
        } catch (e) {}
        return body;
    }
    function errorFunc(evt) {
        clearTimeout(timeoutTimer);
        if (!(evt instanceof Error)) evt = new Error("" + (evt || "Unknown XMLHttpRequest Error"));
        evt.statusCode = 0;
        return callback(evt, failureResponse);
    } // will load the data & process the response in a special response object
    function loadFunc() {
        if (aborted) return;
        var status;
        clearTimeout(timeoutTimer);
        if (options.useXDR && xhr.status === undefined) //IE8 CORS GET successful response doesn't have a status field, but body is fine
        status = 200;
        else status = xhr.status === 1223 ? 204 : xhr.status;
        var response = failureResponse;
        var err = null;
        if (status !== 0) {
            response = {
                body: getBody(),
                statusCode: status,
                method: method,
                headers: {},
                url: uri,
                rawRequest: xhr
            };
            if (xhr.getAllResponseHeaders) //remember xhr can in fact be XDR for CORS in IE
            response.headers = $cd8ca4e7fb39bc63$var$parseHeaders(xhr.getAllResponseHeaders());
        } else err = new Error("Internal XMLHttpRequest Error");
        return callback(err, response, response.body);
    }
    var xhr = options.xhr || null;
    if (!xhr) {
        if (options.cors || options.useXDR) xhr = new $cd8ca4e7fb39bc63$var$createXHR.XDomainRequest();
        else xhr = new $cd8ca4e7fb39bc63$var$createXHR.XMLHttpRequest();
    }
    var key;
    var aborted;
    var uri = xhr.url = options.uri || options.url;
    var method = xhr.method = options.method || "GET";
    var body = options.body || options.data;
    var headers = xhr.headers = options.headers || {};
    var sync = !!options.sync;
    var isJson = false;
    var timeoutTimer;
    var failureResponse = {
        body: undefined,
        headers: {},
        statusCode: 0,
        method: method,
        url: uri,
        rawRequest: xhr
    };
    if ("json" in options && options.json !== false) {
        isJson = true;
        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json"); //Don't override existing accept header declared by user
        if (method !== "GET" && method !== "HEAD") {
            headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json"); //Don't override existing accept header declared by user
            body = JSON.stringify(options.json === true ? body : options.json);
        }
    }
    xhr.onreadystatechange = readystatechange;
    xhr.onload = loadFunc;
    xhr.onerror = errorFunc; // IE9 must have onprogress be set to a unique function.
    xhr.onprogress = function() {};
    xhr.onabort = function() {
        aborted = true;
    };
    xhr.ontimeout = errorFunc;
    xhr.open(method, uri, !sync, options.username, options.password); //has to be after open
    if (!sync) xhr.withCredentials = !!options.withCredentials;
     // Cannot set timeout with sync request
    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
    if (!sync && options.timeout > 0) timeoutTimer = setTimeout(function() {
        if (aborted) return;
        aborted = true; //IE9 may still call readystatechange
        xhr.abort("timeout");
        var e = new Error("XMLHttpRequest timeout");
        e.code = "ETIMEDOUT";
        errorFunc(e);
    }, options.timeout);
    if (xhr.setRequestHeader) {
        for(key in headers)if (headers.hasOwnProperty(key)) xhr.setRequestHeader(key, headers[key]);
    } else if (options.headers && !$cd8ca4e7fb39bc63$var$isEmpty(options.headers)) throw new Error("Headers cannot be set on an XDomainRequest object");
    if ("responseType" in options) xhr.responseType = options.responseType;
    if ("beforeSend" in options && typeof options.beforeSend === "function") options.beforeSend(xhr);
     // Microsoft Edge browser sends "undefined" when send is called with undefined value.
    // XMLHttpRequest spec says to pass null as body to indicate no body
    // See https://github.com/naugtur/xhr/issues/100.
    xhr.send(body || null);
    return xhr;
}
function $cd8ca4e7fb39bc63$var$getXml(xhr) {
    // xhr.responseXML will throw Exception "InvalidStateError" or "DOMException"
    // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.
    try {
        if (xhr.responseType === "document") return xhr.responseXML;
        var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror";
        if (xhr.responseType === "" && !firefoxBugTakenEffect) return xhr.responseXML;
    } catch (e) {}
    return null;
}
function $cd8ca4e7fb39bc63$var$noop() {}


var $c9029e8aaad0b4d6$exports = {};
/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Default exports for Node. Export the extended versions of VTTCue and
// VTTRegion in Node since we likely want the capability to convert back and
// forth between JSON. If we don't then it's not that big of a deal since we're
// off browser.

var $cktB7 = parcelRequire("cktB7");



var $c9029e8aaad0b4d6$var$vttjs = $c9029e8aaad0b4d6$exports = {
    WebVTT: (parcelRequire("3feqK")),
    VTTCue: (parcelRequire("5nCPd")),
    VTTRegion: (parcelRequire("X2zir"))
};
$cktB7.vttjs = $c9029e8aaad0b4d6$var$vttjs;
$cktB7.WebVTT = $c9029e8aaad0b4d6$var$vttjs.WebVTT;
var $c9029e8aaad0b4d6$var$cueShim = $c9029e8aaad0b4d6$var$vttjs.VTTCue;
var $c9029e8aaad0b4d6$var$regionShim = $c9029e8aaad0b4d6$var$vttjs.VTTRegion;
var $c9029e8aaad0b4d6$var$nativeVTTCue = $cktB7.VTTCue;
var $c9029e8aaad0b4d6$var$nativeVTTRegion = $cktB7.VTTRegion;
$c9029e8aaad0b4d6$var$vttjs.shim = function() {
    $cktB7.VTTCue = $c9029e8aaad0b4d6$var$cueShim;
    $cktB7.VTTRegion = $c9029e8aaad0b4d6$var$regionShim;
};
$c9029e8aaad0b4d6$var$vttjs.restore = function() {
    $cktB7.VTTCue = $c9029e8aaad0b4d6$var$nativeVTTCue;
    $cktB7.VTTRegion = $c9029e8aaad0b4d6$var$nativeVTTRegion;
};
if (!$cktB7.VTTCue) $c9029e8aaad0b4d6$var$vttjs.shim();



var $b07f152deb41f6e1$exports = {};
// see https://tools.ietf.org/html/rfc1808
(function(root) {
    var URL_REGEX = /^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/;
    var FIRST_SEGMENT_REGEX = /^(?=([^\/?#]*))\1([^]*)$/;
    var SLASH_DOT_REGEX = /(?:\/|^)\.(?=\/)/g;
    var SLASH_DOT_DOT_REGEX = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g;
    var URLToolkit = {
        // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //
        // E.g
        // With opts.alwaysNormalize = false (default, spec compliant)
        // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g
        // With opts.alwaysNormalize = true (not spec compliant)
        // http://a.com/b/cd + /e/f/../g => http://a.com/e/g
        buildAbsoluteURL: function(baseURL, relativeURL, opts) {
            opts = opts || {};
            // remove any remaining space and CRLF
            baseURL = baseURL.trim();
            relativeURL = relativeURL.trim();
            if (!relativeURL) {
                // 2a) If the embedded URL is entirely empty, it inherits the
                // entire base URL (i.e., is set equal to the base URL)
                // and we are done.
                if (!opts.alwaysNormalize) return baseURL;
                var basePartsForNormalise = URLToolkit.parseURL(baseURL);
                if (!basePartsForNormalise) throw new Error("Error trying to parse base URL.");
                basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);
                return URLToolkit.buildURLFromParts(basePartsForNormalise);
            }
            var relativeParts = URLToolkit.parseURL(relativeURL);
            if (!relativeParts) throw new Error("Error trying to parse relative URL.");
            if (relativeParts.scheme) {
                // 2b) If the embedded URL starts with a scheme name, it is
                // interpreted as an absolute URL and we are done.
                if (!opts.alwaysNormalize) return relativeURL;
                relativeParts.path = URLToolkit.normalizePath(relativeParts.path);
                return URLToolkit.buildURLFromParts(relativeParts);
            }
            var baseParts = URLToolkit.parseURL(baseURL);
            if (!baseParts) throw new Error("Error trying to parse base URL.");
            if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== "/") {
                // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc
                // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'
                var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);
                baseParts.netLoc = pathParts[1];
                baseParts.path = pathParts[2];
            }
            if (baseParts.netLoc && !baseParts.path) baseParts.path = "/";
            var builtParts = {
                // 2c) Otherwise, the embedded URL inherits the scheme of
                // the base URL.
                scheme: baseParts.scheme,
                netLoc: relativeParts.netLoc,
                path: null,
                params: relativeParts.params,
                query: relativeParts.query,
                fragment: relativeParts.fragment
            };
            if (!relativeParts.netLoc) {
                // 3) If the embedded URL's <net_loc> is non-empty, we skip to
                // Step 7.  Otherwise, the embedded URL inherits the <net_loc>
                // (if any) of the base URL.
                builtParts.netLoc = baseParts.netLoc;
                // 4) If the embedded URL path is preceded by a slash "/", the
                // path is not relative and we skip to Step 7.
                if (relativeParts.path[0] !== "/") {
                    if (!relativeParts.path) {
                        // 5) If the embedded URL path is empty (and not preceded by a
                        // slash), then the embedded URL inherits the base URL path
                        builtParts.path = baseParts.path;
                        // 5a) if the embedded URL's <params> is non-empty, we skip to
                        // step 7; otherwise, it inherits the <params> of the base
                        // URL (if any) and
                        if (!relativeParts.params) {
                            builtParts.params = baseParts.params;
                            // 5b) if the embedded URL's <query> is non-empty, we skip to
                            // step 7; otherwise, it inherits the <query> of the base
                            // URL (if any) and we skip to step 7.
                            if (!relativeParts.query) builtParts.query = baseParts.query;
                        }
                    } else {
                        // 6) The last segment of the base URL's path (anything
                        // following the rightmost slash "/", or the entire path if no
                        // slash is present) is removed and the embedded URL's path is
                        // appended in its place.
                        var baseURLPath = baseParts.path;
                        var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf("/") + 1) + relativeParts.path;
                        builtParts.path = URLToolkit.normalizePath(newPath);
                    }
                }
            }
            if (builtParts.path === null) builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;
            return URLToolkit.buildURLFromParts(builtParts);
        },
        parseURL: function(url) {
            var parts = URL_REGEX.exec(url);
            if (!parts) return null;
            return {
                scheme: parts[1] || "",
                netLoc: parts[2] || "",
                path: parts[3] || "",
                params: parts[4] || "",
                query: parts[5] || "",
                fragment: parts[6] || ""
            };
        },
        normalizePath: function(path) {
            // The following operations are
            // then applied, in order, to the new path:
            // 6a) All occurrences of "./", where "." is a complete path
            // segment, are removed.
            // 6b) If the path ends with "." as a complete path segment,
            // that "." is removed.
            path = path.split("").reverse().join("").replace(SLASH_DOT_REGEX, "");
            // 6c) All occurrences of "<segment>/../", where <segment> is a
            // complete path segment not equal to "..", are removed.
            // Removal of these path segments is performed iteratively,
            // removing the leftmost matching pattern on each iteration,
            // until no matching pattern remains.
            // 6d) If the path ends with "<segment>/..", where <segment> is a
            // complete path segment not equal to "..", that
            // "<segment>/.." is removed.
            while(path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, "")).length);
            return path.split("").reverse().join("");
        },
        buildURLFromParts: function(parts) {
            return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;
        }
    };
    $b07f152deb41f6e1$exports = URLToolkit;
})($b07f152deb41f6e1$exports);



var $cktB7 = parcelRequire("cktB7");
var $41be8b0ac22a951d$var$DEFAULT_LOCATION = "http://example.com";
var $41be8b0ac22a951d$var$resolveUrl = function resolveUrl(baseUrl, relativeUrl) {
    // return early if we don't need to resolve
    if (/^[a-z]+:/i.test(relativeUrl)) return relativeUrl;
     // if baseUrl is a data URI, ignore it and resolve everything relative to window.location
    if (/^data:/.test(baseUrl)) baseUrl = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).location && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).location.href || "";
     // IE11 supports URL but not the URL constructor
    // feature detect the behavior we want
    var nativeURL = typeof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).URL === "function";
    var protocolLess = /^\/\//.test(baseUrl); // remove location if window.location isn't available (i.e. we're in node)
    // and if baseUrl isn't an absolute url
    var removeLocation = !(0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).location && !/\/\//i.test(baseUrl); // if the base URL is relative then combine with the current location
    if (nativeURL) baseUrl = new (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).URL(baseUrl, (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).location || $41be8b0ac22a951d$var$DEFAULT_LOCATION);
    else if (!/\/\//i.test(baseUrl)) baseUrl = (0, (/*@__PURE__*/$parcel$interopDefault($b07f152deb41f6e1$exports))).buildAbsoluteURL((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).location && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).location.href || "", baseUrl);
    if (nativeURL) {
        var newUrl = new URL(relativeUrl, baseUrl); // if we're a protocol-less url, remove the protocol
        // and if we're location-less, remove the location
        // otherwise, return the url unmodified
        if (removeLocation) return newUrl.href.slice($41be8b0ac22a951d$var$DEFAULT_LOCATION.length);
        else if (protocolLess) return newUrl.href.slice(newUrl.protocol.length);
        return newUrl.href;
    }
    return (0, (/*@__PURE__*/$parcel$interopDefault($b07f152deb41f6e1$exports))).buildAbsoluteURL(baseUrl, relativeUrl);
};
var $41be8b0ac22a951d$export$2e2bcd8739ae039 = $41be8b0ac22a951d$var$resolveUrl;


/*! @name m3u8-parser @version 7.1.0 @license Apache-2.0 */ /**
 * @file stream.js
 */ /**
 * A lightweight readable stream implemention that handles event dispatching.
 *
 * @class Stream
 */ var $41b8cb3156f84b7c$export$2e2bcd8739ae039 = /*#__PURE__*/ function() {
    function Stream() {
        this.listeners = {};
    }
    /**
   * Add a listener for a specified event type.
   *
   * @param {string} type the event name
   * @param {Function} listener the callback to be invoked when an event of
   * the specified type occurs
   */ var _proto = Stream.prototype;
    _proto.on = function on(type, listener) {
        if (!this.listeners[type]) this.listeners[type] = [];
        this.listeners[type].push(listener);
    } /**
   * Remove a listener for a specified event type.
   *
   * @param {string} type the event name
   * @param {Function} listener  a function previously registered for this
   * type of event through `on`
   * @return {boolean} if we could turn it off or not
   */ ;
    _proto.off = function off(type, listener) {
        if (!this.listeners[type]) return false;
        var index = this.listeners[type].indexOf(listener); // TODO: which is better?
        // In Video.js we slice listener functions
        // on trigger so that it does not mess up the order
        // while we loop through.
        //
        // Here we slice on off so that the loop in trigger
        // can continue using it's old reference to loop without
        // messing up the order.
        this.listeners[type] = this.listeners[type].slice(0);
        this.listeners[type].splice(index, 1);
        return index > -1;
    } /**
   * Trigger an event of the specified type on this stream. Any additional
   * arguments to this function are passed as parameters to event listeners.
   *
   * @param {string} type the event name
   */ ;
    _proto.trigger = function trigger(type) {
        var callbacks = this.listeners[type];
        if (!callbacks) return;
         // Slicing the arguments on every invocation of this method
        // can add a significant amount of overhead. Avoid the
        // intermediate object creation for the common case of a
        // single callback argument
        if (arguments.length === 2) {
            var length = callbacks.length;
            for(var i = 0; i < length; ++i)callbacks[i].call(this, arguments[1]);
        } else {
            var args = Array.prototype.slice.call(arguments, 1);
            var _length = callbacks.length;
            for(var _i = 0; _i < _length; ++_i)callbacks[_i].apply(this, args);
        }
    } /**
   * Destroys the stream and cleans up.
   */ ;
    _proto.dispose = function dispose() {
        this.listeners = {};
    } /**
   * Forwards all `data` events on this stream to the destination stream. The
   * destination stream should provide a method `push` to receive the data
   * events as they arrive.
   *
   * @param {Stream} destination the stream that will receive all `data` events
   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
   */ ;
    _proto.pipe = function pipe(destination) {
        this.on("data", function(data) {
            destination.push(data);
        });
    };
    return Stream;
}();




var $cktB7 = parcelRequire("cktB7");
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ var $7aaf889172aa0226$export$a143d493d941bafc;
var $7aaf889172aa0226$export$e4cf37d7f6fb9e0a;
var $7aaf889172aa0226$export$f99ded8fe4b79145;
var $7aaf889172aa0226$export$599f31c3813fae4d;
"use strict";
var $023dfcfbcb75732a$export$a48f0734ac7c2329;
var $023dfcfbcb75732a$export$d622b2ad8d90c771;
var $023dfcfbcb75732a$export$6100ba28696e12de;
"use strict";
$023dfcfbcb75732a$export$a48f0734ac7c2329 = $023dfcfbcb75732a$var$byteLength;
$023dfcfbcb75732a$export$d622b2ad8d90c771 = $023dfcfbcb75732a$var$toByteArray;
$023dfcfbcb75732a$export$6100ba28696e12de = $023dfcfbcb75732a$var$fromByteArray;
var $023dfcfbcb75732a$var$lookup = [];
var $023dfcfbcb75732a$var$revLookup = [];
var $023dfcfbcb75732a$var$Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var $023dfcfbcb75732a$var$code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var $023dfcfbcb75732a$var$i = 0, $023dfcfbcb75732a$var$len = $023dfcfbcb75732a$var$code.length; $023dfcfbcb75732a$var$i < $023dfcfbcb75732a$var$len; ++$023dfcfbcb75732a$var$i){
    $023dfcfbcb75732a$var$lookup[$023dfcfbcb75732a$var$i] = $023dfcfbcb75732a$var$code[$023dfcfbcb75732a$var$i];
    $023dfcfbcb75732a$var$revLookup[$023dfcfbcb75732a$var$code.charCodeAt($023dfcfbcb75732a$var$i)] = $023dfcfbcb75732a$var$i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$023dfcfbcb75732a$var$revLookup["-".charCodeAt(0)] = 62;
$023dfcfbcb75732a$var$revLookup["_".charCodeAt(0)] = 63;
function $023dfcfbcb75732a$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function $023dfcfbcb75732a$var$byteLength(b64) {
    var lens = $023dfcfbcb75732a$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $023dfcfbcb75732a$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $023dfcfbcb75732a$var$toByteArray(b64) {
    var tmp;
    var lens = $023dfcfbcb75732a$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $023dfcfbcb75732a$var$Arr($023dfcfbcb75732a$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i)] << 18 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i)] << 2 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i)] << 10 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function $023dfcfbcb75732a$var$tripletToBase64(num) {
    return $023dfcfbcb75732a$var$lookup[num >> 18 & 0x3F] + $023dfcfbcb75732a$var$lookup[num >> 12 & 0x3F] + $023dfcfbcb75732a$var$lookup[num >> 6 & 0x3F] + $023dfcfbcb75732a$var$lookup[num & 0x3F];
}
function $023dfcfbcb75732a$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push($023dfcfbcb75732a$var$tripletToBase64(tmp));
    }
    return output.join("");
}
function $023dfcfbcb75732a$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($023dfcfbcb75732a$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($023dfcfbcb75732a$var$lookup[tmp >> 2] + $023dfcfbcb75732a$var$lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($023dfcfbcb75732a$var$lookup[tmp >> 10] + $023dfcfbcb75732a$var$lookup[tmp >> 4 & 0x3F] + $023dfcfbcb75732a$var$lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}


/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $b38ea80d59ab0cdb$export$aafa59e2e03f2942;
var $b38ea80d59ab0cdb$export$68d8715fc104d294;
$b38ea80d59ab0cdb$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
$b38ea80d59ab0cdb$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};


var $7aaf889172aa0226$var$customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
$7aaf889172aa0226$export$a143d493d941bafc = $7aaf889172aa0226$var$Buffer;
$7aaf889172aa0226$export$e4cf37d7f6fb9e0a = $7aaf889172aa0226$var$SlowBuffer;
$7aaf889172aa0226$export$f99ded8fe4b79145 = 50;
var $7aaf889172aa0226$var$K_MAX_LENGTH = 0x7fffffff;
$7aaf889172aa0226$export$599f31c3813fae4d = $7aaf889172aa0226$var$K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ $7aaf889172aa0226$var$Buffer.TYPED_ARRAY_SUPPORT = $7aaf889172aa0226$var$typedArraySupport();
if (!$7aaf889172aa0226$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function $7aaf889172aa0226$var$typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty($7aaf889172aa0226$var$Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!$7aaf889172aa0226$var$Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty($7aaf889172aa0226$var$Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!$7aaf889172aa0226$var$Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function $7aaf889172aa0226$var$createBuffer(length) {
    if (length > $7aaf889172aa0226$var$K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, $7aaf889172aa0226$var$Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function $7aaf889172aa0226$var$Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return $7aaf889172aa0226$var$allocUnsafe(arg);
    }
    return $7aaf889172aa0226$var$from(arg, encodingOrOffset, length);
}
$7aaf889172aa0226$var$Buffer.poolSize = 8192 // not used by this implementation
;
function $7aaf889172aa0226$var$from(value, encodingOrOffset, length) {
    if (typeof value === "string") return $7aaf889172aa0226$var$fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return $7aaf889172aa0226$var$fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if ($7aaf889172aa0226$var$isInstance(value, ArrayBuffer) || value && $7aaf889172aa0226$var$isInstance(value.buffer, ArrayBuffer)) return $7aaf889172aa0226$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && ($7aaf889172aa0226$var$isInstance(value, SharedArrayBuffer) || value && $7aaf889172aa0226$var$isInstance(value.buffer, SharedArrayBuffer))) return $7aaf889172aa0226$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return $7aaf889172aa0226$var$Buffer.from(valueOf, encodingOrOffset, length);
    var b = $7aaf889172aa0226$var$fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return $7aaf889172aa0226$var$Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ $7aaf889172aa0226$var$Buffer.from = function(value, encodingOrOffset, length) {
    return $7aaf889172aa0226$var$from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf($7aaf889172aa0226$var$Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf($7aaf889172aa0226$var$Buffer, Uint8Array);
function $7aaf889172aa0226$var$assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function $7aaf889172aa0226$var$alloc(size, fill, encoding) {
    $7aaf889172aa0226$var$assertSize(size);
    if (size <= 0) return $7aaf889172aa0226$var$createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? $7aaf889172aa0226$var$createBuffer(size).fill(fill, encoding) : $7aaf889172aa0226$var$createBuffer(size).fill(fill);
    return $7aaf889172aa0226$var$createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ $7aaf889172aa0226$var$Buffer.alloc = function(size, fill, encoding) {
    return $7aaf889172aa0226$var$alloc(size, fill, encoding);
};
function $7aaf889172aa0226$var$allocUnsafe(size) {
    $7aaf889172aa0226$var$assertSize(size);
    return $7aaf889172aa0226$var$createBuffer(size < 0 ? 0 : $7aaf889172aa0226$var$checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ $7aaf889172aa0226$var$Buffer.allocUnsafe = function(size) {
    return $7aaf889172aa0226$var$allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ $7aaf889172aa0226$var$Buffer.allocUnsafeSlow = function(size) {
    return $7aaf889172aa0226$var$allocUnsafe(size);
};
function $7aaf889172aa0226$var$fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!$7aaf889172aa0226$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    var length = $7aaf889172aa0226$var$byteLength(string, encoding) | 0;
    var buf = $7aaf889172aa0226$var$createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function $7aaf889172aa0226$var$fromArrayLike(array) {
    var length = array.length < 0 ? 0 : $7aaf889172aa0226$var$checked(array.length) | 0;
    var buf = $7aaf889172aa0226$var$createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function $7aaf889172aa0226$var$fromArrayView(arrayView) {
    if ($7aaf889172aa0226$var$isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return $7aaf889172aa0226$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return $7aaf889172aa0226$var$fromArrayLike(arrayView);
}
function $7aaf889172aa0226$var$fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, $7aaf889172aa0226$var$Buffer.prototype);
    return buf;
}
function $7aaf889172aa0226$var$fromObject(obj) {
    if ($7aaf889172aa0226$var$Buffer.isBuffer(obj)) {
        var len = $7aaf889172aa0226$var$checked(obj.length) | 0;
        var buf = $7aaf889172aa0226$var$createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || $7aaf889172aa0226$var$numberIsNaN(obj.length)) return $7aaf889172aa0226$var$createBuffer(0);
        return $7aaf889172aa0226$var$fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return $7aaf889172aa0226$var$fromArrayLike(obj.data);
}
function $7aaf889172aa0226$var$checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= $7aaf889172aa0226$var$K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $7aaf889172aa0226$var$K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function $7aaf889172aa0226$var$SlowBuffer(length) {
    if (+length != length) length = 0;
    return $7aaf889172aa0226$var$Buffer.alloc(+length);
}
$7aaf889172aa0226$var$Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== $7aaf889172aa0226$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
$7aaf889172aa0226$var$Buffer.compare = function compare(a, b) {
    if ($7aaf889172aa0226$var$isInstance(a, Uint8Array)) a = $7aaf889172aa0226$var$Buffer.from(a, a.offset, a.byteLength);
    if ($7aaf889172aa0226$var$isInstance(b, Uint8Array)) b = $7aaf889172aa0226$var$Buffer.from(b, b.offset, b.byteLength);
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(a) || !$7aaf889172aa0226$var$Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
$7aaf889172aa0226$var$Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
$7aaf889172aa0226$var$Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return $7aaf889172aa0226$var$Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = $7aaf889172aa0226$var$Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if ($7aaf889172aa0226$var$isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) $7aaf889172aa0226$var$Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!$7aaf889172aa0226$var$Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function $7aaf889172aa0226$var$byteLength(string, encoding) {
    if ($7aaf889172aa0226$var$Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || $7aaf889172aa0226$var$isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return $7aaf889172aa0226$var$utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return $7aaf889172aa0226$var$base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : $7aaf889172aa0226$var$utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
$7aaf889172aa0226$var$Buffer.byteLength = $7aaf889172aa0226$var$byteLength;
function $7aaf889172aa0226$var$slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return $7aaf889172aa0226$var$hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return $7aaf889172aa0226$var$utf8Slice(this, start, end);
        case "ascii":
            return $7aaf889172aa0226$var$asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return $7aaf889172aa0226$var$latin1Slice(this, start, end);
        case "base64":
            return $7aaf889172aa0226$var$base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $7aaf889172aa0226$var$utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
$7aaf889172aa0226$var$Buffer.prototype._isBuffer = true;
function $7aaf889172aa0226$var$swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
$7aaf889172aa0226$var$Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var i = 0; i < len; i += 2)$7aaf889172aa0226$var$swap(this, i, i + 1);
    return this;
};
$7aaf889172aa0226$var$Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var i = 0; i < len; i += 4){
        $7aaf889172aa0226$var$swap(this, i, i + 3);
        $7aaf889172aa0226$var$swap(this, i + 1, i + 2);
    }
    return this;
};
$7aaf889172aa0226$var$Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var i = 0; i < len; i += 8){
        $7aaf889172aa0226$var$swap(this, i, i + 7);
        $7aaf889172aa0226$var$swap(this, i + 1, i + 6);
        $7aaf889172aa0226$var$swap(this, i + 2, i + 5);
        $7aaf889172aa0226$var$swap(this, i + 3, i + 4);
    }
    return this;
};
$7aaf889172aa0226$var$Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return $7aaf889172aa0226$var$utf8Slice(this, 0, length);
    return $7aaf889172aa0226$var$slowToString.apply(this, arguments);
};
$7aaf889172aa0226$var$Buffer.prototype.toLocaleString = $7aaf889172aa0226$var$Buffer.prototype.toString;
$7aaf889172aa0226$var$Buffer.prototype.equals = function equals(b) {
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return $7aaf889172aa0226$var$Buffer.compare(this, b) === 0;
};
$7aaf889172aa0226$var$Buffer.prototype.inspect = function inspect() {
    var str = "";
    var max = $7aaf889172aa0226$export$f99ded8fe4b79145;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if ($7aaf889172aa0226$var$customInspectSymbol) $7aaf889172aa0226$var$Buffer.prototype[$7aaf889172aa0226$var$customInspectSymbol] = $7aaf889172aa0226$var$Buffer.prototype.inspect;
$7aaf889172aa0226$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if ($7aaf889172aa0226$var$isInstance(target, Uint8Array)) target = $7aaf889172aa0226$var$Buffer.from(target, target.offset, target.byteLength);
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function $7aaf889172aa0226$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if ($7aaf889172aa0226$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = $7aaf889172aa0226$var$Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if ($7aaf889172aa0226$var$Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return $7aaf889172aa0226$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return $7aaf889172aa0226$var$arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function $7aaf889172aa0226$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
$7aaf889172aa0226$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
$7aaf889172aa0226$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return $7aaf889172aa0226$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
$7aaf889172aa0226$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return $7aaf889172aa0226$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function $7aaf889172aa0226$var$hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if ($7aaf889172aa0226$var$numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function $7aaf889172aa0226$var$utf8Write(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function $7aaf889172aa0226$var$asciiWrite(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$asciiToBytes(string), buf, offset, length);
}
function $7aaf889172aa0226$var$base64Write(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$base64ToBytes(string), buf, offset, length);
}
function $7aaf889172aa0226$var$ucs2Write(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
$7aaf889172aa0226$var$Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    var loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return $7aaf889172aa0226$var$hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return $7aaf889172aa0226$var$utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return $7aaf889172aa0226$var$asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return $7aaf889172aa0226$var$base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $7aaf889172aa0226$var$ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
$7aaf889172aa0226$var$Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function $7aaf889172aa0226$var$base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return $023dfcfbcb75732a$export$6100ba28696e12de(buf);
    else return $023dfcfbcb75732a$export$6100ba28696e12de(buf.slice(start, end));
}
function $7aaf889172aa0226$var$utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return $7aaf889172aa0226$var$decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var $7aaf889172aa0226$var$MAX_ARGUMENTS_LENGTH = 0x1000;
function $7aaf889172aa0226$var$decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= $7aaf889172aa0226$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = "";
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $7aaf889172aa0226$var$MAX_ARGUMENTS_LENGTH));
    return res;
}
function $7aaf889172aa0226$var$asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function $7aaf889172aa0226$var$latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function $7aaf889172aa0226$var$hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for(var i = start; i < end; ++i)out += $7aaf889172aa0226$var$hexSliceLookupTable[buf[i]];
    return out;
}
function $7aaf889172aa0226$var$utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
$7aaf889172aa0226$var$Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, $7aaf889172aa0226$var$Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function $7aaf889172aa0226$var$checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
$7aaf889172aa0226$var$Buffer.prototype.readUintLE = $7aaf889172aa0226$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readUintBE = $7aaf889172aa0226$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readUint8 = $7aaf889172aa0226$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 1, this.length);
    return this[offset];
};
$7aaf889172aa0226$var$Buffer.prototype.readUint16LE = $7aaf889172aa0226$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
$7aaf889172aa0226$var$Buffer.prototype.readUint16BE = $7aaf889172aa0226$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
$7aaf889172aa0226$var$Buffer.prototype.readUint32LE = $7aaf889172aa0226$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
$7aaf889172aa0226$var$Buffer.prototype.readUint32BE = $7aaf889172aa0226$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
$7aaf889172aa0226$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
$7aaf889172aa0226$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return $b38ea80d59ab0cdb$export$aafa59e2e03f2942(this, offset, true, 23, 4);
};
$7aaf889172aa0226$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return $b38ea80d59ab0cdb$export$aafa59e2e03f2942(this, offset, false, 23, 4);
};
$7aaf889172aa0226$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 8, this.length);
    return $b38ea80d59ab0cdb$export$aafa59e2e03f2942(this, offset, true, 52, 8);
};
$7aaf889172aa0226$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 8, this.length);
    return $b38ea80d59ab0cdb$export$aafa59e2e03f2942(this, offset, false, 52, 8);
};
function $7aaf889172aa0226$var$checkInt(buf, value, offset, ext, max, min) {
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
$7aaf889172aa0226$var$Buffer.prototype.writeUintLE = $7aaf889172aa0226$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUintBE = $7aaf889172aa0226$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint8 = $7aaf889172aa0226$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint16LE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint16BE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint32LE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint32BE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
$7aaf889172aa0226$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function $7aaf889172aa0226$var$checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function $7aaf889172aa0226$var$writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    $b38ea80d59ab0cdb$export$68d8715fc104d294(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
$7aaf889172aa0226$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeFloat(this, value, offset, true, noAssert);
};
$7aaf889172aa0226$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeFloat(this, value, offset, false, noAssert);
};
function $7aaf889172aa0226$var$writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    $b38ea80d59ab0cdb$export$68d8715fc104d294(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
$7aaf889172aa0226$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeDouble(this, value, offset, true, noAssert);
};
$7aaf889172aa0226$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
$7aaf889172aa0226$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
$7aaf889172aa0226$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !$7aaf889172aa0226$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = $7aaf889172aa0226$var$Buffer.isBuffer(val) ? val : $7aaf889172aa0226$var$Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var $7aaf889172aa0226$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function $7aaf889172aa0226$var$base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace($7aaf889172aa0226$var$INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function $7aaf889172aa0226$var$utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function $7aaf889172aa0226$var$asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function $7aaf889172aa0226$var$utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function $7aaf889172aa0226$var$base64ToBytes(str) {
    return $023dfcfbcb75732a$export$d622b2ad8d90c771($7aaf889172aa0226$var$base64clean(str));
}
function $7aaf889172aa0226$var$blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function $7aaf889172aa0226$var$isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function $7aaf889172aa0226$var$numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var $7aaf889172aa0226$var$hexSliceLookupTable = function() {
    var alphabet = "0123456789abcdef";
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();


var $a7f4caf19b02af13$require$Buffer = $7aaf889172aa0226$export$a143d493d941bafc;
var $a7f4caf19b02af13$var$atob = function atob(s) {
    return (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).atob ? (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).atob(s) : $a7f4caf19b02af13$require$Buffer.from(s, "base64").toString("binary");
};
function $a7f4caf19b02af13$export$2e2bcd8739ae039(b64Text) {
    var decodedString = $a7f4caf19b02af13$var$atob(b64Text);
    var array = new Uint8Array(decodedString.length);
    for(var i = 0; i < decodedString.length; i++)array[i] = decodedString.charCodeAt(i);
    return array;
}


/**
 * @file m3u8/line-stream.js
 */ /**
 * A stream that buffers string input and generates a `data` event for each
 * line.
 *
 * @class LineStream
 * @extends Stream
 */ class $c4d97af6644a7726$export$307ab5c52b11c33e extends (0, $41b8cb3156f84b7c$export$2e2bcd8739ae039) {
    constructor(){
        super();
        this.buffer = "";
    }
    /**
   * Add new data to be parsed.
   *
   * @param {string} data the text to process
   */ push(data) {
        let nextNewline;
        this.buffer += data;
        nextNewline = this.buffer.indexOf("\n");
        for(; nextNewline > -1; nextNewline = this.buffer.indexOf("\n")){
            this.trigger("data", this.buffer.substring(0, nextNewline));
            this.buffer = this.buffer.substring(nextNewline + 1);
        }
    }
}
const $c4d97af6644a7726$var$TAB = String.fromCharCode(0x09);
const $c4d97af6644a7726$var$parseByterange = function(byterangeString) {
    // optionally match and capture 0+ digits before `@`
    // optionally match and capture 0+ digits after `@`
    const match = /([0-9.]*)?@?([0-9.]*)?/.exec(byterangeString || "");
    const result = {};
    if (match[1]) result.length = parseInt(match[1], 10);
    if (match[2]) result.offset = parseInt(match[2], 10);
    return result;
};
/**
 * "forgiving" attribute list psuedo-grammar:
 * attributes -> keyvalue (',' keyvalue)*
 * keyvalue   -> key '=' value
 * key        -> [^=]*
 * value      -> '"' [^"]* '"' | [^,]*
 */ const $c4d97af6644a7726$var$attributeSeparator = function() {
    const key = "[^=]*";
    const value = '"[^"]*"|[^,]*';
    const keyvalue = "(?:" + key + ")=(?:" + value + ")";
    return new RegExp("(?:^|,)(" + keyvalue + ")");
};
/**
 * Parse attributes from a line given the separator
 *
 * @param {string} attributes the attribute line to parse
 */ const $c4d97af6644a7726$var$parseAttributes = function(attributes) {
    const result = {};
    if (!attributes) return result;
     // split the string using attributes as the separator
    const attrs = attributes.split($c4d97af6644a7726$var$attributeSeparator());
    let i = attrs.length;
    let attr;
    while(i--){
        // filter out unmatched portions of the string
        if (attrs[i] === "") continue;
         // split the key and value
        attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1); // trim whitespace and remove optional quotes around the value
        attr[0] = attr[0].replace(/^\s+|\s+$/g, "");
        attr[1] = attr[1].replace(/^\s+|\s+$/g, "");
        attr[1] = attr[1].replace(/^['"](.*)['"]$/g, "$1");
        result[attr[0]] = attr[1];
    }
    return result;
};
/**
 * A line-level M3U8 parser event stream. It expects to receive input one
 * line at a time and performs a context-free parse of its contents. A stream
 * interpretation of a manifest can be useful if the manifest is expected to
 * be too large to fit comfortably into memory or the entirety of the input
 * is not immediately available. Otherwise, it's probably much easier to work
 * with a regular `Parser` object.
 *
 * Produces `data` events with an object that captures the parser's
 * interpretation of the input. That object has a property `tag` that is one
 * of `uri`, `comment`, or `tag`. URIs only have a single additional
 * property, `line`, which captures the entirety of the input without
 * interpretation. Comments similarly have a single additional property
 * `text` which is the input without the leading `#`.
 *
 * Tags always have a property `tagType` which is the lower-cased version of
 * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,
 * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized
 * tags are given the tag type `unknown` and a single additional property
 * `data` with the remainder of the input.
 *
 * @class ParseStream
 * @extends Stream
 */ class $c4d97af6644a7726$export$bc65cb5a6d9da573 extends (0, $41b8cb3156f84b7c$export$2e2bcd8739ae039) {
    constructor(){
        super();
        this.customParsers = [];
        this.tagMappers = [];
    }
    /**
   * Parses an additional line of input.
   *
   * @param {string} line a single line of an M3U8 file to parse
   */ push(line) {
        let match;
        let event; // strip whitespace
        line = line.trim();
        if (line.length === 0) // ignore empty lines
        return;
         // URIs
        if (line[0] !== "#") {
            this.trigger("data", {
                type: "uri",
                uri: line
            });
            return;
        } // map tags
        const newLines = this.tagMappers.reduce((acc, mapper)=>{
            const mappedLine = mapper(line); // skip if unchanged
            if (mappedLine === line) return acc;
            return acc.concat([
                mappedLine
            ]);
        }, [
            line
        ]);
        newLines.forEach((newLine)=>{
            for(let i = 0; i < this.customParsers.length; i++){
                if (this.customParsers[i].call(this, newLine)) return;
            } // Comments
            if (newLine.indexOf("#EXT") !== 0) {
                this.trigger("data", {
                    type: "comment",
                    text: newLine.slice(1)
                });
                return;
            } // strip off any carriage returns here so the regex matching
            // doesn't have to account for them.
            newLine = newLine.replace("\r", ""); // Tags
            match = /^#EXTM3U/.exec(newLine);
            if (match) {
                this.trigger("data", {
                    type: "tag",
                    tagType: "m3u"
                });
                return;
            }
            match = /^#EXTINF:([0-9\.]*)?,?(.*)?$/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "inf"
                };
                if (match[1]) event.duration = parseFloat(match[1]);
                if (match[2]) event.title = match[2];
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-TARGETDURATION:([0-9.]*)?/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "targetduration"
                };
                if (match[1]) event.duration = parseInt(match[1], 10);
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-VERSION:([0-9.]*)?/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "version"
                };
                if (match[1]) event.version = parseInt(match[1], 10);
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-MEDIA-SEQUENCE:(\-?[0-9.]*)?/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "media-sequence"
                };
                if (match[1]) event.number = parseInt(match[1], 10);
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-DISCONTINUITY-SEQUENCE:(\-?[0-9.]*)?/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "discontinuity-sequence"
                };
                if (match[1]) event.number = parseInt(match[1], 10);
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-PLAYLIST-TYPE:(.*)?$/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "playlist-type"
                };
                if (match[1]) event.playlistType = match[1];
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-BYTERANGE:(.*)?$/.exec(newLine);
            if (match) {
                event = (0, (/*@__PURE__*/$parcel$interopDefault($a41f6c2ef6e36772$exports)))($c4d97af6644a7726$var$parseByterange(match[1]), {
                    type: "tag",
                    tagType: "byterange"
                });
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-ALLOW-CACHE:(YES|NO)?/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "allow-cache"
                };
                if (match[1]) event.allowed = !/NO/.test(match[1]);
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-MAP:(.*)$/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "map"
                };
                if (match[1]) {
                    const attributes = $c4d97af6644a7726$var$parseAttributes(match[1]);
                    if (attributes.URI) event.uri = attributes.URI;
                    if (attributes.BYTERANGE) event.byterange = $c4d97af6644a7726$var$parseByterange(attributes.BYTERANGE);
                }
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-STREAM-INF:(.*)$/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "stream-inf"
                };
                if (match[1]) {
                    event.attributes = $c4d97af6644a7726$var$parseAttributes(match[1]);
                    if (event.attributes.RESOLUTION) {
                        const split = event.attributes.RESOLUTION.split("x");
                        const resolution = {};
                        if (split[0]) resolution.width = parseInt(split[0], 10);
                        if (split[1]) resolution.height = parseInt(split[1], 10);
                        event.attributes.RESOLUTION = resolution;
                    }
                    if (event.attributes.BANDWIDTH) event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);
                    if (event.attributes["FRAME-RATE"]) event.attributes["FRAME-RATE"] = parseFloat(event.attributes["FRAME-RATE"]);
                    if (event.attributes["PROGRAM-ID"]) event.attributes["PROGRAM-ID"] = parseInt(event.attributes["PROGRAM-ID"], 10);
                }
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-MEDIA:(.*)$/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "media"
                };
                if (match[1]) event.attributes = $c4d97af6644a7726$var$parseAttributes(match[1]);
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-ENDLIST/.exec(newLine);
            if (match) {
                this.trigger("data", {
                    type: "tag",
                    tagType: "endlist"
                });
                return;
            }
            match = /^#EXT-X-DISCONTINUITY/.exec(newLine);
            if (match) {
                this.trigger("data", {
                    type: "tag",
                    tagType: "discontinuity"
                });
                return;
            }
            match = /^#EXT-X-PROGRAM-DATE-TIME:(.*)$/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "program-date-time"
                };
                if (match[1]) {
                    event.dateTimeString = match[1];
                    event.dateTimeObject = new Date(match[1]);
                }
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-KEY:(.*)$/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "key"
                };
                if (match[1]) {
                    event.attributes = $c4d97af6644a7726$var$parseAttributes(match[1]); // parse the IV string into a Uint32Array
                    if (event.attributes.IV) {
                        if (event.attributes.IV.substring(0, 2).toLowerCase() === "0x") event.attributes.IV = event.attributes.IV.substring(2);
                        event.attributes.IV = event.attributes.IV.match(/.{8}/g);
                        event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);
                        event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);
                        event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);
                        event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);
                        event.attributes.IV = new Uint32Array(event.attributes.IV);
                    }
                }
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-START:(.*)$/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "start"
                };
                if (match[1]) {
                    event.attributes = $c4d97af6644a7726$var$parseAttributes(match[1]);
                    event.attributes["TIME-OFFSET"] = parseFloat(event.attributes["TIME-OFFSET"]);
                    event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);
                }
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-CUE-OUT-CONT:(.*)?$/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "cue-out-cont"
                };
                if (match[1]) event.data = match[1];
                else event.data = "";
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-CUE-OUT:(.*)?$/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "cue-out"
                };
                if (match[1]) event.data = match[1];
                else event.data = "";
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-CUE-IN:(.*)?$/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "cue-in"
                };
                if (match[1]) event.data = match[1];
                else event.data = "";
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-SKIP:(.*)$/.exec(newLine);
            if (match && match[1]) {
                event = {
                    type: "tag",
                    tagType: "skip"
                };
                event.attributes = $c4d97af6644a7726$var$parseAttributes(match[1]);
                if (event.attributes.hasOwnProperty("SKIPPED-SEGMENTS")) event.attributes["SKIPPED-SEGMENTS"] = parseInt(event.attributes["SKIPPED-SEGMENTS"], 10);
                if (event.attributes.hasOwnProperty("RECENTLY-REMOVED-DATERANGES")) event.attributes["RECENTLY-REMOVED-DATERANGES"] = event.attributes["RECENTLY-REMOVED-DATERANGES"].split($c4d97af6644a7726$var$TAB);
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-PART:(.*)$/.exec(newLine);
            if (match && match[1]) {
                event = {
                    type: "tag",
                    tagType: "part"
                };
                event.attributes = $c4d97af6644a7726$var$parseAttributes(match[1]);
                [
                    "DURATION"
                ].forEach(function(key) {
                    if (event.attributes.hasOwnProperty(key)) event.attributes[key] = parseFloat(event.attributes[key]);
                });
                [
                    "INDEPENDENT",
                    "GAP"
                ].forEach(function(key) {
                    if (event.attributes.hasOwnProperty(key)) event.attributes[key] = /YES/.test(event.attributes[key]);
                });
                if (event.attributes.hasOwnProperty("BYTERANGE")) event.attributes.byterange = $c4d97af6644a7726$var$parseByterange(event.attributes.BYTERANGE);
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-SERVER-CONTROL:(.*)$/.exec(newLine);
            if (match && match[1]) {
                event = {
                    type: "tag",
                    tagType: "server-control"
                };
                event.attributes = $c4d97af6644a7726$var$parseAttributes(match[1]);
                [
                    "CAN-SKIP-UNTIL",
                    "PART-HOLD-BACK",
                    "HOLD-BACK"
                ].forEach(function(key) {
                    if (event.attributes.hasOwnProperty(key)) event.attributes[key] = parseFloat(event.attributes[key]);
                });
                [
                    "CAN-SKIP-DATERANGES",
                    "CAN-BLOCK-RELOAD"
                ].forEach(function(key) {
                    if (event.attributes.hasOwnProperty(key)) event.attributes[key] = /YES/.test(event.attributes[key]);
                });
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-PART-INF:(.*)$/.exec(newLine);
            if (match && match[1]) {
                event = {
                    type: "tag",
                    tagType: "part-inf"
                };
                event.attributes = $c4d97af6644a7726$var$parseAttributes(match[1]);
                [
                    "PART-TARGET"
                ].forEach(function(key) {
                    if (event.attributes.hasOwnProperty(key)) event.attributes[key] = parseFloat(event.attributes[key]);
                });
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-PRELOAD-HINT:(.*)$/.exec(newLine);
            if (match && match[1]) {
                event = {
                    type: "tag",
                    tagType: "preload-hint"
                };
                event.attributes = $c4d97af6644a7726$var$parseAttributes(match[1]);
                [
                    "BYTERANGE-START",
                    "BYTERANGE-LENGTH"
                ].forEach(function(key) {
                    if (event.attributes.hasOwnProperty(key)) {
                        event.attributes[key] = parseInt(event.attributes[key], 10);
                        const subkey = key === "BYTERANGE-LENGTH" ? "length" : "offset";
                        event.attributes.byterange = event.attributes.byterange || {};
                        event.attributes.byterange[subkey] = event.attributes[key]; // only keep the parsed byterange object.
                        delete event.attributes[key];
                    }
                });
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-RENDITION-REPORT:(.*)$/.exec(newLine);
            if (match && match[1]) {
                event = {
                    type: "tag",
                    tagType: "rendition-report"
                };
                event.attributes = $c4d97af6644a7726$var$parseAttributes(match[1]);
                [
                    "LAST-MSN",
                    "LAST-PART"
                ].forEach(function(key) {
                    if (event.attributes.hasOwnProperty(key)) event.attributes[key] = parseInt(event.attributes[key], 10);
                });
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-DATERANGE:(.*)$/.exec(newLine);
            if (match && match[1]) {
                event = {
                    type: "tag",
                    tagType: "daterange"
                };
                event.attributes = $c4d97af6644a7726$var$parseAttributes(match[1]);
                [
                    "ID",
                    "CLASS"
                ].forEach(function(key) {
                    if (event.attributes.hasOwnProperty(key)) event.attributes[key] = String(event.attributes[key]);
                });
                [
                    "START-DATE",
                    "END-DATE"
                ].forEach(function(key) {
                    if (event.attributes.hasOwnProperty(key)) event.attributes[key] = new Date(event.attributes[key]);
                });
                [
                    "DURATION",
                    "PLANNED-DURATION"
                ].forEach(function(key) {
                    if (event.attributes.hasOwnProperty(key)) event.attributes[key] = parseFloat(event.attributes[key]);
                });
                [
                    "END-ON-NEXT"
                ].forEach(function(key) {
                    if (event.attributes.hasOwnProperty(key)) event.attributes[key] = /YES/i.test(event.attributes[key]);
                });
                [
                    "SCTE35-CMD",
                    " SCTE35-OUT",
                    "SCTE35-IN"
                ].forEach(function(key) {
                    if (event.attributes.hasOwnProperty(key)) event.attributes[key] = event.attributes[key].toString(16);
                });
                const clientAttributePattern = /^X-([A-Z]+-)+[A-Z]+$/;
                for(const key in event.attributes){
                    if (!clientAttributePattern.test(key)) continue;
                    const isHexaDecimal = /[0-9A-Fa-f]{6}/g.test(event.attributes[key]);
                    const isDecimalFloating = /^\d+(\.\d+)?$/.test(event.attributes[key]);
                    event.attributes[key] = isHexaDecimal ? event.attributes[key].toString(16) : isDecimalFloating ? parseFloat(event.attributes[key]) : String(event.attributes[key]);
                }
                this.trigger("data", event);
                return;
            }
            match = /^#EXT-X-INDEPENDENT-SEGMENTS/.exec(newLine);
            if (match) {
                this.trigger("data", {
                    type: "tag",
                    tagType: "independent-segments"
                });
                return;
            }
            match = /^#EXT-X-CONTENT-STEERING:(.*)$/.exec(newLine);
            if (match) {
                event = {
                    type: "tag",
                    tagType: "content-steering"
                };
                event.attributes = $c4d97af6644a7726$var$parseAttributes(match[1]);
                this.trigger("data", event);
                return;
            } // unknown tag type
            this.trigger("data", {
                type: "tag",
                data: newLine.slice(4)
            });
        });
    }
    /**
   * Add a parser for custom headers
   *
   * @param {Object}   options              a map of options for the added parser
   * @param {RegExp}   options.expression   a regular expression to match the custom header
   * @param {string}   options.customType   the custom type to register to the output
   * @param {Function} [options.dataParser] function to parse the line into an object
   * @param {boolean}  [options.segment]    should tag data be attached to the segment object
   */ addParser({ expression: expression, customType: customType, dataParser: dataParser, segment: segment }) {
        if (typeof dataParser !== "function") dataParser = (line)=>line;
        this.customParsers.push((line)=>{
            const match = expression.exec(line);
            if (match) {
                this.trigger("data", {
                    type: "custom",
                    data: dataParser(line),
                    customType: customType,
                    segment: segment
                });
                return true;
            }
        });
    }
    /**
   * Add a custom header mapper
   *
   * @param {Object}   options
   * @param {RegExp}   options.expression   a regular expression to match the custom header
   * @param {Function} options.map          function to translate tag into a different tag
   */ addTagMapper({ expression: expression, map: map }) {
        const mapFn = (line)=>{
            if (expression.test(line)) return map(line);
            return line;
        };
        this.tagMappers.push(mapFn);
    }
}
const $c4d97af6644a7726$var$camelCase = (str)=>str.toLowerCase().replace(/-(\w)/g, (a)=>a[1].toUpperCase());
const $c4d97af6644a7726$var$camelCaseKeys = function(attributes) {
    const result = {};
    Object.keys(attributes).forEach(function(key) {
        result[$c4d97af6644a7726$var$camelCase(key)] = attributes[key];
    });
    return result;
}; // set SERVER-CONTROL hold back based upon targetDuration and partTargetDuration
// we need this helper because defaults are based upon targetDuration and
// partTargetDuration being set, but they may not be if SERVER-CONTROL appears before
// target durations are set.
const $c4d97af6644a7726$var$setHoldBack = function(manifest) {
    const { serverControl: serverControl, targetDuration: targetDuration, partTargetDuration: partTargetDuration } = manifest;
    if (!serverControl) return;
    const tag = "#EXT-X-SERVER-CONTROL";
    const hb = "holdBack";
    const phb = "partHoldBack";
    const minTargetDuration = targetDuration && targetDuration * 3;
    const minPartDuration = partTargetDuration && partTargetDuration * 2;
    if (targetDuration && !serverControl.hasOwnProperty(hb)) {
        serverControl[hb] = minTargetDuration;
        this.trigger("info", {
            message: `${tag} defaulting HOLD-BACK to targetDuration * 3 (${minTargetDuration}).`
        });
    }
    if (minTargetDuration && serverControl[hb] < minTargetDuration) {
        this.trigger("warn", {
            message: `${tag} clamping HOLD-BACK (${serverControl[hb]}) to targetDuration * 3 (${minTargetDuration})`
        });
        serverControl[hb] = minTargetDuration;
    } // default no part hold back to part target duration * 3
    if (partTargetDuration && !serverControl.hasOwnProperty(phb)) {
        serverControl[phb] = partTargetDuration * 3;
        this.trigger("info", {
            message: `${tag} defaulting PART-HOLD-BACK to partTargetDuration * 3 (${serverControl[phb]}).`
        });
    } // if part hold back is too small default it to part target duration * 2
    if (partTargetDuration && serverControl[phb] < minPartDuration) {
        this.trigger("warn", {
            message: `${tag} clamping PART-HOLD-BACK (${serverControl[phb]}) to partTargetDuration * 2 (${minPartDuration}).`
        });
        serverControl[phb] = minPartDuration;
    }
};
/**
 * A parser for M3U8 files. The current interpretation of the input is
 * exposed as a property `manifest` on parser objects. It's just two lines to
 * create and parse a manifest once you have the contents available as a string:
 *
 * ```js
 * var parser = new m3u8.Parser();
 * parser.push(xhr.responseText);
 * ```
 *
 * New input can later be applied to update the manifest object by calling
 * `push` again.
 *
 * The parser attempts to create a usable manifest object even if the
 * underlying input is somewhat nonsensical. It emits `info` and `warning`
 * events during the parse if it encounters input that seems invalid or
 * requires some property of the manifest object to be defaulted.
 *
 * @class Parser
 * @extends Stream
 */ class $c4d97af6644a7726$export$7acfa6ed01010e37 extends (0, $41b8cb3156f84b7c$export$2e2bcd8739ae039) {
    constructor(){
        super();
        this.lineStream = new $c4d97af6644a7726$export$307ab5c52b11c33e();
        this.parseStream = new $c4d97af6644a7726$export$bc65cb5a6d9da573();
        this.lineStream.pipe(this.parseStream);
        this.lastProgramDateTime = null;
        /* eslint-disable consistent-this */ const self = this;
        /* eslint-enable consistent-this */ const uris = [];
        let currentUri = {}; // if specified, the active EXT-X-MAP definition
        let currentMap; // if specified, the active decryption key
        let key;
        let hasParts = false;
        const noop = function() {};
        const defaultMediaGroups = {
            "AUDIO": {},
            "VIDEO": {},
            "CLOSED-CAPTIONS": {},
            "SUBTITLES": {}
        }; // This is the Widevine UUID from DASH IF IOP. The same exact string is
        // used in MPDs with Widevine encrypted streams.
        const widevineUuid = "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed"; // group segments into numbered timelines delineated by discontinuities
        let currentTimeline = 0; // the manifest is empty until the parse stream begins delivering data
        this.manifest = {
            allowCache: true,
            discontinuityStarts: [],
            dateRanges: [],
            segments: []
        }; // keep track of the last seen segment's byte range end, as segments are not required
        // to provide the offset, in which case it defaults to the next byte after the
        // previous segment
        let lastByterangeEnd = 0; // keep track of the last seen part's byte range end.
        let lastPartByterangeEnd = 0;
        const dateRangeTags = {};
        this.on("end", ()=>{
            // only add preloadSegment if we don't yet have a uri for it.
            // and we actually have parts/preloadHints
            if (currentUri.uri || !currentUri.parts && !currentUri.preloadHints) return;
            if (!currentUri.map && currentMap) currentUri.map = currentMap;
            if (!currentUri.key && key) currentUri.key = key;
            if (!currentUri.timeline && typeof currentTimeline === "number") currentUri.timeline = currentTimeline;
            this.manifest.preloadSegment = currentUri;
        }); // update the manifest with the m3u8 entry from the parse stream
        this.parseStream.on("data", function(entry) {
            let mediaGroup;
            let rendition;
            ({
                tag () {
                    // switch based on the tag type
                    (({
                        version () {
                            if (entry.version) this.manifest.version = entry.version;
                        },
                        "allow-cache" () {
                            this.manifest.allowCache = entry.allowed;
                            if (!("allowed" in entry)) {
                                this.trigger("info", {
                                    message: "defaulting allowCache to YES"
                                });
                                this.manifest.allowCache = true;
                            }
                        },
                        byterange () {
                            const byterange = {};
                            if ("length" in entry) {
                                currentUri.byterange = byterange;
                                byterange.length = entry.length;
                                if (!("offset" in entry)) /*
                   * From the latest spec (as of this writing):
                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.2
                   *
                   * Same text since EXT-X-BYTERANGE's introduction in draft 7:
                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-07#section-3.3.1)
                   *
                   * "If o [offset] is not present, the sub-range begins at the next byte
                   * following the sub-range of the previous media segment."
                   */ entry.offset = lastByterangeEnd;
                            }
                            if ("offset" in entry) {
                                currentUri.byterange = byterange;
                                byterange.offset = entry.offset;
                            }
                            lastByterangeEnd = byterange.offset + byterange.length;
                        },
                        endlist () {
                            this.manifest.endList = true;
                        },
                        inf () {
                            if (!("mediaSequence" in this.manifest)) {
                                this.manifest.mediaSequence = 0;
                                this.trigger("info", {
                                    message: "defaulting media sequence to zero"
                                });
                            }
                            if (!("discontinuitySequence" in this.manifest)) {
                                this.manifest.discontinuitySequence = 0;
                                this.trigger("info", {
                                    message: "defaulting discontinuity sequence to zero"
                                });
                            }
                            if (entry.title) currentUri.title = entry.title;
                            if (entry.duration > 0) currentUri.duration = entry.duration;
                            if (entry.duration === 0) {
                                currentUri.duration = 0.01;
                                this.trigger("info", {
                                    message: "updating zero segment duration to a small value"
                                });
                            }
                            this.manifest.segments = uris;
                        },
                        key () {
                            if (!entry.attributes) {
                                this.trigger("warn", {
                                    message: "ignoring key declaration without attribute list"
                                });
                                return;
                            } // clear the active encryption key
                            if (entry.attributes.METHOD === "NONE") {
                                key = null;
                                return;
                            }
                            if (!entry.attributes.URI) {
                                this.trigger("warn", {
                                    message: "ignoring key declaration without URI"
                                });
                                return;
                            }
                            if (entry.attributes.KEYFORMAT === "com.apple.streamingkeydelivery") {
                                this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.
                                this.manifest.contentProtection["com.apple.fps.1_0"] = {
                                    attributes: entry.attributes
                                };
                                return;
                            }
                            if (entry.attributes.KEYFORMAT === "com.microsoft.playready") {
                                this.manifest.contentProtection = this.manifest.contentProtection || {}; // TODO: add full support for this.
                                this.manifest.contentProtection["com.microsoft.playready"] = {
                                    uri: entry.attributes.URI
                                };
                                return;
                            } // check if the content is encrypted for Widevine
                            // Widevine/HLS spec: https://storage.googleapis.com/wvdocs/Widevine_DRM_HLS.pdf
                            if (entry.attributes.KEYFORMAT === widevineUuid) {
                                const VALID_METHODS = [
                                    "SAMPLE-AES",
                                    "SAMPLE-AES-CTR",
                                    "SAMPLE-AES-CENC"
                                ];
                                if (VALID_METHODS.indexOf(entry.attributes.METHOD) === -1) {
                                    this.trigger("warn", {
                                        message: "invalid key method provided for Widevine"
                                    });
                                    return;
                                }
                                if (entry.attributes.METHOD === "SAMPLE-AES-CENC") this.trigger("warn", {
                                    message: "SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead"
                                });
                                if (entry.attributes.URI.substring(0, 23) !== "data:text/plain;base64,") {
                                    this.trigger("warn", {
                                        message: "invalid key URI provided for Widevine"
                                    });
                                    return;
                                }
                                if (!(entry.attributes.KEYID && entry.attributes.KEYID.substring(0, 2) === "0x")) {
                                    this.trigger("warn", {
                                        message: "invalid key ID provided for Widevine"
                                    });
                                    return;
                                } // if Widevine key attributes are valid, store them as `contentProtection`
                                // on the manifest to emulate Widevine tag structure in a DASH mpd
                                this.manifest.contentProtection = this.manifest.contentProtection || {};
                                this.manifest.contentProtection["com.widevine.alpha"] = {
                                    attributes: {
                                        schemeIdUri: entry.attributes.KEYFORMAT,
                                        // remove '0x' from the key id string
                                        keyId: entry.attributes.KEYID.substring(2)
                                    },
                                    // decode the base64-encoded PSSH box
                                    pssh: (0, $a7f4caf19b02af13$export$2e2bcd8739ae039)(entry.attributes.URI.split(",")[1])
                                };
                                return;
                            }
                            if (!entry.attributes.METHOD) this.trigger("warn", {
                                message: "defaulting key method to AES-128"
                            });
                             // setup an encryption key for upcoming segments
                            key = {
                                method: entry.attributes.METHOD || "AES-128",
                                uri: entry.attributes.URI
                            };
                            if (typeof entry.attributes.IV !== "undefined") key.iv = entry.attributes.IV;
                        },
                        "media-sequence" () {
                            if (!isFinite(entry.number)) {
                                this.trigger("warn", {
                                    message: "ignoring invalid media sequence: " + entry.number
                                });
                                return;
                            }
                            this.manifest.mediaSequence = entry.number;
                        },
                        "discontinuity-sequence" () {
                            if (!isFinite(entry.number)) {
                                this.trigger("warn", {
                                    message: "ignoring invalid discontinuity sequence: " + entry.number
                                });
                                return;
                            }
                            this.manifest.discontinuitySequence = entry.number;
                            currentTimeline = entry.number;
                        },
                        "playlist-type" () {
                            if (!/VOD|EVENT/.test(entry.playlistType)) {
                                this.trigger("warn", {
                                    message: "ignoring unknown playlist type: " + entry.playlist
                                });
                                return;
                            }
                            this.manifest.playlistType = entry.playlistType;
                        },
                        map () {
                            currentMap = {};
                            if (entry.uri) currentMap.uri = entry.uri;
                            if (entry.byterange) currentMap.byterange = entry.byterange;
                            if (key) currentMap.key = key;
                        },
                        "stream-inf" () {
                            this.manifest.playlists = uris;
                            this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;
                            if (!entry.attributes) {
                                this.trigger("warn", {
                                    message: "ignoring empty stream-inf attributes"
                                });
                                return;
                            }
                            if (!currentUri.attributes) currentUri.attributes = {};
                            (0, (/*@__PURE__*/$parcel$interopDefault($a41f6c2ef6e36772$exports)))(currentUri.attributes, entry.attributes);
                        },
                        media () {
                            this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;
                            if (!(entry.attributes && entry.attributes.TYPE && entry.attributes["GROUP-ID"] && entry.attributes.NAME)) {
                                this.trigger("warn", {
                                    message: "ignoring incomplete or missing media group"
                                });
                                return;
                            } // find the media group, creating defaults as necessary
                            const mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];
                            mediaGroupType[entry.attributes["GROUP-ID"]] = mediaGroupType[entry.attributes["GROUP-ID"]] || {};
                            mediaGroup = mediaGroupType[entry.attributes["GROUP-ID"]]; // collect the rendition metadata
                            rendition = {
                                default: /yes/i.test(entry.attributes.DEFAULT)
                            };
                            if (rendition.default) rendition.autoselect = true;
                            else rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);
                            if (entry.attributes.LANGUAGE) rendition.language = entry.attributes.LANGUAGE;
                            if (entry.attributes.URI) rendition.uri = entry.attributes.URI;
                            if (entry.attributes["INSTREAM-ID"]) rendition.instreamId = entry.attributes["INSTREAM-ID"];
                            if (entry.attributes.CHARACTERISTICS) rendition.characteristics = entry.attributes.CHARACTERISTICS;
                            if (entry.attributes.FORCED) rendition.forced = /yes/i.test(entry.attributes.FORCED);
                             // insert the new rendition
                            mediaGroup[entry.attributes.NAME] = rendition;
                        },
                        discontinuity () {
                            currentTimeline += 1;
                            currentUri.discontinuity = true;
                            this.manifest.discontinuityStarts.push(uris.length);
                        },
                        "program-date-time" () {
                            if (typeof this.manifest.dateTimeString === "undefined") {
                                // PROGRAM-DATE-TIME is a media-segment tag, but for backwards
                                // compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag
                                // to the manifest object
                                // TODO: Consider removing this in future major version
                                this.manifest.dateTimeString = entry.dateTimeString;
                                this.manifest.dateTimeObject = entry.dateTimeObject;
                            }
                            currentUri.dateTimeString = entry.dateTimeString;
                            currentUri.dateTimeObject = entry.dateTimeObject;
                            const { lastProgramDateTime: lastProgramDateTime } = this;
                            this.lastProgramDateTime = new Date(entry.dateTimeString).getTime(); // We should extrapolate Program Date Time backward only during first program date time occurrence.
                            // Once we have at least one program date time point, we can always extrapolate it forward using lastProgramDateTime reference.
                            if (lastProgramDateTime === null) // Extrapolate Program Date Time backward
                            // Since it is first program date time occurrence we're assuming that
                            // all this.manifest.segments have no program date time info
                            this.manifest.segments.reduceRight((programDateTime, segment)=>{
                                segment.programDateTime = programDateTime - segment.duration * 1000;
                                return segment.programDateTime;
                            }, this.lastProgramDateTime);
                        },
                        targetduration () {
                            if (!isFinite(entry.duration) || entry.duration < 0) {
                                this.trigger("warn", {
                                    message: "ignoring invalid target duration: " + entry.duration
                                });
                                return;
                            }
                            this.manifest.targetDuration = entry.duration;
                            $c4d97af6644a7726$var$setHoldBack.call(this, this.manifest);
                        },
                        start () {
                            if (!entry.attributes || isNaN(entry.attributes["TIME-OFFSET"])) {
                                this.trigger("warn", {
                                    message: "ignoring start declaration without appropriate attribute list"
                                });
                                return;
                            }
                            this.manifest.start = {
                                timeOffset: entry.attributes["TIME-OFFSET"],
                                precise: entry.attributes.PRECISE
                            };
                        },
                        "cue-out" () {
                            currentUri.cueOut = entry.data;
                        },
                        "cue-out-cont" () {
                            currentUri.cueOutCont = entry.data;
                        },
                        "cue-in" () {
                            currentUri.cueIn = entry.data;
                        },
                        "skip" () {
                            this.manifest.skip = $c4d97af6644a7726$var$camelCaseKeys(entry.attributes);
                            this.warnOnMissingAttributes_("#EXT-X-SKIP", entry.attributes, [
                                "SKIPPED-SEGMENTS"
                            ]);
                        },
                        "part" () {
                            hasParts = true; // parts are always specifed before a segment
                            const segmentIndex = this.manifest.segments.length;
                            const part = $c4d97af6644a7726$var$camelCaseKeys(entry.attributes);
                            currentUri.parts = currentUri.parts || [];
                            currentUri.parts.push(part);
                            if (part.byterange) {
                                if (!part.byterange.hasOwnProperty("offset")) part.byterange.offset = lastPartByterangeEnd;
                                lastPartByterangeEnd = part.byterange.offset + part.byterange.length;
                            }
                            const partIndex = currentUri.parts.length - 1;
                            this.warnOnMissingAttributes_(`#EXT-X-PART #${partIndex} for segment #${segmentIndex}`, entry.attributes, [
                                "URI",
                                "DURATION"
                            ]);
                            if (this.manifest.renditionReports) this.manifest.renditionReports.forEach((r, i)=>{
                                if (!r.hasOwnProperty("lastPart")) this.trigger("warn", {
                                    message: `#EXT-X-RENDITION-REPORT #${i} lacks required attribute(s): LAST-PART`
                                });
                            });
                        },
                        "server-control" () {
                            const attrs = this.manifest.serverControl = $c4d97af6644a7726$var$camelCaseKeys(entry.attributes);
                            if (!attrs.hasOwnProperty("canBlockReload")) {
                                attrs.canBlockReload = false;
                                this.trigger("info", {
                                    message: "#EXT-X-SERVER-CONTROL defaulting CAN-BLOCK-RELOAD to false"
                                });
                            }
                            $c4d97af6644a7726$var$setHoldBack.call(this, this.manifest);
                            if (attrs.canSkipDateranges && !attrs.hasOwnProperty("canSkipUntil")) this.trigger("warn", {
                                message: "#EXT-X-SERVER-CONTROL lacks required attribute CAN-SKIP-UNTIL which is required when CAN-SKIP-DATERANGES is set"
                            });
                        },
                        "preload-hint" () {
                            // parts are always specifed before a segment
                            const segmentIndex = this.manifest.segments.length;
                            const hint = $c4d97af6644a7726$var$camelCaseKeys(entry.attributes);
                            const isPart = hint.type && hint.type === "PART";
                            currentUri.preloadHints = currentUri.preloadHints || [];
                            currentUri.preloadHints.push(hint);
                            if (hint.byterange) {
                                if (!hint.byterange.hasOwnProperty("offset")) {
                                    // use last part byterange end or zero if not a part.
                                    hint.byterange.offset = isPart ? lastPartByterangeEnd : 0;
                                    if (isPart) lastPartByterangeEnd = hint.byterange.offset + hint.byterange.length;
                                }
                            }
                            const index = currentUri.preloadHints.length - 1;
                            this.warnOnMissingAttributes_(`#EXT-X-PRELOAD-HINT #${index} for segment #${segmentIndex}`, entry.attributes, [
                                "TYPE",
                                "URI"
                            ]);
                            if (!hint.type) return;
                             // search through all preload hints except for the current one for
                            // a duplicate type.
                            for(let i = 0; i < currentUri.preloadHints.length - 1; i++){
                                const otherHint = currentUri.preloadHints[i];
                                if (!otherHint.type) continue;
                                if (otherHint.type === hint.type) this.trigger("warn", {
                                    message: `#EXT-X-PRELOAD-HINT #${index} for segment #${segmentIndex} has the same TYPE ${hint.type} as preload hint #${i}`
                                });
                            }
                        },
                        "rendition-report" () {
                            const report = $c4d97af6644a7726$var$camelCaseKeys(entry.attributes);
                            this.manifest.renditionReports = this.manifest.renditionReports || [];
                            this.manifest.renditionReports.push(report);
                            const index = this.manifest.renditionReports.length - 1;
                            const required = [
                                "LAST-MSN",
                                "URI"
                            ];
                            if (hasParts) required.push("LAST-PART");
                            this.warnOnMissingAttributes_(`#EXT-X-RENDITION-REPORT #${index}`, entry.attributes, required);
                        },
                        "part-inf" () {
                            this.manifest.partInf = $c4d97af6644a7726$var$camelCaseKeys(entry.attributes);
                            this.warnOnMissingAttributes_("#EXT-X-PART-INF", entry.attributes, [
                                "PART-TARGET"
                            ]);
                            if (this.manifest.partInf.partTarget) this.manifest.partTargetDuration = this.manifest.partInf.partTarget;
                            $c4d97af6644a7726$var$setHoldBack.call(this, this.manifest);
                        },
                        "daterange" () {
                            this.manifest.dateRanges.push($c4d97af6644a7726$var$camelCaseKeys(entry.attributes));
                            const index = this.manifest.dateRanges.length - 1;
                            this.warnOnMissingAttributes_(`#EXT-X-DATERANGE #${index}`, entry.attributes, [
                                "ID",
                                "START-DATE"
                            ]);
                            const dateRange = this.manifest.dateRanges[index];
                            if (dateRange.endDate && dateRange.startDate && new Date(dateRange.endDate) < new Date(dateRange.startDate)) this.trigger("warn", {
                                message: "EXT-X-DATERANGE END-DATE must be equal to or later than the value of the START-DATE"
                            });
                            if (dateRange.duration && dateRange.duration < 0) this.trigger("warn", {
                                message: "EXT-X-DATERANGE DURATION must not be negative"
                            });
                            if (dateRange.plannedDuration && dateRange.plannedDuration < 0) this.trigger("warn", {
                                message: "EXT-X-DATERANGE PLANNED-DURATION must not be negative"
                            });
                            const endOnNextYes = !!dateRange.endOnNext;
                            if (endOnNextYes && !dateRange.class) this.trigger("warn", {
                                message: "EXT-X-DATERANGE with an END-ON-NEXT=YES attribute must have a CLASS attribute"
                            });
                            if (endOnNextYes && (dateRange.duration || dateRange.endDate)) this.trigger("warn", {
                                message: "EXT-X-DATERANGE with an END-ON-NEXT=YES attribute must not contain DURATION or END-DATE attributes"
                            });
                            if (dateRange.duration && dateRange.endDate) {
                                const startDate = dateRange.startDate;
                                const newDateInSeconds = startDate.getTime() + dateRange.duration * 1000;
                                this.manifest.dateRanges[index].endDate = new Date(newDateInSeconds);
                            }
                            if (!dateRangeTags[dateRange.id]) dateRangeTags[dateRange.id] = dateRange;
                            else {
                                for(const attribute in dateRangeTags[dateRange.id])if (!!dateRange[attribute] && JSON.stringify(dateRangeTags[dateRange.id][attribute]) !== JSON.stringify(dateRange[attribute])) {
                                    this.trigger("warn", {
                                        message: "EXT-X-DATERANGE tags with the same ID in a playlist must have the same attributes values"
                                    });
                                    break;
                                }
                                 // if tags with the same ID do not have conflicting attributes, merge them
                                const dateRangeWithSameId = this.manifest.dateRanges.findIndex((dateRangeToFind)=>dateRangeToFind.id === dateRange.id);
                                this.manifest.dateRanges[dateRangeWithSameId] = (0, (/*@__PURE__*/$parcel$interopDefault($a41f6c2ef6e36772$exports)))(this.manifest.dateRanges[dateRangeWithSameId], dateRange);
                                dateRangeTags[dateRange.id] = (0, (/*@__PURE__*/$parcel$interopDefault($a41f6c2ef6e36772$exports)))(dateRangeTags[dateRange.id], dateRange); // after merging, delete the duplicate dateRange that was added last
                                this.manifest.dateRanges.pop();
                            }
                        },
                        "independent-segments" () {
                            this.manifest.independentSegments = true;
                        },
                        "content-steering" () {
                            this.manifest.contentSteering = $c4d97af6644a7726$var$camelCaseKeys(entry.attributes);
                            this.warnOnMissingAttributes_("#EXT-X-CONTENT-STEERING", entry.attributes, [
                                "SERVER-URI"
                            ]);
                        }
                    })[entry.tagType] || noop).call(self);
                },
                uri () {
                    currentUri.uri = entry.uri;
                    uris.push(currentUri); // if no explicit duration was declared, use the target duration
                    if (this.manifest.targetDuration && !("duration" in currentUri)) {
                        this.trigger("warn", {
                            message: "defaulting segment duration to the target duration"
                        });
                        currentUri.duration = this.manifest.targetDuration;
                    } // annotate with encryption information, if necessary
                    if (key) currentUri.key = key;
                    currentUri.timeline = currentTimeline; // annotate with initialization segment information, if necessary
                    if (currentMap) currentUri.map = currentMap;
                     // reset the last byterange end as it needs to be 0 between parts
                    lastPartByterangeEnd = 0; // Once we have at least one program date time we can always extrapolate it forward
                    if (this.lastProgramDateTime !== null) {
                        currentUri.programDateTime = this.lastProgramDateTime;
                        this.lastProgramDateTime += currentUri.duration * 1000;
                    } // prepare for the next URI
                    currentUri = {};
                },
                comment () {},
                custom () {
                    // if this is segment-level data attach the output to the segment
                    if (entry.segment) {
                        currentUri.custom = currentUri.custom || {};
                        currentUri.custom[entry.customType] = entry.data; // if this is manifest-level data attach to the top level manifest object
                    } else {
                        this.manifest.custom = this.manifest.custom || {};
                        this.manifest.custom[entry.customType] = entry.data;
                    }
                }
            })[entry.type].call(self);
        });
    }
    warnOnMissingAttributes_(identifier, attributes, required) {
        const missing = [];
        required.forEach(function(key) {
            if (!attributes.hasOwnProperty(key)) missing.push(key);
        });
        if (missing.length) this.trigger("warn", {
            message: `${identifier} lacks required attribute(s): ${missing.join(", ")}`
        });
    }
    /**
   * Parse the input string and update the manifest object.
   *
   * @param {string} chunk a potentially incomplete portion of the manifest
   */ push(chunk) {
        this.lineStream.push(chunk);
    }
    /**
   * Flush any remaining input. This can be handy if the last line of an M3U8
   * manifest did not contain a trailing newline but the file has been
   * completely received.
   */ end() {
        // flush any buffered input
        this.lineStream.push("\n");
        if (this.manifest.dateRanges.length && this.lastProgramDateTime === null) this.trigger("warn", {
            message: "A playlist with EXT-X-DATERANGE tag must contain atleast one EXT-X-PROGRAM-DATE-TIME tag"
        });
        this.lastProgramDateTime = null;
        this.trigger("end");
    }
    /**
   * Add an additional parser for non-standard tags
   *
   * @param {Object}   options              a map of options for the added parser
   * @param {RegExp}   options.expression   a regular expression to match the custom header
   * @param {string}   options.customType   the custom type to register to the output
   * @param {Function} [options.dataParser] function to parse the line into an object
   * @param {boolean}  [options.segment]    should tag data be attached to the segment object
   */ addParser(options) {
        this.parseStream.addParser(options);
    }
    /**
   * Add a custom header mapper
   *
   * @param {Object}   options
   * @param {RegExp}   options.expression   a regular expression to match the custom header
   * @param {Function} options.map          function to translate tag into a different tag
   */ addTagMapper(options) {
        this.parseStream.addTagMapper(options);
    }
}



var $cktB7 = parcelRequire("cktB7");
var $823f1f5df1bbf628$var$regexs = {
    // to determine mime types
    mp4: /^(av0?1|avc0?[1234]|vp0?9|flac|opus|mp3|mp4a|mp4v|stpp.ttml.im1t)/,
    webm: /^(vp0?[89]|av0?1|opus|vorbis)/,
    ogg: /^(vp0?[89]|theora|flac|opus|vorbis)/,
    // to determine if a codec is audio or video
    video: /^(av0?1|avc0?[1234]|vp0?[89]|hvc1|hev1|theora|mp4v)/,
    audio: /^(mp4a|flac|vorbis|opus|ac-[34]|ec-3|alac|mp3|speex|aac)/,
    text: /^(stpp.ttml.im1t)/,
    // mux.js support regex
    muxerVideo: /^(avc0?1)/,
    muxerAudio: /^(mp4a)/,
    // match nothing as muxer does not support text right now.
    // there cannot never be a character before the start of a string
    // so this matches nothing.
    muxerText: /a^/
};
var $823f1f5df1bbf628$var$mediaTypes = [
    "video",
    "audio",
    "text"
];
var $823f1f5df1bbf628$var$upperMediaTypes = [
    "Video",
    "Audio",
    "Text"
];
var $823f1f5df1bbf628$export$4e61c3c458a5b005 = function translateLegacyCodec(codec) {
    if (!codec) return codec;
    return codec.replace(/avc1\.(\d+)\.(\d+)/i, function(orig, profile, avcLevel) {
        var profileHex = ("00" + Number(profile).toString(16)).slice(-2);
        var avcLevelHex = ("00" + Number(avcLevel).toString(16)).slice(-2);
        return "avc1." + profileHex + "00" + avcLevelHex;
    });
};
var $823f1f5df1bbf628$export$2fa1fd5760053cdc = function translateLegacyCodecs(codecs) {
    return codecs.map($823f1f5df1bbf628$export$4e61c3c458a5b005);
};
var $823f1f5df1bbf628$export$ff37541a73872ef0 = function mapLegacyAvcCodecs(codecString) {
    return codecString.replace(/avc1\.(\d+)\.(\d+)/i, function(match) {
        return $823f1f5df1bbf628$export$2fa1fd5760053cdc([
            match
        ])[0];
    });
};
var $823f1f5df1bbf628$export$56679b562aa2891c = function parseCodecs(codecString) {
    if (codecString === void 0) codecString = "";
    var codecs = codecString.split(",");
    var result = [];
    codecs.forEach(function(codec) {
        codec = codec.trim();
        var codecType;
        $823f1f5df1bbf628$var$mediaTypes.forEach(function(name) {
            var match = $823f1f5df1bbf628$var$regexs[name].exec(codec.toLowerCase());
            if (!match || match.length <= 1) return;
            codecType = name; // maintain codec case
            var type = codec.substring(0, match[1].length);
            var details = codec.replace(type, "");
            result.push({
                type: type,
                details: details,
                mediaType: name
            });
        });
        if (!codecType) result.push({
            type: codec,
            details: "",
            mediaType: "unknown"
        });
    });
    return result;
};
var $823f1f5df1bbf628$export$e192782a4d0b5c5c = function codecsFromDefault(master, audioGroupId) {
    if (!master.mediaGroups.AUDIO || !audioGroupId) return null;
    var audioGroup = master.mediaGroups.AUDIO[audioGroupId];
    if (!audioGroup) return null;
    for(var name in audioGroup){
        var audioType = audioGroup[name];
        if (audioType.default && audioType.playlists) // codec should be the same for all playlists within the audio type
        return $823f1f5df1bbf628$export$56679b562aa2891c(audioType.playlists[0].attributes.CODECS);
    }
    return null;
};
var $823f1f5df1bbf628$export$601d10c6a66cb34c = function isVideoCodec(codec) {
    if (codec === void 0) codec = "";
    return $823f1f5df1bbf628$var$regexs.video.test(codec.trim().toLowerCase());
};
var $823f1f5df1bbf628$export$c642d74e895e3217 = function isAudioCodec(codec) {
    if (codec === void 0) codec = "";
    return $823f1f5df1bbf628$var$regexs.audio.test(codec.trim().toLowerCase());
};
var $823f1f5df1bbf628$export$256d4a55aa322b7e = function isTextCodec(codec) {
    if (codec === void 0) codec = "";
    return $823f1f5df1bbf628$var$regexs.text.test(codec.trim().toLowerCase());
};
var $823f1f5df1bbf628$export$4b64fc0a026b9981 = function getMimeForCodec(codecString) {
    if (!codecString || typeof codecString !== "string") return;
    var codecs = codecString.toLowerCase().split(",").map(function(c) {
        return $823f1f5df1bbf628$export$4e61c3c458a5b005(c.trim());
    }); // default to video type
    var type = "video"; // only change to audio type if the only codec we have is
    // audio
    if (codecs.length === 1 && $823f1f5df1bbf628$export$c642d74e895e3217(codecs[0])) type = "audio";
    else if (codecs.length === 1 && $823f1f5df1bbf628$export$256d4a55aa322b7e(codecs[0])) // text uses application/<container> for now
    type = "application";
     // default the container to mp4
    var container = "mp4"; // every codec must be able to go into the container
    // for that container to be the correct one
    if (codecs.every(function(c) {
        return $823f1f5df1bbf628$var$regexs.mp4.test(c);
    })) container = "mp4";
    else if (codecs.every(function(c) {
        return $823f1f5df1bbf628$var$regexs.webm.test(c);
    })) container = "webm";
    else if (codecs.every(function(c) {
        return $823f1f5df1bbf628$var$regexs.ogg.test(c);
    })) container = "ogg";
    return type + "/" + container + ';codecs="' + codecString + '"';
};
var $823f1f5df1bbf628$export$3ee949df8fbc592f = function browserSupportsCodec(codecString) {
    if (codecString === void 0) codecString = "";
    return (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).MediaSource && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).MediaSource.isTypeSupported && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).MediaSource.isTypeSupported($823f1f5df1bbf628$export$4b64fc0a026b9981(codecString)) || false;
};
var $823f1f5df1bbf628$export$614fda2d02e4a9d7 = function muxerSupportsCodec(codecString) {
    if (codecString === void 0) codecString = "";
    return codecString.toLowerCase().split(",").every(function(codec) {
        codec = codec.trim(); // any match is supported.
        for(var i = 0; i < $823f1f5df1bbf628$var$upperMediaTypes.length; i++){
            var type = $823f1f5df1bbf628$var$upperMediaTypes[i];
            if ($823f1f5df1bbf628$var$regexs["muxer" + type].test(codec)) return true;
        }
        return false;
    });
};
var $823f1f5df1bbf628$export$615de1d7b49571dc = "mp4a.40.2";
var $823f1f5df1bbf628$export$77d6196664053611 = "avc1.4d400d";


var $c1e8cd70b6fc15b0$var$MPEGURL_REGEX = /^(audio|video|application)\/(x-|vnd\.apple\.)?mpegurl/i;
var $c1e8cd70b6fc15b0$var$DASH_REGEX = /^application\/dash\+xml/i;
var $c1e8cd70b6fc15b0$export$c4f0bf48244d4c05 = function simpleTypeFromSourceType(type) {
    if ($c1e8cd70b6fc15b0$var$MPEGURL_REGEX.test(type)) return "hls";
    if ($c1e8cd70b6fc15b0$var$DASH_REGEX.test(type)) return "dash";
     // Denotes the special case of a manifest object passed to http-streaming instead of a
    // source URL.
    //
    // See https://en.wikipedia.org/wiki/Media_type for details on specifying media types.
    //
    // In this case, vnd stands for vendor, video.js for the organization, VHS for this
    // project, and the +json suffix identifies the structure of the media type.
    if (type === "application/vnd.videojs.vhs+json") return "vhs-json";
    return null;
};



var $cktB7 = parcelRequire("cktB7");
var $d7439dbe74fc424d$var$repeat = function repeat(str, len) {
    var acc = "";
    while(len--)acc += str;
    return acc;
}; // count the number of bits it would take to represent a number
var $d7439dbe74fc424d$export$33de6ea056a4cdbb = function countBits(x) {
    return x.toString(2).length;
}; // count the number of whole bytes it would take to represent a number
var $d7439dbe74fc424d$export$42cd407004f34122 = function countBytes(x) {
    return Math.ceil($d7439dbe74fc424d$export$33de6ea056a4cdbb(x) / 8);
};
var $d7439dbe74fc424d$export$36cf564d487b5178 = function padStart(b, len, str) {
    if (str === void 0) str = " ";
    return ($d7439dbe74fc424d$var$repeat(str, len) + b.toString()).slice(-len);
};
var $d7439dbe74fc424d$export$ef047080f6507ccc = function isArrayBufferView(obj) {
    if (ArrayBuffer.isView === "function") return ArrayBuffer.isView(obj);
    return obj && obj.buffer instanceof ArrayBuffer;
};
var $d7439dbe74fc424d$export$b119cc7e1840e59c = function isTypedArray(obj) {
    return $d7439dbe74fc424d$export$ef047080f6507ccc(obj);
};
var $d7439dbe74fc424d$export$63c3de442720649 = function toUint8(bytes) {
    if (bytes instanceof Uint8Array) return bytes;
    if (!Array.isArray(bytes) && !$d7439dbe74fc424d$export$b119cc7e1840e59c(bytes) && !(bytes instanceof ArrayBuffer)) {
        // any non-number or NaN leads to empty uint8array
        // eslint-disable-next-line
        if (typeof bytes !== "number" || typeof bytes === "number" && bytes !== bytes) bytes = 0;
        else bytes = [
            bytes
        ];
    }
    return new Uint8Array(bytes && bytes.buffer || bytes, bytes && bytes.byteOffset || 0, bytes && bytes.byteLength || 0);
};
var $d7439dbe74fc424d$export$f4915efbb94d4d01 = function toHexString(bytes) {
    bytes = $d7439dbe74fc424d$export$63c3de442720649(bytes);
    var str = "";
    for(var i = 0; i < bytes.length; i++)str += $d7439dbe74fc424d$export$36cf564d487b5178(bytes[i].toString(16), 2, "0");
    return str;
};
var $d7439dbe74fc424d$export$9a7d75f397723250 = function toBinaryString(bytes) {
    bytes = $d7439dbe74fc424d$export$63c3de442720649(bytes);
    var str = "";
    for(var i = 0; i < bytes.length; i++)str += $d7439dbe74fc424d$export$36cf564d487b5178(bytes[i].toString(2), 8, "0");
    return str;
};
var $d7439dbe74fc424d$var$BigInt = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt || Number;
var $d7439dbe74fc424d$var$BYTE_TABLE = [
    $d7439dbe74fc424d$var$BigInt("0x1"),
    $d7439dbe74fc424d$var$BigInt("0x100"),
    $d7439dbe74fc424d$var$BigInt("0x10000"),
    $d7439dbe74fc424d$var$BigInt("0x1000000"),
    $d7439dbe74fc424d$var$BigInt("0x100000000"),
    $d7439dbe74fc424d$var$BigInt("0x10000000000"),
    $d7439dbe74fc424d$var$BigInt("0x1000000000000"),
    $d7439dbe74fc424d$var$BigInt("0x100000000000000"),
    $d7439dbe74fc424d$var$BigInt("0x10000000000000000")
];
var $d7439dbe74fc424d$export$44623b3161268f13 = function() {
    var a = new Uint16Array([
        0xFFCC
    ]);
    var b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
    if (b[0] === 0xFF) return "big";
    if (b[0] === 0xCC) return "little";
    return "unknown";
}();
var $d7439dbe74fc424d$export$71d08edba63ee40 = $d7439dbe74fc424d$export$44623b3161268f13 === "big";
var $d7439dbe74fc424d$export$c362788a4d6d6a65 = $d7439dbe74fc424d$export$44623b3161268f13 === "little";
var $d7439dbe74fc424d$export$c0cca17bcf674749 = function bytesToNumber(bytes, _temp) {
    var _ref = _temp === void 0 ? {} : _temp, _ref$signed = _ref.signed, signed = _ref$signed === void 0 ? false : _ref$signed, _ref$le = _ref.le, le = _ref$le === void 0 ? false : _ref$le;
    bytes = $d7439dbe74fc424d$export$63c3de442720649(bytes);
    var fn = le ? "reduce" : "reduceRight";
    var obj = bytes[fn] ? bytes[fn] : Array.prototype[fn];
    var number = obj.call(bytes, function(total, byte, i) {
        var exponent = le ? i : Math.abs(i + 1 - bytes.length);
        return total + $d7439dbe74fc424d$var$BigInt(byte) * $d7439dbe74fc424d$var$BYTE_TABLE[exponent];
    }, $d7439dbe74fc424d$var$BigInt(0));
    if (signed) {
        var max = $d7439dbe74fc424d$var$BYTE_TABLE[bytes.length] / $d7439dbe74fc424d$var$BigInt(2) - $d7439dbe74fc424d$var$BigInt(1);
        number = $d7439dbe74fc424d$var$BigInt(number);
        if (number > max) {
            number -= max;
            number -= max;
            number -= $d7439dbe74fc424d$var$BigInt(2);
        }
    }
    return Number(number);
};
var $d7439dbe74fc424d$export$49ad9be85c347998 = function numberToBytes(number, _temp2) {
    var _ref2 = _temp2 === void 0 ? {} : _temp2, _ref2$le = _ref2.le, le = _ref2$le === void 0 ? false : _ref2$le;
    // eslint-disable-next-line
    if (typeof number !== "bigint" && typeof number !== "number" || typeof number === "number" && number !== number) number = 0;
    number = $d7439dbe74fc424d$var$BigInt(number);
    var byteCount = $d7439dbe74fc424d$export$42cd407004f34122(number);
    var bytes = new Uint8Array(new ArrayBuffer(byteCount));
    for(var i = 0; i < byteCount; i++){
        var byteIndex = le ? i : Math.abs(i + 1 - bytes.length);
        bytes[byteIndex] = Number(number / $d7439dbe74fc424d$var$BYTE_TABLE[i] & $d7439dbe74fc424d$var$BigInt(0xFF));
        if (number < 0) {
            bytes[byteIndex] = Math.abs(~bytes[byteIndex]);
            bytes[byteIndex] -= i === 0 ? 1 : 2;
        }
    }
    return bytes;
};
var $d7439dbe74fc424d$export$7c746b75f47c9c7d = function bytesToString(bytes) {
    if (!bytes) return "";
     // TODO: should toUint8 handle cases where we only have 8 bytes
    // but report more since this is a Uint16+ Array?
    bytes = Array.prototype.slice.call(bytes);
    var string = String.fromCharCode.apply(null, $d7439dbe74fc424d$export$63c3de442720649(bytes));
    try {
        return decodeURIComponent(escape(string));
    } catch (e) {
    // or full non string data. Just return the potentially garbled string.
    }
    return string;
};
var $d7439dbe74fc424d$export$c8dd6bc66a63753c = function stringToBytes(string, stringIsBytes) {
    if (typeof string !== "string" && string && typeof string.toString === "function") string = string.toString();
    if (typeof string !== "string") return new Uint8Array();
     // If the string already is bytes, we don't have to do this
    // otherwise we do this so that we split multi length characters
    // into individual bytes
    if (!stringIsBytes) string = unescape(encodeURIComponent(string));
    var view = new Uint8Array(string.length);
    for(var i = 0; i < string.length; i++)view[i] = string.charCodeAt(i);
    return view;
};
var $d7439dbe74fc424d$export$229a3d5e59c9dd55 = function concatTypedArrays() {
    for(var _len = arguments.length, buffers = new Array(_len), _key = 0; _key < _len; _key++)buffers[_key] = arguments[_key];
    buffers = buffers.filter(function(b) {
        return b && (b.byteLength || b.length) && typeof b !== "string";
    });
    if (buffers.length <= 1) // for 0 length we will return empty uint8
    // for 1 length we return the first uint8
    return $d7439dbe74fc424d$export$63c3de442720649(buffers[0]);
    var totalLen = buffers.reduce(function(total, buf, i) {
        return total + (buf.byteLength || buf.length);
    }, 0);
    var tempBuffer = new Uint8Array(totalLen);
    var offset = 0;
    buffers.forEach(function(buf) {
        buf = $d7439dbe74fc424d$export$63c3de442720649(buf);
        tempBuffer.set(buf, offset);
        offset += buf.byteLength;
    });
    return tempBuffer;
};
var $d7439dbe74fc424d$export$a20f7b76e5cfd223 = function bytesMatch(a, b, _temp3) {
    var _ref3 = _temp3 === void 0 ? {} : _temp3, _ref3$offset = _ref3.offset, offset = _ref3$offset === void 0 ? 0 : _ref3$offset, _ref3$mask = _ref3.mask, mask = _ref3$mask === void 0 ? [] : _ref3$mask;
    a = $d7439dbe74fc424d$export$63c3de442720649(a);
    b = $d7439dbe74fc424d$export$63c3de442720649(b); // ie 11 does not support uint8 every
    var fn = b.every ? b.every : Array.prototype.every;
    return b.length && a.length - offset >= b.length && // ie 11 doesn't support every on uin8
    fn.call(b, function(bByte, i) {
        var aByte = mask[i] ? mask[i] & a[offset + i] : a[offset + i];
        return bByte === aByte;
    });
};
var $d7439dbe74fc424d$export$8bac03c8c1da551 = function sliceBytes(src, start, end) {
    if (Uint8Array.prototype.slice) return Uint8Array.prototype.slice.call(src, start, end);
    return new Uint8Array(Array.prototype.slice.call(src, start, end));
};
var $d7439dbe74fc424d$export$8f563933fe97d489 = function reverseBytes(src) {
    if (src.reverse) return src.reverse();
    return Array.prototype.reverse.call(src);
};


/*! @name mpd-parser @version 1.3.0 @license Apache-2.0 */ 

var $cktB7 = parcelRequire("cktB7");
/**
 * Loops through all supported media groups in master and calls the provided
 * callback for each group
 *
 * @param {Object} master
 *        The parsed master manifest object
 * @param {string[]} groups
 *        The media groups to call the callback for
 * @param {Function} callback
 *        Callback to call for each media group
 */ var $9cc0ff0985a81952$export$308de5e7fb801aab = function forEachMediaGroup(master, groups, callback) {
    groups.forEach(function(mediaType) {
        for(var groupKey in master.mediaGroups[mediaType])for(var labelKey in master.mediaGroups[mediaType][groupKey]){
            var mediaProperties = master.mediaGroups[mediaType][groupKey][labelKey];
            callback(mediaProperties, mediaType, groupKey, labelKey);
        }
    });
};



var $cktB7 = parcelRequire("cktB7");

var $1c0aef22cd388129$require$Buffer = $7aaf889172aa0226$export$a143d493d941bafc;
var $1c0aef22cd388129$var$atob = function atob(s) {
    return (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).atob ? (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).atob(s) : $1c0aef22cd388129$require$Buffer.from(s, "base64").toString("binary");
};
function $1c0aef22cd388129$export$2e2bcd8739ae039(b64Text) {
    var decodedString = $1c0aef22cd388129$var$atob(b64Text);
    var array = new Uint8Array(decodedString.length);
    for(var i = 0; i < decodedString.length; i++)array[i] = decodedString.charCodeAt(i);
    return array;
}


var $74b2f9ee97bd9836$export$455426655eab1d48;
var $74b2f9ee97bd9836$export$64f0bed4ae6f0f24;
var $74b2f9ee97bd9836$export$1059c6e7d2ce5669;

var $bipYb = parcelRequire("bipYb");
$74b2f9ee97bd9836$export$455426655eab1d48 = $bipYb.DOMImplementation;
$74b2f9ee97bd9836$export$64f0bed4ae6f0f24 = $bipYb.XMLSerializer;

$74b2f9ee97bd9836$export$1059c6e7d2ce5669 = (parcelRequire("7nEww")).DOMParser;


var $1cc1e170a1678a78$var$version = "1.3.0";
const $1cc1e170a1678a78$var$isObject = (obj)=>{
    return !!obj && typeof obj === "object";
};
const $1cc1e170a1678a78$var$merge = (...objects)=>{
    return objects.reduce((result, source)=>{
        if (typeof source !== "object") return result;
        Object.keys(source).forEach((key)=>{
            if (Array.isArray(result[key]) && Array.isArray(source[key])) result[key] = result[key].concat(source[key]);
            else if ($1cc1e170a1678a78$var$isObject(result[key]) && $1cc1e170a1678a78$var$isObject(source[key])) result[key] = $1cc1e170a1678a78$var$merge(result[key], source[key]);
            else result[key] = source[key];
        });
        return result;
    }, {});
};
const $1cc1e170a1678a78$var$values = (o)=>Object.keys(o).map((k)=>o[k]);
const $1cc1e170a1678a78$var$range = (start, end)=>{
    const result = [];
    for(let i = start; i < end; i++)result.push(i);
    return result;
};
const $1cc1e170a1678a78$var$flatten = (lists)=>lists.reduce((x, y)=>x.concat(y), []);
const $1cc1e170a1678a78$var$from = (list)=>{
    if (!list.length) return [];
    const result = [];
    for(let i = 0; i < list.length; i++)result.push(list[i]);
    return result;
};
const $1cc1e170a1678a78$var$findIndexes = (l, key)=>l.reduce((a, e, i)=>{
        if (e[key]) a.push(i);
        return a;
    }, []);
/**
 * Returns a union of the included lists provided each element can be identified by a key.
 *
 * @param {Array} list - list of lists to get the union of
 * @param {Function} keyFunction - the function to use as a key for each element
 *
 * @return {Array} the union of the arrays
 */ const $1cc1e170a1678a78$var$union = (lists, keyFunction)=>{
    return $1cc1e170a1678a78$var$values(lists.reduce((acc, list)=>{
        list.forEach((el)=>{
            acc[keyFunction(el)] = el;
        });
        return acc;
    }, {}));
};
var $1cc1e170a1678a78$var$errors = {
    INVALID_NUMBER_OF_PERIOD: "INVALID_NUMBER_OF_PERIOD",
    INVALID_NUMBER_OF_CONTENT_STEERING: "INVALID_NUMBER_OF_CONTENT_STEERING",
    DASH_EMPTY_MANIFEST: "DASH_EMPTY_MANIFEST",
    DASH_INVALID_XML: "DASH_INVALID_XML",
    NO_BASE_URL: "NO_BASE_URL",
    MISSING_SEGMENT_INFORMATION: "MISSING_SEGMENT_INFORMATION",
    SEGMENT_TIME_UNSPECIFIED: "SEGMENT_TIME_UNSPECIFIED",
    UNSUPPORTED_UTC_TIMING_SCHEME: "UNSUPPORTED_UTC_TIMING_SCHEME"
};
/**
 * @typedef {Object} SingleUri
 * @property {string} uri - relative location of segment
 * @property {string} resolvedUri - resolved location of segment
 * @property {Object} byterange - Object containing information on how to make byte range
 *   requests following byte-range-spec per RFC2616.
 * @property {String} byterange.length - length of range request
 * @property {String} byterange.offset - byte offset of range request
 *
 * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1
 */ /**
 * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object
 * that conforms to how m3u8-parser is structured
 *
 * @see https://github.com/videojs/m3u8-parser
 *
 * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes
 * @param {string} source - source url for segment
 * @param {string} range - optional range used for range calls,
 *   follows  RFC 2616, Clause 14.35.1
 * @return {SingleUri} full segment information transformed into a format similar
 *   to m3u8-parser
 */ const $1cc1e170a1678a78$var$urlTypeToSegment = ({ baseUrl: baseUrl = "", source: source = "", range: range = "", indexRange: indexRange = "" })=>{
    const segment = {
        uri: source,
        resolvedUri: (0, $41be8b0ac22a951d$export$2e2bcd8739ae039)(baseUrl || "", source)
    };
    if (range || indexRange) {
        const rangeStr = range ? range : indexRange;
        const ranges = rangeStr.split("-"); // default to parsing this as a BigInt if possible
        let startRange = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt ? (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(ranges[0]) : parseInt(ranges[0], 10);
        let endRange = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt ? (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(ranges[1]) : parseInt(ranges[1], 10); // convert back to a number if less than MAX_SAFE_INTEGER
        if (startRange < Number.MAX_SAFE_INTEGER && typeof startRange === "bigint") startRange = Number(startRange);
        if (endRange < Number.MAX_SAFE_INTEGER && typeof endRange === "bigint") endRange = Number(endRange);
        let length;
        if (typeof endRange === "bigint" || typeof startRange === "bigint") length = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(endRange) - (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(startRange) + (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(1);
        else length = endRange - startRange + 1;
        if (typeof length === "bigint" && length < Number.MAX_SAFE_INTEGER) length = Number(length);
         // byterange should be inclusive according to
        // RFC 2616, Clause 14.35.1
        segment.byterange = {
            length: length,
            offset: startRange
        };
    }
    return segment;
};
const $1cc1e170a1678a78$var$byteRangeToString = (byterange)=>{
    // `endRange` is one less than `offset + length` because the HTTP range
    // header uses inclusive ranges
    let endRange;
    if (typeof byterange.offset === "bigint" || typeof byterange.length === "bigint") endRange = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(byterange.offset) + (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(byterange.length) - (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(1);
    else endRange = byterange.offset + byterange.length - 1;
    return `${byterange.offset}-${endRange}`;
};
/**
 * parse the end number attribue that can be a string
 * number, or undefined.
 *
 * @param {string|number|undefined} endNumber
 *        The end number attribute.
 *
 * @return {number|null}
 *          The result of parsing the end number.
 */ const $1cc1e170a1678a78$var$parseEndNumber = (endNumber)=>{
    if (endNumber && typeof endNumber !== "number") endNumber = parseInt(endNumber, 10);
    if (isNaN(endNumber)) return null;
    return endNumber;
};
/**
 * Functions for calculating the range of available segments in static and dynamic
 * manifests.
 */ const $1cc1e170a1678a78$var$segmentRange = {
    /**
   * Returns the entire range of available segments for a static MPD
   *
   * @param {Object} attributes
   *        Inheritied MPD attributes
   * @return {{ start: number, end: number }}
   *         The start and end numbers for available segments
   */ static (attributes) {
        const { duration: duration, timescale: timescale = 1, sourceDuration: sourceDuration, periodDuration: periodDuration } = attributes;
        const endNumber = $1cc1e170a1678a78$var$parseEndNumber(attributes.endNumber);
        const segmentDuration = duration / timescale;
        if (typeof endNumber === "number") return {
            start: 0,
            end: endNumber
        };
        if (typeof periodDuration === "number") return {
            start: 0,
            end: periodDuration / segmentDuration
        };
        return {
            start: 0,
            end: sourceDuration / segmentDuration
        };
    },
    /**
   * Returns the current live window range of available segments for a dynamic MPD
   *
   * @param {Object} attributes
   *        Inheritied MPD attributes
   * @return {{ start: number, end: number }}
   *         The start and end numbers for available segments
   */ dynamic (attributes) {
        const { NOW: NOW, clientOffset: clientOffset, availabilityStartTime: availabilityStartTime, timescale: timescale = 1, duration: duration, periodStart: periodStart = 0, minimumUpdatePeriod: minimumUpdatePeriod = 0, timeShiftBufferDepth: timeShiftBufferDepth = Infinity } = attributes;
        const endNumber = $1cc1e170a1678a78$var$parseEndNumber(attributes.endNumber); // clientOffset is passed in at the top level of mpd-parser and is an offset calculated
        // after retrieving UTC server time.
        const now = (NOW + clientOffset) / 1000; // WC stands for Wall Clock.
        // Convert the period start time to EPOCH.
        const periodStartWC = availabilityStartTime + periodStart; // Period end in EPOCH is manifest's retrieval time + time until next update.
        const periodEndWC = now + minimumUpdatePeriod;
        const periodDuration = periodEndWC - periodStartWC;
        const segmentCount = Math.ceil(periodDuration * timescale / duration);
        const availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);
        const availableEnd = Math.floor((now - periodStartWC) * timescale / duration);
        return {
            start: Math.max(0, availableStart),
            end: typeof endNumber === "number" ? endNumber : Math.min(segmentCount, availableEnd)
        };
    }
};
/**
 * Maps a range of numbers to objects with information needed to build the corresponding
 * segment list
 *
 * @name toSegmentsCallback
 * @function
 * @param {number} number
 *        Number of the segment
 * @param {number} index
 *        Index of the number in the range list
 * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}
 *         Object with segment timing and duration info
 */ /**
 * Returns a callback for Array.prototype.map for mapping a range of numbers to
 * information needed to build the segment list.
 *
 * @param {Object} attributes
 *        Inherited MPD attributes
 * @return {toSegmentsCallback}
 *         Callback map function
 */ const $1cc1e170a1678a78$var$toSegments = (attributes)=>(number)=>{
        const { duration: duration, timescale: timescale = 1, periodStart: periodStart, startNumber: startNumber = 1 } = attributes;
        return {
            number: startNumber + number,
            duration: duration / timescale,
            timeline: periodStart,
            time: number * duration
        };
    };
/**
 * Returns a list of objects containing segment timing and duration info used for
 * building the list of segments. This uses the @duration attribute specified
 * in the MPD manifest to derive the range of segments.
 *
 * @param {Object} attributes
 *        Inherited MPD attributes
 * @return {{number: number, duration: number, time: number, timeline: number}[]}
 *         List of Objects with segment timing and duration info
 */ const $1cc1e170a1678a78$var$parseByDuration = (attributes)=>{
    const { type: type, duration: duration, timescale: timescale = 1, periodDuration: periodDuration, sourceDuration: sourceDuration } = attributes;
    const { start: start, end: end } = $1cc1e170a1678a78$var$segmentRange[type](attributes);
    const segments = $1cc1e170a1678a78$var$range(start, end).map($1cc1e170a1678a78$var$toSegments(attributes));
    if (type === "static") {
        const index = segments.length - 1; // section is either a period or the full source
        const sectionDuration = typeof periodDuration === "number" ? periodDuration : sourceDuration; // final segment may be less than full segment duration
        segments[index].duration = sectionDuration - duration / timescale * index;
    }
    return segments;
};
/**
 * Translates SegmentBase into a set of segments.
 * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each
 * node should be translated into segment.
 *
 * @param {Object} attributes
 *   Object containing all inherited attributes from parent elements with attribute
 *   names as keys
 * @return {Object.<Array>} list of segments
 */ const $1cc1e170a1678a78$var$segmentsFromBase = (attributes)=>{
    const { baseUrl: baseUrl, initialization: initialization = {}, sourceDuration: sourceDuration, indexRange: indexRange = "", periodStart: periodStart, presentationTime: presentationTime, number: number = 0, duration: duration } = attributes; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)
    if (!baseUrl) throw new Error($1cc1e170a1678a78$var$errors.NO_BASE_URL);
    const initSegment = $1cc1e170a1678a78$var$urlTypeToSegment({
        baseUrl: baseUrl,
        source: initialization.sourceURL,
        range: initialization.range
    });
    const segment = $1cc1e170a1678a78$var$urlTypeToSegment({
        baseUrl: baseUrl,
        source: baseUrl,
        indexRange: indexRange
    });
    segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source
    // (since SegmentBase is only for one total segment)
    if (duration) {
        const segmentTimeInfo = $1cc1e170a1678a78$var$parseByDuration(attributes);
        if (segmentTimeInfo.length) {
            segment.duration = segmentTimeInfo[0].duration;
            segment.timeline = segmentTimeInfo[0].timeline;
        }
    } else if (sourceDuration) {
        segment.duration = sourceDuration;
        segment.timeline = periodStart;
    } // If presentation time is provided, these segments are being generated by SIDX
    // references, and should use the time provided. For the general case of SegmentBase,
    // there should only be one segment in the period, so its presentation time is the same
    // as its period start.
    segment.presentationTime = presentationTime || periodStart;
    segment.number = number;
    return [
        segment
    ];
};
/**
 * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist
 * according to the sidx information given.
 *
 * playlist.sidx has metadadata about the sidx where-as the sidx param
 * is the parsed sidx box itself.
 *
 * @param {Object} playlist the playlist to update the sidx information for
 * @param {Object} sidx the parsed sidx box
 * @return {Object} the playlist object with the updated sidx information
 */ const $1cc1e170a1678a78$export$2243d5aa7d4f4800 = (playlist, sidx, baseUrl)=>{
    // Retain init segment information
    const initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial main manifest parsing
    const sourceDuration = playlist.sidx.duration; // Retain source timeline
    const timeline = playlist.timeline || 0;
    const sidxByteRange = playlist.sidx.byterange;
    const sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx
    const timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes
    const mediaReferences = sidx.references.filter((r)=>r.referenceType !== 1);
    const segments = [];
    const type = playlist.endList ? "static" : "dynamic";
    const periodStart = playlist.sidx.timeline;
    let presentationTime = periodStart;
    let number = playlist.mediaSequence || 0; // firstOffset is the offset from the end of the sidx box
    let startIndex; // eslint-disable-next-line
    if (typeof sidx.firstOffset === "bigint") startIndex = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(sidxEnd) + sidx.firstOffset;
    else startIndex = sidxEnd + sidx.firstOffset;
    for(let i = 0; i < mediaReferences.length; i++){
        const reference = sidx.references[i]; // size of the referenced (sub)segment
        const size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale
        // this will be converted to seconds when generating segments
        const duration = reference.subsegmentDuration; // should be an inclusive range
        let endIndex; // eslint-disable-next-line
        if (typeof startIndex === "bigint") endIndex = startIndex + (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(size) - (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(1);
        else endIndex = startIndex + size - 1;
        const indexRange = `${startIndex}-${endIndex}`;
        const attributes = {
            baseUrl: baseUrl,
            timescale: timescale,
            timeline: timeline,
            periodStart: periodStart,
            presentationTime: presentationTime,
            number: number,
            duration: duration,
            sourceDuration: sourceDuration,
            indexRange: indexRange,
            type: type
        };
        const segment = $1cc1e170a1678a78$var$segmentsFromBase(attributes)[0];
        if (initSegment) segment.map = initSegment;
        segments.push(segment);
        if (typeof startIndex === "bigint") startIndex += (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(size);
        else startIndex += size;
        presentationTime += duration / timescale;
        number++;
    }
    playlist.segments = segments;
    return playlist;
};
const $1cc1e170a1678a78$var$SUPPORTED_MEDIA_TYPES = [
    "AUDIO",
    "SUBTITLES"
]; // allow one 60fps frame as leniency (arbitrarily chosen)
const $1cc1e170a1678a78$var$TIME_FUDGE = 1 / 60;
/**
 * Given a list of timelineStarts, combines, dedupes, and sorts them.
 *
 * @param {TimelineStart[]} timelineStarts - list of timeline starts
 *
 * @return {TimelineStart[]} the combined and deduped timeline starts
 */ const $1cc1e170a1678a78$var$getUniqueTimelineStarts = (timelineStarts)=>{
    return $1cc1e170a1678a78$var$union(timelineStarts, ({ timeline: timeline })=>timeline).sort((a, b)=>a.timeline > b.timeline ? 1 : -1);
};
/**
 * Finds the playlist with the matching NAME attribute.
 *
 * @param {Array} playlists - playlists to search through
 * @param {string} name - the NAME attribute to search for
 *
 * @return {Object|null} the matching playlist object, or null
 */ const $1cc1e170a1678a78$var$findPlaylistWithName = (playlists, name)=>{
    for(let i = 0; i < playlists.length; i++){
        if (playlists[i].attributes.NAME === name) return playlists[i];
    }
    return null;
};
/**
 * Gets a flattened array of media group playlists.
 *
 * @param {Object} manifest - the main manifest object
 *
 * @return {Array} the media group playlists
 */ const $1cc1e170a1678a78$var$getMediaGroupPlaylists = (manifest)=>{
    let mediaGroupPlaylists = [];
    (0, $9cc0ff0985a81952$export$308de5e7fb801aab)(manifest, $1cc1e170a1678a78$var$SUPPORTED_MEDIA_TYPES, (properties, type, group, label)=>{
        mediaGroupPlaylists = mediaGroupPlaylists.concat(properties.playlists || []);
    });
    return mediaGroupPlaylists;
};
/**
 * Updates the playlist's media sequence numbers.
 *
 * @param {Object} config - options object
 * @param {Object} config.playlist - the playlist to update
 * @param {number} config.mediaSequence - the mediaSequence number to start with
 */ const $1cc1e170a1678a78$var$updateMediaSequenceForPlaylist = ({ playlist: playlist, mediaSequence: mediaSequence })=>{
    playlist.mediaSequence = mediaSequence;
    playlist.segments.forEach((segment, index)=>{
        segment.number = playlist.mediaSequence + index;
    });
};
/**
 * Updates the media and discontinuity sequence numbers of newPlaylists given oldPlaylists
 * and a complete list of timeline starts.
 *
 * If no matching playlist is found, only the discontinuity sequence number of the playlist
 * will be updated.
 *
 * Since early available timelines are not supported, at least one segment must be present.
 *
 * @param {Object} config - options object
 * @param {Object[]} oldPlaylists - the old playlists to use as a reference
 * @param {Object[]} newPlaylists - the new playlists to update
 * @param {Object} timelineStarts - all timelineStarts seen in the stream to this point
 */ const $1cc1e170a1678a78$var$updateSequenceNumbers = ({ oldPlaylists: oldPlaylists, newPlaylists: newPlaylists, timelineStarts: timelineStarts })=>{
    newPlaylists.forEach((playlist)=>{
        playlist.discontinuitySequence = timelineStarts.findIndex(function({ timeline: timeline }) {
            return timeline === playlist.timeline;
        }); // Playlists NAMEs come from DASH Representation IDs, which are mandatory
        // (see ISO_23009-1-2012 5.3.5.2).
        //
        // If the same Representation existed in a prior Period, it will retain the same NAME.
        const oldPlaylist = $1cc1e170a1678a78$var$findPlaylistWithName(oldPlaylists, playlist.attributes.NAME);
        if (!oldPlaylist) // Since this is a new playlist, the media sequence values can start from 0 without
        // consequence.
        return;
         // TODO better support for live SIDX
        //
        // As of this writing, mpd-parser does not support multiperiod SIDX (in live or VOD).
        // This is evident by a playlist only having a single SIDX reference. In a multiperiod
        // playlist there would need to be multiple SIDX references. In addition, live SIDX is
        // not supported when the SIDX properties change on refreshes.
        //
        // In the future, if support needs to be added, the merging logic here can be called
        // after SIDX references are resolved. For now, exit early to prevent exceptions being
        // thrown due to undefined references.
        if (playlist.sidx) return;
         // Since we don't yet support early available timelines, we don't need to support
        // playlists with no segments.
        const firstNewSegment = playlist.segments[0];
        const oldMatchingSegmentIndex = oldPlaylist.segments.findIndex(function(oldSegment) {
            return Math.abs(oldSegment.presentationTime - firstNewSegment.presentationTime) < $1cc1e170a1678a78$var$TIME_FUDGE;
        }); // No matching segment from the old playlist means the entire playlist was refreshed.
        // In this case the media sequence should account for this update, and the new segments
        // should be marked as discontinuous from the prior content, since the last prior
        // timeline was removed.
        if (oldMatchingSegmentIndex === -1) {
            $1cc1e170a1678a78$var$updateMediaSequenceForPlaylist({
                playlist: playlist,
                mediaSequence: oldPlaylist.mediaSequence + oldPlaylist.segments.length
            });
            playlist.segments[0].discontinuity = true;
            playlist.discontinuityStarts.unshift(0); // No matching segment does not necessarily mean there's missing content.
            //
            // If the new playlist's timeline is the same as the last seen segment's timeline,
            // then a discontinuity can be added to identify that there's potentially missing
            // content. If there's no missing content, the discontinuity should still be rather
            // harmless. It's possible that if segment durations are accurate enough, that the
            // existence of a gap can be determined using the presentation times and durations,
            // but if the segment timing info is off, it may introduce more problems than simply
            // adding the discontinuity.
            //
            // If the new playlist's timeline is different from the last seen segment's timeline,
            // then a discontinuity can be added to identify that this is the first seen segment
            // of a new timeline. However, the logic at the start of this function that
            // determined the disconinuity sequence by timeline index is now off by one (the
            // discontinuity of the newest timeline hasn't yet fallen off the manifest...since
            // we added it), so the disconinuity sequence must be decremented.
            //
            // A period may also have a duration of zero, so the case of no segments is handled
            // here even though we don't yet support early available periods.
            if (!oldPlaylist.segments.length && playlist.timeline > oldPlaylist.timeline || oldPlaylist.segments.length && playlist.timeline > oldPlaylist.segments[oldPlaylist.segments.length - 1].timeline) playlist.discontinuitySequence--;
            return;
        } // If the first segment matched with a prior segment on a discontinuity (it's matching
        // on the first segment of a period), then the discontinuitySequence shouldn't be the
        // timeline's matching one, but instead should be the one prior, and the first segment
        // of the new manifest should be marked with a discontinuity.
        //
        // The reason for this special case is that discontinuity sequence shows how many
        // discontinuities have fallen off of the playlist, and discontinuities are marked on
        // the first segment of a new "timeline." Because of this, while DASH will retain that
        // Period while the "timeline" exists, HLS keeps track of it via the discontinuity
        // sequence, and that first segment is an indicator, but can be removed before that
        // timeline is gone.
        const oldMatchingSegment = oldPlaylist.segments[oldMatchingSegmentIndex];
        if (oldMatchingSegment.discontinuity && !firstNewSegment.discontinuity) {
            firstNewSegment.discontinuity = true;
            playlist.discontinuityStarts.unshift(0);
            playlist.discontinuitySequence--;
        }
        $1cc1e170a1678a78$var$updateMediaSequenceForPlaylist({
            playlist: playlist,
            mediaSequence: oldPlaylist.segments[oldMatchingSegmentIndex].number
        });
    });
};
/**
 * Given an old parsed manifest object and a new parsed manifest object, updates the
 * sequence and timing values within the new manifest to ensure that it lines up with the
 * old.
 *
 * @param {Array} oldManifest - the old main manifest object
 * @param {Array} newManifest - the new main manifest object
 *
 * @return {Object} the updated new manifest object
 */ const $1cc1e170a1678a78$var$positionManifestOnTimeline = ({ oldManifest: oldManifest, newManifest: newManifest })=>{
    // Starting from v4.1.2 of the IOP, section 4.4.3.3 states:
    //
    // "MPD@availabilityStartTime and Period@start shall not be changed over MPD updates."
    //
    // This was added from https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/160
    //
    // Because of this change, and the difficulty of supporting periods with changing start
    // times, periods with changing start times are not supported. This makes the logic much
    // simpler, since periods with the same start time can be considerred the same period
    // across refreshes.
    //
    // To give an example as to the difficulty of handling periods where the start time may
    // change, if a single period manifest is refreshed with another manifest with a single
    // period, and both the start and end times are increased, then the only way to determine
    // if it's a new period or an old one that has changed is to look through the segments of
    // each playlist and determine the presentation time bounds to find a match. In addition,
    // if the period start changed to exceed the old period end, then there would be no
    // match, and it would not be possible to determine whether the refreshed period is a new
    // one or the old one.
    const oldPlaylists = oldManifest.playlists.concat($1cc1e170a1678a78$var$getMediaGroupPlaylists(oldManifest));
    const newPlaylists = newManifest.playlists.concat($1cc1e170a1678a78$var$getMediaGroupPlaylists(newManifest)); // Save all seen timelineStarts to the new manifest. Although this potentially means that
    // there's a "memory leak" in that it will never stop growing, in reality, only a couple
    // of properties are saved for each seen Period. Even long running live streams won't
    // generate too many Periods, unless the stream is watched for decades. In the future,
    // this can be optimized by mapping to discontinuity sequence numbers for each timeline,
    // but it may not become an issue, and the additional info can be useful for debugging.
    newManifest.timelineStarts = $1cc1e170a1678a78$var$getUniqueTimelineStarts([
        oldManifest.timelineStarts,
        newManifest.timelineStarts
    ]);
    $1cc1e170a1678a78$var$updateSequenceNumbers({
        oldPlaylists: oldPlaylists,
        newPlaylists: newPlaylists,
        timelineStarts: newManifest.timelineStarts
    });
    return newManifest;
};
const $1cc1e170a1678a78$export$2d92360466eb0b01 = (sidx)=>sidx && sidx.uri + "-" + $1cc1e170a1678a78$var$byteRangeToString(sidx.byterange);
const $1cc1e170a1678a78$var$mergeDiscontiguousPlaylists = (playlists)=>{
    // Break out playlists into groups based on their baseUrl
    const playlistsByBaseUrl = playlists.reduce(function(acc, cur) {
        if (!acc[cur.attributes.baseUrl]) acc[cur.attributes.baseUrl] = [];
        acc[cur.attributes.baseUrl].push(cur);
        return acc;
    }, {});
    let allPlaylists = [];
    Object.values(playlistsByBaseUrl).forEach((playlistGroup)=>{
        const mergedPlaylists = $1cc1e170a1678a78$var$values(playlistGroup.reduce((acc, playlist)=>{
            // assuming playlist IDs are the same across periods
            // TODO: handle multiperiod where representation sets are not the same
            // across periods
            const name = playlist.attributes.id + (playlist.attributes.lang || "");
            if (!acc[name]) {
                // First Period
                acc[name] = playlist;
                acc[name].attributes.timelineStarts = [];
            } else {
                // Subsequent Periods
                if (playlist.segments) {
                    // first segment of subsequent periods signal a discontinuity
                    if (playlist.segments[0]) playlist.segments[0].discontinuity = true;
                    acc[name].segments.push(...playlist.segments);
                } // bubble up contentProtection, this assumes all DRM content
                // has the same contentProtection
                if (playlist.attributes.contentProtection) acc[name].attributes.contentProtection = playlist.attributes.contentProtection;
            }
            acc[name].attributes.timelineStarts.push({
                // Although they represent the same number, it's important to have both to make it
                // compatible with HLS potentially having a similar attribute.
                start: playlist.attributes.periodStart,
                timeline: playlist.attributes.periodStart
            });
            return acc;
        }, {}));
        allPlaylists = allPlaylists.concat(mergedPlaylists);
    });
    return allPlaylists.map((playlist)=>{
        playlist.discontinuityStarts = $1cc1e170a1678a78$var$findIndexes(playlist.segments || [], "discontinuity");
        return playlist;
    });
};
const $1cc1e170a1678a78$var$addSidxSegmentsToPlaylist = (playlist, sidxMapping)=>{
    const sidxKey = $1cc1e170a1678a78$export$2d92360466eb0b01(playlist.sidx);
    const sidxMatch = sidxKey && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;
    if (sidxMatch) $1cc1e170a1678a78$export$2243d5aa7d4f4800(playlist, sidxMatch, playlist.sidx.resolvedUri);
    return playlist;
};
const $1cc1e170a1678a78$var$addSidxSegmentsToPlaylists = (playlists, sidxMapping = {})=>{
    if (!Object.keys(sidxMapping).length) return playlists;
    for(const i in playlists)playlists[i] = $1cc1e170a1678a78$var$addSidxSegmentsToPlaylist(playlists[i], sidxMapping);
    return playlists;
};
const $1cc1e170a1678a78$var$formatAudioPlaylist = ({ attributes: attributes, segments: segments, sidx: sidx, mediaSequence: mediaSequence, discontinuitySequence: discontinuitySequence, discontinuityStarts: discontinuityStarts }, isAudioOnly)=>{
    const playlist = {
        attributes: {
            NAME: attributes.id,
            BANDWIDTH: attributes.bandwidth,
            CODECS: attributes.codecs,
            ["PROGRAM-ID"]: 1
        },
        uri: "",
        endList: attributes.type === "static",
        timeline: attributes.periodStart,
        resolvedUri: attributes.baseUrl || "",
        targetDuration: attributes.duration,
        discontinuitySequence: discontinuitySequence,
        discontinuityStarts: discontinuityStarts,
        timelineStarts: attributes.timelineStarts,
        mediaSequence: mediaSequence,
        segments: segments
    };
    if (attributes.contentProtection) playlist.contentProtection = attributes.contentProtection;
    if (attributes.serviceLocation) playlist.attributes.serviceLocation = attributes.serviceLocation;
    if (sidx) playlist.sidx = sidx;
    if (isAudioOnly) {
        playlist.attributes.AUDIO = "audio";
        playlist.attributes.SUBTITLES = "subs";
    }
    return playlist;
};
const $1cc1e170a1678a78$var$formatVttPlaylist = ({ attributes: attributes, segments: segments, mediaSequence: mediaSequence, discontinuityStarts: discontinuityStarts, discontinuitySequence: discontinuitySequence })=>{
    if (typeof segments === "undefined") {
        // vtt tracks may use single file in BaseURL
        segments = [
            {
                uri: attributes.baseUrl,
                timeline: attributes.periodStart,
                resolvedUri: attributes.baseUrl || "",
                duration: attributes.sourceDuration,
                number: 0
            }
        ]; // targetDuration should be the same duration as the only segment
        attributes.duration = attributes.sourceDuration;
    }
    const m3u8Attributes = {
        NAME: attributes.id,
        BANDWIDTH: attributes.bandwidth,
        ["PROGRAM-ID"]: 1
    };
    if (attributes.codecs) m3u8Attributes.CODECS = attributes.codecs;
    const vttPlaylist = {
        attributes: m3u8Attributes,
        uri: "",
        endList: attributes.type === "static",
        timeline: attributes.periodStart,
        resolvedUri: attributes.baseUrl || "",
        targetDuration: attributes.duration,
        timelineStarts: attributes.timelineStarts,
        discontinuityStarts: discontinuityStarts,
        discontinuitySequence: discontinuitySequence,
        mediaSequence: mediaSequence,
        segments: segments
    };
    if (attributes.serviceLocation) vttPlaylist.attributes.serviceLocation = attributes.serviceLocation;
    return vttPlaylist;
};
const $1cc1e170a1678a78$var$organizeAudioPlaylists = (playlists, sidxMapping = {}, isAudioOnly = false)=>{
    let mainPlaylist;
    const formattedPlaylists = playlists.reduce((a, playlist)=>{
        const role = playlist.attributes.role && playlist.attributes.role.value || "";
        const language = playlist.attributes.lang || "";
        let label = playlist.attributes.label || "main";
        if (language && !playlist.attributes.label) {
            const roleLabel = role ? ` (${role})` : "";
            label = `${playlist.attributes.lang}${roleLabel}`;
        }
        if (!a[label]) a[label] = {
            language: language,
            autoselect: true,
            default: role === "main",
            playlists: [],
            uri: ""
        };
        const formatted = $1cc1e170a1678a78$var$addSidxSegmentsToPlaylist($1cc1e170a1678a78$var$formatAudioPlaylist(playlist, isAudioOnly), sidxMapping);
        a[label].playlists.push(formatted);
        if (typeof mainPlaylist === "undefined" && role === "main") {
            mainPlaylist = playlist;
            mainPlaylist.default = true;
        }
        return a;
    }, {}); // if no playlists have role "main", mark the first as main
    if (!mainPlaylist) {
        const firstLabel = Object.keys(formattedPlaylists)[0];
        formattedPlaylists[firstLabel].default = true;
    }
    return formattedPlaylists;
};
const $1cc1e170a1678a78$var$organizeVttPlaylists = (playlists, sidxMapping = {})=>{
    return playlists.reduce((a, playlist)=>{
        const label = playlist.attributes.label || playlist.attributes.lang || "text";
        if (!a[label]) a[label] = {
            language: label,
            default: false,
            autoselect: false,
            playlists: [],
            uri: ""
        };
        a[label].playlists.push($1cc1e170a1678a78$var$addSidxSegmentsToPlaylist($1cc1e170a1678a78$var$formatVttPlaylist(playlist), sidxMapping));
        return a;
    }, {});
};
const $1cc1e170a1678a78$var$organizeCaptionServices = (captionServices)=>captionServices.reduce((svcObj, svc)=>{
        if (!svc) return svcObj;
        svc.forEach((service)=>{
            const { channel: channel, language: language } = service;
            svcObj[language] = {
                autoselect: false,
                default: false,
                instreamId: channel,
                language: language
            };
            if (service.hasOwnProperty("aspectRatio")) svcObj[language].aspectRatio = service.aspectRatio;
            if (service.hasOwnProperty("easyReader")) svcObj[language].easyReader = service.easyReader;
            if (service.hasOwnProperty("3D")) svcObj[language]["3D"] = service["3D"];
        });
        return svcObj;
    }, {});
const $1cc1e170a1678a78$var$formatVideoPlaylist = ({ attributes: attributes, segments: segments, sidx: sidx, discontinuityStarts: discontinuityStarts })=>{
    const playlist = {
        attributes: {
            NAME: attributes.id,
            AUDIO: "audio",
            SUBTITLES: "subs",
            RESOLUTION: {
                width: attributes.width,
                height: attributes.height
            },
            CODECS: attributes.codecs,
            BANDWIDTH: attributes.bandwidth,
            ["PROGRAM-ID"]: 1
        },
        uri: "",
        endList: attributes.type === "static",
        timeline: attributes.periodStart,
        resolvedUri: attributes.baseUrl || "",
        targetDuration: attributes.duration,
        discontinuityStarts: discontinuityStarts,
        timelineStarts: attributes.timelineStarts,
        segments: segments
    };
    if (attributes.frameRate) playlist.attributes["FRAME-RATE"] = attributes.frameRate;
    if (attributes.contentProtection) playlist.contentProtection = attributes.contentProtection;
    if (attributes.serviceLocation) playlist.attributes.serviceLocation = attributes.serviceLocation;
    if (sidx) playlist.sidx = sidx;
    return playlist;
};
const $1cc1e170a1678a78$var$videoOnly = ({ attributes: attributes })=>attributes.mimeType === "video/mp4" || attributes.mimeType === "video/webm" || attributes.contentType === "video";
const $1cc1e170a1678a78$var$audioOnly = ({ attributes: attributes })=>attributes.mimeType === "audio/mp4" || attributes.mimeType === "audio/webm" || attributes.contentType === "audio";
const $1cc1e170a1678a78$var$vttOnly = ({ attributes: attributes })=>attributes.mimeType === "text/vtt" || attributes.contentType === "text";
/**
 * Contains start and timeline properties denoting a timeline start. For DASH, these will
 * be the same number.
 *
 * @typedef {Object} TimelineStart
 * @property {number} start - the start time of the timeline
 * @property {number} timeline - the timeline number
 */ /**
 * Adds appropriate media and discontinuity sequence values to the segments and playlists.
 *
 * Throughout mpd-parser, the `number` attribute is used in relation to `startNumber`, a
 * DASH specific attribute used in constructing segment URI's from templates. However, from
 * an HLS perspective, the `number` attribute on a segment would be its `mediaSequence`
 * value, which should start at the original media sequence value (or 0) and increment by 1
 * for each segment thereafter. Since DASH's `startNumber` values are independent per
 * period, it doesn't make sense to use it for `number`. Instead, assume everything starts
 * from a 0 mediaSequence value and increment from there.
 *
 * Note that VHS currently doesn't use the `number` property, but it can be helpful for
 * debugging and making sense of the manifest.
 *
 * For live playlists, to account for values increasing in manifests when periods are
 * removed on refreshes, merging logic should be used to update the numbers to their
 * appropriate values (to ensure they're sequential and increasing).
 *
 * @param {Object[]} playlists - the playlists to update
 * @param {TimelineStart[]} timelineStarts - the timeline starts for the manifest
 */ const $1cc1e170a1678a78$var$addMediaSequenceValues = (playlists, timelineStarts)=>{
    // increment all segments sequentially
    playlists.forEach((playlist)=>{
        playlist.mediaSequence = 0;
        playlist.discontinuitySequence = timelineStarts.findIndex(function({ timeline: timeline }) {
            return timeline === playlist.timeline;
        });
        if (!playlist.segments) return;
        playlist.segments.forEach((segment, index)=>{
            segment.number = index;
        });
    });
};
/**
 * Given a media group object, flattens all playlists within the media group into a single
 * array.
 *
 * @param {Object} mediaGroupObject - the media group object
 *
 * @return {Object[]}
 *         The media group playlists
 */ const $1cc1e170a1678a78$var$flattenMediaGroupPlaylists = (mediaGroupObject)=>{
    if (!mediaGroupObject) return [];
    return Object.keys(mediaGroupObject).reduce((acc, label)=>{
        const labelContents = mediaGroupObject[label];
        return acc.concat(labelContents.playlists);
    }, []);
};
const $1cc1e170a1678a78$export$c90e7d9f067c8f2c = ({ dashPlaylists: dashPlaylists, locations: locations, contentSteering: contentSteering, sidxMapping: sidxMapping = {}, previousManifest: previousManifest, eventStream: eventStream })=>{
    if (!dashPlaylists.length) return {};
     // grab all main manifest attributes
    const { sourceDuration: duration, type: type, suggestedPresentationDelay: suggestedPresentationDelay, minimumUpdatePeriod: minimumUpdatePeriod } = dashPlaylists[0].attributes;
    const videoPlaylists = $1cc1e170a1678a78$var$mergeDiscontiguousPlaylists(dashPlaylists.filter($1cc1e170a1678a78$var$videoOnly)).map($1cc1e170a1678a78$var$formatVideoPlaylist);
    const audioPlaylists = $1cc1e170a1678a78$var$mergeDiscontiguousPlaylists(dashPlaylists.filter($1cc1e170a1678a78$var$audioOnly));
    const vttPlaylists = $1cc1e170a1678a78$var$mergeDiscontiguousPlaylists(dashPlaylists.filter($1cc1e170a1678a78$var$vttOnly));
    const captions = dashPlaylists.map((playlist)=>playlist.attributes.captionServices).filter(Boolean);
    const manifest = {
        allowCache: true,
        discontinuityStarts: [],
        segments: [],
        endList: true,
        mediaGroups: {
            AUDIO: {},
            VIDEO: {},
            ["CLOSED-CAPTIONS"]: {},
            SUBTITLES: {}
        },
        uri: "",
        duration: duration,
        playlists: $1cc1e170a1678a78$var$addSidxSegmentsToPlaylists(videoPlaylists, sidxMapping)
    };
    if (minimumUpdatePeriod >= 0) manifest.minimumUpdatePeriod = minimumUpdatePeriod * 1000;
    if (locations) manifest.locations = locations;
    if (contentSteering) manifest.contentSteering = contentSteering;
    if (type === "dynamic") manifest.suggestedPresentationDelay = suggestedPresentationDelay;
    if (eventStream && eventStream.length > 0) manifest.eventStream = eventStream;
    const isAudioOnly = manifest.playlists.length === 0;
    const organizedAudioGroup = audioPlaylists.length ? $1cc1e170a1678a78$var$organizeAudioPlaylists(audioPlaylists, sidxMapping, isAudioOnly) : null;
    const organizedVttGroup = vttPlaylists.length ? $1cc1e170a1678a78$var$organizeVttPlaylists(vttPlaylists, sidxMapping) : null;
    const formattedPlaylists = videoPlaylists.concat($1cc1e170a1678a78$var$flattenMediaGroupPlaylists(organizedAudioGroup), $1cc1e170a1678a78$var$flattenMediaGroupPlaylists(organizedVttGroup));
    const playlistTimelineStarts = formattedPlaylists.map(({ timelineStarts: timelineStarts })=>timelineStarts);
    manifest.timelineStarts = $1cc1e170a1678a78$var$getUniqueTimelineStarts(playlistTimelineStarts);
    $1cc1e170a1678a78$var$addMediaSequenceValues(formattedPlaylists, manifest.timelineStarts);
    if (organizedAudioGroup) manifest.mediaGroups.AUDIO.audio = organizedAudioGroup;
    if (organizedVttGroup) manifest.mediaGroups.SUBTITLES.subs = organizedVttGroup;
    if (captions.length) manifest.mediaGroups["CLOSED-CAPTIONS"].cc = $1cc1e170a1678a78$var$organizeCaptionServices(captions);
    if (previousManifest) return $1cc1e170a1678a78$var$positionManifestOnTimeline({
        oldManifest: previousManifest,
        newManifest: manifest
    });
    return manifest;
};
/**
 * Calculates the R (repetition) value for a live stream (for the final segment
 * in a manifest where the r value is negative 1)
 *
 * @param {Object} attributes
 *        Object containing all inherited attributes from parent elements with attribute
 *        names as keys
 * @param {number} time
 *        current time (typically the total time up until the final segment)
 * @param {number} duration
 *        duration property for the given <S />
 *
 * @return {number}
 *        R value to reach the end of the given period
 */ const $1cc1e170a1678a78$var$getLiveRValue = (attributes, time, duration)=>{
    const { NOW: NOW, clientOffset: clientOffset, availabilityStartTime: availabilityStartTime, timescale: timescale = 1, periodStart: periodStart = 0, minimumUpdatePeriod: minimumUpdatePeriod = 0 } = attributes;
    const now = (NOW + clientOffset) / 1000;
    const periodStartWC = availabilityStartTime + periodStart;
    const periodEndWC = now + minimumUpdatePeriod;
    const periodDuration = periodEndWC - periodStartWC;
    return Math.ceil((periodDuration * timescale - time) / duration);
};
/**
 * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment
 * timing and duration
 *
 * @param {Object} attributes
 *        Object containing all inherited attributes from parent elements with attribute
 *        names as keys
 * @param {Object[]} segmentTimeline
 *        List of objects representing the attributes of each S element contained within
 *
 * @return {{number: number, duration: number, time: number, timeline: number}[]}
 *         List of Objects with segment timing and duration info
 */ const $1cc1e170a1678a78$var$parseByTimeline = (attributes, segmentTimeline)=>{
    const { type: type, minimumUpdatePeriod: minimumUpdatePeriod = 0, media: media = "", sourceDuration: sourceDuration, timescale: timescale = 1, startNumber: startNumber = 1, periodStart: timeline } = attributes;
    const segments = [];
    let time = -1;
    for(let sIndex = 0; sIndex < segmentTimeline.length; sIndex++){
        const S = segmentTimeline[sIndex];
        const duration = S.d;
        const repeat = S.r || 0;
        const segmentTime = S.t || 0;
        if (time < 0) // first segment
        time = segmentTime;
        if (segmentTime && segmentTime > time) // discontinuity
        // TODO: How to handle this type of discontinuity
        // timeline++ here would treat it like HLS discontuity and content would
        // get appended without gap
        // E.G.
        //  <S t="0" d="1" />
        //  <S d="1" />
        //  <S d="1" />
        //  <S t="5" d="1" />
        // would have $Time$ values of [0, 1, 2, 5]
        // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)
        // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)
        // does the value of sourceDuration consider this when calculating arbitrary
        // negative @r repeat value?
        // E.G. Same elements as above with this added at the end
        //  <S d="1" r="-1" />
        //  with a sourceDuration of 10
        // Would the 2 gaps be included in the time duration calculations resulting in
        // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments
        // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?
        time = segmentTime;
        let count;
        if (repeat < 0) {
            const nextS = sIndex + 1;
            if (nextS === segmentTimeline.length) {
                // last segment
                if (type === "dynamic" && minimumUpdatePeriod > 0 && media.indexOf("$Number$") > 0) count = $1cc1e170a1678a78$var$getLiveRValue(attributes, time, duration);
                else // TODO: This may be incorrect depending on conclusion of TODO above
                count = (sourceDuration * timescale - time) / duration;
            } else count = (segmentTimeline[nextS].t - time) / duration;
        } else count = repeat + 1;
        const end = startNumber + segments.length + count;
        let number = startNumber + segments.length;
        while(number < end){
            segments.push({
                number: number,
                duration: duration / timescale,
                time: time,
                timeline: timeline
            });
            time += duration;
            number++;
        }
    }
    return segments;
};
const $1cc1e170a1678a78$var$identifierPattern = /\$([A-z]*)(?:(%0)([0-9]+)d)?\$/g;
/**
 * Replaces template identifiers with corresponding values. To be used as the callback
 * for String.prototype.replace
 *
 * @name replaceCallback
 * @function
 * @param {string} match
 *        Entire match of identifier
 * @param {string} identifier
 *        Name of matched identifier
 * @param {string} format
 *        Format tag string. Its presence indicates that padding is expected
 * @param {string} width
 *        Desired length of the replaced value. Values less than this width shall be left
 *        zero padded
 * @return {string}
 *         Replacement for the matched identifier
 */ /**
 * Returns a function to be used as a callback for String.prototype.replace to replace
 * template identifiers
 *
 * @param {Obect} values
 *        Object containing values that shall be used to replace known identifiers
 * @param {number} values.RepresentationID
 *        Value of the Representation@id attribute
 * @param {number} values.Number
 *        Number of the corresponding segment
 * @param {number} values.Bandwidth
 *        Value of the Representation@bandwidth attribute.
 * @param {number} values.Time
 *        Timestamp value of the corresponding segment
 * @return {replaceCallback}
 *         Callback to be used with String.prototype.replace to replace identifiers
 */ const $1cc1e170a1678a78$var$identifierReplacement = (values)=>(match, identifier, format, width)=>{
        if (match === "$$") // escape sequence
        return "$";
        if (typeof values[identifier] === "undefined") return match;
        const value = "" + values[identifier];
        if (identifier === "RepresentationID") // Format tag shall not be present with RepresentationID
        return value;
        if (!format) width = 1;
        else width = parseInt(width, 10);
        if (value.length >= width) return value;
        return `${new Array(width - value.length + 1).join("0")}${value}`;
    };
/**
 * Constructs a segment url from a template string
 *
 * @param {string} url
 *        Template string to construct url from
 * @param {Obect} values
 *        Object containing values that shall be used to replace known identifiers
 * @param {number} values.RepresentationID
 *        Value of the Representation@id attribute
 * @param {number} values.Number
 *        Number of the corresponding segment
 * @param {number} values.Bandwidth
 *        Value of the Representation@bandwidth attribute.
 * @param {number} values.Time
 *        Timestamp value of the corresponding segment
 * @return {string}
 *         Segment url with identifiers replaced
 */ const $1cc1e170a1678a78$var$constructTemplateUrl = (url, values)=>url.replace($1cc1e170a1678a78$var$identifierPattern, $1cc1e170a1678a78$var$identifierReplacement(values));
/**
 * Generates a list of objects containing timing and duration information about each
 * segment needed to generate segment uris and the complete segment object
 *
 * @param {Object} attributes
 *        Object containing all inherited attributes from parent elements with attribute
 *        names as keys
 * @param {Object[]|undefined} segmentTimeline
 *        List of objects representing the attributes of each S element contained within
 *        the SegmentTimeline element
 * @return {{number: number, duration: number, time: number, timeline: number}[]}
 *         List of Objects with segment timing and duration info
 */ const $1cc1e170a1678a78$var$parseTemplateInfo = (attributes, segmentTimeline)=>{
    if (!attributes.duration && !segmentTimeline) // if neither @duration or SegmentTimeline are present, then there shall be exactly
    // one media segment
    return [
        {
            number: attributes.startNumber || 1,
            duration: attributes.sourceDuration,
            time: 0,
            timeline: attributes.periodStart
        }
    ];
    if (attributes.duration) return $1cc1e170a1678a78$var$parseByDuration(attributes);
    return $1cc1e170a1678a78$var$parseByTimeline(attributes, segmentTimeline);
};
/**
 * Generates a list of segments using information provided by the SegmentTemplate element
 *
 * @param {Object} attributes
 *        Object containing all inherited attributes from parent elements with attribute
 *        names as keys
 * @param {Object[]|undefined} segmentTimeline
 *        List of objects representing the attributes of each S element contained within
 *        the SegmentTimeline element
 * @return {Object[]}
 *         List of segment objects
 */ const $1cc1e170a1678a78$var$segmentsFromTemplate = (attributes, segmentTimeline)=>{
    const templateValues = {
        RepresentationID: attributes.id,
        Bandwidth: attributes.bandwidth || 0
    };
    const { initialization: initialization = {
        sourceURL: "",
        range: ""
    } } = attributes;
    const mapSegment = $1cc1e170a1678a78$var$urlTypeToSegment({
        baseUrl: attributes.baseUrl,
        source: $1cc1e170a1678a78$var$constructTemplateUrl(initialization.sourceURL, templateValues),
        range: initialization.range
    });
    const segments = $1cc1e170a1678a78$var$parseTemplateInfo(attributes, segmentTimeline);
    return segments.map((segment)=>{
        templateValues.Number = segment.number;
        templateValues.Time = segment.time;
        const uri = $1cc1e170a1678a78$var$constructTemplateUrl(attributes.media || "", templateValues); // See DASH spec section 5.3.9.2.2
        // - if timescale isn't present on any level, default to 1.
        const timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0
        const presentationTimeOffset = attributes.presentationTimeOffset || 0;
        const presentationTime = // calculated in mpd-parser prior to this, so it's assumed to be available.
        attributes.periodStart + (segment.time - presentationTimeOffset) / timescale;
        const map = {
            uri: uri,
            timeline: segment.timeline,
            duration: segment.duration,
            resolvedUri: (0, $41be8b0ac22a951d$export$2e2bcd8739ae039)(attributes.baseUrl || "", uri),
            map: mapSegment,
            number: segment.number,
            presentationTime: presentationTime
        };
        return map;
    });
};
/**
 * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)
 * to an object that matches the output of a segment in videojs/mpd-parser
 *
 * @param {Object} attributes
 *   Object containing all inherited attributes from parent elements with attribute
 *   names as keys
 * @param {Object} segmentUrl
 *   <SegmentURL> node to translate into a segment object
 * @return {Object} translated segment object
 */ const $1cc1e170a1678a78$var$SegmentURLToSegmentObject = (attributes, segmentUrl)=>{
    const { baseUrl: baseUrl, initialization: initialization = {} } = attributes;
    const initSegment = $1cc1e170a1678a78$var$urlTypeToSegment({
        baseUrl: baseUrl,
        source: initialization.sourceURL,
        range: initialization.range
    });
    const segment = $1cc1e170a1678a78$var$urlTypeToSegment({
        baseUrl: baseUrl,
        source: segmentUrl.media,
        range: segmentUrl.mediaRange
    });
    segment.map = initSegment;
    return segment;
};
/**
 * Generates a list of segments using information provided by the SegmentList element
 * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each
 * node should be translated into segment.
 *
 * @param {Object} attributes
 *   Object containing all inherited attributes from parent elements with attribute
 *   names as keys
 * @param {Object[]|undefined} segmentTimeline
 *        List of objects representing the attributes of each S element contained within
 *        the SegmentTimeline element
 * @return {Object.<Array>} list of segments
 */ const $1cc1e170a1678a78$var$segmentsFromList = (attributes, segmentTimeline)=>{
    const { duration: duration, segmentUrls: segmentUrls = [], periodStart: periodStart } = attributes; // Per spec (5.3.9.2.1) no way to determine segment duration OR
    // if both SegmentTimeline and @duration are defined, it is outside of spec.
    if (!duration && !segmentTimeline || duration && segmentTimeline) throw new Error($1cc1e170a1678a78$var$errors.SEGMENT_TIME_UNSPECIFIED);
    const segmentUrlMap = segmentUrls.map((segmentUrlObject)=>$1cc1e170a1678a78$var$SegmentURLToSegmentObject(attributes, segmentUrlObject));
    let segmentTimeInfo;
    if (duration) segmentTimeInfo = $1cc1e170a1678a78$var$parseByDuration(attributes);
    if (segmentTimeline) segmentTimeInfo = $1cc1e170a1678a78$var$parseByTimeline(attributes, segmentTimeline);
    const segments = segmentTimeInfo.map((segmentTime, index)=>{
        if (segmentUrlMap[index]) {
            const segment = segmentUrlMap[index]; // See DASH spec section 5.3.9.2.2
            // - if timescale isn't present on any level, default to 1.
            const timescale = attributes.timescale || 1; // - if presentationTimeOffset isn't present on any level, default to 0
            const presentationTimeOffset = attributes.presentationTimeOffset || 0;
            segment.timeline = segmentTime.timeline;
            segment.duration = segmentTime.duration;
            segment.number = segmentTime.number;
            segment.presentationTime = periodStart + (segmentTime.time - presentationTimeOffset) / timescale;
            return segment;
        } // Since we're mapping we should get rid of any blank segments (in case
    // the given SegmentTimeline is handling for more elements than we have
    // SegmentURLs for).
    }).filter((segment)=>segment);
    return segments;
};
const $1cc1e170a1678a78$var$generateSegments = ({ attributes: attributes, segmentInfo: segmentInfo })=>{
    let segmentAttributes;
    let segmentsFn;
    if (segmentInfo.template) {
        segmentsFn = $1cc1e170a1678a78$var$segmentsFromTemplate;
        segmentAttributes = $1cc1e170a1678a78$var$merge(attributes, segmentInfo.template);
    } else if (segmentInfo.base) {
        segmentsFn = $1cc1e170a1678a78$var$segmentsFromBase;
        segmentAttributes = $1cc1e170a1678a78$var$merge(attributes, segmentInfo.base);
    } else if (segmentInfo.list) {
        segmentsFn = $1cc1e170a1678a78$var$segmentsFromList;
        segmentAttributes = $1cc1e170a1678a78$var$merge(attributes, segmentInfo.list);
    }
    const segmentsInfo = {
        attributes: attributes
    };
    if (!segmentsFn) return segmentsInfo;
    const segments = segmentsFn(segmentAttributes, segmentInfo.segmentTimeline); // The @duration attribute will be used to determin the playlist's targetDuration which
    // must be in seconds. Since we've generated the segment list, we no longer need
    // @duration to be in @timescale units, so we can convert it here.
    if (segmentAttributes.duration) {
        const { duration: duration, timescale: timescale = 1 } = segmentAttributes;
        segmentAttributes.duration = duration / timescale;
    } else if (segments.length) // if there is no @duration attribute, use the largest segment duration as
    // as target duration
    segmentAttributes.duration = segments.reduce((max, segment)=>{
        return Math.max(max, Math.ceil(segment.duration));
    }, 0);
    else segmentAttributes.duration = 0;
    segmentsInfo.attributes = segmentAttributes;
    segmentsInfo.segments = segments; // This is a sidx box without actual segment information
    if (segmentInfo.base && segmentAttributes.indexRange) {
        segmentsInfo.sidx = segments[0];
        segmentsInfo.segments = [];
    }
    return segmentsInfo;
};
const $1cc1e170a1678a78$export$4362d710904f703f = (representations)=>representations.map($1cc1e170a1678a78$var$generateSegments);
const $1cc1e170a1678a78$var$findChildren = (element, name)=>$1cc1e170a1678a78$var$from(element.childNodes).filter(({ tagName: tagName })=>tagName === name);
const $1cc1e170a1678a78$var$getContent = (element)=>element.textContent.trim();
/**
 * Converts the provided string that may contain a division operation to a number.
 *
 * @param {string} value - the provided string value
 *
 * @return {number} the parsed string value
 */ const $1cc1e170a1678a78$var$parseDivisionValue = (value)=>{
    return parseFloat(value.split("/").reduce((prev, current)=>prev / current));
};
const $1cc1e170a1678a78$var$parseDuration = (str)=>{
    const SECONDS_IN_YEAR = 31536000;
    const SECONDS_IN_MONTH = 2592000;
    const SECONDS_IN_DAY = 86400;
    const SECONDS_IN_HOUR = 3600;
    const SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S
    const durationRegex = /P(?:(\d*)Y)?(?:(\d*)M)?(?:(\d*)D)?(?:T(?:(\d*)H)?(?:(\d*)M)?(?:([\d.]*)S)?)?/;
    const match = durationRegex.exec(str);
    if (!match) return 0;
    const [year, month, day, hour, minute, second] = match.slice(1);
    return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);
};
const $1cc1e170a1678a78$var$parseDate = (str)=>{
    // Date format without timezone according to ISO 8601
    // YYY-MM-DDThh:mm:ss.ssssss
    const dateRegex = /^\d+-\d+-\d+T\d+:\d+:\d+(\.\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is
    // expressed by ending with 'Z'
    if (dateRegex.test(str)) str += "Z";
    return Date.parse(str);
};
const $1cc1e170a1678a78$var$parsers = {
    /**
   * Specifies the duration of the entire Media Presentation. Format is a duration string
   * as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */ mediaPresentationDuration (value) {
        return $1cc1e170a1678a78$var$parseDuration(value);
    },
    /**
   * Specifies the Segment availability start time for all Segments referred to in this
   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability
   * time. Format is a date string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The date as seconds from unix epoch
   */ availabilityStartTime (value) {
        return $1cc1e170a1678a78$var$parseDate(value) / 1000;
    },
    /**
   * Specifies the smallest period between potential changes to the MPD. Format is a
   * duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */ minimumUpdatePeriod (value) {
        return $1cc1e170a1678a78$var$parseDuration(value);
    },
    /**
   * Specifies the suggested presentation delay. Format is a
   * duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */ suggestedPresentationDelay (value) {
        return $1cc1e170a1678a78$var$parseDuration(value);
    },
    /**
   * specifices the type of mpd. Can be either "static" or "dynamic"
   *
   * @param {string} value
   *        value of attribute as a string
   *
   * @return {string}
   *         The type as a string
   */ type (value) {
        return value;
    },
    /**
   * Specifies the duration of the smallest time shifting buffer for any Representation
   * in the MPD. Format is a duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */ timeShiftBufferDepth (value) {
        return $1cc1e170a1678a78$var$parseDuration(value);
    },
    /**
   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.
   * Format is a duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */ start (value) {
        return $1cc1e170a1678a78$var$parseDuration(value);
    },
    /**
   * Specifies the width of the visual presentation
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed width
   */ width (value) {
        return parseInt(value, 10);
    },
    /**
   * Specifies the height of the visual presentation
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed height
   */ height (value) {
        return parseInt(value, 10);
    },
    /**
   * Specifies the bitrate of the representation
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed bandwidth
   */ bandwidth (value) {
        return parseInt(value, 10);
    },
    /**
   * Specifies the frame rate of the representation
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed frame rate
   */ frameRate (value) {
        return $1cc1e170a1678a78$var$parseDivisionValue(value);
    },
    /**
   * Specifies the number of the first Media Segment in this Representation in the Period
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed number
   */ startNumber (value) {
        return parseInt(value, 10);
    },
    /**
   * Specifies the timescale in units per seconds
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed timescale
   */ timescale (value) {
        return parseInt(value, 10);
    },
    /**
   * Specifies the presentationTimeOffset.
   *
   * @param {string} value
   *        value of the attribute as a string
   *
   * @return {number}
   *         The parsed presentationTimeOffset
   */ presentationTimeOffset (value) {
        return parseInt(value, 10);
    },
    /**
   * Specifies the constant approximate Segment duration
   * NOTE: The <Period> element also contains an @duration attribute. This duration
   *       specifies the duration of the Period. This attribute is currently not
   *       supported by the rest of the parser, however we still check for it to prevent
   *       errors.
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed duration
   */ duration (value) {
        const parsedValue = parseInt(value, 10);
        if (isNaN(parsedValue)) return $1cc1e170a1678a78$var$parseDuration(value);
        return parsedValue;
    },
    /**
   * Specifies the Segment duration, in units of the value of the @timescale.
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed duration
   */ d (value) {
        return parseInt(value, 10);
    },
    /**
   * Specifies the MPD start time, in @timescale units, the first Segment in the series
   * starts relative to the beginning of the Period
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed time
   */ t (value) {
        return parseInt(value, 10);
    },
    /**
   * Specifies the repeat count of the number of following contiguous Segments with the
   * same duration expressed by the value of @d
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed number
   */ r (value) {
        return parseInt(value, 10);
    },
    /**
   * Specifies the presentationTime.
   *
   * @param {string} value
   *        value of the attribute as a string
   *
   * @return {number}
   *         The parsed presentationTime
   */ presentationTime (value) {
        return parseInt(value, 10);
    },
    /**
   * Default parser for all other attributes. Acts as a no-op and just returns the value
   * as a string
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {string}
   *         Unparsed value
   */ DEFAULT (value) {
        return value;
    }
};
/**
 * Gets all the attributes and values of the provided node, parses attributes with known
 * types, and returns an object with attribute names mapped to values.
 *
 * @param {Node} el
 *        The node to parse attributes from
 * @return {Object}
 *         Object with all attributes of el parsed
 */ const $1cc1e170a1678a78$var$parseAttributes = (el)=>{
    if (!(el && el.attributes)) return {};
    return $1cc1e170a1678a78$var$from(el.attributes).reduce((a, e)=>{
        const parseFn = $1cc1e170a1678a78$var$parsers[e.name] || $1cc1e170a1678a78$var$parsers.DEFAULT;
        a[e.name] = parseFn(e.value);
        return a;
    }, {});
};
const $1cc1e170a1678a78$var$keySystemsMap = {
    "urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b": "org.w3.clearkey",
    "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed": "com.widevine.alpha",
    "urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95": "com.microsoft.playready",
    "urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb": "com.adobe.primetime",
    // ISO_IEC 23009-1_2022 5.8.5.2.2 The mp4 Protection Scheme
    "urn:mpeg:dash:mp4protection:2011": "mp4protection"
};
/**
 * Builds a list of urls that is the product of the reference urls and BaseURL values
 *
 * @param {Object[]} references
 *        List of objects containing the reference URL as well as its attributes
 * @param {Node[]} baseUrlElements
 *        List of BaseURL nodes from the mpd
 * @return {Object[]}
 *         List of objects with resolved urls and attributes
 */ const $1cc1e170a1678a78$var$buildBaseUrls = (references, baseUrlElements)=>{
    if (!baseUrlElements.length) return references;
    return $1cc1e170a1678a78$var$flatten(references.map(function(reference) {
        return baseUrlElements.map(function(baseUrlElement) {
            const initialBaseUrl = $1cc1e170a1678a78$var$getContent(baseUrlElement);
            const resolvedBaseUrl = (0, $41be8b0ac22a951d$export$2e2bcd8739ae039)(reference.baseUrl, initialBaseUrl);
            const finalBaseUrl = $1cc1e170a1678a78$var$merge($1cc1e170a1678a78$var$parseAttributes(baseUrlElement), {
                baseUrl: resolvedBaseUrl
            }); // If the URL is resolved, we want to get the serviceLocation from the reference
            // assuming there is no serviceLocation on the initialBaseUrl
            if (resolvedBaseUrl !== initialBaseUrl && !finalBaseUrl.serviceLocation && reference.serviceLocation) finalBaseUrl.serviceLocation = reference.serviceLocation;
            return finalBaseUrl;
        });
    }));
};
/**
 * Contains all Segment information for its containing AdaptationSet
 *
 * @typedef {Object} SegmentInformation
 * @property {Object|undefined} template
 *           Contains the attributes for the SegmentTemplate node
 * @property {Object[]|undefined} segmentTimeline
 *           Contains a list of atrributes for each S node within the SegmentTimeline node
 * @property {Object|undefined} list
 *           Contains the attributes for the SegmentList node
 * @property {Object|undefined} base
 *           Contains the attributes for the SegmentBase node
 */ /**
 * Returns all available Segment information contained within the AdaptationSet node
 *
 * @param {Node} adaptationSet
 *        The AdaptationSet node to get Segment information from
 * @return {SegmentInformation}
 *         The Segment information contained within the provided AdaptationSet
 */ const $1cc1e170a1678a78$var$getSegmentInformation = (adaptationSet)=>{
    const segmentTemplate = $1cc1e170a1678a78$var$findChildren(adaptationSet, "SegmentTemplate")[0];
    const segmentList = $1cc1e170a1678a78$var$findChildren(adaptationSet, "SegmentList")[0];
    const segmentUrls = segmentList && $1cc1e170a1678a78$var$findChildren(segmentList, "SegmentURL").map((s)=>$1cc1e170a1678a78$var$merge({
            tag: "SegmentURL"
        }, $1cc1e170a1678a78$var$parseAttributes(s)));
    const segmentBase = $1cc1e170a1678a78$var$findChildren(adaptationSet, "SegmentBase")[0];
    const segmentTimelineParentNode = segmentList || segmentTemplate;
    const segmentTimeline = segmentTimelineParentNode && $1cc1e170a1678a78$var$findChildren(segmentTimelineParentNode, "SegmentTimeline")[0];
    const segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;
    const segmentInitialization = segmentInitializationParentNode && $1cc1e170a1678a78$var$findChildren(segmentInitializationParentNode, "Initialization")[0]; // SegmentTemplate is handled slightly differently, since it can have both
    // @initialization and an <Initialization> node.  @initialization can be templated,
    // while the node can have a url and range specified.  If the <SegmentTemplate> has
    // both @initialization and an <Initialization> subelement we opt to override with
    // the node, as this interaction is not defined in the spec.
    const template = segmentTemplate && $1cc1e170a1678a78$var$parseAttributes(segmentTemplate);
    if (template && segmentInitialization) template.initialization = segmentInitialization && $1cc1e170a1678a78$var$parseAttributes(segmentInitialization);
    else if (template && template.initialization) // If it is @initialization we convert it to an object since this is the format that
    // later functions will rely on for the initialization segment.  This is only valid
    // for <SegmentTemplate>
    template.initialization = {
        sourceURL: template.initialization
    };
    const segmentInfo = {
        template: template,
        segmentTimeline: segmentTimeline && $1cc1e170a1678a78$var$findChildren(segmentTimeline, "S").map((s)=>$1cc1e170a1678a78$var$parseAttributes(s)),
        list: segmentList && $1cc1e170a1678a78$var$merge($1cc1e170a1678a78$var$parseAttributes(segmentList), {
            segmentUrls: segmentUrls,
            initialization: $1cc1e170a1678a78$var$parseAttributes(segmentInitialization)
        }),
        base: segmentBase && $1cc1e170a1678a78$var$merge($1cc1e170a1678a78$var$parseAttributes(segmentBase), {
            initialization: $1cc1e170a1678a78$var$parseAttributes(segmentInitialization)
        })
    };
    Object.keys(segmentInfo).forEach((key)=>{
        if (!segmentInfo[key]) delete segmentInfo[key];
    });
    return segmentInfo;
};
/**
 * Contains Segment information and attributes needed to construct a Playlist object
 * from a Representation
 *
 * @typedef {Object} RepresentationInformation
 * @property {SegmentInformation} segmentInfo
 *           Segment information for this Representation
 * @property {Object} attributes
 *           Inherited attributes for this Representation
 */ /**
 * Maps a Representation node to an object containing Segment information and attributes
 *
 * @name inheritBaseUrlsCallback
 * @function
 * @param {Node} representation
 *        Representation node from the mpd
 * @return {RepresentationInformation}
 *         Representation information needed to construct a Playlist object
 */ /**
 * Returns a callback for Array.prototype.map for mapping Representation nodes to
 * Segment information and attributes using inherited BaseURL nodes.
 *
 * @param {Object} adaptationSetAttributes
 *        Contains attributes inherited by the AdaptationSet
 * @param {Object[]} adaptationSetBaseUrls
 *        List of objects containing resolved base URLs and attributes
 *        inherited by the AdaptationSet
 * @param {SegmentInformation} adaptationSetSegmentInfo
 *        Contains Segment information for the AdaptationSet
 * @return {inheritBaseUrlsCallback}
 *         Callback map function
 */ const $1cc1e170a1678a78$var$inheritBaseUrls = (adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo)=>(representation)=>{
        const repBaseUrlElements = $1cc1e170a1678a78$var$findChildren(representation, "BaseURL");
        const repBaseUrls = $1cc1e170a1678a78$var$buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);
        const attributes = $1cc1e170a1678a78$var$merge(adaptationSetAttributes, $1cc1e170a1678a78$var$parseAttributes(representation));
        const representationSegmentInfo = $1cc1e170a1678a78$var$getSegmentInformation(representation);
        return repBaseUrls.map((baseUrl)=>{
            return {
                segmentInfo: $1cc1e170a1678a78$var$merge(adaptationSetSegmentInfo, representationSegmentInfo),
                attributes: $1cc1e170a1678a78$var$merge(attributes, baseUrl)
            };
        });
    };
/**
 * Tranforms a series of content protection nodes to
 * an object containing pssh data by key system
 *
 * @param {Node[]} contentProtectionNodes
 *        Content protection nodes
 * @return {Object}
 *        Object containing pssh data by key system
 */ const $1cc1e170a1678a78$var$generateKeySystemInformation = (contentProtectionNodes)=>{
    return contentProtectionNodes.reduce((acc, node)=>{
        const attributes = $1cc1e170a1678a78$var$parseAttributes(node); // Although it could be argued that according to the UUID RFC spec the UUID string (a-f chars) should be generated
        // as a lowercase string it also mentions it should be treated as case-insensitive on input. Since the key system
        // UUIDs in the keySystemsMap are hardcoded as lowercase in the codebase there isn't any reason not to do
        // .toLowerCase() on the input UUID string from the manifest (at least I could not think of one).
        if (attributes.schemeIdUri) attributes.schemeIdUri = attributes.schemeIdUri.toLowerCase();
        const keySystem = $1cc1e170a1678a78$var$keySystemsMap[attributes.schemeIdUri];
        if (keySystem) {
            acc[keySystem] = {
                attributes: attributes
            };
            const psshNode = $1cc1e170a1678a78$var$findChildren(node, "cenc:pssh")[0];
            if (psshNode) {
                const pssh = $1cc1e170a1678a78$var$getContent(psshNode);
                acc[keySystem].pssh = pssh && (0, $1c0aef22cd388129$export$2e2bcd8739ae039)(pssh);
            }
        }
        return acc;
    }, {});
}; // defined in ANSI_SCTE 214-1 2016
const $1cc1e170a1678a78$var$parseCaptionServiceMetadata = (service)=>{
    // 608 captions
    if (service.schemeIdUri === "urn:scte:dash:cc:cea-608:2015") {
        const values = typeof service.value !== "string" ? [] : service.value.split(";");
        return values.map((value)=>{
            let channel;
            let language; // default language to value
            language = value;
            if (/^CC\d=/.test(value)) [channel, language] = value.split("=");
            else if (/^CC\d$/.test(value)) channel = value;
            return {
                channel: channel,
                language: language
            };
        });
    } else if (service.schemeIdUri === "urn:scte:dash:cc:cea-708:2015") {
        const values = typeof service.value !== "string" ? [] : service.value.split(";");
        return values.map((value)=>{
            const flags = {
                // service or channel number 1-63
                "channel": undefined,
                // language is a 3ALPHA per ISO 639.2/B
                // field is required
                "language": undefined,
                // BIT 1/0 or ?
                // default value is 1, meaning 16:9 aspect ratio, 0 is 4:3, ? is unknown
                "aspectRatio": 1,
                // BIT 1/0
                // easy reader flag indicated the text is tailed to the needs of beginning readers
                // default 0, or off
                "easyReader": 0,
                // BIT 1/0
                // If 3d metadata is present (CEA-708.1) then 1
                // default 0
                "3D": 0
            };
            if (/=/.test(value)) {
                const [channel, opts = ""] = value.split("=");
                flags.channel = channel;
                flags.language = value;
                opts.split(",").forEach((opt)=>{
                    const [name, val] = opt.split(":");
                    if (name === "lang") flags.language = val; // er for easyReadery
                    else if (name === "er") flags.easyReader = Number(val); // war for wide aspect ratio
                    else if (name === "war") flags.aspectRatio = Number(val);
                    else if (name === "3D") flags["3D"] = Number(val);
                });
            } else flags.language = value;
            if (flags.channel) flags.channel = "SERVICE" + flags.channel;
            return flags;
        });
    }
};
/**
 * A map callback that will parse all event stream data for a collection of periods
 * DASH ISO_IEC_23009 5.10.2.2
 * https://dashif-documents.azurewebsites.net/Events/master/event.html#mpd-event-timing
 *
 * @param {PeriodInformation} period object containing necessary period information
 * @return a collection of parsed eventstream event objects
 */ const $1cc1e170a1678a78$var$toEventStream = (period)=>{
    // get and flatten all EventStreams tags and parse attributes and children
    return $1cc1e170a1678a78$var$flatten($1cc1e170a1678a78$var$findChildren(period.node, "EventStream").map((eventStream)=>{
        const eventStreamAttributes = $1cc1e170a1678a78$var$parseAttributes(eventStream);
        const schemeIdUri = eventStreamAttributes.schemeIdUri; // find all Events per EventStream tag and map to return objects
        return $1cc1e170a1678a78$var$findChildren(eventStream, "Event").map((event)=>{
            const eventAttributes = $1cc1e170a1678a78$var$parseAttributes(event);
            const presentationTime = eventAttributes.presentationTime || 0;
            const timescale = eventStreamAttributes.timescale || 1;
            const duration = eventAttributes.duration || 0;
            const start = presentationTime / timescale + period.attributes.start;
            return {
                schemeIdUri: schemeIdUri,
                value: eventStreamAttributes.value,
                id: eventAttributes.id,
                start: start,
                end: start + duration / timescale,
                messageData: $1cc1e170a1678a78$var$getContent(event) || eventAttributes.messageData,
                contentEncoding: eventStreamAttributes.contentEncoding,
                presentationTimeOffset: eventStreamAttributes.presentationTimeOffset || 0
            };
        });
    }));
};
/**
 * Maps an AdaptationSet node to a list of Representation information objects
 *
 * @name toRepresentationsCallback
 * @function
 * @param {Node} adaptationSet
 *        AdaptationSet node from the mpd
 * @return {RepresentationInformation[]}
 *         List of objects containing Representaion information
 */ /**
 * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of
 * Representation information objects
 *
 * @param {Object} periodAttributes
 *        Contains attributes inherited by the Period
 * @param {Object[]} periodBaseUrls
 *        Contains list of objects with resolved base urls and attributes
 *        inherited by the Period
 * @param {string[]} periodSegmentInfo
 *        Contains Segment Information at the period level
 * @return {toRepresentationsCallback}
 *         Callback map function
 */ const $1cc1e170a1678a78$var$toRepresentations = (periodAttributes, periodBaseUrls, periodSegmentInfo)=>(adaptationSet)=>{
        const adaptationSetAttributes = $1cc1e170a1678a78$var$parseAttributes(adaptationSet);
        const adaptationSetBaseUrls = $1cc1e170a1678a78$var$buildBaseUrls(periodBaseUrls, $1cc1e170a1678a78$var$findChildren(adaptationSet, "BaseURL"));
        const role = $1cc1e170a1678a78$var$findChildren(adaptationSet, "Role")[0];
        const roleAttributes = {
            role: $1cc1e170a1678a78$var$parseAttributes(role)
        };
        let attrs = $1cc1e170a1678a78$var$merge(periodAttributes, adaptationSetAttributes, roleAttributes);
        const accessibility = $1cc1e170a1678a78$var$findChildren(adaptationSet, "Accessibility")[0];
        const captionServices = $1cc1e170a1678a78$var$parseCaptionServiceMetadata($1cc1e170a1678a78$var$parseAttributes(accessibility));
        if (captionServices) attrs = $1cc1e170a1678a78$var$merge(attrs, {
            captionServices: captionServices
        });
        const label = $1cc1e170a1678a78$var$findChildren(adaptationSet, "Label")[0];
        if (label && label.childNodes.length) {
            const labelVal = label.childNodes[0].nodeValue.trim();
            attrs = $1cc1e170a1678a78$var$merge(attrs, {
                label: labelVal
            });
        }
        const contentProtection = $1cc1e170a1678a78$var$generateKeySystemInformation($1cc1e170a1678a78$var$findChildren(adaptationSet, "ContentProtection"));
        if (Object.keys(contentProtection).length) attrs = $1cc1e170a1678a78$var$merge(attrs, {
            contentProtection: contentProtection
        });
        const segmentInfo = $1cc1e170a1678a78$var$getSegmentInformation(adaptationSet);
        const representations = $1cc1e170a1678a78$var$findChildren(adaptationSet, "Representation");
        const adaptationSetSegmentInfo = $1cc1e170a1678a78$var$merge(periodSegmentInfo, segmentInfo);
        return $1cc1e170a1678a78$var$flatten(representations.map($1cc1e170a1678a78$var$inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));
    };
/**
 * Contains all period information for mapping nodes onto adaptation sets.
 *
 * @typedef {Object} PeriodInformation
 * @property {Node} period.node
 *           Period node from the mpd
 * @property {Object} period.attributes
 *           Parsed period attributes from node plus any added
 */ /**
 * Maps a PeriodInformation object to a list of Representation information objects for all
 * AdaptationSet nodes contained within the Period.
 *
 * @name toAdaptationSetsCallback
 * @function
 * @param {PeriodInformation} period
 *        Period object containing necessary period information
 * @param {number} periodStart
 *        Start time of the Period within the mpd
 * @return {RepresentationInformation[]}
 *         List of objects containing Representaion information
 */ /**
 * Returns a callback for Array.prototype.map for mapping Period nodes to a list of
 * Representation information objects
 *
 * @param {Object} mpdAttributes
 *        Contains attributes inherited by the mpd
  * @param {Object[]} mpdBaseUrls
 *        Contains list of objects with resolved base urls and attributes
 *        inherited by the mpd
 * @return {toAdaptationSetsCallback}
 *         Callback map function
 */ const $1cc1e170a1678a78$var$toAdaptationSets = (mpdAttributes, mpdBaseUrls)=>(period, index)=>{
        const periodBaseUrls = $1cc1e170a1678a78$var$buildBaseUrls(mpdBaseUrls, $1cc1e170a1678a78$var$findChildren(period.node, "BaseURL"));
        const periodAttributes = $1cc1e170a1678a78$var$merge(mpdAttributes, {
            periodStart: period.attributes.start
        });
        if (typeof period.attributes.duration === "number") periodAttributes.periodDuration = period.attributes.duration;
        const adaptationSets = $1cc1e170a1678a78$var$findChildren(period.node, "AdaptationSet");
        const periodSegmentInfo = $1cc1e170a1678a78$var$getSegmentInformation(period.node);
        return $1cc1e170a1678a78$var$flatten(adaptationSets.map($1cc1e170a1678a78$var$toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));
    };
/**
 * Tranforms an array of content steering nodes into an object
 * containing CDN content steering information from the MPD manifest.
 *
 * For more information on the DASH spec for Content Steering parsing, see:
 * https://dashif.org/docs/DASH-IF-CTS-00XX-Content-Steering-Community-Review.pdf
 *
 * @param {Node[]} contentSteeringNodes
 *        Content steering nodes
 * @param {Function} eventHandler
 *        The event handler passed into the parser options to handle warnings
 * @return {Object}
 *        Object containing content steering data
 */ const $1cc1e170a1678a78$var$generateContentSteeringInformation = (contentSteeringNodes, eventHandler)=>{
    // If there are more than one ContentSteering tags, throw an error
    if (contentSteeringNodes.length > 1) eventHandler({
        type: "warn",
        message: "The MPD manifest should contain no more than one ContentSteering tag"
    });
     // Return a null value if there are no ContentSteering tags
    if (!contentSteeringNodes.length) return null;
    const infoFromContentSteeringTag = $1cc1e170a1678a78$var$merge({
        serverURL: $1cc1e170a1678a78$var$getContent(contentSteeringNodes[0])
    }, $1cc1e170a1678a78$var$parseAttributes(contentSteeringNodes[0])); // Converts `queryBeforeStart` to a boolean, as well as setting the default value
    // to `false` if it doesn't exist
    infoFromContentSteeringTag.queryBeforeStart = infoFromContentSteeringTag.queryBeforeStart === "true";
    return infoFromContentSteeringTag;
};
/**
 * Gets Period@start property for a given period.
 *
 * @param {Object} options
 *        Options object
 * @param {Object} options.attributes
 *        Period attributes
 * @param {Object} [options.priorPeriodAttributes]
 *        Prior period attributes (if prior period is available)
 * @param {string} options.mpdType
 *        The MPD@type these periods came from
 * @return {number|null}
 *         The period start, or null if it's an early available period or error
 */ const $1cc1e170a1678a78$var$getPeriodStart = ({ attributes: attributes, priorPeriodAttributes: priorPeriodAttributes, mpdType: mpdType })=>{
    // Summary of period start time calculation from DASH spec section 5.3.2.1
    //
    // A period's start is the first period's start + time elapsed after playing all
    // prior periods to this one. Periods continue one after the other in time (without
    // gaps) until the end of the presentation.
    //
    // The value of Period@start should be:
    // 1. if Period@start is present: value of Period@start
    // 2. if previous period exists and it has @duration: previous Period@start +
    //    previous Period@duration
    // 3. if this is first period and MPD@type is 'static': 0
    // 4. in all other cases, consider the period an "early available period" (note: not
    //    currently supported)
    // (1)
    if (typeof attributes.start === "number") return attributes.start;
     // (2)
    if (priorPeriodAttributes && typeof priorPeriodAttributes.start === "number" && typeof priorPeriodAttributes.duration === "number") return priorPeriodAttributes.start + priorPeriodAttributes.duration;
     // (3)
    if (!priorPeriodAttributes && mpdType === "static") return 0;
     // (4)
    // There is currently no logic for calculating the Period@start value if there is
    // no Period@start or prior Period@start and Period@duration available. This is not made
    // explicit by the DASH interop guidelines or the DASH spec, however, since there's
    // nothing about any other resolution strategies, it's implied. Thus, this case should
    // be considered an early available period, or error, and null should suffice for both
    // of those cases.
    return null;
};
/**
 * Traverses the mpd xml tree to generate a list of Representation information objects
 * that have inherited attributes from parent nodes
 *
 * @param {Node} mpd
 *        The root node of the mpd
 * @param {Object} options
 *        Available options for inheritAttributes
 * @param {string} options.manifestUri
 *        The uri source of the mpd
 * @param {number} options.NOW
 *        Current time per DASH IOP.  Default is current time in ms since epoch
 * @param {number} options.clientOffset
 *        Client time difference from NOW (in milliseconds)
 * @return {RepresentationInformation[]}
 *         List of objects containing Representation information
 */ const $1cc1e170a1678a78$export$1d58e194e30f14d4 = (mpd, options = {})=>{
    const { manifestUri: manifestUri = "", NOW: NOW = Date.now(), clientOffset: clientOffset = 0, eventHandler: // TODO: For now, we are expecting an eventHandler callback function
    // to be passed into the mpd parser as an option.
    // In the future, we should enable stream parsing by using the Stream class from vhs-utils.
    // This will support new features including a standardized event handler.
    // See the m3u8 parser for examples of how stream parsing is currently used for HLS parsing.
    // https://github.com/videojs/vhs-utils/blob/88d6e10c631e57a5af02c5a62bc7376cd456b4f5/src/stream.js#L9
    eventHandler = function() {} } = options;
    const periodNodes = $1cc1e170a1678a78$var$findChildren(mpd, "Period");
    if (!periodNodes.length) throw new Error($1cc1e170a1678a78$var$errors.INVALID_NUMBER_OF_PERIOD);
    const locations = $1cc1e170a1678a78$var$findChildren(mpd, "Location");
    const mpdAttributes = $1cc1e170a1678a78$var$parseAttributes(mpd);
    const mpdBaseUrls = $1cc1e170a1678a78$var$buildBaseUrls([
        {
            baseUrl: manifestUri
        }
    ], $1cc1e170a1678a78$var$findChildren(mpd, "BaseURL"));
    const contentSteeringNodes = $1cc1e170a1678a78$var$findChildren(mpd, "ContentSteering"); // See DASH spec section 5.3.1.2, Semantics of MPD element. Default type to 'static'.
    mpdAttributes.type = mpdAttributes.type || "static";
    mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;
    mpdAttributes.NOW = NOW;
    mpdAttributes.clientOffset = clientOffset;
    if (locations.length) mpdAttributes.locations = locations.map($1cc1e170a1678a78$var$getContent);
    const periods = []; // Since toAdaptationSets acts on individual periods right now, the simplest approach to
    // adding properties that require looking at prior periods is to parse attributes and add
    // missing ones before toAdaptationSets is called. If more such properties are added, it
    // may be better to refactor toAdaptationSets.
    periodNodes.forEach((node, index)=>{
        const attributes = $1cc1e170a1678a78$var$parseAttributes(node); // Use the last modified prior period, as it may contain added information necessary
        // for this period.
        const priorPeriod = periods[index - 1];
        attributes.start = $1cc1e170a1678a78$var$getPeriodStart({
            attributes: attributes,
            priorPeriodAttributes: priorPeriod ? priorPeriod.attributes : null,
            mpdType: mpdAttributes.type
        });
        periods.push({
            node: node,
            attributes: attributes
        });
    });
    return {
        locations: mpdAttributes.locations,
        contentSteeringInfo: $1cc1e170a1678a78$var$generateContentSteeringInformation(contentSteeringNodes, eventHandler),
        // TODO: There are occurences where this `representationInfo` array contains undesired
        // duplicates. This generally occurs when there are multiple BaseURL nodes that are
        // direct children of the MPD node. When we attempt to resolve URLs from a combination of the
        // parent BaseURL and a child BaseURL, and the value does not resolve,
        // we end up returning the child BaseURL multiple times.
        // We need to determine a way to remove these duplicates in a safe way.
        // See: https://github.com/videojs/mpd-parser/pull/17#discussion_r162750527
        representationInfo: $1cc1e170a1678a78$var$flatten(periods.map($1cc1e170a1678a78$var$toAdaptationSets(mpdAttributes, mpdBaseUrls))),
        eventStream: $1cc1e170a1678a78$var$flatten(periods.map($1cc1e170a1678a78$var$toEventStream))
    };
};
const $1cc1e170a1678a78$export$d9d51d4eae920a2a = (manifestString)=>{
    if (manifestString === "") throw new Error($1cc1e170a1678a78$var$errors.DASH_EMPTY_MANIFEST);
    const parser = new (0, $74b2f9ee97bd9836$export$1059c6e7d2ce5669)();
    let xml;
    let mpd;
    try {
        xml = parser.parseFromString(manifestString, "application/xml");
        mpd = xml && xml.documentElement.tagName === "MPD" ? xml.documentElement : null;
    } catch (e) {}
    if (!mpd || mpd && mpd.getElementsByTagName("parsererror").length > 0) throw new Error($1cc1e170a1678a78$var$errors.DASH_INVALID_XML);
    return mpd;
};
/**
 * Parses the manifest for a UTCTiming node, returning the nodes attributes if found
 *
 * @param {string} mpd
 *        XML string of the MPD manifest
 * @return {Object|null}
 *         Attributes of UTCTiming node specified in the manifest. Null if none found
 */ const $1cc1e170a1678a78$var$parseUTCTimingScheme = (mpd)=>{
    const UTCTimingNode = $1cc1e170a1678a78$var$findChildren(mpd, "UTCTiming")[0];
    if (!UTCTimingNode) return null;
    const attributes = $1cc1e170a1678a78$var$parseAttributes(UTCTimingNode);
    switch(attributes.schemeIdUri){
        case "urn:mpeg:dash:utc:http-head:2014":
        case "urn:mpeg:dash:utc:http-head:2012":
            attributes.method = "HEAD";
            break;
        case "urn:mpeg:dash:utc:http-xsdate:2014":
        case "urn:mpeg:dash:utc:http-iso:2014":
        case "urn:mpeg:dash:utc:http-xsdate:2012":
        case "urn:mpeg:dash:utc:http-iso:2012":
            attributes.method = "GET";
            break;
        case "urn:mpeg:dash:utc:direct:2014":
        case "urn:mpeg:dash:utc:direct:2012":
            attributes.method = "DIRECT";
            attributes.value = Date.parse(attributes.value);
            break;
        case "urn:mpeg:dash:utc:http-ntp:2014":
        case "urn:mpeg:dash:utc:ntp:2014":
        case "urn:mpeg:dash:utc:sntp:2014":
        default:
            throw new Error($1cc1e170a1678a78$var$errors.UNSUPPORTED_UTC_TIMING_SCHEME);
    }
    return attributes;
};
const $1cc1e170a1678a78$export$a4ad2735b021c132 = $1cc1e170a1678a78$var$version;
/*
 * Given a DASH manifest string and options, parses the DASH manifest into an object in the
 * form outputed by m3u8-parser and accepted by videojs/http-streaming.
 *
 * For live DASH manifests, if `previousManifest` is provided in options, then the newly
 * parsed DASH manifest will have its media sequence and discontinuity sequence values
 * updated to reflect its position relative to the prior manifest.
 *
 * @param {string} manifestString - the DASH manifest as a string
 * @param {options} [options] - any options
 *
 * @return {Object} the manifest object
 */ const $1cc1e170a1678a78$export$98e6a39c04603d36 = (manifestString, options = {})=>{
    const parsedManifestInfo = $1cc1e170a1678a78$export$1d58e194e30f14d4($1cc1e170a1678a78$export$d9d51d4eae920a2a(manifestString), options);
    const playlists = $1cc1e170a1678a78$export$4362d710904f703f(parsedManifestInfo.representationInfo);
    return $1cc1e170a1678a78$export$c90e7d9f067c8f2c({
        dashPlaylists: playlists,
        locations: parsedManifestInfo.locations,
        contentSteering: parsedManifestInfo.contentSteeringInfo,
        sidxMapping: options.sidxMapping,
        previousManifest: options.previousManifest,
        eventStream: parsedManifestInfo.eventStream
    });
};
/**
 * Parses the manifest for a UTCTiming node, returning the nodes attributes if found
 *
 * @param {string} manifestString
 *        XML string of the MPD manifest
 * @return {Object|null}
 *         Attributes of UTCTiming node specified in the manifest. Null if none found
 */ const $1cc1e170a1678a78$export$734c7278b5d0068c = (manifestString)=>$1cc1e170a1678a78$var$parseUTCTimingScheme($1cc1e170a1678a78$export$d9d51d4eae920a2a(manifestString));


var $8b61edb11213d8b6$exports = {};
var $d188d23540aad6de$exports = {};
var $d188d23540aad6de$var$MAX_UINT32 = Math.pow(2, 32);
var $d188d23540aad6de$var$getUint64 = function(uint8) {
    var dv = new DataView(uint8.buffer, uint8.byteOffset, uint8.byteLength);
    var value;
    if (dv.getBigUint64) {
        value = dv.getBigUint64(0);
        if (value < Number.MAX_SAFE_INTEGER) return Number(value);
        return value;
    }
    return dv.getUint32(0) * $d188d23540aad6de$var$MAX_UINT32 + dv.getUint32(4);
};
$d188d23540aad6de$exports = {
    getUint64: $d188d23540aad6de$var$getUint64,
    MAX_UINT32: $d188d23540aad6de$var$MAX_UINT32
};


var $8b61edb11213d8b6$require$getUint64 = $d188d23540aad6de$exports.getUint64;
var $8b61edb11213d8b6$var$parseSidx = function(data) {
    var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
        version: data[0],
        flags: new Uint8Array(data.subarray(1, 4)),
        references: [],
        referenceId: view.getUint32(4),
        timescale: view.getUint32(8)
    }, i = 12;
    if (result.version === 0) {
        result.earliestPresentationTime = view.getUint32(i);
        result.firstOffset = view.getUint32(i + 4);
        i += 8;
    } else {
        // read 64 bits
        result.earliestPresentationTime = $8b61edb11213d8b6$require$getUint64(data.subarray(i));
        result.firstOffset = $8b61edb11213d8b6$require$getUint64(data.subarray(i + 8));
        i += 16;
    }
    i += 2; // reserved
    var referenceCount = view.getUint16(i);
    i += 2; // start of references
    for(; referenceCount > 0; i += 12, referenceCount--)result.references.push({
        referenceType: (data[i] & 0x80) >>> 7,
        referencedSize: view.getUint32(i) & 0x7FFFFFFF,
        subsegmentDuration: view.getUint32(i + 4),
        startsWithSap: !!(data[i + 8] & 0x80),
        sapType: (data[i + 8] & 0x70) >>> 4,
        sapDeltaTime: view.getUint32(i + 8) & 0x0FFFFFFF
    });
    return result;
};
$8b61edb11213d8b6$exports = $8b61edb11213d8b6$var$parseSidx;



var $b18510d8baadc4f7$var$ID3 = (0, $d7439dbe74fc424d$export$63c3de442720649)([
    0x49,
    0x44,
    0x33
]);
var $b18510d8baadc4f7$export$1d0ef9131773159b = function getId3Size(bytes, offset) {
    if (offset === void 0) offset = 0;
    bytes = (0, $d7439dbe74fc424d$export$63c3de442720649)(bytes);
    var flags = bytes[offset + 5];
    var returnSize = bytes[offset + 6] << 21 | bytes[offset + 7] << 14 | bytes[offset + 8] << 7 | bytes[offset + 9];
    var footerPresent = (flags & 16) >> 4;
    if (footerPresent) return returnSize + 20;
    return returnSize + 10;
};
var $b18510d8baadc4f7$export$56b6cacf09ec1126 = function getId3Offset(bytes, offset) {
    if (offset === void 0) offset = 0;
    bytes = (0, $d7439dbe74fc424d$export$63c3de442720649)(bytes);
    if (bytes.length - offset < 10 || !(0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, $b18510d8baadc4f7$var$ID3, {
        offset: offset
    })) return offset;
    offset += $b18510d8baadc4f7$export$1d0ef9131773159b(bytes, offset); // recursive check for id3 tags as some files
    // have multiple ID3 tag sections even though
    // they should not.
    return getId3Offset(bytes, offset);
};





var $2ebd91a8ff02379d$export$5ff37217be0e6718 = function getAv1Codec(bytes) {
    var codec = "";
    var profile = bytes[1] >>> 3;
    var level = bytes[1] & 0x1F;
    var tier = bytes[2] >>> 7;
    var highBitDepth = (bytes[2] & 0x40) >> 6;
    var twelveBit = (bytes[2] & 0x20) >> 5;
    var monochrome = (bytes[2] & 0x10) >> 4;
    var chromaSubsamplingX = (bytes[2] & 0x08) >> 3;
    var chromaSubsamplingY = (bytes[2] & 0x04) >> 2;
    var chromaSamplePosition = bytes[2] & 0x03;
    codec += profile + "." + (0, $d7439dbe74fc424d$export$36cf564d487b5178)(level, 2, "0");
    if (tier === 0) codec += "M";
    else if (tier === 1) codec += "H";
    var bitDepth;
    if (profile === 2 && highBitDepth) bitDepth = twelveBit ? 12 : 10;
    else bitDepth = highBitDepth ? 10 : 8;
    codec += "." + (0, $d7439dbe74fc424d$export$36cf564d487b5178)(bitDepth, 2, "0"); // TODO: can we parse color range??
    codec += "." + monochrome;
    codec += "." + chromaSubsamplingX + chromaSubsamplingY + chromaSamplePosition;
    return codec;
};
var $2ebd91a8ff02379d$export$f316fb16efba7de9 = function getAvcCodec(bytes) {
    var profileId = (0, $d7439dbe74fc424d$export$f4915efbb94d4d01)(bytes[1]);
    var constraintFlags = (0, $d7439dbe74fc424d$export$f4915efbb94d4d01)(bytes[2] & 0xFC);
    var levelId = (0, $d7439dbe74fc424d$export$f4915efbb94d4d01)(bytes[3]);
    return "" + profileId + constraintFlags + levelId;
};
var $2ebd91a8ff02379d$export$57f4fb41d46b44d9 = function getHvcCodec(bytes) {
    var codec = "";
    var profileSpace = bytes[1] >> 6;
    var profileId = bytes[1] & 0x1F;
    var tierFlag = (bytes[1] & 0x20) >> 5;
    var profileCompat = bytes.subarray(2, 6);
    var constraintIds = bytes.subarray(6, 12);
    var levelId = bytes[12];
    if (profileSpace === 1) codec += "A";
    else if (profileSpace === 2) codec += "B";
    else if (profileSpace === 3) codec += "C";
    codec += profileId + "."; // ffmpeg does this in big endian
    var profileCompatVal = parseInt((0, $d7439dbe74fc424d$export$9a7d75f397723250)(profileCompat).split("").reverse().join(""), 2); // apple does this in little endian...
    if (profileCompatVal > 255) profileCompatVal = parseInt((0, $d7439dbe74fc424d$export$9a7d75f397723250)(profileCompat), 2);
    codec += profileCompatVal.toString(16) + ".";
    if (tierFlag === 0) codec += "L";
    else codec += "H";
    codec += levelId;
    var constraints = "";
    for(var i = 0; i < constraintIds.length; i++){
        var v = constraintIds[i];
        if (v) {
            if (constraints) constraints += ".";
            constraints += v.toString(16);
        }
    }
    if (constraints) codec += "." + constraints;
    return codec;
};


var $c61cc8b0eadce092$export$bbdb118c36f58091 = new Uint8Array([
    0x4f,
    0x70,
    0x75,
    0x73,
    0x48,
    0x65,
    0x61,
    0x64
]); // https://wiki.xiph.org/OggOpus
var $c61cc8b0eadce092$export$162487c51ffd8212 = function parseOpusHead(bytes) {
    var view = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    var version = view.getUint8(0); // version 0, from mp4, does not use littleEndian.
    var littleEndian = version !== 0;
    var config = {
        version: version,
        channels: view.getUint8(1),
        preSkip: view.getUint16(2, littleEndian),
        sampleRate: view.getUint32(4, littleEndian),
        outputGain: view.getUint16(8, littleEndian),
        channelMappingFamily: view.getUint8(10)
    };
    if (config.channelMappingFamily > 0 && bytes.length > 10) {
        config.streamCount = view.getUint8(11);
        config.twoChannelStreamCount = view.getUint8(12);
        config.channelMapping = [];
        for(var c = 0; c < config.channels; c++)config.channelMapping.push(view.getUint8(13 + c));
    }
    return config;
};
var $c61cc8b0eadce092$export$57dc6f8263af01df = function setOpusHead(config) {
    var size = config.channelMappingFamily <= 0 ? 11 : 12 + config.channels;
    var view = new DataView(new ArrayBuffer(size));
    var littleEndian = config.version !== 0;
    view.setUint8(0, config.version);
    view.setUint8(1, config.channels);
    view.setUint16(2, config.preSkip, littleEndian);
    view.setUint32(4, config.sampleRate, littleEndian);
    view.setUint16(8, config.outputGain, littleEndian);
    view.setUint8(10, config.channelMappingFamily);
    if (config.channelMappingFamily > 0) {
        view.setUint8(11, config.streamCount);
        config.channelMapping.foreach(function(cm, i) {
            view.setUint8(12 + i, cm);
        });
    }
    return new Uint8Array(view.buffer);
};


var $cbdc9f8bae1ab145$var$normalizePath = function normalizePath(path) {
    if (typeof path === "string") return (0, $d7439dbe74fc424d$export$c8dd6bc66a63753c)(path);
    if (typeof path === "number") return path;
    return path;
};
var $cbdc9f8bae1ab145$var$normalizePaths = function normalizePaths(paths) {
    if (!Array.isArray(paths)) return [
        $cbdc9f8bae1ab145$var$normalizePath(paths)
    ];
    return paths.map(function(p) {
        return $cbdc9f8bae1ab145$var$normalizePath(p);
    });
};
var $cbdc9f8bae1ab145$var$DESCRIPTORS;
var $cbdc9f8bae1ab145$export$fe4700066a34ac73 = function parseDescriptors(bytes) {
    bytes = (0, $d7439dbe74fc424d$export$63c3de442720649)(bytes);
    var results = [];
    var i = 0;
    while(bytes.length > i){
        var tag = bytes[i];
        var size = 0;
        var headerSize = 0; // tag
        headerSize++;
        var byte = bytes[headerSize]; // first byte
        headerSize++;
        while(byte & 0x80){
            size = (byte & 0x7F) << 7;
            byte = bytes[headerSize];
            headerSize++;
        }
        size += byte & 0x7F;
        for(var z = 0; z < $cbdc9f8bae1ab145$var$DESCRIPTORS.length; z++){
            var _DESCRIPTORS$z = $cbdc9f8bae1ab145$var$DESCRIPTORS[z], id = _DESCRIPTORS$z.id, parser = _DESCRIPTORS$z.parser;
            if (tag === id) {
                results.push(parser(bytes.subarray(headerSize, headerSize + size)));
                break;
            }
        }
        i += size + headerSize;
    }
    return results;
};
$cbdc9f8bae1ab145$var$DESCRIPTORS = [
    {
        id: 0x03,
        parser: function parser(bytes) {
            var desc = {
                tag: 0x03,
                id: bytes[0] << 8 | bytes[1],
                flags: bytes[2],
                size: 3,
                dependsOnEsId: 0,
                ocrEsId: 0,
                descriptors: [],
                url: ""
            }; // depends on es id
            if (desc.flags & 0x80) {
                desc.dependsOnEsId = bytes[desc.size] << 8 | bytes[desc.size + 1];
                desc.size += 2;
            } // url
            if (desc.flags & 0x40) {
                var len = bytes[desc.size];
                desc.url = (0, $d7439dbe74fc424d$export$7c746b75f47c9c7d)(bytes.subarray(desc.size + 1, desc.size + 1 + len));
                desc.size += len;
            } // ocr es id
            if (desc.flags & 0x20) {
                desc.ocrEsId = bytes[desc.size] << 8 | bytes[desc.size + 1];
                desc.size += 2;
            }
            desc.descriptors = $cbdc9f8bae1ab145$export$fe4700066a34ac73(bytes.subarray(desc.size)) || [];
            return desc;
        }
    },
    {
        id: 0x04,
        parser: function parser(bytes) {
            // DecoderConfigDescriptor
            var desc = {
                tag: 0x04,
                oti: bytes[0],
                streamType: bytes[1],
                bufferSize: bytes[2] << 16 | bytes[3] << 8 | bytes[4],
                maxBitrate: bytes[5] << 24 | bytes[6] << 16 | bytes[7] << 8 | bytes[8],
                avgBitrate: bytes[9] << 24 | bytes[10] << 16 | bytes[11] << 8 | bytes[12],
                descriptors: $cbdc9f8bae1ab145$export$fe4700066a34ac73(bytes.subarray(13))
            };
            return desc;
        }
    },
    {
        id: 0x05,
        parser: function parser(bytes) {
            // DecoderSpecificInfo
            return {
                tag: 0x05,
                bytes: bytes
            };
        }
    },
    {
        id: 0x06,
        parser: function parser(bytes) {
            // SLConfigDescriptor
            return {
                tag: 0x06,
                bytes: bytes
            };
        }
    }
];
var $cbdc9f8bae1ab145$export$d81d43b46e2012ef = function findBox(bytes, paths, complete) {
    if (complete === void 0) complete = false;
    paths = $cbdc9f8bae1ab145$var$normalizePaths(paths);
    bytes = (0, $d7439dbe74fc424d$export$63c3de442720649)(bytes);
    var results = [];
    if (!paths.length) // short-circuit the search for empty paths
    return results;
    var i = 0;
    while(i < bytes.length){
        var size = (bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]) >>> 0;
        var type = bytes.subarray(i + 4, i + 8); // invalid box format.
        if (size === 0) break;
        var end = i + size;
        if (end > bytes.length) {
            // this box is bigger than the number of bytes we have
            // and complete is set, we cannot find any more boxes.
            if (complete) break;
            end = bytes.length;
        }
        var data = bytes.subarray(i + 8, end);
        if ((0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(type, paths[0])) {
            if (paths.length === 1) // this is the end of the path and we've found the box we were
            // looking for
            results.push(data);
            else // recursively search for the next box along the path
            results.push.apply(results, findBox(data, paths.slice(1), complete));
        }
        i = end;
    } // we've finished searching all of bytes
    return results;
};
var $cbdc9f8bae1ab145$export$610b5b08fd0ffeb4 = function findNamedBox(bytes, name) {
    name = $cbdc9f8bae1ab145$var$normalizePath(name);
    if (!name.length) // short-circuit the search for empty paths
    return bytes.subarray(bytes.length);
    var i = 0;
    while(i < bytes.length){
        if ((0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes.subarray(i, i + name.length), name)) {
            var size = (bytes[i - 4] << 24 | bytes[i - 3] << 16 | bytes[i - 2] << 8 | bytes[i - 1]) >>> 0;
            var end = size > 1 ? i + size : bytes.byteLength;
            return bytes.subarray(i + 4, end);
        }
        i++;
    } // we've finished searching all of bytes
    return bytes.subarray(bytes.length);
};
var $cbdc9f8bae1ab145$var$parseSamples = function parseSamples(data, entrySize, parseEntry) {
    if (entrySize === void 0) entrySize = 4;
    if (parseEntry === void 0) parseEntry = function parseEntry(d) {
        return (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(d);
    };
    var entries = [];
    if (!data || !data.length) return entries;
    var entryCount = (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(data.subarray(4, 8));
    for(var i = 8; entryCount; i += entrySize, entryCount--)entries.push(parseEntry(data.subarray(i, i + entrySize)));
    return entries;
};
var $cbdc9f8bae1ab145$export$78870b2844ff6386 = function buildFrameTable(stbl, timescale) {
    var keySamples = $cbdc9f8bae1ab145$var$parseSamples($cbdc9f8bae1ab145$export$d81d43b46e2012ef(stbl, [
        "stss"
    ])[0]);
    var chunkOffsets = $cbdc9f8bae1ab145$var$parseSamples($cbdc9f8bae1ab145$export$d81d43b46e2012ef(stbl, [
        "stco"
    ])[0]);
    var timeToSamples = $cbdc9f8bae1ab145$var$parseSamples($cbdc9f8bae1ab145$export$d81d43b46e2012ef(stbl, [
        "stts"
    ])[0], 8, function(entry) {
        return {
            sampleCount: (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(entry.subarray(0, 4)),
            sampleDelta: (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(entry.subarray(4, 8))
        };
    });
    var samplesToChunks = $cbdc9f8bae1ab145$var$parseSamples($cbdc9f8bae1ab145$export$d81d43b46e2012ef(stbl, [
        "stsc"
    ])[0], 12, function(entry) {
        return {
            firstChunk: (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(entry.subarray(0, 4)),
            samplesPerChunk: (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(entry.subarray(4, 8)),
            sampleDescriptionIndex: (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(entry.subarray(8, 12))
        };
    });
    var stsz = $cbdc9f8bae1ab145$export$d81d43b46e2012ef(stbl, [
        "stsz"
    ])[0]; // stsz starts with a 4 byte sampleSize which we don't need
    var sampleSizes = $cbdc9f8bae1ab145$var$parseSamples(stsz && stsz.length && stsz.subarray(4) || null);
    var frames = [];
    for(var chunkIndex = 0; chunkIndex < chunkOffsets.length; chunkIndex++){
        var samplesInChunk = void 0;
        for(var i = 0; i < samplesToChunks.length; i++){
            var sampleToChunk = samplesToChunks[i];
            var isThisOne = chunkIndex + 1 >= sampleToChunk.firstChunk && (i + 1 >= samplesToChunks.length || chunkIndex + 1 < samplesToChunks[i + 1].firstChunk);
            if (isThisOne) {
                samplesInChunk = sampleToChunk.samplesPerChunk;
                break;
            }
        }
        var chunkOffset = chunkOffsets[chunkIndex];
        for(var _i = 0; _i < samplesInChunk; _i++){
            var frameEnd = sampleSizes[frames.length]; // if we don't have key samples every frame is a keyframe
            var keyframe = !keySamples.length;
            if (keySamples.length && keySamples.indexOf(frames.length + 1) !== -1) keyframe = true;
            var frame = {
                keyframe: keyframe,
                start: chunkOffset,
                end: chunkOffset + frameEnd
            };
            for(var k = 0; k < timeToSamples.length; k++){
                var _timeToSamples$k = timeToSamples[k], sampleCount = _timeToSamples$k.sampleCount, sampleDelta = _timeToSamples$k.sampleDelta;
                if (frames.length <= sampleCount) {
                    // ms to ns
                    var lastTimestamp = frames.length ? frames[frames.length - 1].timestamp : 0;
                    frame.timestamp = lastTimestamp + sampleDelta / timescale * 1000;
                    frame.duration = sampleDelta;
                    break;
                }
            }
            frames.push(frame);
            chunkOffset += frameEnd;
        }
    }
    return frames;
};
var $cbdc9f8bae1ab145$export$56fdd13a804135bf = function addSampleDescription(track, bytes) {
    var codec = (0, $d7439dbe74fc424d$export$7c746b75f47c9c7d)(bytes.subarray(0, 4));
    if (track.type === "video") {
        track.info = track.info || {};
        track.info.width = bytes[28] << 8 | bytes[29];
        track.info.height = bytes[30] << 8 | bytes[31];
    } else if (track.type === "audio") {
        track.info = track.info || {};
        track.info.channels = bytes[20] << 8 | bytes[21];
        track.info.bitDepth = bytes[22] << 8 | bytes[23];
        track.info.sampleRate = bytes[28] << 8 | bytes[29];
    }
    if (codec === "avc1") {
        var avcC = $cbdc9f8bae1ab145$export$610b5b08fd0ffeb4(bytes, "avcC"); // AVCDecoderConfigurationRecord
        codec += "." + (0, $2ebd91a8ff02379d$export$f316fb16efba7de9)(avcC);
        track.info.avcC = avcC; // TODO: do we need to parse all this?
    /* {
      configurationVersion: avcC[0],
      profile: avcC[1],
      profileCompatibility: avcC[2],
      level: avcC[3],
      lengthSizeMinusOne: avcC[4] & 0x3
    };
     let spsNalUnitCount = avcC[5] & 0x1F;
    const spsNalUnits = track.info.avc.spsNalUnits = [];
     // past spsNalUnitCount
    let offset = 6;
     while (spsNalUnitCount--) {
      const nalLen = avcC[offset] << 8 | avcC[offset + 1];
       spsNalUnits.push(avcC.subarray(offset + 2, offset + 2 + nalLen));
       offset += nalLen + 2;
    }
    let ppsNalUnitCount = avcC[offset];
    const ppsNalUnits = track.info.avc.ppsNalUnits = [];
     // past ppsNalUnitCount
    offset += 1;
     while (ppsNalUnitCount--) {
      const nalLen = avcC[offset] << 8 | avcC[offset + 1];
       ppsNalUnits.push(avcC.subarray(offset + 2, offset + 2 + nalLen));
       offset += nalLen + 2;
    }*/ // HEVCDecoderConfigurationRecord
    } else if (codec === "hvc1" || codec === "hev1") codec += "." + (0, $2ebd91a8ff02379d$export$57f4fb41d46b44d9)($cbdc9f8bae1ab145$export$610b5b08fd0ffeb4(bytes, "hvcC"));
    else if (codec === "mp4a" || codec === "mp4v") {
        var esds = $cbdc9f8bae1ab145$export$610b5b08fd0ffeb4(bytes, "esds");
        var esDescriptor = $cbdc9f8bae1ab145$export$fe4700066a34ac73(esds.subarray(4))[0];
        var decoderConfig = esDescriptor && esDescriptor.descriptors.filter(function(_ref) {
            var tag = _ref.tag;
            return tag === 0x04;
        })[0];
        if (decoderConfig) {
            // most codecs do not have a further '.'
            // such as 0xa5 for ac-3 and 0xa6 for e-ac-3
            codec += "." + (0, $d7439dbe74fc424d$export$f4915efbb94d4d01)(decoderConfig.oti);
            if (decoderConfig.oti === 0x40) codec += "." + (decoderConfig.descriptors[0].bytes[0] >> 3).toString();
            else if (decoderConfig.oti === 0x20) codec += "." + decoderConfig.descriptors[0].bytes[4].toString();
            else if (decoderConfig.oti === 0xdd) codec = "vorbis";
        } else if (track.type === "audio") codec += ".40.2";
        else codec += ".20.9";
    } else if (codec === "av01") // AV1DecoderConfigurationRecord
    codec += "." + (0, $2ebd91a8ff02379d$export$5ff37217be0e6718)($cbdc9f8bae1ab145$export$610b5b08fd0ffeb4(bytes, "av1C"));
    else if (codec === "vp09") {
        // VPCodecConfigurationRecord
        var vpcC = $cbdc9f8bae1ab145$export$610b5b08fd0ffeb4(bytes, "vpcC"); // https://www.webmproject.org/vp9/mp4/
        var profile = vpcC[0];
        var level = vpcC[1];
        var bitDepth = vpcC[2] >> 4;
        var chromaSubsampling = (vpcC[2] & 0x0F) >> 1;
        var videoFullRangeFlag = (vpcC[2] & 0x0F) >> 3;
        var colourPrimaries = vpcC[3];
        var transferCharacteristics = vpcC[4];
        var matrixCoefficients = vpcC[5];
        codec += "." + (0, $d7439dbe74fc424d$export$36cf564d487b5178)(profile, 2, "0");
        codec += "." + (0, $d7439dbe74fc424d$export$36cf564d487b5178)(level, 2, "0");
        codec += "." + (0, $d7439dbe74fc424d$export$36cf564d487b5178)(bitDepth, 2, "0");
        codec += "." + (0, $d7439dbe74fc424d$export$36cf564d487b5178)(chromaSubsampling, 2, "0");
        codec += "." + (0, $d7439dbe74fc424d$export$36cf564d487b5178)(colourPrimaries, 2, "0");
        codec += "." + (0, $d7439dbe74fc424d$export$36cf564d487b5178)(transferCharacteristics, 2, "0");
        codec += "." + (0, $d7439dbe74fc424d$export$36cf564d487b5178)(matrixCoefficients, 2, "0");
        codec += "." + (0, $d7439dbe74fc424d$export$36cf564d487b5178)(videoFullRangeFlag, 2, "0");
    } else if (codec === "theo") codec = "theora";
    else if (codec === "spex") codec = "speex";
    else if (codec === ".mp3") codec = "mp4a.40.34";
    else if (codec === "msVo") codec = "vorbis";
    else if (codec === "Opus") {
        codec = "opus";
        var dOps = $cbdc9f8bae1ab145$export$610b5b08fd0ffeb4(bytes, "dOps");
        track.info.opus = (0, $c61cc8b0eadce092$export$162487c51ffd8212)(dOps); // TODO: should this go into the webm code??
        // Firefox requires a codecDelay for opus playback
        // see https://bugzilla.mozilla.org/show_bug.cgi?id=1276238
        track.info.codecDelay = 6500000;
    } else codec = codec.toLowerCase();
    /* eslint-enable */ // flac, ac-3, ec-3, opus
    track.codec = codec;
};
var $cbdc9f8bae1ab145$export$b9400b1cdedffc2a = function parseTracks(bytes, frameTable) {
    if (frameTable === void 0) frameTable = true;
    bytes = (0, $d7439dbe74fc424d$export$63c3de442720649)(bytes);
    var traks = $cbdc9f8bae1ab145$export$d81d43b46e2012ef(bytes, [
        "moov",
        "trak"
    ], true);
    var tracks = [];
    traks.forEach(function(trak) {
        var track = {
            bytes: trak
        };
        var mdia = $cbdc9f8bae1ab145$export$d81d43b46e2012ef(trak, [
            "mdia"
        ])[0];
        var hdlr = $cbdc9f8bae1ab145$export$d81d43b46e2012ef(mdia, [
            "hdlr"
        ])[0];
        var trakType = (0, $d7439dbe74fc424d$export$7c746b75f47c9c7d)(hdlr.subarray(8, 12));
        if (trakType === "soun") track.type = "audio";
        else if (trakType === "vide") track.type = "video";
        else track.type = trakType;
        var tkhd = $cbdc9f8bae1ab145$export$d81d43b46e2012ef(trak, [
            "tkhd"
        ])[0];
        if (tkhd) {
            var view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);
            var tkhdVersion = view.getUint8(0);
            track.number = tkhdVersion === 0 ? view.getUint32(12) : view.getUint32(20);
        }
        var mdhd = $cbdc9f8bae1ab145$export$d81d43b46e2012ef(mdia, [
            "mdhd"
        ])[0];
        if (mdhd) {
            // mdhd is a FullBox, meaning it will have its own version as the first byte
            var version = mdhd[0];
            var index = version === 0 ? 12 : 20;
            track.timescale = (mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]) >>> 0;
        }
        var stbl = $cbdc9f8bae1ab145$export$d81d43b46e2012ef(mdia, [
            "minf",
            "stbl"
        ])[0];
        var stsd = $cbdc9f8bae1ab145$export$d81d43b46e2012ef(stbl, [
            "stsd"
        ])[0];
        var descriptionCount = (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(stsd.subarray(4, 8));
        var offset = 8; // add codec and codec info
        while(descriptionCount--){
            var len = (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(stsd.subarray(offset, offset + 4));
            var sampleDescriptor = stsd.subarray(offset + 4, offset + 4 + len);
            $cbdc9f8bae1ab145$export$56fdd13a804135bf(track, sampleDescriptor);
            offset += 4 + len;
        }
        if (frameTable) track.frameTable = $cbdc9f8bae1ab145$export$78870b2844ff6386(stbl, track.timescale);
         // codec has no sub parameters
        tracks.push(track);
    });
    return tracks;
};
var $cbdc9f8bae1ab145$export$bd2f7582ee199747 = function parseMediaInfo(bytes) {
    var mvhd = $cbdc9f8bae1ab145$export$d81d43b46e2012ef(bytes, [
        "moov",
        "mvhd"
    ], true)[0];
    if (!mvhd || !mvhd.length) return;
    var info = {}; // ms to ns
    // mvhd v1 has 8 byte duration and other fields too
    if (mvhd[0] === 1) {
        info.timestampScale = (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(mvhd.subarray(20, 24));
        info.duration = (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(mvhd.subarray(24, 32));
    } else {
        info.timestampScale = (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(mvhd.subarray(12, 16));
        info.duration = (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(mvhd.subarray(16, 20));
    }
    info.bytes = mvhd;
    return info;
};




var $130272454aa7ae1f$export$3dc3c695a37e4653 = {
    EBML: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x1A,
        0x45,
        0xDF,
        0xA3
    ]),
    DocType: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x42,
        0x82
    ]),
    Segment: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x18,
        0x53,
        0x80,
        0x67
    ]),
    SegmentInfo: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x15,
        0x49,
        0xA9,
        0x66
    ]),
    Tracks: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x16,
        0x54,
        0xAE,
        0x6B
    ]),
    Track: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0xAE
    ]),
    TrackNumber: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0xd7
    ]),
    DefaultDuration: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x23,
        0xe3,
        0x83
    ]),
    TrackEntry: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0xAE
    ]),
    TrackType: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x83
    ]),
    FlagDefault: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x88
    ]),
    CodecID: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x86
    ]),
    CodecPrivate: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x63,
        0xA2
    ]),
    VideoTrack: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0xe0
    ]),
    AudioTrack: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0xe1
    ]),
    // Not used yet, but will be used for live webm/mkv
    // see https://www.matroska.org/technical/basics.html#block-structure
    // see https://www.matroska.org/technical/basics.html#simpleblock-structure
    Cluster: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x1F,
        0x43,
        0xB6,
        0x75
    ]),
    Timestamp: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0xE7
    ]),
    TimestampScale: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x2A,
        0xD7,
        0xB1
    ]),
    BlockGroup: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0xA0
    ]),
    BlockDuration: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x9B
    ]),
    Block: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0xA1
    ]),
    SimpleBlock: (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0xA3
    ])
};
/**
 * This is a simple table to determine the length
 * of things in ebml. The length is one based (starts at 1,
 * rather than zero) and for every zero bit before a one bit
 * we add one to length. We also need this table because in some
 * case we have to xor all the length bits from another value.
 */ var $130272454aa7ae1f$var$LENGTH_TABLE = [
    128,
    64,
    32,
    16,
    8,
    4,
    2,
    1
];
var $130272454aa7ae1f$var$getLength = function getLength(byte) {
    var len = 1;
    for(var i = 0; i < $130272454aa7ae1f$var$LENGTH_TABLE.length; i++){
        if (byte & $130272454aa7ae1f$var$LENGTH_TABLE[i]) break;
        len++;
    }
    return len;
}; // length in ebml is stored in the first 4 to 8 bits
// of the first byte. 4 for the id length and 8 for the
// data size length. Length is measured by converting the number to binary
// then 1 + the number of zeros before a 1 is encountered starting
// from the left.
var $130272454aa7ae1f$var$getvint = function getvint(bytes, offset, removeLength, signed) {
    if (removeLength === void 0) removeLength = true;
    if (signed === void 0) signed = false;
    var length = $130272454aa7ae1f$var$getLength(bytes[offset]);
    var valueBytes = bytes.subarray(offset, offset + length); // NOTE that we do **not** subarray here because we need to copy these bytes
    // as they will be modified below to remove the dataSizeLen bits and we do not
    // want to modify the original data. normally we could just call slice on
    // uint8array but ie 11 does not support that...
    if (removeLength) {
        valueBytes = Array.prototype.slice.call(bytes, offset, offset + length);
        valueBytes[0] ^= $130272454aa7ae1f$var$LENGTH_TABLE[length - 1];
    }
    return {
        length: length,
        value: (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(valueBytes, {
            signed: signed
        }),
        bytes: valueBytes
    };
};
var $130272454aa7ae1f$var$normalizePath = function normalizePath(path) {
    if (typeof path === "string") return path.match(/.{1,2}/g).map(function(p) {
        return normalizePath(p);
    });
    if (typeof path === "number") return (0, $d7439dbe74fc424d$export$49ad9be85c347998)(path);
    return path;
};
var $130272454aa7ae1f$var$normalizePaths = function normalizePaths(paths) {
    if (!Array.isArray(paths)) return [
        $130272454aa7ae1f$var$normalizePath(paths)
    ];
    return paths.map(function(p) {
        return $130272454aa7ae1f$var$normalizePath(p);
    });
};
var $130272454aa7ae1f$var$getInfinityDataSize = function getInfinityDataSize(id, bytes, offset) {
    if (offset >= bytes.length) return bytes.length;
    var innerid = $130272454aa7ae1f$var$getvint(bytes, offset, false);
    if ((0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(id.bytes, innerid.bytes)) return offset;
    var dataHeader = $130272454aa7ae1f$var$getvint(bytes, offset + innerid.length);
    return getInfinityDataSize(id, bytes, offset + dataHeader.length + dataHeader.value + innerid.length);
};
var $130272454aa7ae1f$export$826a5b7de63531e6 = function findEbml(bytes, paths) {
    paths = $130272454aa7ae1f$var$normalizePaths(paths);
    bytes = (0, $d7439dbe74fc424d$export$63c3de442720649)(bytes);
    var results = [];
    if (!paths.length) return results;
    var i = 0;
    while(i < bytes.length){
        var id = $130272454aa7ae1f$var$getvint(bytes, i, false);
        var dataHeader = $130272454aa7ae1f$var$getvint(bytes, i + id.length);
        var dataStart = i + id.length + dataHeader.length; // dataSize is unknown or this is a live stream
        if (dataHeader.value === 0x7f) {
            dataHeader.value = $130272454aa7ae1f$var$getInfinityDataSize(id, bytes, dataStart);
            if (dataHeader.value !== bytes.length) dataHeader.value -= dataStart;
        }
        var dataEnd = dataStart + dataHeader.value > bytes.length ? bytes.length : dataStart + dataHeader.value;
        var data = bytes.subarray(dataStart, dataEnd);
        if ((0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(paths[0], id.bytes)) {
            if (paths.length === 1) // this is the end of the paths and we've found the tag we were
            // looking for
            results.push(data);
            else // recursively search for the next tag inside of the data
            // of this one
            results = results.concat(findEbml(data, paths.slice(1)));
        }
        var totalLength = id.length + dataHeader.length + data.length; // move past this tag entirely, we are not looking for it
        i += totalLength;
    }
    return results;
}; // see https://www.matroska.org/technical/basics.html#block-structure
var $130272454aa7ae1f$export$cd5299e345c81b3 = function decodeBlock(block, type, timestampScale, clusterTimestamp) {
    var duration;
    if (type === "group") {
        duration = $130272454aa7ae1f$export$826a5b7de63531e6(block, [
            $130272454aa7ae1f$export$3dc3c695a37e4653.BlockDuration
        ])[0];
        if (duration) {
            duration = (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(duration);
            duration = 1 / timestampScale * duration * timestampScale / 1000;
        }
        block = $130272454aa7ae1f$export$826a5b7de63531e6(block, [
            $130272454aa7ae1f$export$3dc3c695a37e4653.Block
        ])[0];
        type = "block"; // treat data as a block after this point
    }
    var dv = new DataView(block.buffer, block.byteOffset, block.byteLength);
    var trackNumber = $130272454aa7ae1f$var$getvint(block, 0);
    var timestamp = dv.getInt16(trackNumber.length, false);
    var flags = block[trackNumber.length + 2];
    var data = block.subarray(trackNumber.length + 3); // pts/dts in seconds
    var ptsdts = 1 / timestampScale * (clusterTimestamp + timestamp) * timestampScale / 1000; // return the frame
    var parsed = {
        duration: duration,
        trackNumber: trackNumber.value,
        keyframe: type === "simple" && flags >> 7 === 1,
        invisible: (flags & 0x08) >> 3 === 1,
        lacing: (flags & 0x06) >> 1,
        discardable: type === "simple" && (flags & 0x01) === 1,
        frames: [],
        pts: ptsdts,
        dts: ptsdts,
        timestamp: timestamp
    };
    if (!parsed.lacing) {
        parsed.frames.push(data);
        return parsed;
    }
    var numberOfFrames = data[0] + 1;
    var frameSizes = [];
    var offset = 1; // Fixed
    if (parsed.lacing === 2) {
        var sizeOfFrame = (data.length - offset) / numberOfFrames;
        for(var i = 0; i < numberOfFrames; i++)frameSizes.push(sizeOfFrame);
    } // xiph
    if (parsed.lacing === 1) for(var _i = 0; _i < numberOfFrames - 1; _i++){
        var size = 0;
        do {
            size += data[offset];
            offset++;
        }while (data[offset - 1] === 0xFF);
        frameSizes.push(size);
    }
     // ebml
    if (parsed.lacing === 3) {
        // first vint is unsinged
        // after that vints are singed and
        // based on a compounding size
        var _size = 0;
        for(var _i2 = 0; _i2 < numberOfFrames - 1; _i2++){
            var vint = _i2 === 0 ? $130272454aa7ae1f$var$getvint(data, offset) : $130272454aa7ae1f$var$getvint(data, offset, true, true);
            _size += vint.value;
            frameSizes.push(_size);
            offset += vint.length;
        }
    }
    frameSizes.forEach(function(size) {
        parsed.frames.push(data.subarray(offset, offset + size));
        offset += size;
    });
    return parsed;
}; // VP9 Codec Feature Metadata (CodecPrivate)
// https://www.webmproject.org/docs/container/
var $130272454aa7ae1f$var$parseVp9Private = function parseVp9Private(bytes) {
    var i = 0;
    var params = {};
    while(i < bytes.length){
        var id = bytes[i] & 0x7f;
        var len = bytes[i + 1];
        var val = void 0;
        if (len === 1) val = bytes[i + 2];
        else val = bytes.subarray(i + 2, i + 2 + len);
        if (id === 1) params.profile = val;
        else if (id === 2) params.level = val;
        else if (id === 3) params.bitDepth = val;
        else if (id === 4) params.chromaSubsampling = val;
        else params[id] = val;
        i += 2 + len;
    }
    return params;
};
var $130272454aa7ae1f$export$b9400b1cdedffc2a = function parseTracks(bytes) {
    bytes = (0, $d7439dbe74fc424d$export$63c3de442720649)(bytes);
    var decodedTracks = [];
    var tracks = $130272454aa7ae1f$export$826a5b7de63531e6(bytes, [
        $130272454aa7ae1f$export$3dc3c695a37e4653.Segment,
        $130272454aa7ae1f$export$3dc3c695a37e4653.Tracks,
        $130272454aa7ae1f$export$3dc3c695a37e4653.Track
    ]);
    if (!tracks.length) tracks = $130272454aa7ae1f$export$826a5b7de63531e6(bytes, [
        $130272454aa7ae1f$export$3dc3c695a37e4653.Tracks,
        $130272454aa7ae1f$export$3dc3c695a37e4653.Track
    ]);
    if (!tracks.length) tracks = $130272454aa7ae1f$export$826a5b7de63531e6(bytes, [
        $130272454aa7ae1f$export$3dc3c695a37e4653.Track
    ]);
    if (!tracks.length) return decodedTracks;
    tracks.forEach(function(track) {
        var trackType = $130272454aa7ae1f$export$826a5b7de63531e6(track, $130272454aa7ae1f$export$3dc3c695a37e4653.TrackType)[0];
        if (!trackType || !trackType.length) return;
         // 1 is video, 2 is audio, 17 is subtitle
        // other values are unimportant in this context
        if (trackType[0] === 1) trackType = "video";
        else if (trackType[0] === 2) trackType = "audio";
        else if (trackType[0] === 17) trackType = "subtitle";
        else return;
         // todo parse language
        var decodedTrack = {
            rawCodec: (0, $d7439dbe74fc424d$export$7c746b75f47c9c7d)($130272454aa7ae1f$export$826a5b7de63531e6(track, [
                $130272454aa7ae1f$export$3dc3c695a37e4653.CodecID
            ])[0]),
            type: trackType,
            codecPrivate: $130272454aa7ae1f$export$826a5b7de63531e6(track, [
                $130272454aa7ae1f$export$3dc3c695a37e4653.CodecPrivate
            ])[0],
            number: (0, $d7439dbe74fc424d$export$c0cca17bcf674749)($130272454aa7ae1f$export$826a5b7de63531e6(track, [
                $130272454aa7ae1f$export$3dc3c695a37e4653.TrackNumber
            ])[0]),
            defaultDuration: (0, $d7439dbe74fc424d$export$c0cca17bcf674749)($130272454aa7ae1f$export$826a5b7de63531e6(track, [
                $130272454aa7ae1f$export$3dc3c695a37e4653.DefaultDuration
            ])[0]),
            default: $130272454aa7ae1f$export$826a5b7de63531e6(track, [
                $130272454aa7ae1f$export$3dc3c695a37e4653.FlagDefault
            ])[0],
            rawData: track
        };
        var codec = "";
        if (/V_MPEG4\/ISO\/AVC/.test(decodedTrack.rawCodec)) codec = "avc1." + (0, $2ebd91a8ff02379d$export$f316fb16efba7de9)(decodedTrack.codecPrivate);
        else if (/V_MPEGH\/ISO\/HEVC/.test(decodedTrack.rawCodec)) codec = "hev1." + (0, $2ebd91a8ff02379d$export$57f4fb41d46b44d9)(decodedTrack.codecPrivate);
        else if (/V_MPEG4\/ISO\/ASP/.test(decodedTrack.rawCodec)) {
            if (decodedTrack.codecPrivate) codec = "mp4v.20." + decodedTrack.codecPrivate[4].toString();
            else codec = "mp4v.20.9";
        } else if (/^V_THEORA/.test(decodedTrack.rawCodec)) codec = "theora";
        else if (/^V_VP8/.test(decodedTrack.rawCodec)) codec = "vp8";
        else if (/^V_VP9/.test(decodedTrack.rawCodec)) {
            if (decodedTrack.codecPrivate) {
                var _parseVp9Private = $130272454aa7ae1f$var$parseVp9Private(decodedTrack.codecPrivate), profile = _parseVp9Private.profile, level = _parseVp9Private.level, bitDepth = _parseVp9Private.bitDepth, chromaSubsampling = _parseVp9Private.chromaSubsampling;
                codec = "vp09.";
                codec += (0, $d7439dbe74fc424d$export$36cf564d487b5178)(profile, 2, "0") + ".";
                codec += (0, $d7439dbe74fc424d$export$36cf564d487b5178)(level, 2, "0") + ".";
                codec += (0, $d7439dbe74fc424d$export$36cf564d487b5178)(bitDepth, 2, "0") + ".";
                codec += "" + (0, $d7439dbe74fc424d$export$36cf564d487b5178)(chromaSubsampling, 2, "0"); // Video -> Colour -> Ebml name
                var matrixCoefficients = $130272454aa7ae1f$export$826a5b7de63531e6(track, [
                    0xE0,
                    [
                        0x55,
                        0xB0
                    ],
                    [
                        0x55,
                        0xB1
                    ]
                ])[0] || [];
                var videoFullRangeFlag = $130272454aa7ae1f$export$826a5b7de63531e6(track, [
                    0xE0,
                    [
                        0x55,
                        0xB0
                    ],
                    [
                        0x55,
                        0xB9
                    ]
                ])[0] || [];
                var transferCharacteristics = $130272454aa7ae1f$export$826a5b7de63531e6(track, [
                    0xE0,
                    [
                        0x55,
                        0xB0
                    ],
                    [
                        0x55,
                        0xBA
                    ]
                ])[0] || [];
                var colourPrimaries = $130272454aa7ae1f$export$826a5b7de63531e6(track, [
                    0xE0,
                    [
                        0x55,
                        0xB0
                    ],
                    [
                        0x55,
                        0xBB
                    ]
                ])[0] || []; // if we find any optional codec parameter specify them all.
                if (matrixCoefficients.length || videoFullRangeFlag.length || transferCharacteristics.length || colourPrimaries.length) {
                    codec += "." + (0, $d7439dbe74fc424d$export$36cf564d487b5178)(colourPrimaries[0], 2, "0");
                    codec += "." + (0, $d7439dbe74fc424d$export$36cf564d487b5178)(transferCharacteristics[0], 2, "0");
                    codec += "." + (0, $d7439dbe74fc424d$export$36cf564d487b5178)(matrixCoefficients[0], 2, "0");
                    codec += "." + (0, $d7439dbe74fc424d$export$36cf564d487b5178)(videoFullRangeFlag[0], 2, "0");
                }
            } else codec = "vp9";
        } else if (/^V_AV1/.test(decodedTrack.rawCodec)) codec = "av01." + (0, $2ebd91a8ff02379d$export$5ff37217be0e6718)(decodedTrack.codecPrivate);
        else if (/A_ALAC/.test(decodedTrack.rawCodec)) codec = "alac";
        else if (/A_MPEG\/L2/.test(decodedTrack.rawCodec)) codec = "mp2";
        else if (/A_MPEG\/L3/.test(decodedTrack.rawCodec)) codec = "mp3";
        else if (/^A_AAC/.test(decodedTrack.rawCodec)) {
            if (decodedTrack.codecPrivate) codec = "mp4a.40." + (decodedTrack.codecPrivate[0] >>> 3).toString();
            else codec = "mp4a.40.2";
        } else if (/^A_AC3/.test(decodedTrack.rawCodec)) codec = "ac-3";
        else if (/^A_PCM/.test(decodedTrack.rawCodec)) codec = "pcm";
        else if (/^A_MS\/ACM/.test(decodedTrack.rawCodec)) codec = "speex";
        else if (/^A_EAC3/.test(decodedTrack.rawCodec)) codec = "ec-3";
        else if (/^A_VORBIS/.test(decodedTrack.rawCodec)) codec = "vorbis";
        else if (/^A_FLAC/.test(decodedTrack.rawCodec)) codec = "flac";
        else if (/^A_OPUS/.test(decodedTrack.rawCodec)) codec = "opus";
        decodedTrack.codec = codec;
        decodedTracks.push(decodedTrack);
    });
    return decodedTracks.sort(function(a, b) {
        return a.number - b.number;
    });
};
var $130272454aa7ae1f$export$4c0e6fff2d4abe18 = function parseData(data, tracks) {
    var allBlocks = [];
    var segment = $130272454aa7ae1f$export$826a5b7de63531e6(data, [
        $130272454aa7ae1f$export$3dc3c695a37e4653.Segment
    ])[0];
    var timestampScale = $130272454aa7ae1f$export$826a5b7de63531e6(segment, [
        $130272454aa7ae1f$export$3dc3c695a37e4653.SegmentInfo,
        $130272454aa7ae1f$export$3dc3c695a37e4653.TimestampScale
    ])[0]; // in nanoseconds, defaults to 1ms
    if (timestampScale && timestampScale.length) timestampScale = (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(timestampScale);
    else timestampScale = 1000000;
    var clusters = $130272454aa7ae1f$export$826a5b7de63531e6(segment, [
        $130272454aa7ae1f$export$3dc3c695a37e4653.Cluster
    ]);
    if (!tracks) tracks = $130272454aa7ae1f$export$b9400b1cdedffc2a(segment);
    clusters.forEach(function(cluster, ci) {
        var simpleBlocks = $130272454aa7ae1f$export$826a5b7de63531e6(cluster, [
            $130272454aa7ae1f$export$3dc3c695a37e4653.SimpleBlock
        ]).map(function(b) {
            return {
                type: "simple",
                data: b
            };
        });
        var blockGroups = $130272454aa7ae1f$export$826a5b7de63531e6(cluster, [
            $130272454aa7ae1f$export$3dc3c695a37e4653.BlockGroup
        ]).map(function(b) {
            return {
                type: "group",
                data: b
            };
        });
        var timestamp = $130272454aa7ae1f$export$826a5b7de63531e6(cluster, [
            $130272454aa7ae1f$export$3dc3c695a37e4653.Timestamp
        ])[0] || 0;
        if (timestamp && timestamp.length) timestamp = (0, $d7439dbe74fc424d$export$c0cca17bcf674749)(timestamp);
         // get all blocks then sort them into the correct order
        var blocks = simpleBlocks.concat(blockGroups).sort(function(a, b) {
            return a.data.byteOffset - b.data.byteOffset;
        });
        blocks.forEach(function(block, bi) {
            var decoded = $130272454aa7ae1f$export$cd5299e345c81b3(block.data, block.type, timestampScale, timestamp);
            allBlocks.push(decoded);
        });
    });
    return {
        tracks: tracks,
        blocks: allBlocks
    };
};




var $4142ff7a9dca5438$export$c685721194c7e8f3 = (0, $d7439dbe74fc424d$export$63c3de442720649)([
    0x00,
    0x00,
    0x00,
    0x01
]);
var $4142ff7a9dca5438$export$5e56cd062936486 = (0, $d7439dbe74fc424d$export$63c3de442720649)([
    0x00,
    0x00,
    0x01
]);
var $4142ff7a9dca5438$export$c6449e11a0e55652 = (0, $d7439dbe74fc424d$export$63c3de442720649)([
    0x00,
    0x00,
    0x03
]);
var $4142ff7a9dca5438$export$1a44f7c1c8cc8def = function discardEmulationPreventionBytes(bytes) {
    var positions = [];
    var i = 1; // Find all `Emulation Prevention Bytes`
    while(i < bytes.length - 2){
        if ((0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes.subarray(i, i + 3), $4142ff7a9dca5438$export$c6449e11a0e55652)) {
            positions.push(i + 2);
            i++;
        }
        i++;
    } // If no Emulation Prevention Bytes were found just return the original
    // array
    if (positions.length === 0) return bytes;
     // Create a new array to hold the NAL unit data
    var newLength = bytes.length - positions.length;
    var newData = new Uint8Array(newLength);
    var sourceIndex = 0;
    for(i = 0; i < newLength; sourceIndex++, i++){
        if (sourceIndex === positions[0]) {
            // Skip this byte
            sourceIndex++; // Remove this position index
            positions.shift();
        }
        newData[i] = bytes[sourceIndex];
    }
    return newData;
};
var $4142ff7a9dca5438$export$17fd5d00213a3829 = function findNal(bytes, dataType, types, nalLimit) {
    if (nalLimit === void 0) nalLimit = Infinity;
    bytes = (0, $d7439dbe74fc424d$export$63c3de442720649)(bytes);
    types = [].concat(types);
    var i = 0;
    var nalStart;
    var nalsFound = 0; // keep searching until:
    // we reach the end of bytes
    // we reach the maximum number of nals they want to seach
    // NOTE: that we disregard nalLimit when we have found the start
    // of the nal we want so that we can find the end of the nal we want.
    while(i < bytes.length && (nalsFound < nalLimit || nalStart)){
        var nalOffset = void 0;
        if ((0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes.subarray(i), $4142ff7a9dca5438$export$c685721194c7e8f3)) nalOffset = 4;
        else if ((0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes.subarray(i), $4142ff7a9dca5438$export$5e56cd062936486)) nalOffset = 3;
         // we are unsynced,
        // find the next nal unit
        if (!nalOffset) {
            i++;
            continue;
        }
        nalsFound++;
        if (nalStart) return $4142ff7a9dca5438$export$1a44f7c1c8cc8def(bytes.subarray(nalStart, i));
        var nalType = void 0;
        if (dataType === "h264") nalType = bytes[i + nalOffset] & 0x1f;
        else if (dataType === "h265") nalType = bytes[i + nalOffset] >> 1 & 0x3f;
        if (types.indexOf(nalType) !== -1) nalStart = i + nalOffset;
         // nal header is 1 length for h264, and 2 for h265
        i += nalOffset + (dataType === "h264" ? 1 : 2);
    }
    return bytes.subarray(0, 0);
};
var $4142ff7a9dca5438$export$d9a366c79c59ccda = function findH264Nal(bytes, type, nalLimit) {
    return $4142ff7a9dca5438$export$17fd5d00213a3829(bytes, "h264", type, nalLimit);
};
var $4142ff7a9dca5438$export$4b55988b6a40a3f0 = function findH265Nal(bytes, type, nalLimit) {
    return $4142ff7a9dca5438$export$17fd5d00213a3829(bytes, "h265", type, nalLimit);
};


var $4595dd0b95b78e8a$var$CONSTANTS = {
    // "webm" string literal in hex
    "webm": (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x77,
        0x65,
        0x62,
        0x6d
    ]),
    // "matroska" string literal in hex
    "matroska": (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x6d,
        0x61,
        0x74,
        0x72,
        0x6f,
        0x73,
        0x6b,
        0x61
    ]),
    // "fLaC" string literal in hex
    "flac": (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x66,
        0x4c,
        0x61,
        0x43
    ]),
    // "OggS" string literal in hex
    "ogg": (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x4f,
        0x67,
        0x67,
        0x53
    ]),
    // ac-3 sync byte, also works for ec-3 as that is simply a codec
    // of ac-3
    "ac3": (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x0b,
        0x77
    ]),
    // "RIFF" string literal in hex used for wav and avi
    "riff": (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x52,
        0x49,
        0x46,
        0x46
    ]),
    // "AVI" string literal in hex
    "avi": (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x41,
        0x56,
        0x49
    ]),
    // "WAVE" string literal in hex
    "wav": (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x57,
        0x41,
        0x56,
        0x45
    ]),
    // "ftyp3g" string literal in hex
    "3gp": (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x66,
        0x74,
        0x79,
        0x70,
        0x33,
        0x67
    ]),
    // "ftyp" string literal in hex
    "mp4": (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x66,
        0x74,
        0x79,
        0x70
    ]),
    // "styp" string literal in hex
    "fmp4": (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x73,
        0x74,
        0x79,
        0x70
    ]),
    // "ftypqt" string literal in hex
    "mov": (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x66,
        0x74,
        0x79,
        0x70,
        0x71,
        0x74
    ]),
    // moov string literal in hex
    "moov": (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x6D,
        0x6F,
        0x6F,
        0x76
    ]),
    // moof string literal in hex
    "moof": (0, $d7439dbe74fc424d$export$63c3de442720649)([
        0x6D,
        0x6F,
        0x6F,
        0x66
    ])
};
var $4595dd0b95b78e8a$var$_isLikely = {
    aac: function aac(bytes) {
        var offset = (0, $b18510d8baadc4f7$export$56b6cacf09ec1126)(bytes);
        return (0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, [
            0xFF,
            0x10
        ], {
            offset: offset,
            mask: [
                0xFF,
                0x16
            ]
        });
    },
    mp3: function mp3(bytes) {
        var offset = (0, $b18510d8baadc4f7$export$56b6cacf09ec1126)(bytes);
        return (0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, [
            0xFF,
            0x02
        ], {
            offset: offset,
            mask: [
                0xFF,
                0x06
            ]
        });
    },
    webm: function webm(bytes) {
        var docType = (0, $130272454aa7ae1f$export$826a5b7de63531e6)(bytes, [
            (0, $130272454aa7ae1f$export$3dc3c695a37e4653).EBML,
            (0, $130272454aa7ae1f$export$3dc3c695a37e4653).DocType
        ])[0]; // check if DocType EBML tag is webm
        return (0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(docType, $4595dd0b95b78e8a$var$CONSTANTS.webm);
    },
    mkv: function mkv(bytes) {
        var docType = (0, $130272454aa7ae1f$export$826a5b7de63531e6)(bytes, [
            (0, $130272454aa7ae1f$export$3dc3c695a37e4653).EBML,
            (0, $130272454aa7ae1f$export$3dc3c695a37e4653).DocType
        ])[0]; // check if DocType EBML tag is matroska
        return (0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(docType, $4595dd0b95b78e8a$var$CONSTANTS.matroska);
    },
    mp4: function mp4(bytes) {
        // if this file is another base media file format, it is not mp4
        if ($4595dd0b95b78e8a$var$_isLikely["3gp"](bytes) || $4595dd0b95b78e8a$var$_isLikely.mov(bytes)) return false;
         // if this file starts with a ftyp or styp box its mp4
        if ((0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, $4595dd0b95b78e8a$var$CONSTANTS.mp4, {
            offset: 4
        }) || (0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, $4595dd0b95b78e8a$var$CONSTANTS.fmp4, {
            offset: 4
        })) return true;
         // if this file starts with a moof/moov box its mp4
        if ((0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, $4595dd0b95b78e8a$var$CONSTANTS.moof, {
            offset: 4
        }) || (0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, $4595dd0b95b78e8a$var$CONSTANTS.moov, {
            offset: 4
        })) return true;
    },
    mov: function mov(bytes) {
        return (0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, $4595dd0b95b78e8a$var$CONSTANTS.mov, {
            offset: 4
        });
    },
    "3gp": function gp(bytes) {
        return (0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, $4595dd0b95b78e8a$var$CONSTANTS["3gp"], {
            offset: 4
        });
    },
    ac3: function ac3(bytes) {
        var offset = (0, $b18510d8baadc4f7$export$56b6cacf09ec1126)(bytes);
        return (0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, $4595dd0b95b78e8a$var$CONSTANTS.ac3, {
            offset: offset
        });
    },
    ts: function ts(bytes) {
        if (bytes.length < 189 && bytes.length >= 1) return bytes[0] === 0x47;
        var i = 0; // check the first 376 bytes for two matching sync bytes
        while(i + 188 < bytes.length && i < 188){
            if (bytes[i] === 0x47 && bytes[i + 188] === 0x47) return true;
            i += 1;
        }
        return false;
    },
    flac: function flac(bytes) {
        var offset = (0, $b18510d8baadc4f7$export$56b6cacf09ec1126)(bytes);
        return (0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, $4595dd0b95b78e8a$var$CONSTANTS.flac, {
            offset: offset
        });
    },
    ogg: function ogg(bytes) {
        return (0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, $4595dd0b95b78e8a$var$CONSTANTS.ogg);
    },
    avi: function avi(bytes) {
        return (0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, $4595dd0b95b78e8a$var$CONSTANTS.riff) && (0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, $4595dd0b95b78e8a$var$CONSTANTS.avi, {
            offset: 8
        });
    },
    wav: function wav(bytes) {
        return (0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, $4595dd0b95b78e8a$var$CONSTANTS.riff) && (0, $d7439dbe74fc424d$export$a20f7b76e5cfd223)(bytes, $4595dd0b95b78e8a$var$CONSTANTS.wav, {
            offset: 8
        });
    },
    "h264": function h264(bytes) {
        // find seq_parameter_set_rbsp
        return (0, $4142ff7a9dca5438$export$d9a366c79c59ccda)(bytes, 7, 3).length;
    },
    "h265": function h265(bytes) {
        // find video_parameter_set_rbsp or seq_parameter_set_rbsp
        return (0, $4142ff7a9dca5438$export$4b55988b6a40a3f0)(bytes, [
            32,
            33
        ], 3).length;
    }
}; // get all the isLikely functions
// but make sure 'ts' is above h264 and h265
// but below everything else as it is the least specific
var $4595dd0b95b78e8a$var$isLikelyTypes = Object.keys($4595dd0b95b78e8a$var$_isLikely) // remove ts, h264, h265
.filter(function(t) {
    return t !== "ts" && t !== "h264" && t !== "h265";
}) // add it back to the bottom
.concat([
    "ts",
    "h264",
    "h265"
]); // make sure we are dealing with uint8 data.
$4595dd0b95b78e8a$var$isLikelyTypes.forEach(function(type) {
    var isLikelyFn = $4595dd0b95b78e8a$var$_isLikely[type];
    $4595dd0b95b78e8a$var$_isLikely[type] = function(bytes) {
        return isLikelyFn((0, $d7439dbe74fc424d$export$63c3de442720649)(bytes));
    };
}); // export after wrapping
var $4595dd0b95b78e8a$export$4d8d080fd201ee1b = $4595dd0b95b78e8a$var$_isLikely; // A useful list of file signatures can be found here
var $4595dd0b95b78e8a$export$894319e75ed840c3 = function detectContainerForBytes(bytes) {
    bytes = (0, $d7439dbe74fc424d$export$63c3de442720649)(bytes);
    for(var i = 0; i < $4595dd0b95b78e8a$var$isLikelyTypes.length; i++){
        var type = $4595dd0b95b78e8a$var$isLikelyTypes[i];
        if ($4595dd0b95b78e8a$export$4d8d080fd201ee1b[type](bytes)) return type;
    }
    return "";
}; // fmp4 is not a container
var $4595dd0b95b78e8a$export$7d0b693bd7ec7827 = function isLikelyFmp4MediaSegment(bytes) {
    return (0, $cbdc9f8bae1ab145$export$d81d43b46e2012ef)(bytes, [
        "moof"
    ]).length > 0;
};


var $50c25c64d7e54de5$exports = {};
/**
 * mux.js
 *
 * Copyright (c) Brightcove
 * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
 */ var $50c25c64d7e54de5$var$ONE_SECOND_IN_TS = 90000, $50c25c64d7e54de5$var$secondsToVideoTs, $50c25c64d7e54de5$var$secondsToAudioTs, $50c25c64d7e54de5$var$videoTsToSeconds, $50c25c64d7e54de5$var$audioTsToSeconds, $50c25c64d7e54de5$var$audioTsToVideoTs, $50c25c64d7e54de5$var$videoTsToAudioTs, $50c25c64d7e54de5$var$metadataTsToSeconds;
$50c25c64d7e54de5$var$secondsToVideoTs = function(seconds) {
    return seconds * $50c25c64d7e54de5$var$ONE_SECOND_IN_TS;
};
$50c25c64d7e54de5$var$secondsToAudioTs = function(seconds, sampleRate) {
    return seconds * sampleRate;
};
$50c25c64d7e54de5$var$videoTsToSeconds = function(timestamp) {
    return timestamp / $50c25c64d7e54de5$var$ONE_SECOND_IN_TS;
};
$50c25c64d7e54de5$var$audioTsToSeconds = function(timestamp, sampleRate) {
    return timestamp / sampleRate;
};
$50c25c64d7e54de5$var$audioTsToVideoTs = function(timestamp, sampleRate) {
    return $50c25c64d7e54de5$var$secondsToVideoTs($50c25c64d7e54de5$var$audioTsToSeconds(timestamp, sampleRate));
};
$50c25c64d7e54de5$var$videoTsToAudioTs = function(timestamp, sampleRate) {
    return $50c25c64d7e54de5$var$secondsToAudioTs($50c25c64d7e54de5$var$videoTsToSeconds(timestamp), sampleRate);
};
/**
 * Adjust ID3 tag or caption timing information by the timeline pts values
 * (if keepOriginalTimestamps is false) and convert to seconds
 */ $50c25c64d7e54de5$var$metadataTsToSeconds = function(timestamp, timelineStartPts, keepOriginalTimestamps) {
    return $50c25c64d7e54de5$var$videoTsToSeconds(keepOriginalTimestamps ? timestamp : timestamp - timelineStartPts);
};
$50c25c64d7e54de5$exports = {
    ONE_SECOND_IN_TS: $50c25c64d7e54de5$var$ONE_SECOND_IN_TS,
    secondsToVideoTs: $50c25c64d7e54de5$var$secondsToVideoTs,
    secondsToAudioTs: $50c25c64d7e54de5$var$secondsToAudioTs,
    videoTsToSeconds: $50c25c64d7e54de5$var$videoTsToSeconds,
    audioTsToSeconds: $50c25c64d7e54de5$var$audioTsToSeconds,
    audioTsToVideoTs: $50c25c64d7e54de5$var$audioTsToVideoTs,
    videoTsToAudioTs: $50c25c64d7e54de5$var$videoTsToAudioTs,
    metadataTsToSeconds: $50c25c64d7e54de5$var$metadataTsToSeconds
};


var $e88cd91ee18355c1$var$version$6 = "8.9.0";
/**
 * An Object that contains lifecycle hooks as keys which point to an array
 * of functions that are run when a lifecycle is triggered
 *
 * @private
 */ const $e88cd91ee18355c1$var$hooks_ = {};
/**
 * Get a list of hooks for a specific lifecycle
 *
 * @param  {string} type
 *         the lifecycle to get hooks from
 *
 * @param  {Function|Function[]} [fn]
 *         Optionally add a hook (or hooks) to the lifecycle that your are getting.
 *
 * @return {Array}
 *         an array of hooks, or an empty array if there are none.
 */ const $e88cd91ee18355c1$var$hooks = function(type, fn) {
    $e88cd91ee18355c1$var$hooks_[type] = $e88cd91ee18355c1$var$hooks_[type] || [];
    if (fn) $e88cd91ee18355c1$var$hooks_[type] = $e88cd91ee18355c1$var$hooks_[type].concat(fn);
    return $e88cd91ee18355c1$var$hooks_[type];
};
/**
 * Add a function hook to a specific videojs lifecycle.
 *
 * @param {string} type
 *        the lifecycle to hook the function to.
 *
 * @param {Function|Function[]}
 *        The function or array of functions to attach.
 */ const $e88cd91ee18355c1$var$hook = function(type, fn) {
    $e88cd91ee18355c1$var$hooks(type, fn);
};
/**
 * Remove a hook from a specific videojs lifecycle.
 *
 * @param  {string} type
 *         the lifecycle that the function hooked to
 *
 * @param  {Function} fn
 *         The hooked function to remove
 *
 * @return {boolean}
 *         The function that was removed or undef
 */ const $e88cd91ee18355c1$var$removeHook = function(type, fn) {
    const index = $e88cd91ee18355c1$var$hooks(type).indexOf(fn);
    if (index <= -1) return false;
    $e88cd91ee18355c1$var$hooks_[type] = $e88cd91ee18355c1$var$hooks_[type].slice();
    $e88cd91ee18355c1$var$hooks_[type].splice(index, 1);
    return true;
};
/**
 * Add a function hook that will only run once to a specific videojs lifecycle.
 *
 * @param {string} type
 *        the lifecycle to hook the function to.
 *
 * @param {Function|Function[]}
 *        The function or array of functions to attach.
 */ const $e88cd91ee18355c1$var$hookOnce = function(type, fn) {
    $e88cd91ee18355c1$var$hooks(type, [].concat(fn).map((original)=>{
        const wrapper = (...args)=>{
            $e88cd91ee18355c1$var$removeHook(type, wrapper);
            return original(...args);
        };
        return wrapper;
    }));
};
/**
 * @file fullscreen-api.js
 * @module fullscreen-api
 */ /**
 * Store the browser-specific methods for the fullscreen API.
 *
 * @type {Object}
 * @see [Specification]{@link https://fullscreen.spec.whatwg.org}
 * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}
 */ const $e88cd91ee18355c1$var$FullscreenApi = {
    prefixed: true
};
// browser API methods
const $e88cd91ee18355c1$var$apiMap = [
    [
        "requestFullscreen",
        "exitFullscreen",
        "fullscreenElement",
        "fullscreenEnabled",
        "fullscreenchange",
        "fullscreenerror",
        "fullscreen"
    ],
    // WebKit
    [
        "webkitRequestFullscreen",
        "webkitExitFullscreen",
        "webkitFullscreenElement",
        "webkitFullscreenEnabled",
        "webkitfullscreenchange",
        "webkitfullscreenerror",
        "-webkit-full-screen"
    ]
];
const $e88cd91ee18355c1$var$specApi = $e88cd91ee18355c1$var$apiMap[0];
let $e88cd91ee18355c1$var$browserApi;
// determine the supported set of functions
for(let i = 0; i < $e88cd91ee18355c1$var$apiMap.length; i++)// check for exitFullscreen function
if ($e88cd91ee18355c1$var$apiMap[i][1] in (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X)))) {
    $e88cd91ee18355c1$var$browserApi = $e88cd91ee18355c1$var$apiMap[i];
    break;
}
// map the browser API names to the spec API names
if ($e88cd91ee18355c1$var$browserApi) {
    for(let i = 0; i < $e88cd91ee18355c1$var$browserApi.length; i++)$e88cd91ee18355c1$var$FullscreenApi[$e88cd91ee18355c1$var$specApi[i]] = $e88cd91ee18355c1$var$browserApi[i];
    $e88cd91ee18355c1$var$FullscreenApi.prefixed = $e88cd91ee18355c1$var$browserApi[0] !== $e88cd91ee18355c1$var$specApi[0];
}
/**
 * @file create-logger.js
 * @module create-logger
 */ // This is the private tracking variable for the logging history.
let $e88cd91ee18355c1$var$history = [];
/**
 * Log messages to the console and history based on the type of message
 *
 * @private
 * @param  {string} name
 *         The name of the console method to use.
 *
 * @param  {Object} log
 *         The arguments to be passed to the matching console method.
 *
 * @param {string} [styles]
 *        styles for name
 */ const $e88cd91ee18355c1$var$LogByTypeFactory = (name, log, styles)=>(type, level, args)=>{
        const lvl = log.levels[level];
        const lvlRegExp = new RegExp(`^(${lvl})$`);
        let resultName = name;
        if (type !== "log") // Add the type to the front of the message when it's not "log".
        args.unshift(type.toUpperCase() + ":");
        if (styles) {
            resultName = `%c${name}`;
            args.unshift(styles);
        }
        // Add console prefix after adding to history.
        args.unshift(resultName + ":");
        // Add a clone of the args at this point to history.
        if ($e88cd91ee18355c1$var$history) {
            $e88cd91ee18355c1$var$history.push([].concat(args));
            // only store 1000 history entries
            const splice = $e88cd91ee18355c1$var$history.length - 1000;
            $e88cd91ee18355c1$var$history.splice(0, splice > 0 ? splice : 0);
        }
        // If there's no console then don't try to output messages, but they will
        // still be stored in history.
        if (!(0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).console) return;
        // Was setting these once outside of this function, but containing them
        // in the function makes it easier to test cases where console doesn't exist
        // when the module is executed.
        let fn = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).console[type];
        if (!fn && type === "debug") // Certain browsers don't have support for console.debug. For those, we
        // should default to the closest comparable log.
        fn = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).console.info || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).console.log;
        // Bail out if there's no console or if this type is not allowed by the
        // current logging level.
        if (!fn || !lvl || !lvlRegExp.test(type)) return;
        fn[Array.isArray(args) ? "apply" : "call"]((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).console, args);
    };
function $e88cd91ee18355c1$var$createLogger$1(name, delimiter = ":", styles = "") {
    // This is the private tracking variable for logging level.
    let level = "info";
    // the curried logByType bound to the specific log and history
    let logByType;
    /**
   * Logs plain debug messages. Similar to `console.log`.
   *
   * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)
   * of our JSDoc template, we cannot properly document this as both a function
   * and a namespace, so its function signature is documented here.
   *
   * #### Arguments
   * ##### *args
   * *[]
   *
   * Any combination of values that could be passed to `console.log()`.
   *
   * #### Return Value
   *
   * `undefined`
   *
   * @namespace
   * @param    {...*} args
   *           One or more messages or objects that should be logged.
   */ const log = function(...args) {
        logByType("log", level, args);
    };
    // This is the logByType helper that the logging methods below use
    logByType = $e88cd91ee18355c1$var$LogByTypeFactory(name, log, styles);
    /**
   * Create a new subLogger which chains the old name to the new name.
   *
   * For example, doing `videojs.log.createLogger('player')` and then using that logger will log the following:
   * ```js
   *  mylogger('foo');
   *  // > VIDEOJS: player: foo
   * ```
   *
   * @param {string} subName
   *        The name to add call the new logger
   * @param {string} [subDelimiter]
   *        Optional delimiter
   * @param {string} [subStyles]
   *        Optional styles
   * @return {Object}
   */ log.createLogger = (subName, subDelimiter, subStyles)=>{
        const resultDelimiter = subDelimiter !== undefined ? subDelimiter : delimiter;
        const resultStyles = subStyles !== undefined ? subStyles : styles;
        const resultName = `${name} ${resultDelimiter} ${subName}`;
        return $e88cd91ee18355c1$var$createLogger$1(resultName, resultDelimiter, resultStyles);
    };
    /**
   * Create a new logger.
   *
   * @param {string} newName
   *        The name for the new logger
   * @param {string} [newDelimiter]
   *        Optional delimiter
   * @param {string} [newStyles]
   *        Optional styles
   * @return {Object}
   */ log.createNewLogger = (newName, newDelimiter, newStyles)=>{
        return $e88cd91ee18355c1$var$createLogger$1(newName, newDelimiter, newStyles);
    };
    /**
   * Enumeration of available logging levels, where the keys are the level names
   * and the values are `|`-separated strings containing logging methods allowed
   * in that logging level. These strings are used to create a regular expression
   * matching the function name being called.
   *
   * Levels provided by Video.js are:
   *
   * - `off`: Matches no calls. Any value that can be cast to `false` will have
   *   this effect. The most restrictive.
   * - `all`: Matches only Video.js-provided functions (`debug`, `log`,
   *   `log.warn`, and `log.error`).
   * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.
   * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.
   * - `warn`: Matches `log.warn` and `log.error` calls.
   * - `error`: Matches only `log.error` calls.
   *
   * @type {Object}
   */ log.levels = {
        all: "debug|log|warn|error",
        off: "",
        debug: "debug|log|warn|error",
        info: "log|warn|error",
        warn: "warn|error",
        error: "error",
        DEFAULT: level
    };
    /**
   * Get or set the current logging level.
   *
   * If a string matching a key from {@link module:log.levels} is provided, acts
   * as a setter.
   *
   * @param  {'all'|'debug'|'info'|'warn'|'error'|'off'} [lvl]
   *         Pass a valid level to set a new logging level.
   *
   * @return {string}
   *         The current logging level.
   */ log.level = (lvl)=>{
        if (typeof lvl === "string") {
            if (!log.levels.hasOwnProperty(lvl)) throw new Error(`"${lvl}" in not a valid log level`);
            level = lvl;
        }
        return level;
    };
    /**
   * Returns an array containing everything that has been logged to the history.
   *
   * This array is a shallow clone of the internal history record. However, its
   * contents are _not_ cloned; so, mutating objects inside this array will
   * mutate them in history.
   *
   * @return {Array}
   */ log.history = ()=>$e88cd91ee18355c1$var$history ? [].concat($e88cd91ee18355c1$var$history) : [];
    /**
   * Allows you to filter the history by the given logger name
   *
   * @param {string} fname
   *        The name to filter by
   *
   * @return {Array}
   *         The filtered list to return
   */ log.history.filter = (fname)=>{
        return ($e88cd91ee18355c1$var$history || []).filter((historyItem)=>{
            // if the first item in each historyItem includes `fname`, then it's a match
            return new RegExp(`.*${fname}.*`).test(historyItem[0]);
        });
    };
    /**
   * Clears the internal history tracking, but does not prevent further history
   * tracking.
   */ log.history.clear = ()=>{
        if ($e88cd91ee18355c1$var$history) $e88cd91ee18355c1$var$history.length = 0;
    };
    /**
   * Disable history tracking if it is currently enabled.
   */ log.history.disable = ()=>{
        if ($e88cd91ee18355c1$var$history !== null) {
            $e88cd91ee18355c1$var$history.length = 0;
            $e88cd91ee18355c1$var$history = null;
        }
    };
    /**
   * Enable history tracking if it is currently disabled.
   */ log.history.enable = ()=>{
        if ($e88cd91ee18355c1$var$history === null) $e88cd91ee18355c1$var$history = [];
    };
    /**
   * Logs error messages. Similar to `console.error`.
   *
   * @param {...*} args
   *        One or more messages or objects that should be logged as an error
   */ log.error = (...args)=>logByType("error", level, args);
    /**
   * Logs warning messages. Similar to `console.warn`.
   *
   * @param {...*} args
   *        One or more messages or objects that should be logged as a warning.
   */ log.warn = (...args)=>logByType("warn", level, args);
    /**
   * Logs debug messages. Similar to `console.debug`, but may also act as a comparable
   * log if `console.debug` is not available
   *
   * @param {...*} args
   *        One or more messages or objects that should be logged as debug.
   */ log.debug = (...args)=>logByType("debug", level, args);
    return log;
}
/**
 * @file log.js
 * @module log
 */ const $e88cd91ee18355c1$var$log$1 = $e88cd91ee18355c1$var$createLogger$1("VIDEOJS");
const $e88cd91ee18355c1$var$createLogger = $e88cd91ee18355c1$var$log$1.createLogger;
/**
 * @file obj.js
 * @module obj
 */ /**
 * @callback obj:EachCallback
 *
 * @param {*} value
 *        The current key for the object that is being iterated over.
 *
 * @param {string} key
 *        The current key-value for object that is being iterated over
 */ /**
 * @callback obj:ReduceCallback
 *
 * @param {*} accum
 *        The value that is accumulating over the reduce loop.
 *
 * @param {*} value
 *        The current key for the object that is being iterated over.
 *
 * @param {string} key
 *        The current key-value for object that is being iterated over
 *
 * @return {*}
 *         The new accumulated value.
 */ const $e88cd91ee18355c1$var$toString = Object.prototype.toString;
/**
 * Get the keys of an Object
 *
 * @param {Object}
 *        The Object to get the keys from
 *
 * @return {string[]}
 *         An array of the keys from the object. Returns an empty array if the
 *         object passed in was invalid or had no keys.
 *
 * @private
 */ const $e88cd91ee18355c1$var$keys = function(object) {
    return $e88cd91ee18355c1$var$isObject(object) ? Object.keys(object) : [];
};
/**
 * Array-like iteration for objects.
 *
 * @param {Object} object
 *        The object to iterate over
 *
 * @param {obj:EachCallback} fn
 *        The callback function which is called for each key in the object.
 */ function $e88cd91ee18355c1$var$each(object, fn) {
    $e88cd91ee18355c1$var$keys(object).forEach((key)=>fn(object[key], key));
}
/**
 * Array-like reduce for objects.
 *
 * @param {Object} object
 *        The Object that you want to reduce.
 *
 * @param {Function} fn
 *         A callback function which is called for each key in the object. It
 *         receives the accumulated value and the per-iteration value and key
 *         as arguments.
 *
 * @param {*} [initial = 0]
 *        Starting value
 *
 * @return {*}
 *         The final accumulated value.
 */ function $e88cd91ee18355c1$var$reduce(object, fn, initial = 0) {
    return $e88cd91ee18355c1$var$keys(object).reduce((accum, key)=>fn(accum, object[key], key), initial);
}
/**
 * Returns whether a value is an object of any kind - including DOM nodes,
 * arrays, regular expressions, etc. Not functions, though.
 *
 * This avoids the gotcha where using `typeof` on a `null` value
 * results in `'object'`.
 *
 * @param  {Object} value
 * @return {boolean}
 */ function $e88cd91ee18355c1$var$isObject(value) {
    return !!value && typeof value === "object";
}
/**
 * Returns whether an object appears to be a "plain" object - that is, a
 * direct instance of `Object`.
 *
 * @param  {Object} value
 * @return {boolean}
 */ function $e88cd91ee18355c1$var$isPlain(value) {
    return $e88cd91ee18355c1$var$isObject(value) && $e88cd91ee18355c1$var$toString.call(value) === "[object Object]" && value.constructor === Object;
}
/**
 * Merge two objects recursively.
 *
 * Performs a deep merge like
 * {@link https://lodash.com/docs/4.17.10#merge|lodash.merge}, but only merges
 * plain objects (not arrays, elements, or anything else).
 *
 * Non-plain object values will be copied directly from the right-most
 * argument.
 *
 * @param   {Object[]} sources
 *          One or more objects to merge into a new object.
 *
 * @return {Object}
 *          A new object that is the merged result of all sources.
 */ function $e88cd91ee18355c1$var$merge$1(...sources) {
    const result = {};
    sources.forEach((source)=>{
        if (!source) return;
        $e88cd91ee18355c1$var$each(source, (value, key)=>{
            if (!$e88cd91ee18355c1$var$isPlain(value)) {
                result[key] = value;
                return;
            }
            if (!$e88cd91ee18355c1$var$isPlain(result[key])) result[key] = {};
            result[key] = $e88cd91ee18355c1$var$merge$1(result[key], value);
        });
    });
    return result;
}
/**
 * Returns an array of values for a given object
 *
 * @param  {Object} source - target object
 * @return {Array<unknown>} - object values
 */ function $e88cd91ee18355c1$var$values(source = {}) {
    const result = [];
    for(const key in source)if (source.hasOwnProperty(key)) {
        const value = source[key];
        result.push(value);
    }
    return result;
}
/**
 * Object.defineProperty but "lazy", which means that the value is only set after
 * it is retrieved the first time, rather than being set right away.
 *
 * @param {Object} obj the object to set the property on
 * @param {string} key the key for the property to set
 * @param {Function} getValue the function used to get the value when it is needed.
 * @param {boolean} setter whether a setter should be allowed or not
 */ function $e88cd91ee18355c1$var$defineLazyProperty(obj, key, getValue, setter = true) {
    const set = (value)=>Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            writable: true
        });
    const options = {
        configurable: true,
        enumerable: true,
        get () {
            const value = getValue();
            set(value);
            return value;
        }
    };
    if (setter) options.set = set;
    return Object.defineProperty(obj, key, options);
}
var $e88cd91ee18355c1$var$Obj = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    each: $e88cd91ee18355c1$var$each,
    reduce: $e88cd91ee18355c1$var$reduce,
    isObject: $e88cd91ee18355c1$var$isObject,
    isPlain: $e88cd91ee18355c1$var$isPlain,
    merge: $e88cd91ee18355c1$var$merge$1,
    values: $e88cd91ee18355c1$var$values,
    defineLazyProperty: $e88cd91ee18355c1$var$defineLazyProperty
});
/**
 * @file browser.js
 * @module browser
 */ /**
 * Whether or not this device is an iPod.
 *
 * @static
 * @type {Boolean}
 */ let $e88cd91ee18355c1$var$IS_IPOD = false;
/**
 * The detected iOS version - or `null`.
 *
 * @static
 * @type {string|null}
 */ let $e88cd91ee18355c1$var$IOS_VERSION = null;
/**
 * Whether or not this is an Android device.
 *
 * @static
 * @type {Boolean}
 */ let $e88cd91ee18355c1$var$IS_ANDROID = false;
/**
 * The detected Android version - or `null` if not Android or indeterminable.
 *
 * @static
 * @type {number|string|null}
 */ let $e88cd91ee18355c1$var$ANDROID_VERSION;
/**
 * Whether or not this is Mozilla Firefox.
 *
 * @static
 * @type {Boolean}
 */ let $e88cd91ee18355c1$var$IS_FIREFOX = false;
/**
 * Whether or not this is Microsoft Edge.
 *
 * @static
 * @type {Boolean}
 */ let $e88cd91ee18355c1$var$IS_EDGE = false;
/**
 * Whether or not this is any Chromium Browser
 *
 * @static
 * @type {Boolean}
 */ let $e88cd91ee18355c1$var$IS_CHROMIUM = false;
/**
 * Whether or not this is any Chromium browser that is not Edge.
 *
 * This will also be `true` for Chrome on iOS, which will have different support
 * as it is actually Safari under the hood.
 *
 * Deprecated, as the behaviour to not match Edge was to prevent Legacy Edge's UA matching.
 * IS_CHROMIUM should be used instead.
 * "Chromium but not Edge" could be explicitly tested with IS_CHROMIUM && !IS_EDGE
 *
 * @static
 * @deprecated
 * @type {Boolean}
 */ let $e88cd91ee18355c1$var$IS_CHROME = false;
/**
 * The detected Chromium version - or `null`.
 *
 * @static
 * @type {number|null}
 */ let $e88cd91ee18355c1$var$CHROMIUM_VERSION = null;
/**
 * The detected Google Chrome version - or `null`.
 * This has always been the _Chromium_ version, i.e. would return on Chromium Edge.
 * Deprecated, use CHROMIUM_VERSION instead.
 *
 * @static
 * @deprecated
 * @type {number|null}
 */ let $e88cd91ee18355c1$var$CHROME_VERSION = null;
/**
 * The detected Internet Explorer version - or `null`.
 *
 * @static
 * @deprecated
 * @type {number|null}
 */ let $e88cd91ee18355c1$var$IE_VERSION = null;
/**
 * Whether or not this is desktop Safari.
 *
 * @static
 * @type {Boolean}
 */ let $e88cd91ee18355c1$var$IS_SAFARI = false;
/**
 * Whether or not this is a Windows machine.
 *
 * @static
 * @type {Boolean}
 */ let $e88cd91ee18355c1$var$IS_WINDOWS = false;
/**
 * Whether or not this device is an iPad.
 *
 * @static
 * @type {Boolean}
 */ let $e88cd91ee18355c1$var$IS_IPAD = false;
/**
 * Whether or not this device is an iPhone.
 *
 * @static
 * @type {Boolean}
 */ // The Facebook app's UIWebView identifies as both an iPhone and iPad, so
// to identify iPhones, we need to exclude iPads.
// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/
let $e88cd91ee18355c1$var$IS_IPHONE = false;
/**
 * Whether or not this device is touch-enabled.
 *
 * @static
 * @const
 * @type {Boolean}
 */ const $e88cd91ee18355c1$var$TOUCH_ENABLED = Boolean($e88cd91ee18355c1$var$isReal() && ("ontouchstart" in (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))) || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).navigator.maxTouchPoints || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).DocumentTouch && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).document instanceof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).DocumentTouch));
const $e88cd91ee18355c1$var$UAD = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).navigator && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).navigator.userAgentData;
if ($e88cd91ee18355c1$var$UAD && $e88cd91ee18355c1$var$UAD.platform && $e88cd91ee18355c1$var$UAD.brands) {
    // If userAgentData is present, use it instead of userAgent to avoid warnings
    // Currently only implemented on Chromium
    // userAgentData does not expose Android version, so ANDROID_VERSION remains `null`
    $e88cd91ee18355c1$var$IS_ANDROID = $e88cd91ee18355c1$var$UAD.platform === "Android";
    $e88cd91ee18355c1$var$IS_EDGE = Boolean($e88cd91ee18355c1$var$UAD.brands.find((b)=>b.brand === "Microsoft Edge"));
    $e88cd91ee18355c1$var$IS_CHROMIUM = Boolean($e88cd91ee18355c1$var$UAD.brands.find((b)=>b.brand === "Chromium"));
    $e88cd91ee18355c1$var$IS_CHROME = !$e88cd91ee18355c1$var$IS_EDGE && $e88cd91ee18355c1$var$IS_CHROMIUM;
    $e88cd91ee18355c1$var$CHROMIUM_VERSION = $e88cd91ee18355c1$var$CHROME_VERSION = ($e88cd91ee18355c1$var$UAD.brands.find((b)=>b.brand === "Chromium") || {}).version || null;
    $e88cd91ee18355c1$var$IS_WINDOWS = $e88cd91ee18355c1$var$UAD.platform === "Windows";
}
// If the browser is not Chromium, either userAgentData is not present which could be an old Chromium browser,
//  or it's a browser that has added userAgentData since that we don't have tests for yet. In either case,
// the checks need to be made agiainst the regular userAgent string.
if (!$e88cd91ee18355c1$var$IS_CHROMIUM) {
    const USER_AGENT = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).navigator && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).navigator.userAgent || "";
    $e88cd91ee18355c1$var$IS_IPOD = /iPod/i.test(USER_AGENT);
    $e88cd91ee18355c1$var$IOS_VERSION = function() {
        const match = USER_AGENT.match(/OS (\d+)_/i);
        if (match && match[1]) return match[1];
        return null;
    }();
    $e88cd91ee18355c1$var$IS_ANDROID = /Android/i.test(USER_AGENT);
    $e88cd91ee18355c1$var$ANDROID_VERSION = function() {
        // This matches Android Major.Minor.Patch versions
        // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
        const match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);
        if (!match) return null;
        const major = match[1] && parseFloat(match[1]);
        const minor = match[2] && parseFloat(match[2]);
        if (major && minor) return parseFloat(match[1] + "." + match[2]);
        else if (major) return major;
        return null;
    }();
    $e88cd91ee18355c1$var$IS_FIREFOX = /Firefox/i.test(USER_AGENT);
    $e88cd91ee18355c1$var$IS_EDGE = /Edg/i.test(USER_AGENT);
    $e88cd91ee18355c1$var$IS_CHROMIUM = /Chrome/i.test(USER_AGENT) || /CriOS/i.test(USER_AGENT);
    $e88cd91ee18355c1$var$IS_CHROME = !$e88cd91ee18355c1$var$IS_EDGE && $e88cd91ee18355c1$var$IS_CHROMIUM;
    $e88cd91ee18355c1$var$CHROMIUM_VERSION = $e88cd91ee18355c1$var$CHROME_VERSION = function() {
        const match = USER_AGENT.match(/(Chrome|CriOS)\/(\d+)/);
        if (match && match[2]) return parseFloat(match[2]);
        return null;
    }();
    $e88cd91ee18355c1$var$IE_VERSION = function() {
        const result = /MSIE\s(\d+)\.\d/.exec(USER_AGENT);
        let version = result && parseFloat(result[1]);
        if (!version && /Trident\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) // IE 11 has a different user agent string than other IE versions
        version = 11.0;
        return version;
    }();
    $e88cd91ee18355c1$var$IS_SAFARI = /Safari/i.test(USER_AGENT) && !$e88cd91ee18355c1$var$IS_CHROME && !$e88cd91ee18355c1$var$IS_ANDROID && !$e88cd91ee18355c1$var$IS_EDGE;
    $e88cd91ee18355c1$var$IS_WINDOWS = /Windows/i.test(USER_AGENT);
    $e88cd91ee18355c1$var$IS_IPAD = /iPad/i.test(USER_AGENT) || $e88cd91ee18355c1$var$IS_SAFARI && $e88cd91ee18355c1$var$TOUCH_ENABLED && !/iPhone/i.test(USER_AGENT);
    $e88cd91ee18355c1$var$IS_IPHONE = /iPhone/i.test(USER_AGENT) && !$e88cd91ee18355c1$var$IS_IPAD;
}
/**
 * Whether or not this is an iOS device.
 *
 * @static
 * @const
 * @type {Boolean}
 */ const $e88cd91ee18355c1$var$IS_IOS = $e88cd91ee18355c1$var$IS_IPHONE || $e88cd91ee18355c1$var$IS_IPAD || $e88cd91ee18355c1$var$IS_IPOD;
/**
 * Whether or not this is any flavor of Safari - including iOS.
 *
 * @static
 * @const
 * @type {Boolean}
 */ const $e88cd91ee18355c1$var$IS_ANY_SAFARI = ($e88cd91ee18355c1$var$IS_SAFARI || $e88cd91ee18355c1$var$IS_IOS) && !$e88cd91ee18355c1$var$IS_CHROME;
var $e88cd91ee18355c1$var$browser = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    get IS_IPOD () {
        return $e88cd91ee18355c1$var$IS_IPOD;
    },
    get IOS_VERSION () {
        return $e88cd91ee18355c1$var$IOS_VERSION;
    },
    get IS_ANDROID () {
        return $e88cd91ee18355c1$var$IS_ANDROID;
    },
    get ANDROID_VERSION () {
        return $e88cd91ee18355c1$var$ANDROID_VERSION;
    },
    get IS_FIREFOX () {
        return $e88cd91ee18355c1$var$IS_FIREFOX;
    },
    get IS_EDGE () {
        return $e88cd91ee18355c1$var$IS_EDGE;
    },
    get IS_CHROMIUM () {
        return $e88cd91ee18355c1$var$IS_CHROMIUM;
    },
    get IS_CHROME () {
        return $e88cd91ee18355c1$var$IS_CHROME;
    },
    get CHROMIUM_VERSION () {
        return $e88cd91ee18355c1$var$CHROMIUM_VERSION;
    },
    get CHROME_VERSION () {
        return $e88cd91ee18355c1$var$CHROME_VERSION;
    },
    get IE_VERSION () {
        return $e88cd91ee18355c1$var$IE_VERSION;
    },
    get IS_SAFARI () {
        return $e88cd91ee18355c1$var$IS_SAFARI;
    },
    get IS_WINDOWS () {
        return $e88cd91ee18355c1$var$IS_WINDOWS;
    },
    get IS_IPAD () {
        return $e88cd91ee18355c1$var$IS_IPAD;
    },
    get IS_IPHONE () {
        return $e88cd91ee18355c1$var$IS_IPHONE;
    },
    TOUCH_ENABLED: $e88cd91ee18355c1$var$TOUCH_ENABLED,
    IS_IOS: $e88cd91ee18355c1$var$IS_IOS,
    IS_ANY_SAFARI: $e88cd91ee18355c1$var$IS_ANY_SAFARI
});
/**
 * @file dom.js
 * @module dom
 */ /**
 * Detect if a value is a string with any non-whitespace characters.
 *
 * @private
 * @param  {string} str
 *         The string to check
 *
 * @return {boolean}
 *         Will be `true` if the string is non-blank, `false` otherwise.
 *
 */ function $e88cd91ee18355c1$var$isNonBlankString(str) {
    // we use str.trim as it will trim any whitespace characters
    // from the front or back of non-whitespace characters. aka
    // Any string that contains non-whitespace characters will
    // still contain them after `trim` but whitespace only strings
    // will have a length of 0, failing this check.
    return typeof str === "string" && Boolean(str.trim());
}
/**
 * Throws an error if the passed string has whitespace. This is used by
 * class methods to be relatively consistent with the classList API.
 *
 * @private
 * @param  {string} str
 *         The string to check for whitespace.
 *
 * @throws {Error}
 *         Throws an error if there is whitespace in the string.
 */ function $e88cd91ee18355c1$var$throwIfWhitespace(str) {
    // str.indexOf instead of regex because str.indexOf is faster performance wise.
    if (str.indexOf(" ") >= 0) throw new Error("class has illegal whitespace characters");
}
/**
 * Whether the current DOM interface appears to be real (i.e. not simulated).
 *
 * @return {boolean}
 *         Will be `true` if the DOM appears to be real, `false` otherwise.
 */ function $e88cd91ee18355c1$var$isReal() {
    // Both document and window will never be undefined thanks to `global`.
    return (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))) === (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).document;
}
/**
 * Determines, via duck typing, whether or not a value is a DOM element.
 *
 * @param  {*} value
 *         The value to check.
 *
 * @return {boolean}
 *         Will be `true` if the value is a DOM element, `false` otherwise.
 */ function $e88cd91ee18355c1$var$isEl(value) {
    return $e88cd91ee18355c1$var$isObject(value) && value.nodeType === 1;
}
/**
 * Determines if the current DOM is embedded in an iframe.
 *
 * @return {boolean}
 *         Will be `true` if the DOM is embedded in an iframe, `false`
 *         otherwise.
 */ function $e88cd91ee18355c1$var$isInFrame() {
    // We need a try/catch here because Safari will throw errors when attempting
    // to get either `parent` or `self`
    try {
        return (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).parent !== (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).self;
    } catch (x) {
        return true;
    }
}
/**
 * Creates functions to query the DOM using a given method.
 *
 * @private
 * @param   {string} method
 *          The method to create the query with.
 *
 * @return  {Function}
 *          The query method
 */ function $e88cd91ee18355c1$var$createQuerier(method) {
    return function(selector, context) {
        if (!$e88cd91ee18355c1$var$isNonBlankString(selector)) return (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X)))[method](null);
        if ($e88cd91ee18355c1$var$isNonBlankString(context)) context = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).querySelector(context);
        const ctx = $e88cd91ee18355c1$var$isEl(context) ? context : (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X)));
        return ctx[method] && ctx[method](selector);
    };
}
/**
 * Creates an element and applies properties, attributes, and inserts content.
 *
 * @param  {string} [tagName='div']
 *         Name of tag to be created.
 *
 * @param  {Object} [properties={}]
 *         Element properties to be applied.
 *
 * @param  {Object} [attributes={}]
 *         Element attributes to be applied.
 *
 * @param {ContentDescriptor} [content]
 *        A content descriptor object.
 *
 * @return {Element}
 *         The element that was created.
 */ function $e88cd91ee18355c1$var$createEl(tagName = "div", properties = {}, attributes = {}, content) {
    const el = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement(tagName);
    Object.getOwnPropertyNames(properties).forEach(function(propName) {
        const val = properties[propName];
        // Handle textContent since it's not supported everywhere and we have a
        // method for it.
        if (propName === "textContent") $e88cd91ee18355c1$var$textContent(el, val);
        else if (el[propName] !== val || propName === "tabIndex") el[propName] = val;
    });
    Object.getOwnPropertyNames(attributes).forEach(function(attrName) {
        el.setAttribute(attrName, attributes[attrName]);
    });
    if (content) $e88cd91ee18355c1$var$appendContent(el, content);
    return el;
}
/**
 * Injects text into an element, replacing any existing contents entirely.
 *
 * @param  {HTMLElement} el
 *         The element to add text content into
 *
 * @param  {string} text
 *         The text content to add.
 *
 * @return {Element}
 *         The element with added text content.
 */ function $e88cd91ee18355c1$var$textContent(el, text) {
    if (typeof el.textContent === "undefined") el.innerText = text;
    else el.textContent = text;
    return el;
}
/**
 * Insert an element as the first child node of another
 *
 * @param {Element} child
 *        Element to insert
 *
 * @param {Element} parent
 *        Element to insert child into
 */ function $e88cd91ee18355c1$var$prependTo(child, parent) {
    if (parent.firstChild) parent.insertBefore(child, parent.firstChild);
    else parent.appendChild(child);
}
/**
 * Check if an element has a class name.
 *
 * @param  {Element} element
 *         Element to check
 *
 * @param  {string} classToCheck
 *         Class name to check for
 *
 * @return {boolean}
 *         Will be `true` if the element has a class, `false` otherwise.
 *
 * @throws {Error}
 *         Throws an error if `classToCheck` has white space.
 */ function $e88cd91ee18355c1$var$hasClass(element, classToCheck) {
    $e88cd91ee18355c1$var$throwIfWhitespace(classToCheck);
    return element.classList.contains(classToCheck);
}
/**
 * Add a class name to an element.
 *
 * @param  {Element} element
 *         Element to add class name to.
 *
 * @param  {...string} classesToAdd
 *         One or more class name to add.
 *
 * @return {Element}
 *         The DOM element with the added class name.
 */ function $e88cd91ee18355c1$var$addClass(element, ...classesToAdd) {
    element.classList.add(...classesToAdd.reduce((prev, current)=>prev.concat(current.split(/\s+/)), []));
    return element;
}
/**
 * Remove a class name from an element.
 *
 * @param  {Element} element
 *         Element to remove a class name from.
 *
 * @param  {...string} classesToRemove
 *         One or more class name to remove.
 *
 * @return {Element}
 *         The DOM element with class name removed.
 */ function $e88cd91ee18355c1$var$removeClass(element, ...classesToRemove) {
    // Protect in case the player gets disposed
    if (!element) {
        $e88cd91ee18355c1$var$log$1.warn("removeClass was called with an element that doesn't exist");
        return null;
    }
    element.classList.remove(...classesToRemove.reduce((prev, current)=>prev.concat(current.split(/\s+/)), []));
    return element;
}
/**
 * The callback definition for toggleClass.
 *
 * @callback module:dom~PredicateCallback
 * @param    {Element} element
 *           The DOM element of the Component.
 *
 * @param    {string} classToToggle
 *           The `className` that wants to be toggled
 *
 * @return   {boolean|undefined}
 *           If `true` is returned, the `classToToggle` will be added to the
 *           `element`. If `false`, the `classToToggle` will be removed from
 *           the `element`. If `undefined`, the callback will be ignored.
 */ /**
 * Adds or removes a class name to/from an element depending on an optional
 * condition or the presence/absence of the class name.
 *
 * @param  {Element} element
 *         The element to toggle a class name on.
 *
 * @param  {string} classToToggle
 *         The class that should be toggled.
 *
 * @param  {boolean|module:dom~PredicateCallback} [predicate]
 *         See the return value for {@link module:dom~PredicateCallback}
 *
 * @return {Element}
 *         The element with a class that has been toggled.
 */ function $e88cd91ee18355c1$var$toggleClass(element, classToToggle, predicate) {
    if (typeof predicate === "function") predicate = predicate(element, classToToggle);
    if (typeof predicate !== "boolean") predicate = undefined;
    classToToggle.split(/\s+/).forEach((className)=>element.classList.toggle(className, predicate));
    return element;
}
/**
 * Apply attributes to an HTML element.
 *
 * @param {Element} el
 *        Element to add attributes to.
 *
 * @param {Object} [attributes]
 *        Attributes to be applied.
 */ function $e88cd91ee18355c1$var$setAttributes(el, attributes) {
    Object.getOwnPropertyNames(attributes).forEach(function(attrName) {
        const attrValue = attributes[attrName];
        if (attrValue === null || typeof attrValue === "undefined" || attrValue === false) el.removeAttribute(attrName);
        else el.setAttribute(attrName, attrValue === true ? "" : attrValue);
    });
}
/**
 * Get an element's attribute values, as defined on the HTML tag.
 *
 * Attributes are not the same as properties. They're defined on the tag
 * or with setAttribute.
 *
 * @param  {Element} tag
 *         Element from which to get tag attributes.
 *
 * @return {Object}
 *         All attributes of the element. Boolean attributes will be `true` or
 *         `false`, others will be strings.
 */ function $e88cd91ee18355c1$var$getAttributes(tag) {
    const obj = {};
    // known boolean attributes
    // we can check for matching boolean properties, but not all browsers
    // and not all tags know about these attributes, so, we still want to check them manually
    const knownBooleans = [
        "autoplay",
        "controls",
        "playsinline",
        "loop",
        "muted",
        "default",
        "defaultMuted"
    ];
    if (tag && tag.attributes && tag.attributes.length > 0) {
        const attrs = tag.attributes;
        for(let i = attrs.length - 1; i >= 0; i--){
            const attrName = attrs[i].name;
            /** @type {boolean|string} */ let attrVal = attrs[i].value;
            // check for known booleans
            // the matching element property will return a value for typeof
            if (knownBooleans.includes(attrName)) // the value of an included boolean attribute is typically an empty
            // string ('') which would equal false if we just check for a false value.
            // we also don't want support bad code like autoplay='false'
            attrVal = attrVal !== null ? true : false;
            obj[attrName] = attrVal;
        }
    }
    return obj;
}
/**
 * Get the value of an element's attribute.
 *
 * @param {Element} el
 *        A DOM element.
 *
 * @param {string} attribute
 *        Attribute to get the value of.
 *
 * @return {string}
 *         The value of the attribute.
 */ function $e88cd91ee18355c1$var$getAttribute(el, attribute) {
    return el.getAttribute(attribute);
}
/**
 * Set the value of an element's attribute.
 *
 * @param {Element} el
 *        A DOM element.
 *
 * @param {string} attribute
 *        Attribute to set.
 *
 * @param {string} value
 *        Value to set the attribute to.
 */ function $e88cd91ee18355c1$var$setAttribute(el, attribute, value) {
    el.setAttribute(attribute, value);
}
/**
 * Remove an element's attribute.
 *
 * @param {Element} el
 *        A DOM element.
 *
 * @param {string} attribute
 *        Attribute to remove.
 */ function $e88cd91ee18355c1$var$removeAttribute(el, attribute) {
    el.removeAttribute(attribute);
}
/**
 * Attempt to block the ability to select text.
 */ function $e88cd91ee18355c1$var$blockTextSelection() {
    (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).body.focus();
    (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).onselectstart = function() {
        return false;
    };
}
/**
 * Turn off text selection blocking.
 */ function $e88cd91ee18355c1$var$unblockTextSelection() {
    (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).onselectstart = function() {
        return true;
    };
}
/**
 * Identical to the native `getBoundingClientRect` function, but ensures that
 * the method is supported at all (it is in all browsers we claim to support)
 * and that the element is in the DOM before continuing.
 *
 * This wrapper function also shims properties which are not provided by some
 * older browsers (namely, IE8).
 *
 * Additionally, some browsers do not support adding properties to a
 * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard
 * properties (except `x` and `y` which are not widely supported). This helps
 * avoid implementations where keys are non-enumerable.
 *
 * @param  {Element} el
 *         Element whose `ClientRect` we want to calculate.
 *
 * @return {Object|undefined}
 *         Always returns a plain object - or `undefined` if it cannot.
 */ function $e88cd91ee18355c1$var$getBoundingClientRect(el) {
    if (el && el.getBoundingClientRect && el.parentNode) {
        const rect = el.getBoundingClientRect();
        const result = {};
        [
            "bottom",
            "height",
            "left",
            "right",
            "top",
            "width"
        ].forEach((k)=>{
            if (rect[k] !== undefined) result[k] = rect[k];
        });
        if (!result.height) result.height = parseFloat($e88cd91ee18355c1$var$computedStyle(el, "height"));
        if (!result.width) result.width = parseFloat($e88cd91ee18355c1$var$computedStyle(el, "width"));
        return result;
    }
}
/**
 * Represents the position of a DOM element on the page.
 *
 * @typedef  {Object} module:dom~Position
 *
 * @property {number} left
 *           Pixels to the left.
 *
 * @property {number} top
 *           Pixels from the top.
 */ /**
 * Get the position of an element in the DOM.
 *
 * Uses `getBoundingClientRect` technique from John Resig.
 *
 * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/
 *
 * @param  {Element} el
 *         Element from which to get offset.
 *
 * @return {module:dom~Position}
 *         The position of the element that was passed in.
 */ function $e88cd91ee18355c1$var$findPosition(el) {
    if (!el || el && !el.offsetParent) return {
        left: 0,
        top: 0,
        width: 0,
        height: 0
    };
    const width = el.offsetWidth;
    const height = el.offsetHeight;
    let left = 0;
    let top = 0;
    while(el.offsetParent && el !== (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X)))[$e88cd91ee18355c1$var$FullscreenApi.fullscreenElement]){
        left += el.offsetLeft;
        top += el.offsetTop;
        el = el.offsetParent;
    }
    return {
        left: left,
        top: top,
        width: width,
        height: height
    };
}
/**
 * Represents x and y coordinates for a DOM element or mouse pointer.
 *
 * @typedef  {Object} module:dom~Coordinates
 *
 * @property {number} x
 *           x coordinate in pixels
 *
 * @property {number} y
 *           y coordinate in pixels
 */ /**
 * Get the pointer position within an element.
 *
 * The base on the coordinates are the bottom left of the element.
 *
 * @param  {Element} el
 *         Element on which to get the pointer position on.
 *
 * @param  {Event} event
 *         Event object.
 *
 * @return {module:dom~Coordinates}
 *         A coordinates object corresponding to the mouse position.
 *
 */ function $e88cd91ee18355c1$var$getPointerPosition(el, event) {
    const translated = {
        x: 0,
        y: 0
    };
    if ($e88cd91ee18355c1$var$IS_IOS) {
        let item = el;
        while(item && item.nodeName.toLowerCase() !== "html"){
            const transform = $e88cd91ee18355c1$var$computedStyle(item, "transform");
            if (/^matrix/.test(transform)) {
                const values = transform.slice(7, -1).split(/,\s/).map(Number);
                translated.x += values[4];
                translated.y += values[5];
            } else if (/^matrix3d/.test(transform)) {
                const values = transform.slice(9, -1).split(/,\s/).map(Number);
                translated.x += values[12];
                translated.y += values[13];
            }
            item = item.parentNode;
        }
    }
    const position = {};
    const boxTarget = $e88cd91ee18355c1$var$findPosition(event.target);
    const box = $e88cd91ee18355c1$var$findPosition(el);
    const boxW = box.width;
    const boxH = box.height;
    let offsetY = event.offsetY - (box.top - boxTarget.top);
    let offsetX = event.offsetX - (box.left - boxTarget.left);
    if (event.changedTouches) {
        offsetX = event.changedTouches[0].pageX - box.left;
        offsetY = event.changedTouches[0].pageY + box.top;
        if ($e88cd91ee18355c1$var$IS_IOS) {
            offsetX -= translated.x;
            offsetY -= translated.y;
        }
    }
    position.y = 1 - Math.max(0, Math.min(1, offsetY / boxH));
    position.x = Math.max(0, Math.min(1, offsetX / boxW));
    return position;
}
/**
 * Determines, via duck typing, whether or not a value is a text node.
 *
 * @param  {*} value
 *         Check if this value is a text node.
 *
 * @return {boolean}
 *         Will be `true` if the value is a text node, `false` otherwise.
 */ function $e88cd91ee18355c1$var$isTextNode(value) {
    return $e88cd91ee18355c1$var$isObject(value) && value.nodeType === 3;
}
/**
 * Empties the contents of an element.
 *
 * @param  {Element} el
 *         The element to empty children from
 *
 * @return {Element}
 *         The element with no children
 */ function $e88cd91ee18355c1$var$emptyEl(el) {
    while(el.firstChild)el.removeChild(el.firstChild);
    return el;
}
/**
 * This is a mixed value that describes content to be injected into the DOM
 * via some method. It can be of the following types:
 *
 * Type       | Description
 * -----------|-------------
 * `string`   | The value will be normalized into a text node.
 * `Element`  | The value will be accepted as-is.
 * `Text`     | A TextNode. The value will be accepted as-is.
 * `Array`    | A one-dimensional array of strings, elements, text nodes, or functions. These functions should return a string, element, or text node (any other return value, like an array, will be ignored).
 * `Function` | A function, which is expected to return a string, element, text node, or array - any of the other possible values described above. This means that a content descriptor could be a function that returns an array of functions, but those second-level functions must return strings, elements, or text nodes.
 *
 * @typedef {string|Element|Text|Array|Function} ContentDescriptor
 */ /**
 * Normalizes content for eventual insertion into the DOM.
 *
 * This allows a wide range of content definition methods, but helps protect
 * from falling into the trap of simply writing to `innerHTML`, which could
 * be an XSS concern.
 *
 * The content for an element can be passed in multiple types and
 * combinations, whose behavior is as follows:
 *
 * @param {ContentDescriptor} content
 *        A content descriptor value.
 *
 * @return {Array}
 *         All of the content that was passed in, normalized to an array of
 *         elements or text nodes.
 */ function $e88cd91ee18355c1$var$normalizeContent(content) {
    // First, invoke content if it is a function. If it produces an array,
    // that needs to happen before normalization.
    if (typeof content === "function") content = content();
    // Next up, normalize to an array, so one or many items can be normalized,
    // filtered, and returned.
    return (Array.isArray(content) ? content : [
        content
    ]).map((value)=>{
        // First, invoke value if it is a function to produce a new value,
        // which will be subsequently normalized to a Node of some kind.
        if (typeof value === "function") value = value();
        if ($e88cd91ee18355c1$var$isEl(value) || $e88cd91ee18355c1$var$isTextNode(value)) return value;
        if (typeof value === "string" && /\S/.test(value)) return (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createTextNode(value);
    }).filter((value)=>value);
}
/**
 * Normalizes and appends content to an element.
 *
 * @param  {Element} el
 *         Element to append normalized content to.
 *
 * @param {ContentDescriptor} content
 *        A content descriptor value.
 *
 * @return {Element}
 *         The element with appended normalized content.
 */ function $e88cd91ee18355c1$var$appendContent(el, content) {
    $e88cd91ee18355c1$var$normalizeContent(content).forEach((node)=>el.appendChild(node));
    return el;
}
/**
 * Normalizes and inserts content into an element; this is identical to
 * `appendContent()`, except it empties the element first.
 *
 * @param {Element} el
 *        Element to insert normalized content into.
 *
 * @param {ContentDescriptor} content
 *        A content descriptor value.
 *
 * @return {Element}
 *         The element with inserted normalized content.
 */ function $e88cd91ee18355c1$var$insertContent(el, content) {
    return $e88cd91ee18355c1$var$appendContent($e88cd91ee18355c1$var$emptyEl(el), content);
}
/**
 * Check if an event was a single left click.
 *
 * @param  {MouseEvent} event
 *         Event object.
 *
 * @return {boolean}
 *         Will be `true` if a single left click, `false` otherwise.
 */ function $e88cd91ee18355c1$var$isSingleLeftClick(event) {
    // Note: if you create something draggable, be sure to
    // call it on both `mousedown` and `mousemove` event,
    // otherwise `mousedown` should be enough for a button
    if (event.button === undefined && event.buttons === undefined) // Why do we need `buttons` ?
    // Because, middle mouse sometimes have this:
    // e.button === 0 and e.buttons === 4
    // Furthermore, we want to prevent combination click, something like
    // HOLD middlemouse then left click, that would be
    // e.button === 0, e.buttons === 5
    // just `button` is not gonna work
    // Alright, then what this block does ?
    // this is for chrome `simulate mobile devices`
    // I want to support this as well
    return true;
    if (event.button === 0 && event.buttons === undefined) // Touch screen, sometimes on some specific device, `buttons`
    // doesn't have anything (safari on ios, blackberry...)
    return true;
    // `mouseup` event on a single left click has
    // `button` and `buttons` equal to 0
    if (event.type === "mouseup" && event.button === 0 && event.buttons === 0) return true;
    if (event.button !== 0 || event.buttons !== 1) // This is the reason we have those if else block above
    // if any special case we can catch and let it slide
    // we do it above, when get to here, this definitely
    // is-not-left-click
    return false;
    return true;
}
/**
 * Finds a single DOM element matching `selector` within the optional
 * `context` of another DOM element (defaulting to `document`).
 *
 * @param  {string} selector
 *         A valid CSS selector, which will be passed to `querySelector`.
 *
 * @param  {Element|String} [context=document]
 *         A DOM element within which to query. Can also be a selector
 *         string in which case the first matching element will be used
 *         as context. If missing (or no element matches selector), falls
 *         back to `document`.
 *
 * @return {Element|null}
 *         The element that was found or null.
 */ const $e88cd91ee18355c1$var$$ = $e88cd91ee18355c1$var$createQuerier("querySelector");
/**
 * Finds a all DOM elements matching `selector` within the optional
 * `context` of another DOM element (defaulting to `document`).
 *
 * @param  {string} selector
 *         A valid CSS selector, which will be passed to `querySelectorAll`.
 *
 * @param  {Element|String} [context=document]
 *         A DOM element within which to query. Can also be a selector
 *         string in which case the first matching element will be used
 *         as context. If missing (or no element matches selector), falls
 *         back to `document`.
 *
 * @return {NodeList}
 *         A element list of elements that were found. Will be empty if none
 *         were found.
 *
 */ const $e88cd91ee18355c1$var$$$ = $e88cd91ee18355c1$var$createQuerier("querySelectorAll");
/**
 * A safe getComputedStyle.
 *
 * This is needed because in Firefox, if the player is loaded in an iframe with
 * `display:none`, then `getComputedStyle` returns `null`, so, we do a
 * null-check to make sure that the player doesn't break in these cases.
 *
 * @param    {Element} el
 *           The element you want the computed style of
 *
 * @param    {string} prop
 *           The property name you want
 *
 * @see      https://bugzilla.mozilla.org/show_bug.cgi?id=548397
 */ function $e88cd91ee18355c1$var$computedStyle(el, prop) {
    if (!el || !prop) return "";
    if (typeof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).getComputedStyle === "function") {
        let computedStyleValue;
        try {
            computedStyleValue = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).getComputedStyle(el);
        } catch (e) {
            return "";
        }
        return computedStyleValue ? computedStyleValue.getPropertyValue(prop) || computedStyleValue[prop] : "";
    }
    return "";
}
/**
 * Copy document style sheets to another window.
 *
 * @param    {Window} win
 *           The window element you want to copy the document style sheets to.
 *
 */ function $e88cd91ee18355c1$var$copyStyleSheetsToWindow(win) {
    [
        ...(0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).styleSheets
    ].forEach((styleSheet)=>{
        try {
            const cssRules = [
                ...styleSheet.cssRules
            ].map((rule)=>rule.cssText).join("");
            const style = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("style");
            style.textContent = cssRules;
            win.document.head.appendChild(style);
        } catch (e) {
            const link = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("link");
            link.rel = "stylesheet";
            link.type = styleSheet.type;
            // For older Safari this has to be the string; on other browsers setting the MediaList works
            link.media = styleSheet.media.mediaText;
            link.href = styleSheet.href;
            win.document.head.appendChild(link);
        }
    });
}
var $e88cd91ee18355c1$var$Dom = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    isReal: $e88cd91ee18355c1$var$isReal,
    isEl: $e88cd91ee18355c1$var$isEl,
    isInFrame: $e88cd91ee18355c1$var$isInFrame,
    createEl: $e88cd91ee18355c1$var$createEl,
    textContent: $e88cd91ee18355c1$var$textContent,
    prependTo: $e88cd91ee18355c1$var$prependTo,
    hasClass: $e88cd91ee18355c1$var$hasClass,
    addClass: $e88cd91ee18355c1$var$addClass,
    removeClass: $e88cd91ee18355c1$var$removeClass,
    toggleClass: $e88cd91ee18355c1$var$toggleClass,
    setAttributes: $e88cd91ee18355c1$var$setAttributes,
    getAttributes: $e88cd91ee18355c1$var$getAttributes,
    getAttribute: $e88cd91ee18355c1$var$getAttribute,
    setAttribute: $e88cd91ee18355c1$var$setAttribute,
    removeAttribute: $e88cd91ee18355c1$var$removeAttribute,
    blockTextSelection: $e88cd91ee18355c1$var$blockTextSelection,
    unblockTextSelection: $e88cd91ee18355c1$var$unblockTextSelection,
    getBoundingClientRect: $e88cd91ee18355c1$var$getBoundingClientRect,
    findPosition: $e88cd91ee18355c1$var$findPosition,
    getPointerPosition: $e88cd91ee18355c1$var$getPointerPosition,
    isTextNode: $e88cd91ee18355c1$var$isTextNode,
    emptyEl: $e88cd91ee18355c1$var$emptyEl,
    normalizeContent: $e88cd91ee18355c1$var$normalizeContent,
    appendContent: $e88cd91ee18355c1$var$appendContent,
    insertContent: $e88cd91ee18355c1$var$insertContent,
    isSingleLeftClick: $e88cd91ee18355c1$var$isSingleLeftClick,
    $: $e88cd91ee18355c1$var$$,
    $$: $e88cd91ee18355c1$var$$$,
    computedStyle: $e88cd91ee18355c1$var$computedStyle,
    copyStyleSheetsToWindow: $e88cd91ee18355c1$var$copyStyleSheetsToWindow
});
/**
 * @file setup.js - Functions for setting up a player without
 * user interaction based on the data-setup `attribute` of the video tag.
 *
 * @module setup
 */ let $e88cd91ee18355c1$var$_windowLoaded = false;
let $e88cd91ee18355c1$var$videojs$1;
/**
 * Set up any tags that have a data-setup `attribute` when the player is started.
 */ const $e88cd91ee18355c1$var$autoSetup = function() {
    if ($e88cd91ee18355c1$var$videojs$1.options.autoSetup === false) return;
    const vids = Array.prototype.slice.call((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).getElementsByTagName("video"));
    const audios = Array.prototype.slice.call((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).getElementsByTagName("audio"));
    const divs = Array.prototype.slice.call((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).getElementsByTagName("video-js"));
    const mediaEls = vids.concat(audios, divs);
    // Check if any media elements exist
    if (mediaEls && mediaEls.length > 0) for(let i = 0, e = mediaEls.length; i < e; i++){
        const mediaEl = mediaEls[i];
        // Check if element exists, has getAttribute func.
        if (mediaEl && mediaEl.getAttribute) // Make sure this player hasn't already been set up.
        {
            if (mediaEl.player === undefined) {
                const options = mediaEl.getAttribute("data-setup");
                // Check if data-setup attr exists.
                // We only auto-setup if they've added the data-setup attr.
                if (options !== null) // Create new video.js instance.
                $e88cd91ee18355c1$var$videojs$1(mediaEl);
            }
        } else {
            $e88cd91ee18355c1$var$autoSetupTimeout(1);
            break;
        }
    }
    else if (!$e88cd91ee18355c1$var$_windowLoaded) $e88cd91ee18355c1$var$autoSetupTimeout(1);
};
/**
 * Wait until the page is loaded before running autoSetup. This will be called in
 * autoSetup if `hasLoaded` returns false.
 *
 * @param {number} wait
 *        How long to wait in ms
 *
 * @param {module:videojs} [vjs]
 *        The videojs library function
 */ function $e88cd91ee18355c1$var$autoSetupTimeout(wait, vjs) {
    // Protect against breakage in non-browser environments
    if (!$e88cd91ee18355c1$var$isReal()) return;
    if (vjs) $e88cd91ee18355c1$var$videojs$1 = vjs;
    (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout($e88cd91ee18355c1$var$autoSetup, wait);
}
/**
 * Used to set the internal tracking of window loaded state to true.
 *
 * @private
 */ function $e88cd91ee18355c1$var$setWindowLoaded() {
    $e88cd91ee18355c1$var$_windowLoaded = true;
    (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).removeEventListener("load", $e88cd91ee18355c1$var$setWindowLoaded);
}
if ($e88cd91ee18355c1$var$isReal()) {
    if ((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).readyState === "complete") $e88cd91ee18355c1$var$setWindowLoaded();
    else /**
     * Listen for the load event on window, and set _windowLoaded to true.
     *
     * We use a standard event listener here to avoid incrementing the GUID
     * before any players are created.
     *
     * @listens load
     */ (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).addEventListener("load", $e88cd91ee18355c1$var$setWindowLoaded);
}
/**
 * @file stylesheet.js
 * @module stylesheet
 */ /**
 * Create a DOM style element given a className for it.
 *
 * @param {string} className
 *        The className to add to the created style element.
 *
 * @return {Element}
 *         The element that was created.
 */ const $e88cd91ee18355c1$var$createStyleElement = function(className) {
    const style = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("style");
    style.className = className;
    return style;
};
/**
 * Add text to a DOM element.
 *
 * @param {Element} el
 *        The Element to add text content to.
 *
 * @param {string} content
 *        The text to add to the element.
 */ const $e88cd91ee18355c1$var$setTextContent = function(el, content) {
    if (el.styleSheet) el.styleSheet.cssText = content;
    else el.textContent = content;
};
/**
 * @file dom-data.js
 * @module dom-data
 */ /**
 * Element Data Store.
 *
 * Allows for binding data to an element without putting it directly on the
 * element. Ex. Event listeners are stored here.
 * (also from jsninja.com, slightly modified and updated for closure compiler)
 *
 * @type {Object}
 * @private
 */ var $e88cd91ee18355c1$var$DomData = new WeakMap();
/**
 * @file guid.js
 * @module guid
 */ // Default value for GUIDs. This allows us to reset the GUID counter in tests.
//
// The initial GUID is 3 because some users have come to rely on the first
// default player ID ending up as `vjs_video_3`.
//
// See: https://github.com/videojs/video.js/pull/6216
const $e88cd91ee18355c1$var$_initialGuid = 3;
/**
 * Unique ID for an element or function
 *
 * @type {Number}
 */ let $e88cd91ee18355c1$var$_guid = $e88cd91ee18355c1$var$_initialGuid;
/**
 * Get a unique auto-incrementing ID by number that has not been returned before.
 *
 * @return {number}
 *         A new unique ID.
 */ function $e88cd91ee18355c1$var$newGUID() {
    return $e88cd91ee18355c1$var$_guid++;
}
/**
 * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
 * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
 * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
 * robust as jquery's, so there's probably some differences.
 *
 * @file events.js
 * @module events
 */ /**
 * Clean up the listener cache and dispatchers
 *
 * @param {Element|Object} elem
 *        Element to clean up
 *
 * @param {string} type
 *        Type of event to clean up
 */ function $e88cd91ee18355c1$var$_cleanUpEvents(elem, type) {
    if (!$e88cd91ee18355c1$var$DomData.has(elem)) return;
    const data = $e88cd91ee18355c1$var$DomData.get(elem);
    // Remove the events of a particular type if there are none left
    if (data.handlers[type].length === 0) {
        delete data.handlers[type];
        // data.handlers[type] = null;
        // Setting to null was causing an error with data.handlers
        // Remove the meta-handler from the element
        if (elem.removeEventListener) elem.removeEventListener(type, data.dispatcher, false);
        else if (elem.detachEvent) elem.detachEvent("on" + type, data.dispatcher);
    }
    // Remove the events object if there are no types left
    if (Object.getOwnPropertyNames(data.handlers).length <= 0) {
        delete data.handlers;
        delete data.dispatcher;
        delete data.disabled;
    }
    // Finally remove the element data if there is no data left
    if (Object.getOwnPropertyNames(data).length === 0) $e88cd91ee18355c1$var$DomData.delete(elem);
}
/**
 * Loops through an array of event types and calls the requested method for each type.
 *
 * @param {Function} fn
 *        The event method we want to use.
 *
 * @param {Element|Object} elem
 *        Element or object to bind listeners to
 *
 * @param {string[]} types
 *        Type of event to bind to.
 *
 * @param {Function} callback
 *        Event listener.
 */ function $e88cd91ee18355c1$var$_handleMultipleEvents(fn, elem, types, callback) {
    types.forEach(function(type) {
        // Call the event method for each one of the types
        fn(elem, type, callback);
    });
}
/**
 * Fix a native event to have standard property values
 *
 * @param {Object} event
 *        Event object to fix.
 *
 * @return {Object}
 *         Fixed event object.
 */ function $e88cd91ee18355c1$var$fixEvent(event) {
    if (event.fixed_) return event;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    // Test if fixing up is needed
    // Used to check if !event.stopPropagation instead of isPropagationStopped
    // But native events return true for stopPropagation, but don't have
    // other expected methods like isPropagationStopped. Seems to be a problem
    // with the Javascript Ninja code. So we're just overriding all events now.
    if (!event || !event.isPropagationStopped || !event.isImmediatePropagationStopped) {
        const old = event || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).event;
        event = {};
        // Clone the old object so that we can modify the values event = {};
        // IE8 Doesn't like when you mess with native event properties
        // Firefox returns false for event.hasOwnProperty('type') and other props
        //  which makes copying more difficult.
        // TODO: Probably best to create a whitelist of event props
        for(const key in old){
            // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
            // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
            // and webkitMovementX/Y
            // Lighthouse complains if Event.path is copied
            if (key !== "layerX" && key !== "layerY" && key !== "keyLocation" && key !== "webkitMovementX" && key !== "webkitMovementY" && key !== "path") // Chrome 32+ warns if you try to copy deprecated returnValue, but
            // we still want to if preventDefault isn't supported (IE8).
            {
                if (!(key === "returnValue" && old.preventDefault)) event[key] = old[key];
            }
        }
        // The event occurred on this element
        if (!event.target) event.target = event.srcElement || (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X)));
        // Handle which other element the event is related to
        if (!event.relatedTarget) event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
        // Stop the default browser action
        event.preventDefault = function() {
            if (old.preventDefault) old.preventDefault();
            event.returnValue = false;
            old.returnValue = false;
            event.defaultPrevented = true;
        };
        event.defaultPrevented = false;
        // Stop the event from bubbling
        event.stopPropagation = function() {
            if (old.stopPropagation) old.stopPropagation();
            event.cancelBubble = true;
            old.cancelBubble = true;
            event.isPropagationStopped = returnTrue;
        };
        event.isPropagationStopped = returnFalse;
        // Stop the event from bubbling and executing other handlers
        event.stopImmediatePropagation = function() {
            if (old.stopImmediatePropagation) old.stopImmediatePropagation();
            event.isImmediatePropagationStopped = returnTrue;
            event.stopPropagation();
        };
        event.isImmediatePropagationStopped = returnFalse;
        // Handle mouse position
        if (event.clientX !== null && event.clientX !== undefined) {
            const doc = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).documentElement;
            const body = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).body;
            event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
            event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
        }
        // Handle key presses
        event.which = event.charCode || event.keyCode;
        // Fix button for mouse clicks:
        // 0 == left; 1 == middle; 2 == right
        if (event.button !== null && event.button !== undefined) // The following is disabled because it does not pass videojs-standard
        // and... yikes.
        /* eslint-disable */ event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
    }
    event.fixed_ = true;
    // Returns fixed-up instance
    return event;
}
/**
 * Whether passive event listeners are supported
 */ let $e88cd91ee18355c1$var$_supportsPassive;
const $e88cd91ee18355c1$var$supportsPassive = function() {
    if (typeof $e88cd91ee18355c1$var$_supportsPassive !== "boolean") {
        $e88cd91ee18355c1$var$_supportsPassive = false;
        try {
            const opts = Object.defineProperty({}, "passive", {
                get () {
                    $e88cd91ee18355c1$var$_supportsPassive = true;
                }
            });
            (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).addEventListener("test", null, opts);
            (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).removeEventListener("test", null, opts);
        } catch (e) {
        // disregard
        }
    }
    return $e88cd91ee18355c1$var$_supportsPassive;
};
/**
 * Touch events Chrome expects to be passive
 */ const $e88cd91ee18355c1$var$passiveEvents = [
    "touchstart",
    "touchmove"
];
/**
 * Add an event listener to element
 * It stores the handler function in a separate cache object
 * and adds a generic handler to the element's event,
 * along with a unique id (guid) to the element.
 *
 * @param {Element|Object} elem
 *        Element or object to bind listeners to
 *
 * @param {string|string[]} type
 *        Type of event to bind to.
 *
 * @param {Function} fn
 *        Event listener.
 */ function $e88cd91ee18355c1$var$on(elem, type, fn) {
    if (Array.isArray(type)) return $e88cd91ee18355c1$var$_handleMultipleEvents($e88cd91ee18355c1$var$on, elem, type, fn);
    if (!$e88cd91ee18355c1$var$DomData.has(elem)) $e88cd91ee18355c1$var$DomData.set(elem, {});
    const data = $e88cd91ee18355c1$var$DomData.get(elem);
    // We need a place to store all our handler data
    if (!data.handlers) data.handlers = {};
    if (!data.handlers[type]) data.handlers[type] = [];
    if (!fn.guid) fn.guid = $e88cd91ee18355c1$var$newGUID();
    data.handlers[type].push(fn);
    if (!data.dispatcher) {
        data.disabled = false;
        data.dispatcher = function(event, hash) {
            if (data.disabled) return;
            event = $e88cd91ee18355c1$var$fixEvent(event);
            const handlers = data.handlers[event.type];
            if (handlers) {
                // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
                const handlersCopy = handlers.slice(0);
                for(let m = 0, n = handlersCopy.length; m < n; m++){
                    if (event.isImmediatePropagationStopped()) break;
                    else try {
                        handlersCopy[m].call(elem, event, hash);
                    } catch (e) {
                        $e88cd91ee18355c1$var$log$1.error(e);
                    }
                }
            }
        };
    }
    if (data.handlers[type].length === 1) {
        if (elem.addEventListener) {
            let options = false;
            if ($e88cd91ee18355c1$var$supportsPassive() && $e88cd91ee18355c1$var$passiveEvents.indexOf(type) > -1) options = {
                passive: true
            };
            elem.addEventListener(type, data.dispatcher, options);
        } else if (elem.attachEvent) elem.attachEvent("on" + type, data.dispatcher);
    }
}
/**
 * Removes event listeners from an element
 *
 * @param {Element|Object} elem
 *        Object to remove listeners from.
 *
 * @param {string|string[]} [type]
 *        Type of listener to remove. Don't include to remove all events from element.
 *
 * @param {Function} [fn]
 *        Specific listener to remove. Don't include to remove listeners for an event
 *        type.
 */ function $e88cd91ee18355c1$var$off(elem, type, fn) {
    // Don't want to add a cache object through getElData if not needed
    if (!$e88cd91ee18355c1$var$DomData.has(elem)) return;
    const data = $e88cd91ee18355c1$var$DomData.get(elem);
    // If no events exist, nothing to unbind
    if (!data.handlers) return;
    if (Array.isArray(type)) return $e88cd91ee18355c1$var$_handleMultipleEvents($e88cd91ee18355c1$var$off, elem, type, fn);
    // Utility function
    const removeType = function(el, t) {
        data.handlers[t] = [];
        $e88cd91ee18355c1$var$_cleanUpEvents(el, t);
    };
    // Are we removing all bound events?
    if (type === undefined) {
        for(const t in data.handlers)if (Object.prototype.hasOwnProperty.call(data.handlers || {}, t)) removeType(elem, t);
        return;
    }
    const handlers = data.handlers[type];
    // If no handlers exist, nothing to unbind
    if (!handlers) return;
    // If no listener was provided, remove all listeners for type
    if (!fn) {
        removeType(elem, type);
        return;
    }
    // We're only removing a single handler
    if (fn.guid) {
        for(let n = 0; n < handlers.length; n++)if (handlers[n].guid === fn.guid) handlers.splice(n--, 1);
    }
    $e88cd91ee18355c1$var$_cleanUpEvents(elem, type);
}
/**
 * Trigger an event for an element
 *
 * @param {Element|Object} elem
 *        Element to trigger an event on
 *
 * @param {EventTarget~Event|string} event
 *        A string (the type) or an event object with a type attribute
 *
 * @param {Object} [hash]
 *        data hash to pass along with the event
 *
 * @return {boolean|undefined}
 *         Returns the opposite of `defaultPrevented` if default was
 *         prevented. Otherwise, returns `undefined`
 */ function $e88cd91ee18355c1$var$trigger(elem, event, hash) {
    // Fetches element data and a reference to the parent (for bubbling).
    // Don't want to add a data object to cache for every parent,
    // so checking hasElData first.
    const elemData = $e88cd91ee18355c1$var$DomData.has(elem) ? $e88cd91ee18355c1$var$DomData.get(elem) : {};
    const parent = elem.parentNode || elem.ownerDocument;
    // type = event.type || event,
    // handler;
    // If an event name was passed as a string, creates an event out of it
    if (typeof event === "string") event = {
        type: event,
        target: elem
    };
    else if (!event.target) event.target = elem;
    // Normalizes the event properties.
    event = $e88cd91ee18355c1$var$fixEvent(event);
    // If the passed element has a dispatcher, executes the established handlers.
    if (elemData.dispatcher) elemData.dispatcher.call(elem, event, hash);
    // Unless explicitly stopped or the event does not bubble (e.g. media events)
    // recursively calls this function to bubble the event up the DOM.
    if (parent && !event.isPropagationStopped() && event.bubbles === true) $e88cd91ee18355c1$var$trigger.call(null, parent, event, hash);
    else if (!parent && !event.defaultPrevented && event.target && event.target[event.type]) {
        if (!$e88cd91ee18355c1$var$DomData.has(event.target)) $e88cd91ee18355c1$var$DomData.set(event.target, {});
        const targetData = $e88cd91ee18355c1$var$DomData.get(event.target);
        // Checks if the target has a default action for this event.
        if (event.target[event.type]) {
            // Temporarily disables event dispatching on the target as we have already executed the handler.
            targetData.disabled = true;
            // Executes the default action.
            if (typeof event.target[event.type] === "function") event.target[event.type]();
            // Re-enables event dispatching.
            targetData.disabled = false;
        }
    }
    // Inform the triggerer if the default was prevented by returning false
    return !event.defaultPrevented;
}
/**
 * Trigger a listener only once for an event.
 *
 * @param {Element|Object} elem
 *        Element or object to bind to.
 *
 * @param {string|string[]} type
 *        Name/type of event
 *
 * @param {Event~EventListener} fn
 *        Event listener function
 */ function $e88cd91ee18355c1$var$one(elem, type, fn) {
    if (Array.isArray(type)) return $e88cd91ee18355c1$var$_handleMultipleEvents($e88cd91ee18355c1$var$one, elem, type, fn);
    const func = function() {
        $e88cd91ee18355c1$var$off(elem, type, func);
        fn.apply(this, arguments);
    };
    // copy the guid to the new function so it can removed using the original function's ID
    func.guid = fn.guid = fn.guid || $e88cd91ee18355c1$var$newGUID();
    $e88cd91ee18355c1$var$on(elem, type, func);
}
/**
 * Trigger a listener only once and then turn if off for all
 * configured events
 *
 * @param {Element|Object} elem
 *        Element or object to bind to.
 *
 * @param {string|string[]} type
 *        Name/type of event
 *
 * @param {Event~EventListener} fn
 *        Event listener function
 */ function $e88cd91ee18355c1$var$any(elem, type, fn) {
    const func = function() {
        $e88cd91ee18355c1$var$off(elem, type, func);
        fn.apply(this, arguments);
    };
    // copy the guid to the new function so it can removed using the original function's ID
    func.guid = fn.guid = fn.guid || $e88cd91ee18355c1$var$newGUID();
    // multiple ons, but one off for everything
    $e88cd91ee18355c1$var$on(elem, type, func);
}
var $e88cd91ee18355c1$var$Events = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    fixEvent: $e88cd91ee18355c1$var$fixEvent,
    on: $e88cd91ee18355c1$var$on,
    off: $e88cd91ee18355c1$var$off,
    trigger: $e88cd91ee18355c1$var$trigger,
    one: $e88cd91ee18355c1$var$one,
    any: $e88cd91ee18355c1$var$any
});
/**
 * @file fn.js
 * @module fn
 */ const $e88cd91ee18355c1$var$UPDATE_REFRESH_INTERVAL = 30;
/**
 * A private, internal-only function for changing the context of a function.
 *
 * It also stores a unique id on the function so it can be easily removed from
 * events.
 *
 * @private
 * @function
 * @param    {*} context
 *           The object to bind as scope.
 *
 * @param    {Function} fn
 *           The function to be bound to a scope.
 *
 * @param    {number} [uid]
 *           An optional unique ID for the function to be set
 *
 * @return   {Function}
 *           The new function that will be bound into the context given
 */ const $e88cd91ee18355c1$var$bind_ = function(context, fn, uid) {
    // Make sure the function has a unique ID
    if (!fn.guid) fn.guid = $e88cd91ee18355c1$var$newGUID();
    // Create the new function that changes the context
    const bound = fn.bind(context);
    // Allow for the ability to individualize this function
    // Needed in the case where multiple objects might share the same prototype
    // IF both items add an event listener with the same function, then you try to remove just one
    // it will remove both because they both have the same guid.
    // when using this, you need to use the bind method when you remove the listener as well.
    // currently used in text tracks
    bound.guid = uid ? uid + "_" + fn.guid : fn.guid;
    return bound;
};
/**
 * Wraps the given function, `fn`, with a new function that only invokes `fn`
 * at most once per every `wait` milliseconds.
 *
 * @function
 * @param    {Function} fn
 *           The function to be throttled.
 *
 * @param    {number}   wait
 *           The number of milliseconds by which to throttle.
 *
 * @return   {Function}
 */ const $e88cd91ee18355c1$var$throttle = function(fn, wait) {
    let last = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).performance.now();
    const throttled = function(...args) {
        const now = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).performance.now();
        if (now - last >= wait) {
            fn(...args);
            last = now;
        }
    };
    return throttled;
};
/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked.
 *
 * Inspired by lodash and underscore implementations.
 *
 * @function
 * @param    {Function} func
 *           The function to wrap with debounce behavior.
 *
 * @param    {number} wait
 *           The number of milliseconds to wait after the last invocation.
 *
 * @param    {boolean} [immediate]
 *           Whether or not to invoke the function immediately upon creation.
 *
 * @param    {Object} [context=window]
 *           The "context" in which the debounced function should debounce. For
 *           example, if this function should be tied to a Video.js player,
 *           the player can be passed here. Alternatively, defaults to the
 *           global `window` object.
 *
 * @return   {Function}
 *           A debounced function.
 */ const $e88cd91ee18355c1$var$debounce = function(func, wait, immediate, context = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7)))) {
    let timeout;
    const cancel = ()=>{
        context.clearTimeout(timeout);
        timeout = null;
    };
    /* eslint-disable consistent-this */ const debounced = function() {
        const self1 = this;
        const args = arguments;
        let later = function() {
            timeout = null;
            later = null;
            if (!immediate) func.apply(self1, args);
        };
        if (!timeout && immediate) func.apply(self1, args);
        context.clearTimeout(timeout);
        timeout = context.setTimeout(later, wait);
    };
    /* eslint-enable consistent-this */ debounced.cancel = cancel;
    return debounced;
};
var $e88cd91ee18355c1$var$Fn = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    UPDATE_REFRESH_INTERVAL: $e88cd91ee18355c1$var$UPDATE_REFRESH_INTERVAL,
    bind_: $e88cd91ee18355c1$var$bind_,
    throttle: $e88cd91ee18355c1$var$throttle,
    debounce: $e88cd91ee18355c1$var$debounce
});
/**
 * @file src/js/event-target.js
 */ let $e88cd91ee18355c1$var$EVENT_MAP;
/**
 * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It
 * adds shorthand functions that wrap around lengthy functions. For example:
 * the `on` function is a wrapper around `addEventListener`.
 *
 * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}
 * @class EventTarget
 */ class $e88cd91ee18355c1$var$EventTarget$2 {
    /**
   * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
   * function that will get called when an event with a certain name gets triggered.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to call with `EventTarget`s
   */ on(type, fn) {
        // Remove the addEventListener alias before calling Events.on
        // so we don't get into an infinite type loop
        const ael = this.addEventListener;
        this.addEventListener = ()=>{};
        $e88cd91ee18355c1$var$on(this, type, fn);
        this.addEventListener = ael;
    }
    /**
   * Removes an `event listener` for a specific event from an instance of `EventTarget`.
   * This makes it so that the `event listener` will no longer get called when the
   * named event happens.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to remove.
   */ off(type, fn) {
        $e88cd91ee18355c1$var$off(this, type, fn);
    }
    /**
   * This function will add an `event listener` that gets triggered only once. After the
   * first trigger it will get removed. This is like adding an `event listener`
   * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to be called once for each event name.
   */ one(type, fn) {
        // Remove the addEventListener aliasing Events.on
        // so we don't get into an infinite type loop
        const ael = this.addEventListener;
        this.addEventListener = ()=>{};
        $e88cd91ee18355c1$var$one(this, type, fn);
        this.addEventListener = ael;
    }
    /**
   * This function will add an `event listener` that gets triggered only once and is
   * removed from all events. This is like adding an array of `event listener`s
   * with {@link EventTarget#on} that calls {@link EventTarget#off} on all events the
   * first time it is triggered.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to be called once for each event name.
   */ any(type, fn) {
        // Remove the addEventListener aliasing Events.on
        // so we don't get into an infinite type loop
        const ael = this.addEventListener;
        this.addEventListener = ()=>{};
        $e88cd91ee18355c1$var$any(this, type, fn);
        this.addEventListener = ael;
    }
    /**
   * This function causes an event to happen. This will then cause any `event listeners`
   * that are waiting for that event, to get called. If there are no `event listeners`
   * for an event then nothing will happen.
   *
   * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
   * Trigger will also call the `on` + `uppercaseEventName` function.
   *
   * Example:
   * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
   * `onClick` if it exists.
   *
   * @param {string|EventTarget~Event|Object} event
   *        The name of the event, an `Event`, or an object with a key of type set to
   *        an event name.
   */ trigger(event) {
        const type = event.type || event;
        // deprecation
        // In a future version we should default target to `this`
        // similar to how we default the target to `elem` in
        // `Events.trigger`. Right now the default `target` will be
        // `document` due to the `Event.fixEvent` call.
        if (typeof event === "string") event = {
            type: type
        };
        event = $e88cd91ee18355c1$var$fixEvent(event);
        if (this.allowedEvents_[type] && this["on" + type]) this["on" + type](event);
        $e88cd91ee18355c1$var$trigger(this, event);
    }
    queueTrigger(event) {
        // only set up EVENT_MAP if it'll be used
        if (!$e88cd91ee18355c1$var$EVENT_MAP) $e88cd91ee18355c1$var$EVENT_MAP = new Map();
        const type = event.type || event;
        let map = $e88cd91ee18355c1$var$EVENT_MAP.get(this);
        if (!map) {
            map = new Map();
            $e88cd91ee18355c1$var$EVENT_MAP.set(this, map);
        }
        const oldTimeout = map.get(type);
        map.delete(type);
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(oldTimeout);
        const timeout = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(()=>{
            map.delete(type);
            // if we cleared out all timeouts for the current target, delete its map
            if (map.size === 0) {
                map = null;
                $e88cd91ee18355c1$var$EVENT_MAP.delete(this);
            }
            this.trigger(event);
        }, 0);
        map.set(type, timeout);
    }
}
/**
 * A Custom DOM event.
 *
 * @typedef {CustomEvent} Event
 * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}
 */ /**
 * All event listeners should follow the following format.
 *
 * @callback EventListener
 * @this {EventTarget}
 *
 * @param {Event} event
 *        the event that triggered this function
 *
 * @param {Object} [hash]
 *        hash of data sent during the event
 */ /**
 * An object containing event names as keys and booleans as values.
 *
 * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}
 *         will have extra functionality. See that function for more information.
 *
 * @property EventTarget.prototype.allowedEvents_
 * @protected
 */ $e88cd91ee18355c1$var$EventTarget$2.prototype.allowedEvents_ = {};
/**
 * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic
 * the standard DOM API.
 *
 * @function
 * @see {@link EventTarget#on}
 */ $e88cd91ee18355c1$var$EventTarget$2.prototype.addEventListener = $e88cd91ee18355c1$var$EventTarget$2.prototype.on;
/**
 * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic
 * the standard DOM API.
 *
 * @function
 * @see {@link EventTarget#off}
 */ $e88cd91ee18355c1$var$EventTarget$2.prototype.removeEventListener = $e88cd91ee18355c1$var$EventTarget$2.prototype.off;
/**
 * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic
 * the standard DOM API.
 *
 * @function
 * @see {@link EventTarget#trigger}
 */ $e88cd91ee18355c1$var$EventTarget$2.prototype.dispatchEvent = $e88cd91ee18355c1$var$EventTarget$2.prototype.trigger;
/**
 * @file mixins/evented.js
 * @module evented
 */ const $e88cd91ee18355c1$var$objName = (obj)=>{
    if (typeof obj.name === "function") return obj.name();
    if (typeof obj.name === "string") return obj.name;
    if (obj.name_) return obj.name_;
    if (obj.constructor && obj.constructor.name) return obj.constructor.name;
    return typeof obj;
};
/**
 * Returns whether or not an object has had the evented mixin applied.
 *
 * @param  {Object} object
 *         An object to test.
 *
 * @return {boolean}
 *         Whether or not the object appears to be evented.
 */ const $e88cd91ee18355c1$var$isEvented = (object)=>object instanceof $e88cd91ee18355c1$var$EventTarget$2 || !!object.eventBusEl_ && [
        "on",
        "one",
        "off",
        "trigger"
    ].every((k)=>typeof object[k] === "function");
/**
 * Adds a callback to run after the evented mixin applied.
 *
 * @param  {Object} target
 *         An object to Add
 * @param  {Function} callback
 *         The callback to run.
 */ const $e88cd91ee18355c1$var$addEventedCallback = (target, callback)=>{
    if ($e88cd91ee18355c1$var$isEvented(target)) callback();
    else {
        if (!target.eventedCallbacks) target.eventedCallbacks = [];
        target.eventedCallbacks.push(callback);
    }
};
/**
 * Whether a value is a valid event type - non-empty string or array.
 *
 * @private
 * @param  {string|Array} type
 *         The type value to test.
 *
 * @return {boolean}
 *         Whether or not the type is a valid event type.
 */ const $e88cd91ee18355c1$var$isValidEventType = (type)=>// The regex here verifies that the `type` contains at least one non-
    // whitespace character.
    typeof type === "string" && /\S/.test(type) || Array.isArray(type) && !!type.length;
/**
 * Validates a value to determine if it is a valid event target. Throws if not.
 *
 * @private
 * @throws {Error}
 *         If the target does not appear to be a valid event target.
 *
 * @param  {Object} target
 *         The object to test.
 *
 * @param  {Object} obj
 *         The evented object we are validating for
 *
 * @param  {string} fnName
 *         The name of the evented mixin function that called this.
 */ const $e88cd91ee18355c1$var$validateTarget = (target, obj, fnName)=>{
    if (!target || !target.nodeName && !$e88cd91ee18355c1$var$isEvented(target)) throw new Error(`Invalid target for ${$e88cd91ee18355c1$var$objName(obj)}#${fnName}; must be a DOM node or evented object.`);
};
/**
 * Validates a value to determine if it is a valid event target. Throws if not.
 *
 * @private
 * @throws {Error}
 *         If the type does not appear to be a valid event type.
 *
 * @param  {string|Array} type
 *         The type to test.
 *
 * @param  {Object} obj
*         The evented object we are validating for
 *
 * @param  {string} fnName
 *         The name of the evented mixin function that called this.
 */ const $e88cd91ee18355c1$var$validateEventType = (type, obj, fnName)=>{
    if (!$e88cd91ee18355c1$var$isValidEventType(type)) throw new Error(`Invalid event type for ${$e88cd91ee18355c1$var$objName(obj)}#${fnName}; must be a non-empty string or array.`);
};
/**
 * Validates a value to determine if it is a valid listener. Throws if not.
 *
 * @private
 * @throws {Error}
 *         If the listener is not a function.
 *
 * @param  {Function} listener
 *         The listener to test.
 *
 * @param  {Object} obj
 *         The evented object we are validating for
 *
 * @param  {string} fnName
 *         The name of the evented mixin function that called this.
 */ const $e88cd91ee18355c1$var$validateListener = (listener, obj, fnName)=>{
    if (typeof listener !== "function") throw new Error(`Invalid listener for ${$e88cd91ee18355c1$var$objName(obj)}#${fnName}; must be a function.`);
};
/**
 * Takes an array of arguments given to `on()` or `one()`, validates them, and
 * normalizes them into an object.
 *
 * @private
 * @param  {Object} self
 *         The evented object on which `on()` or `one()` was called. This
 *         object will be bound as the `this` value for the listener.
 *
 * @param  {Array} args
 *         An array of arguments passed to `on()` or `one()`.
 *
 * @param  {string} fnName
 *         The name of the evented mixin function that called this.
 *
 * @return {Object}
 *         An object containing useful values for `on()` or `one()` calls.
 */ const $e88cd91ee18355c1$var$normalizeListenArgs = (self1, args, fnName)=>{
    // If the number of arguments is less than 3, the target is always the
    // evented object itself.
    const isTargetingSelf = args.length < 3 || args[0] === self1 || args[0] === self1.eventBusEl_;
    let target;
    let type;
    let listener;
    if (isTargetingSelf) {
        target = self1.eventBusEl_;
        // Deal with cases where we got 3 arguments, but we are still listening to
        // the evented object itself.
        if (args.length >= 3) args.shift();
        [type, listener] = args;
    } else [target, type, listener] = args;
    $e88cd91ee18355c1$var$validateTarget(target, self1, fnName);
    $e88cd91ee18355c1$var$validateEventType(type, self1, fnName);
    $e88cd91ee18355c1$var$validateListener(listener, self1, fnName);
    listener = $e88cd91ee18355c1$var$bind_(self1, listener);
    return {
        isTargetingSelf: isTargetingSelf,
        target: target,
        type: type,
        listener: listener
    };
};
/**
 * Adds the listener to the event type(s) on the target, normalizing for
 * the type of target.
 *
 * @private
 * @param  {Element|Object} target
 *         A DOM node or evented object.
 *
 * @param  {string} method
 *         The event binding method to use ("on" or "one").
 *
 * @param  {string|Array} type
 *         One or more event type(s).
 *
 * @param  {Function} listener
 *         A listener function.
 */ const $e88cd91ee18355c1$var$listen = (target, method, type, listener)=>{
    $e88cd91ee18355c1$var$validateTarget(target, target, method);
    if (target.nodeName) $e88cd91ee18355c1$var$Events[method](target, type, listener);
    else target[method](type, listener);
};
/**
 * Contains methods that provide event capabilities to an object which is passed
 * to {@link module:evented|evented}.
 *
 * @mixin EventedMixin
 */ const $e88cd91ee18355c1$var$EventedMixin = {
    /**
   * Add a listener to an event (or events) on this object or another evented
   * object.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */ on (...args) {
        const { isTargetingSelf: isTargetingSelf, target: target, type: type, listener: listener } = $e88cd91ee18355c1$var$normalizeListenArgs(this, args, "on");
        $e88cd91ee18355c1$var$listen(target, "on", type, listener);
        // If this object is listening to another evented object.
        if (!isTargetingSelf) {
            // If this object is disposed, remove the listener.
            const removeListenerOnDispose = ()=>this.off(target, type, listener);
            // Use the same function ID as the listener so we can remove it later it
            // using the ID of the original listener.
            removeListenerOnDispose.guid = listener.guid;
            // Add a listener to the target's dispose event as well. This ensures
            // that if the target is disposed BEFORE this object, we remove the
            // removal listener that was just added. Otherwise, we create a memory leak.
            const removeRemoverOnTargetDispose = ()=>this.off("dispose", removeListenerOnDispose);
            // Use the same function ID as the listener so we can remove it later
            // it using the ID of the original listener.
            removeRemoverOnTargetDispose.guid = listener.guid;
            $e88cd91ee18355c1$var$listen(this, "on", "dispose", removeListenerOnDispose);
            $e88cd91ee18355c1$var$listen(target, "on", "dispose", removeRemoverOnTargetDispose);
        }
    },
    /**
   * Add a listener to an event (or events) on this object or another evented
   * object. The listener will be called once per event and then removed.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */ one (...args) {
        const { isTargetingSelf: isTargetingSelf, target: target, type: type, listener: listener } = $e88cd91ee18355c1$var$normalizeListenArgs(this, args, "one");
        // Targeting this evented object.
        if (isTargetingSelf) $e88cd91ee18355c1$var$listen(target, "one", type, listener);
        else {
            // TODO: This wrapper is incorrect! It should only
            //       remove the wrapper for the event type that called it.
            //       Instead all listeners are removed on the first trigger!
            //       see https://github.com/videojs/video.js/issues/5962
            const wrapper = (...largs)=>{
                this.off(target, type, wrapper);
                listener.apply(null, largs);
            };
            // Use the same function ID as the listener so we can remove it later
            // it using the ID of the original listener.
            wrapper.guid = listener.guid;
            $e88cd91ee18355c1$var$listen(target, "one", type, wrapper);
        }
    },
    /**
   * Add a listener to an event (or events) on this object or another evented
   * object. The listener will only be called once for the first event that is triggered
   * then removed.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */ any (...args) {
        const { isTargetingSelf: isTargetingSelf, target: target, type: type, listener: listener } = $e88cd91ee18355c1$var$normalizeListenArgs(this, args, "any");
        // Targeting this evented object.
        if (isTargetingSelf) $e88cd91ee18355c1$var$listen(target, "any", type, listener);
        else {
            const wrapper = (...largs)=>{
                this.off(target, type, wrapper);
                listener.apply(null, largs);
            };
            // Use the same function ID as the listener so we can remove it later
            // it using the ID of the original listener.
            wrapper.guid = listener.guid;
            $e88cd91ee18355c1$var$listen(target, "any", type, wrapper);
        }
    },
    /**
   * Removes listener(s) from event(s) on an evented object.
   *
   * @param  {string|Array|Element|Object} [targetOrType]
   *         If this is a string or array, it represents the event type(s).
   *
   *         Another evented object can be passed here instead, in which case
   *         ALL 3 arguments are _required_.
   *
   * @param  {string|Array|Function} [typeOrListener]
   *         If the first argument was a string or array, this may be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function; otherwise, _all_ listeners bound to the
   *         event type(s) will be removed.
   */ off (targetOrType, typeOrListener, listener) {
        // Targeting this evented object.
        if (!targetOrType || $e88cd91ee18355c1$var$isValidEventType(targetOrType)) $e88cd91ee18355c1$var$off(this.eventBusEl_, targetOrType, typeOrListener);
        else {
            const target = targetOrType;
            const type = typeOrListener;
            // Fail fast and in a meaningful way!
            $e88cd91ee18355c1$var$validateTarget(target, this, "off");
            $e88cd91ee18355c1$var$validateEventType(type, this, "off");
            $e88cd91ee18355c1$var$validateListener(listener, this, "off");
            // Ensure there's at least a guid, even if the function hasn't been used
            listener = $e88cd91ee18355c1$var$bind_(this, listener);
            // Remove the dispose listener on this evented object, which was given
            // the same guid as the event listener in on().
            this.off("dispose", listener);
            if (target.nodeName) {
                $e88cd91ee18355c1$var$off(target, type, listener);
                $e88cd91ee18355c1$var$off(target, "dispose", listener);
            } else if ($e88cd91ee18355c1$var$isEvented(target)) {
                target.off(type, listener);
                target.off("dispose", listener);
            }
        }
    },
    /**
   * Fire an event on this evented object, causing its listeners to be called.
   *
   * @param   {string|Object} event
   *          An event type or an object with a type property.
   *
   * @param   {Object} [hash]
   *          An additional object to pass along to listeners.
   *
   * @return {boolean}
   *          Whether or not the default behavior was prevented.
   */ trigger (event, hash) {
        $e88cd91ee18355c1$var$validateTarget(this.eventBusEl_, this, "trigger");
        const type = event && typeof event !== "string" ? event.type : event;
        if (!$e88cd91ee18355c1$var$isValidEventType(type)) throw new Error(`Invalid event type for ${$e88cd91ee18355c1$var$objName(this)}#trigger; ` + "must be a non-empty string or object with a type key that has a non-empty value.");
        return $e88cd91ee18355c1$var$trigger(this.eventBusEl_, event, hash);
    }
};
/**
 * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.
 *
 * @param  {Object} target
 *         The object to which to add event methods.
 *
 * @param  {Object} [options={}]
 *         Options for customizing the mixin behavior.
 *
 * @param  {string} [options.eventBusKey]
 *         By default, adds a `eventBusEl_` DOM element to the target object,
 *         which is used as an event bus. If the target object already has a
 *         DOM element that should be used, pass its key here.
 *
 * @return {Object}
 *         The target object.
 */ function $e88cd91ee18355c1$var$evented(target, options = {}) {
    const { eventBusKey: eventBusKey } = options;
    // Set or create the eventBusEl_.
    if (eventBusKey) {
        if (!target[eventBusKey].nodeName) throw new Error(`The eventBusKey "${eventBusKey}" does not refer to an element.`);
        target.eventBusEl_ = target[eventBusKey];
    } else target.eventBusEl_ = $e88cd91ee18355c1$var$createEl("span", {
        className: "vjs-event-bus"
    });
    Object.assign(target, $e88cd91ee18355c1$var$EventedMixin);
    if (target.eventedCallbacks) target.eventedCallbacks.forEach((callback)=>{
        callback();
    });
    // When any evented object is disposed, it removes all its listeners.
    target.on("dispose", ()=>{
        target.off();
        [
            target,
            target.el_,
            target.eventBusEl_
        ].forEach(function(val) {
            if (val && $e88cd91ee18355c1$var$DomData.has(val)) $e88cd91ee18355c1$var$DomData.delete(val);
        });
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(()=>{
            target.eventBusEl_ = null;
        }, 0);
    });
    return target;
}
/**
 * @file mixins/stateful.js
 * @module stateful
 */ /**
 * Contains methods that provide statefulness to an object which is passed
 * to {@link module:stateful}.
 *
 * @mixin StatefulMixin
 */ const $e88cd91ee18355c1$var$StatefulMixin = {
    /**
   * A hash containing arbitrary keys and values representing the state of
   * the object.
   *
   * @type {Object}
   */ state: {},
    /**
   * Set the state of an object by mutating its
   * {@link module:stateful~StatefulMixin.state|state} object in place.
   *
   * @fires   module:stateful~StatefulMixin#statechanged
   * @param   {Object|Function} stateUpdates
   *          A new set of properties to shallow-merge into the plugin state.
   *          Can be a plain object or a function returning a plain object.
   *
   * @return {Object|undefined}
   *          An object containing changes that occurred. If no changes
   *          occurred, returns `undefined`.
   */ setState (stateUpdates) {
        // Support providing the `stateUpdates` state as a function.
        if (typeof stateUpdates === "function") stateUpdates = stateUpdates();
        let changes;
        $e88cd91ee18355c1$var$each(stateUpdates, (value, key)=>{
            // Record the change if the value is different from what's in the
            // current state.
            if (this.state[key] !== value) {
                changes = changes || {};
                changes[key] = {
                    from: this.state[key],
                    to: value
                };
            }
            this.state[key] = value;
        });
        // Only trigger "statechange" if there were changes AND we have a trigger
        // function. This allows us to not require that the target object be an
        // evented object.
        if (changes && $e88cd91ee18355c1$var$isEvented(this)) /**
       * An event triggered on an object that is both
       * {@link module:stateful|stateful} and {@link module:evented|evented}
       * indicating that its state has changed.
       *
       * @event    module:stateful~StatefulMixin#statechanged
       * @type     {Object}
       * @property {Object} changes
       *           A hash containing the properties that were changed and
       *           the values they were changed `from` and `to`.
       */ this.trigger({
            changes: changes,
            type: "statechanged"
        });
        return changes;
    }
};
/**
 * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target
 * object.
 *
 * If the target object is {@link module:evented|evented} and has a
 * `handleStateChanged` method, that method will be automatically bound to the
 * `statechanged` event on itself.
 *
 * @param   {Object} target
 *          The object to be made stateful.
 *
 * @param   {Object} [defaultState]
 *          A default set of properties to populate the newly-stateful object's
 *          `state` property.
 *
 * @return {Object}
 *          Returns the `target`.
 */ function $e88cd91ee18355c1$var$stateful(target, defaultState) {
    Object.assign(target, $e88cd91ee18355c1$var$StatefulMixin);
    // This happens after the mixing-in because we need to replace the `state`
    // added in that step.
    target.state = Object.assign({}, target.state, defaultState);
    // Auto-bind the `handleStateChanged` method of the target object if it exists.
    if (typeof target.handleStateChanged === "function" && $e88cd91ee18355c1$var$isEvented(target)) target.on("statechanged", target.handleStateChanged);
    return target;
}
/**
 * @file str.js
 * @module to-lower-case
 */ /**
 * Lowercase the first letter of a string.
 *
 * @param {string} string
 *        String to be lowercased
 *
 * @return {string}
 *         The string with a lowercased first letter
 */ const $e88cd91ee18355c1$var$toLowerCase = function(string) {
    if (typeof string !== "string") return string;
    return string.replace(/./, (w)=>w.toLowerCase());
};
/**
 * Uppercase the first letter of a string.
 *
 * @param {string} string
 *        String to be uppercased
 *
 * @return {string}
 *         The string with an uppercased first letter
 */ const $e88cd91ee18355c1$var$toTitleCase$1 = function(string) {
    if (typeof string !== "string") return string;
    return string.replace(/./, (w)=>w.toUpperCase());
};
/**
 * Compares the TitleCase versions of the two strings for equality.
 *
 * @param {string} str1
 *        The first string to compare
 *
 * @param {string} str2
 *        The second string to compare
 *
 * @return {boolean}
 *         Whether the TitleCase versions of the strings are equal
 */ const $e88cd91ee18355c1$var$titleCaseEquals = function(str1, str2) {
    return $e88cd91ee18355c1$var$toTitleCase$1(str1) === $e88cd91ee18355c1$var$toTitleCase$1(str2);
};
var $e88cd91ee18355c1$var$Str = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    toLowerCase: $e88cd91ee18355c1$var$toLowerCase,
    toTitleCase: $e88cd91ee18355c1$var$toTitleCase$1,
    titleCaseEquals: $e88cd91ee18355c1$var$titleCaseEquals
});
/**
 * Player Component - Base class for all UI objects
 *
 * @file component.js
 */ /**
 * Base class for all UI Components.
 * Components are UI objects which represent both a javascript object and an element
 * in the DOM. They can be children of other components, and can have
 * children themselves.
 *
 * Components can also use methods from {@link EventTarget}
 */ class $e88cd91ee18355c1$var$Component$1 {
    /**
   * A callback that is called when a component is ready. Does not have any
   * parameters and any callback value will be ignored.
   *
   * @callback ReadyCallback
   * @this Component
   */ /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of component options.
   *
   * @param {Object[]} [options.children]
   *        An array of children objects to initialize this component with. Children objects have
   *        a name property that will be used if more than one component of the same type needs to be
   *        added.
   *
   * @param  {string} [options.className]
   *         A class or space separated list of classes to add the component
   *
   * @param {ReadyCallback} [ready]
   *        Function that gets called when the `Component` is ready.
   */ constructor(player, options, ready){
        // The component might be the player itself and we can't pass `this` to super
        if (!player && this.play) this.player_ = player = this; // eslint-disable-line
        else this.player_ = player;
        this.isDisposed_ = false;
        // Hold the reference to the parent component via `addChild` method
        this.parentComponent_ = null;
        // Make a copy of prototype.options_ to protect against overriding defaults
        this.options_ = $e88cd91ee18355c1$var$merge$1({}, this.options_);
        // Updated options with supplied options
        options = this.options_ = $e88cd91ee18355c1$var$merge$1(this.options_, options);
        // Get ID from options or options element if one is supplied
        this.id_ = options.id || options.el && options.el.id;
        // If there was no ID from the options, generate one
        if (!this.id_) {
            // Don't require the player ID function in the case of mock players
            const id = player && player.id && player.id() || "no_player";
            this.id_ = `${id}_component_${$e88cd91ee18355c1$var$newGUID()}`;
        }
        this.name_ = options.name || null;
        // Create element if one wasn't provided in options
        if (options.el) this.el_ = options.el;
        else if (options.createEl !== false) this.el_ = this.createEl();
        if (options.className && this.el_) options.className.split(" ").forEach((c)=>this.addClass(c));
        // Remove the placeholder event methods. If the component is evented, the
        // real methods are added next
        [
            "on",
            "off",
            "one",
            "any",
            "trigger"
        ].forEach((fn)=>{
            this[fn] = undefined;
        });
        // if evented is anything except false, we want to mixin in evented
        if (options.evented !== false) {
            // Make this an evented object and use `el_`, if available, as its event bus
            $e88cd91ee18355c1$var$evented(this, {
                eventBusKey: this.el_ ? "el_" : null
            });
            this.handleLanguagechange = this.handleLanguagechange.bind(this);
            this.on(this.player_, "languagechange", this.handleLanguagechange);
        }
        $e88cd91ee18355c1$var$stateful(this, this.constructor.defaultState);
        this.children_ = [];
        this.childIndex_ = {};
        this.childNameIndex_ = {};
        this.setTimeoutIds_ = new Set();
        this.setIntervalIds_ = new Set();
        this.rafIds_ = new Set();
        this.namedRafs_ = new Map();
        this.clearingTimersOnDispose_ = false;
        // Add any child components in options
        if (options.initChildren !== false) this.initChildren();
        // Don't want to trigger ready here or it will go before init is actually
        // finished for all children that run this constructor
        this.ready(ready);
        if (options.reportTouchActivity !== false) this.enableTouchActivity();
    }
    // `on`, `off`, `one`, `any` and `trigger` are here so tsc includes them in definitions.
    // They are replaced or removed in the constructor
    /**
   * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
   * function that will get called when an event with a certain name gets triggered.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to call with `EventTarget`s
   */ on(type, fn) {}
    /**
   * Removes an `event listener` for a specific event from an instance of `EventTarget`.
   * This makes it so that the `event listener` will no longer get called when the
   * named event happens.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} [fn]
   *        The function to remove. If not specified, all listeners managed by Video.js will be removed.
   */ off(type, fn) {}
    /**
   * This function will add an `event listener` that gets triggered only once. After the
   * first trigger it will get removed. This is like adding an `event listener`
   * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to be called once for each event name.
   */ one(type, fn) {}
    /**
   * This function will add an `event listener` that gets triggered only once and is
   * removed from all events. This is like adding an array of `event listener`s
   * with {@link EventTarget#on} that calls {@link EventTarget#off} on all events the
   * first time it is triggered.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to be called once for each event name.
   */ any(type, fn) {}
    /**
   * This function causes an event to happen. This will then cause any `event listeners`
   * that are waiting for that event, to get called. If there are no `event listeners`
   * for an event then nothing will happen.
   *
   * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
   * Trigger will also call the `on` + `uppercaseEventName` function.
   *
   * Example:
   * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
   * `onClick` if it exists.
   *
   * @param {string|Event|Object} event
   *        The name of the event, an `Event`, or an object with a key of type set to
   *        an event name.
   *
   * @param {Object} [hash]
   *        Optionally extra argument to pass through to an event listener
   */ trigger(event, hash) {}
    /**
   * Dispose of the `Component` and all child components.
   *
   * @fires Component#dispose
   *
   * @param {Object} options
   * @param {Element} options.originalEl element with which to replace player element
   */ dispose(options = {}) {
        // Bail out if the component has already been disposed.
        if (this.isDisposed_) return;
        if (this.readyQueue_) this.readyQueue_.length = 0;
        /**
     * Triggered when a `Component` is disposed.
     *
     * @event Component#dispose
     * @type {Event}
     *
     * @property {boolean} [bubbles=false]
     *           set to false so that the dispose event does not
     *           bubble up
     */ this.trigger({
            type: "dispose",
            bubbles: false
        });
        this.isDisposed_ = true;
        // Dispose all children.
        if (this.children_) {
            for(let i = this.children_.length - 1; i >= 0; i--)if (this.children_[i].dispose) this.children_[i].dispose();
        }
        // Delete child references
        this.children_ = null;
        this.childIndex_ = null;
        this.childNameIndex_ = null;
        this.parentComponent_ = null;
        if (this.el_) {
            // Remove element from DOM
            if (this.el_.parentNode) {
                if (options.restoreEl) this.el_.parentNode.replaceChild(options.restoreEl, this.el_);
                else this.el_.parentNode.removeChild(this.el_);
            }
            this.el_ = null;
        }
        // remove reference to the player after disposing of the element
        this.player_ = null;
    }
    /**
   * Determine whether or not this component has been disposed.
   *
   * @return {boolean}
   *         If the component has been disposed, will be `true`. Otherwise, `false`.
   */ isDisposed() {
        return Boolean(this.isDisposed_);
    }
    /**
   * Return the {@link Player} that the `Component` has attached to.
   *
   * @return { import('./player').default }
   *         The player that this `Component` has attached to.
   */ player() {
        return this.player_;
    }
    /**
   * Deep merge of options objects with new options.
   * > Note: When both `obj` and `options` contain properties whose values are objects.
   *         The two properties get merged using {@link module:obj.merge}
   *
   * @param {Object} obj
   *        The object that contains new options.
   *
   * @return {Object}
   *         A new object of `this.options_` and `obj` merged together.
   */ options(obj) {
        if (!obj) return this.options_;
        this.options_ = $e88cd91ee18355c1$var$merge$1(this.options_, obj);
        return this.options_;
    }
    /**
   * Get the `Component`s DOM element
   *
   * @return {Element}
   *         The DOM element for this `Component`.
   */ el() {
        return this.el_;
    }
    /**
   * Create the `Component`s DOM element.
   *
   * @param {string} [tagName]
   *        Element's DOM node type. e.g. 'div'
   *
   * @param {Object} [properties]
   *        An object of properties that should be set.
   *
   * @param {Object} [attributes]
   *        An object of attributes that should be set.
   *
   * @return {Element}
   *         The element that gets created.
   */ createEl(tagName, properties, attributes) {
        return $e88cd91ee18355c1$var$createEl(tagName, properties, attributes);
    }
    /**
   * Localize a string given the string in english.
   *
   * If tokens are provided, it'll try and run a simple token replacement on the provided string.
   * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.
   *
   * If a `defaultValue` is provided, it'll use that over `string`,
   * if a value isn't found in provided language files.
   * This is useful if you want to have a descriptive key for token replacement
   * but have a succinct localized string and not require `en.json` to be included.
   *
   * Currently, it is used for the progress bar timing.
   * ```js
   * {
   *   "progress bar timing: currentTime={1} duration={2}": "{1} of {2}"
   * }
   * ```
   * It is then used like so:
   * ```js
   * this.localize('progress bar timing: currentTime={1} duration{2}',
   *               [this.player_.currentTime(), this.player_.duration()],
   *               '{1} of {2}');
   * ```
   *
   * Which outputs something like: `01:23 of 24:56`.
   *
   *
   * @param {string} string
   *        The string to localize and the key to lookup in the language files.
   * @param {string[]} [tokens]
   *        If the current item has token replacements, provide the tokens here.
   * @param {string} [defaultValue]
   *        Defaults to `string`. Can be a default value to use for token replacement
   *        if the lookup key is needed to be separate.
   *
   * @return {string}
   *         The localized string or if no localization exists the english string.
   */ localize(string, tokens, defaultValue = string) {
        const code = this.player_.language && this.player_.language();
        const languages = this.player_.languages && this.player_.languages();
        const language = languages && languages[code];
        const primaryCode = code && code.split("-")[0];
        const primaryLang = languages && languages[primaryCode];
        let localizedString = defaultValue;
        if (language && language[string]) localizedString = language[string];
        else if (primaryLang && primaryLang[string]) localizedString = primaryLang[string];
        if (tokens) localizedString = localizedString.replace(/\{(\d+)\}/g, function(match, index) {
            const value = tokens[index - 1];
            let ret = value;
            if (typeof value === "undefined") ret = match;
            return ret;
        });
        return localizedString;
    }
    /**
   * Handles language change for the player in components. Should be overridden by sub-components.
   *
   * @abstract
   */ handleLanguagechange() {}
    /**
   * Return the `Component`s DOM element. This is where children get inserted.
   * This will usually be the the same as the element returned in {@link Component#el}.
   *
   * @return {Element}
   *         The content element for this `Component`.
   */ contentEl() {
        return this.contentEl_ || this.el_;
    }
    /**
   * Get this `Component`s ID
   *
   * @return {string}
   *         The id of this `Component`
   */ id() {
        return this.id_;
    }
    /**
   * Get the `Component`s name. The name gets used to reference the `Component`
   * and is set during registration.
   *
   * @return {string}
   *         The name of this `Component`.
   */ name() {
        return this.name_;
    }
    /**
   * Get an array of all child components
   *
   * @return {Array}
   *         The children
   */ children() {
        return this.children_;
    }
    /**
   * Returns the child `Component` with the given `id`.
   *
   * @param {string} id
   *        The id of the child `Component` to get.
   *
   * @return {Component|undefined}
   *         The child `Component` with the given `id` or undefined.
   */ getChildById(id) {
        return this.childIndex_[id];
    }
    /**
   * Returns the child `Component` with the given `name`.
   *
   * @param {string} name
   *        The name of the child `Component` to get.
   *
   * @return {Component|undefined}
   *         The child `Component` with the given `name` or undefined.
   */ getChild(name) {
        if (!name) return;
        return this.childNameIndex_[name];
    }
    /**
   * Returns the descendant `Component` following the givent
   * descendant `names`. For instance ['foo', 'bar', 'baz'] would
   * try to get 'foo' on the current component, 'bar' on the 'foo'
   * component and 'baz' on the 'bar' component and return undefined
   * if any of those don't exist.
   *
   * @param {...string[]|...string} names
   *        The name of the child `Component` to get.
   *
   * @return {Component|undefined}
   *         The descendant `Component` following the given descendant
   *         `names` or undefined.
   */ getDescendant(...names) {
        // flatten array argument into the main array
        names = names.reduce((acc, n)=>acc.concat(n), []);
        let currentChild = this;
        for(let i = 0; i < names.length; i++){
            currentChild = currentChild.getChild(names[i]);
            if (!currentChild || !currentChild.getChild) return;
        }
        return currentChild;
    }
    /**
   * Adds an SVG icon element to another element or component.
   *
   * @param {string} iconName
   *        The name of icon. A list of all the icon names can be found at 'sandbox/svg-icons.html'
   *
   * @param {Element} [el=this.el()]
   *        Element to set the title on. Defaults to the current Component's element.
   *
   * @return {Element}
   *        The newly created icon element.
   */ setIcon(iconName, el = this.el()) {
        // TODO: In v9 of video.js, we will want to remove font icons entirely.
        // This means this check, as well as the others throughout the code, and
        // the unecessary CSS for font icons, will need to be removed.
        // See https://github.com/videojs/video.js/pull/8260 as to which components
        // need updating.
        if (!this.player_.options_.experimentalSvgIcons) return;
        const xmlnsURL = "http://www.w3.org/2000/svg";
        // The below creates an element in the format of:
        // <span><svg><use>....</use></svg></span>
        const iconContainer = $e88cd91ee18355c1$var$createEl("span", {
            className: "vjs-icon-placeholder vjs-svg-icon"
        }, {
            "aria-hidden": "true"
        });
        const svgEl = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElementNS(xmlnsURL, "svg");
        svgEl.setAttributeNS(null, "viewBox", "0 0 512 512");
        const useEl = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElementNS(xmlnsURL, "use");
        svgEl.appendChild(useEl);
        useEl.setAttributeNS(null, "href", `#vjs-icon-${iconName}`);
        iconContainer.appendChild(svgEl);
        // Replace a pre-existing icon if one exists.
        if (this.iconIsSet_) el.replaceChild(iconContainer, el.querySelector(".vjs-icon-placeholder"));
        else el.appendChild(iconContainer);
        this.iconIsSet_ = true;
        return iconContainer;
    }
    /**
   * Add a child `Component` inside the current `Component`.
   *
   * @param {string|Component} child
   *        The name or instance of a child to add.
   *
   * @param {Object} [options={}]
   *        The key/value store of options that will get passed to children of
   *        the child.
   *
   * @param {number} [index=this.children_.length]
   *        The index to attempt to add a child into.
   *
   *
   * @return {Component}
   *         The `Component` that gets added as a child. When using a string the
   *         `Component` will get created by this process.
   */ addChild(child, options = {}, index = this.children_.length) {
        let component;
        let componentName;
        // If child is a string, create component with options
        if (typeof child === "string") {
            componentName = $e88cd91ee18355c1$var$toTitleCase$1(child);
            const componentClassName = options.componentClass || componentName;
            // Set name through options
            options.name = componentName;
            // Create a new object & element for this controls set
            // If there's no .player_, this is a player
            const ComponentClass = $e88cd91ee18355c1$var$Component$1.getComponent(componentClassName);
            if (!ComponentClass) throw new Error(`Component ${componentClassName} does not exist`);
            // data stored directly on the videojs object may be
            // misidentified as a component to retain
            // backwards-compatibility with 4.x. check to make sure the
            // component class can be instantiated.
            if (typeof ComponentClass !== "function") return null;
            component = new ComponentClass(this.player_ || this, options);
        // child is a component instance
        } else component = child;
        if (component.parentComponent_) component.parentComponent_.removeChild(component);
        this.children_.splice(index, 0, component);
        component.parentComponent_ = this;
        if (typeof component.id === "function") this.childIndex_[component.id()] = component;
        // If a name wasn't used to create the component, check if we can use the
        // name function of the component
        componentName = componentName || component.name && $e88cd91ee18355c1$var$toTitleCase$1(component.name());
        if (componentName) {
            this.childNameIndex_[componentName] = component;
            this.childNameIndex_[$e88cd91ee18355c1$var$toLowerCase(componentName)] = component;
        }
        // Add the UI object's element to the container div (box)
        // Having an element is not required
        if (typeof component.el === "function" && component.el()) {
            // If inserting before a component, insert before that component's element
            let refNode = null;
            if (this.children_[index + 1]) {
                // Most children are components, but the video tech is an HTML element
                if (this.children_[index + 1].el_) refNode = this.children_[index + 1].el_;
                else if ($e88cd91ee18355c1$var$isEl(this.children_[index + 1])) refNode = this.children_[index + 1];
            }
            this.contentEl().insertBefore(component.el(), refNode);
        }
        // Return so it can stored on parent object if desired.
        return component;
    }
    /**
   * Remove a child `Component` from this `Component`s list of children. Also removes
   * the child `Component`s element from this `Component`s element.
   *
   * @param {Component} component
   *        The child `Component` to remove.
   */ removeChild(component) {
        if (typeof component === "string") component = this.getChild(component);
        if (!component || !this.children_) return;
        let childFound = false;
        for(let i = this.children_.length - 1; i >= 0; i--)if (this.children_[i] === component) {
            childFound = true;
            this.children_.splice(i, 1);
            break;
        }
        if (!childFound) return;
        component.parentComponent_ = null;
        this.childIndex_[component.id()] = null;
        this.childNameIndex_[$e88cd91ee18355c1$var$toTitleCase$1(component.name())] = null;
        this.childNameIndex_[$e88cd91ee18355c1$var$toLowerCase(component.name())] = null;
        const compEl = component.el();
        if (compEl && compEl.parentNode === this.contentEl()) this.contentEl().removeChild(component.el());
    }
    /**
   * Add and initialize default child `Component`s based upon options.
   */ initChildren() {
        const children = this.options_.children;
        if (children) {
            // `this` is `parent`
            const parentOptions = this.options_;
            const handleAdd = (child)=>{
                const name = child.name;
                let opts = child.opts;
                // Allow options for children to be set at the parent options
                // e.g. videojs(id, { controlBar: false });
                // instead of videojs(id, { children: { controlBar: false });
                if (parentOptions[name] !== undefined) opts = parentOptions[name];
                // Allow for disabling default components
                // e.g. options['children']['posterImage'] = false
                if (opts === false) return;
                // Allow options to be passed as a simple boolean if no configuration
                // is necessary.
                if (opts === true) opts = {};
                // We also want to pass the original player options
                // to each component as well so they don't need to
                // reach back into the player for options later.
                opts.playerOptions = this.options_.playerOptions;
                // Create and add the child component.
                // Add a direct reference to the child by name on the parent instance.
                // If two of the same component are used, different names should be supplied
                // for each
                const newChild = this.addChild(name, opts);
                if (newChild) this[name] = newChild;
            };
            // Allow for an array of children details to passed in the options
            let workingChildren;
            const Tech = $e88cd91ee18355c1$var$Component$1.getComponent("Tech");
            if (Array.isArray(children)) workingChildren = children;
            else workingChildren = Object.keys(children);
            workingChildren// children that are in this.options_ but also in workingChildren  would
            // give us extra children we do not want. So, we want to filter them out.
            .concat(Object.keys(this.options_).filter(function(child) {
                return !workingChildren.some(function(wchild) {
                    if (typeof wchild === "string") return child === wchild;
                    return child === wchild.name;
                });
            })).map((child)=>{
                let name;
                let opts;
                if (typeof child === "string") {
                    name = child;
                    opts = children[name] || this.options_[name] || {};
                } else {
                    name = child.name;
                    opts = child;
                }
                return {
                    name: name,
                    opts: opts
                };
            }).filter((child)=>{
                // we have to make sure that child.name isn't in the techOrder since
                // techs are registered as Components but can't aren't compatible
                // See https://github.com/videojs/video.js/issues/2772
                const c = $e88cd91ee18355c1$var$Component$1.getComponent(child.opts.componentClass || $e88cd91ee18355c1$var$toTitleCase$1(child.name));
                return c && !Tech.isTech(c);
            }).forEach(handleAdd);
        }
    }
    /**
   * Builds the default DOM class name. Should be overridden by sub-components.
   *
   * @return {string}
   *         The DOM class name for this object.
   *
   * @abstract
   */ buildCSSClass() {
        // Child classes can include a function that does:
        // return 'CLASS NAME' + this._super();
        return "";
    }
    /**
   * Bind a listener to the component's ready state.
   * Different from event listeners in that if the ready event has already happened
   * it will trigger the function immediately.
   *
   * @param {ReadyCallback} fn
   *        Function that gets called when the `Component` is ready.
   *
   * @return {Component}
   *         Returns itself; method can be chained.
   */ ready(fn, sync = false) {
        if (!fn) return;
        if (!this.isReady_) {
            this.readyQueue_ = this.readyQueue_ || [];
            this.readyQueue_.push(fn);
            return;
        }
        if (sync) fn.call(this);
        else // Call the function asynchronously by default for consistency
        this.setTimeout(fn, 1);
    }
    /**
   * Trigger all the ready listeners for this `Component`.
   *
   * @fires Component#ready
   */ triggerReady() {
        this.isReady_ = true;
        // Ensure ready is triggered asynchronously
        this.setTimeout(function() {
            const readyQueue = this.readyQueue_;
            // Reset Ready Queue
            this.readyQueue_ = [];
            if (readyQueue && readyQueue.length > 0) readyQueue.forEach(function(fn) {
                fn.call(this);
            }, this);
            // Allow for using event listeners also
            /**
       * Triggered when a `Component` is ready.
       *
       * @event Component#ready
       * @type {Event}
       */ this.trigger("ready");
        }, 1);
    }
    /**
   * Find a single DOM element matching a `selector`. This can be within the `Component`s
   * `contentEl()` or another custom context.
   *
   * @param {string} selector
   *        A valid CSS selector, which will be passed to `querySelector`.
   *
   * @param {Element|string} [context=this.contentEl()]
   *        A DOM element within which to query. Can also be a selector string in
   *        which case the first matching element will get used as context. If
   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
   *        nothing it falls back to `document`.
   *
   * @return {Element|null}
   *         the dom element that was found, or null
   *
   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
   */ $(selector, context) {
        return $e88cd91ee18355c1$var$$(selector, context || this.contentEl());
    }
    /**
   * Finds all DOM element matching a `selector`. This can be within the `Component`s
   * `contentEl()` or another custom context.
   *
   * @param {string} selector
   *        A valid CSS selector, which will be passed to `querySelectorAll`.
   *
   * @param {Element|string} [context=this.contentEl()]
   *        A DOM element within which to query. Can also be a selector string in
   *        which case the first matching element will get used as context. If
   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
   *        nothing it falls back to `document`.
   *
   * @return {NodeList}
   *         a list of dom elements that were found
   *
   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
   */ $$(selector, context) {
        return $e88cd91ee18355c1$var$$$(selector, context || this.contentEl());
    }
    /**
   * Check if a component's element has a CSS class name.
   *
   * @param {string} classToCheck
   *        CSS class name to check.
   *
   * @return {boolean}
   *         - True if the `Component` has the class.
   *         - False if the `Component` does not have the class`
   */ hasClass(classToCheck) {
        return $e88cd91ee18355c1$var$hasClass(this.el_, classToCheck);
    }
    /**
   * Add a CSS class name to the `Component`s element.
   *
   * @param {...string} classesToAdd
   *        One or more CSS class name to add.
   */ addClass(...classesToAdd) {
        $e88cd91ee18355c1$var$addClass(this.el_, ...classesToAdd);
    }
    /**
   * Remove a CSS class name from the `Component`s element.
   *
   * @param {...string} classesToRemove
   *        One or more CSS class name to remove.
   */ removeClass(...classesToRemove) {
        $e88cd91ee18355c1$var$removeClass(this.el_, ...classesToRemove);
    }
    /**
   * Add or remove a CSS class name from the component's element.
   * - `classToToggle` gets added when {@link Component#hasClass} would return false.
   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.
   *
   * @param  {string} classToToggle
   *         The class to add or remove based on (@link Component#hasClass}
   *
   * @param  {boolean|Dom~predicate} [predicate]
   *         An {@link Dom~predicate} function or a boolean
   */ toggleClass(classToToggle, predicate) {
        $e88cd91ee18355c1$var$toggleClass(this.el_, classToToggle, predicate);
    }
    /**
   * Show the `Component`s element if it is hidden by removing the
   * 'vjs-hidden' class name from it.
   */ show() {
        this.removeClass("vjs-hidden");
    }
    /**
   * Hide the `Component`s element if it is currently showing by adding the
   * 'vjs-hidden` class name to it.
   */ hide() {
        this.addClass("vjs-hidden");
    }
    /**
   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'
   * class name to it. Used during fadeIn/fadeOut.
   *
   * @private
   */ lockShowing() {
        this.addClass("vjs-lock-showing");
    }
    /**
   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'
   * class name from it. Used during fadeIn/fadeOut.
   *
   * @private
   */ unlockShowing() {
        this.removeClass("vjs-lock-showing");
    }
    /**
   * Get the value of an attribute on the `Component`s element.
   *
   * @param {string} attribute
   *        Name of the attribute to get the value from.
   *
   * @return {string|null}
   *         - The value of the attribute that was asked for.
   *         - Can be an empty string on some browsers if the attribute does not exist
   *           or has no value
   *         - Most browsers will return null if the attribute does not exist or has
   *           no value.
   *
   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}
   */ getAttribute(attribute) {
        return $e88cd91ee18355c1$var$getAttribute(this.el_, attribute);
    }
    /**
   * Set the value of an attribute on the `Component`'s element
   *
   * @param {string} attribute
   *        Name of the attribute to set.
   *
   * @param {string} value
   *        Value to set the attribute to.
   *
   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}
   */ setAttribute(attribute, value) {
        $e88cd91ee18355c1$var$setAttribute(this.el_, attribute, value);
    }
    /**
   * Remove an attribute from the `Component`s element.
   *
   * @param {string} attribute
   *        Name of the attribute to remove.
   *
   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}
   */ removeAttribute(attribute) {
        $e88cd91ee18355c1$var$removeAttribute(this.el_, attribute);
    }
    /**
   * Get or set the width of the component based upon the CSS styles.
   * See {@link Component#dimension} for more detailed information.
   *
   * @param {number|string} [num]
   *        The width that you want to set postfixed with '%', 'px' or nothing.
   *
   * @param {boolean} [skipListeners]
   *        Skip the componentresize event trigger
   *
   * @return {number|undefined}
   *         The width when getting, zero if there is no width
   */ width(num, skipListeners) {
        return this.dimension("width", num, skipListeners);
    }
    /**
   * Get or set the height of the component based upon the CSS styles.
   * See {@link Component#dimension} for more detailed information.
   *
   * @param {number|string} [num]
   *        The height that you want to set postfixed with '%', 'px' or nothing.
   *
   * @param {boolean} [skipListeners]
   *        Skip the componentresize event trigger
   *
   * @return {number|undefined}
   *         The height when getting, zero if there is no height
   */ height(num, skipListeners) {
        return this.dimension("height", num, skipListeners);
    }
    /**
   * Set both the width and height of the `Component` element at the same time.
   *
   * @param  {number|string} width
   *         Width to set the `Component`s element to.
   *
   * @param  {number|string} height
   *         Height to set the `Component`s element to.
   */ dimensions(width, height) {
        // Skip componentresize listeners on width for optimization
        this.width(width, true);
        this.height(height);
    }
    /**
   * Get or set width or height of the `Component` element. This is the shared code
   * for the {@link Component#width} and {@link Component#height}.
   *
   * Things to know:
   * - If the width or height in an number this will return the number postfixed with 'px'.
   * - If the width/height is a percent this will return the percent postfixed with '%'
   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function
   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.
   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}
   *   for more information
   * - If you want the computed style of the component, use {@link Component#currentWidth}
   *   and {@link {Component#currentHeight}
   *
   * @fires Component#componentresize
   *
   * @param {string} widthOrHeight
   8        'width' or 'height'
   *
   * @param  {number|string} [num]
   8         New dimension
   *
   * @param  {boolean} [skipListeners]
   *         Skip componentresize event trigger
   *
   * @return {number|undefined}
   *         The dimension when getting or 0 if unset
   */ dimension(widthOrHeight, num, skipListeners) {
        if (num !== undefined) {
            // Set to zero if null or literally NaN (NaN !== NaN)
            if (num === null || num !== num) num = 0;
            // Check if using css width/height (% or px) and adjust
            if (("" + num).indexOf("%") !== -1 || ("" + num).indexOf("px") !== -1) this.el_.style[widthOrHeight] = num;
            else if (num === "auto") this.el_.style[widthOrHeight] = "";
            else this.el_.style[widthOrHeight] = num + "px";
            // skipListeners allows us to avoid triggering the resize event when setting both width and height
            if (!skipListeners) /**
         * Triggered when a component is resized.
         *
         * @event Component#componentresize
         * @type {Event}
         */ this.trigger("componentresize");
            return;
        }
        // Not setting a value, so getting it
        // Make sure element exists
        if (!this.el_) return 0;
        // Get dimension value from style
        const val = this.el_.style[widthOrHeight];
        const pxIndex = val.indexOf("px");
        if (pxIndex !== -1) // Return the pixel value with no 'px'
        return parseInt(val.slice(0, pxIndex), 10);
        // No px so using % or no style was set, so falling back to offsetWidth/height
        // If component has display:none, offset will return 0
        // TODO: handle display:none and no dimension style using px
        return parseInt(this.el_["offset" + $e88cd91ee18355c1$var$toTitleCase$1(widthOrHeight)], 10);
    }
    /**
   * Get the computed width or the height of the component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @param {string} widthOrHeight
   *        A string containing 'width' or 'height'. Whichever one you want to get.
   *
   * @return {number}
   *         The dimension that gets asked for or 0 if nothing was set
   *         for that dimension.
   */ currentDimension(widthOrHeight) {
        let computedWidthOrHeight = 0;
        if (widthOrHeight !== "width" && widthOrHeight !== "height") throw new Error("currentDimension only accepts width or height value");
        computedWidthOrHeight = $e88cd91ee18355c1$var$computedStyle(this.el_, widthOrHeight);
        // remove 'px' from variable and parse as integer
        computedWidthOrHeight = parseFloat(computedWidthOrHeight);
        // if the computed value is still 0, it's possible that the browser is lying
        // and we want to check the offset values.
        // This code also runs wherever getComputedStyle doesn't exist.
        if (computedWidthOrHeight === 0 || isNaN(computedWidthOrHeight)) {
            const rule = `offset${$e88cd91ee18355c1$var$toTitleCase$1(widthOrHeight)}`;
            computedWidthOrHeight = this.el_[rule];
        }
        return computedWidthOrHeight;
    }
    /**
   * An object that contains width and height values of the `Component`s
   * computed style. Uses `window.getComputedStyle`.
   *
   * @typedef {Object} Component~DimensionObject
   *
   * @property {number} width
   *           The width of the `Component`s computed style.
   *
   * @property {number} height
   *           The height of the `Component`s computed style.
   */ /**
   * Get an object that contains computed width and height values of the
   * component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @return {Component~DimensionObject}
   *         The computed dimensions of the component's element.
   */ currentDimensions() {
        return {
            width: this.currentDimension("width"),
            height: this.currentDimension("height")
        };
    }
    /**
   * Get the computed width of the component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @return {number}
   *         The computed width of the component's element.
   */ currentWidth() {
        return this.currentDimension("width");
    }
    /**
   * Get the computed height of the component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @return {number}
   *         The computed height of the component's element.
   */ currentHeight() {
        return this.currentDimension("height");
    }
    /**
   * Set the focus to this component
   */ focus() {
        this.el_.focus();
    }
    /**
   * Remove the focus from this component
   */ blur() {
        this.el_.blur();
    }
    /**
   * When this Component receives a `keydown` event which it does not process,
   *  it passes the event to the Player for handling.
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   */ handleKeyDown(event) {
        if (this.player_) {
            // We only stop propagation here because we want unhandled events to fall
            // back to the browser. Exclude Tab for focus trapping.
            if (!(0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Tab")) event.stopPropagation();
            this.player_.handleKeyDown(event);
        }
    }
    /**
   * Many components used to have a `handleKeyPress` method, which was poorly
   * named because it listened to a `keydown` event. This method name now
   * delegates to `handleKeyDown`. This means anyone calling `handleKeyPress`
   * will not see their method calls stop working.
   *
   * @param {KeyboardEvent} event
   *        The event that caused this function to be called.
   */ handleKeyPress(event) {
        this.handleKeyDown(event);
    }
    /**
   * Emit a 'tap' events when touch event support gets detected. This gets used to
   * support toggling the controls through a tap on the video. They get enabled
   * because every sub-component would have extra overhead otherwise.
   *
   * @protected
   * @fires Component#tap
   * @listens Component#touchstart
   * @listens Component#touchmove
   * @listens Component#touchleave
   * @listens Component#touchcancel
   * @listens Component#touchend
    */ emitTapEvents() {
        // Track the start time so we can determine how long the touch lasted
        let touchStart = 0;
        let firstTouch = null;
        // Maximum movement allowed during a touch event to still be considered a tap
        // Other popular libs use anywhere from 2 (hammer.js) to 15,
        // so 10 seems like a nice, round number.
        const tapMovementThreshold = 10;
        // The maximum length a touch can be while still being considered a tap
        const touchTimeThreshold = 200;
        let couldBeTap;
        this.on("touchstart", function(event) {
            // If more than one finger, don't consider treating this as a click
            if (event.touches.length === 1) {
                // Copy pageX/pageY from the object
                firstTouch = {
                    pageX: event.touches[0].pageX,
                    pageY: event.touches[0].pageY
                };
                // Record start time so we can detect a tap vs. "touch and hold"
                touchStart = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).performance.now();
                // Reset couldBeTap tracking
                couldBeTap = true;
            }
        });
        this.on("touchmove", function(event) {
            // If more than one finger, don't consider treating this as a click
            if (event.touches.length > 1) couldBeTap = false;
            else if (firstTouch) {
                // Some devices will throw touchmoves for all but the slightest of taps.
                // So, if we moved only a small distance, this could still be a tap
                const xdiff = event.touches[0].pageX - firstTouch.pageX;
                const ydiff = event.touches[0].pageY - firstTouch.pageY;
                const touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);
                if (touchDistance > tapMovementThreshold) couldBeTap = false;
            }
        });
        const noTap = function() {
            couldBeTap = false;
        };
        // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
        this.on("touchleave", noTap);
        this.on("touchcancel", noTap);
        // When the touch ends, measure how long it took and trigger the appropriate
        // event
        this.on("touchend", function(event) {
            firstTouch = null;
            // Proceed only if the touchmove/leave/cancel event didn't happen
            if (couldBeTap === true) {
                // Measure how long the touch lasted
                const touchTime = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).performance.now() - touchStart;
                // Make sure the touch was less than the threshold to be considered a tap
                if (touchTime < touchTimeThreshold) {
                    // Don't let browser turn this into a click
                    event.preventDefault();
                    /**
           * Triggered when a `Component` is tapped.
           *
           * @event Component#tap
           * @type {MouseEvent}
           */ this.trigger("tap");
                // It may be good to copy the touchend event object and change the
                // type to tap, if the other event properties aren't exact after
                // Events.fixEvent runs (e.g. event.target)
                }
            }
        });
    }
    /**
   * This function reports user activity whenever touch events happen. This can get
   * turned off by any sub-components that wants touch events to act another way.
   *
   * Report user touch activity when touch events occur. User activity gets used to
   * determine when controls should show/hide. It is simple when it comes to mouse
   * events, because any mouse event should show the controls. So we capture mouse
   * events that bubble up to the player and report activity when that happens.
   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player
   * controls. So touch events can't help us at the player level either.
   *
   * User activity gets checked asynchronously. So what could happen is a tap event
   * on the video turns the controls off. Then the `touchend` event bubbles up to
   * the player. Which, if it reported user activity, would turn the controls right
   * back on. We also don't want to completely block touch events from bubbling up.
   * Furthermore a `touchmove` event and anything other than a tap, should not turn
   * controls back on.
   *
   * @listens Component#touchstart
   * @listens Component#touchmove
   * @listens Component#touchend
   * @listens Component#touchcancel
   */ enableTouchActivity() {
        // Don't continue if the root player doesn't support reporting user activity
        if (!this.player() || !this.player().reportUserActivity) return;
        // listener for reporting that the user is active
        const report = $e88cd91ee18355c1$var$bind_(this.player(), this.player().reportUserActivity);
        let touchHolding;
        this.on("touchstart", function() {
            report();
            // For as long as the they are touching the device or have their mouse down,
            // we consider them active even if they're not moving their finger or mouse.
            // So we want to continue to update that they are active
            this.clearInterval(touchHolding);
            // report at the same interval as activityCheck
            touchHolding = this.setInterval(report, 250);
        });
        const touchEnd = function(event) {
            report();
            // stop the interval that maintains activity if the touch is holding
            this.clearInterval(touchHolding);
        };
        this.on("touchmove", report);
        this.on("touchend", touchEnd);
        this.on("touchcancel", touchEnd);
    }
    /**
   * A callback that has no parameters and is bound into `Component`s context.
   *
   * @callback Component~GenericCallback
   * @this Component
   */ /**
   * Creates a function that runs after an `x` millisecond timeout. This function is a
   * wrapper around `window.setTimeout`. There are a few reasons to use this one
   * instead though:
   * 1. It gets cleared via  {@link Component#clearTimeout} when
   *    {@link Component#dispose} gets called.
   * 2. The function callback will gets turned into a {@link Component~GenericCallback}
   *
   * > Note: You can't use `window.clearTimeout` on the id returned by this function. This
   *         will cause its dispose listener not to get cleaned up! Please use
   *         {@link Component#clearTimeout} or {@link Component#dispose} instead.
   *
   * @param {Component~GenericCallback} fn
   *        The function that will be run after `timeout`.
   *
   * @param {number} timeout
   *        Timeout in milliseconds to delay before executing the specified function.
   *
   * @return {number}
   *         Returns a timeout ID that gets used to identify the timeout. It can also
   *         get used in {@link Component#clearTimeout} to clear the timeout that
   *         was set.
   *
   * @listens Component#dispose
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}
   */ setTimeout(fn, timeout) {
        // declare as variables so they are properly available in timeout function
        // eslint-disable-next-line
        var timeoutId;
        fn = $e88cd91ee18355c1$var$bind_(this, fn);
        this.clearTimersOnDispose_();
        timeoutId = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(()=>{
            if (this.setTimeoutIds_.has(timeoutId)) this.setTimeoutIds_.delete(timeoutId);
            fn();
        }, timeout);
        this.setTimeoutIds_.add(timeoutId);
        return timeoutId;
    }
    /**
   * Clears a timeout that gets created via `window.setTimeout` or
   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}
   * use this function instead of `window.clearTimout`. If you don't your dispose
   * listener will not get cleaned up until {@link Component#dispose}!
   *
   * @param {number} timeoutId
   *        The id of the timeout to clear. The return value of
   *        {@link Component#setTimeout} or `window.setTimeout`.
   *
   * @return {number}
   *         Returns the timeout id that was cleared.
   *
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}
   */ clearTimeout(timeoutId) {
        if (this.setTimeoutIds_.has(timeoutId)) {
            this.setTimeoutIds_.delete(timeoutId);
            (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(timeoutId);
        }
        return timeoutId;
    }
    /**
   * Creates a function that gets run every `x` milliseconds. This function is a wrapper
   * around `window.setInterval`. There are a few reasons to use this one instead though.
   * 1. It gets cleared via  {@link Component#clearInterval} when
   *    {@link Component#dispose} gets called.
   * 2. The function callback will be a {@link Component~GenericCallback}
   *
   * @param {Component~GenericCallback} fn
   *        The function to run every `x` seconds.
   *
   * @param {number} interval
   *        Execute the specified function every `x` milliseconds.
   *
   * @return {number}
   *         Returns an id that can be used to identify the interval. It can also be be used in
   *         {@link Component#clearInterval} to clear the interval.
   *
   * @listens Component#dispose
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}
   */ setInterval(fn, interval) {
        fn = $e88cd91ee18355c1$var$bind_(this, fn);
        this.clearTimersOnDispose_();
        const intervalId = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setInterval(fn, interval);
        this.setIntervalIds_.add(intervalId);
        return intervalId;
    }
    /**
   * Clears an interval that gets created via `window.setInterval` or
   * {@link Component#setInterval}. If you set an interval via {@link Component#setInterval}
   * use this function instead of `window.clearInterval`. If you don't your dispose
   * listener will not get cleaned up until {@link Component#dispose}!
   *
   * @param {number} intervalId
   *        The id of the interval to clear. The return value of
   *        {@link Component#setInterval} or `window.setInterval`.
   *
   * @return {number}
   *         Returns the interval id that was cleared.
   *
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}
   */ clearInterval(intervalId) {
        if (this.setIntervalIds_.has(intervalId)) {
            this.setIntervalIds_.delete(intervalId);
            (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearInterval(intervalId);
        }
        return intervalId;
    }
    /**
   * Queues up a callback to be passed to requestAnimationFrame (rAF), but
   * with a few extra bonuses:
   *
   * - Supports browsers that do not support rAF by falling back to
   *   {@link Component#setTimeout}.
   *
   * - The callback is turned into a {@link Component~GenericCallback} (i.e.
   *   bound to the component).
   *
   * - Automatic cancellation of the rAF callback is handled if the component
   *   is disposed before it is called.
   *
   * @param  {Component~GenericCallback} fn
   *         A function that will be bound to this component and executed just
   *         before the browser's next repaint.
   *
   * @return {number}
   *         Returns an rAF ID that gets used to identify the timeout. It can
   *         also be used in {@link Component#cancelAnimationFrame} to cancel
   *         the animation frame callback.
   *
   * @listens Component#dispose
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}
   */ requestAnimationFrame(fn) {
        this.clearTimersOnDispose_();
        // declare as variables so they are properly available in rAF function
        // eslint-disable-next-line
        var id;
        fn = $e88cd91ee18355c1$var$bind_(this, fn);
        id = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).requestAnimationFrame(()=>{
            if (this.rafIds_.has(id)) this.rafIds_.delete(id);
            fn();
        });
        this.rafIds_.add(id);
        return id;
    }
    /**
   * Request an animation frame, but only one named animation
   * frame will be queued. Another will never be added until
   * the previous one finishes.
   *
   * @param {string} name
   *        The name to give this requestAnimationFrame
   *
   * @param  {Component~GenericCallback} fn
   *         A function that will be bound to this component and executed just
   *         before the browser's next repaint.
   */ requestNamedAnimationFrame(name, fn) {
        if (this.namedRafs_.has(name)) return;
        this.clearTimersOnDispose_();
        fn = $e88cd91ee18355c1$var$bind_(this, fn);
        const id = this.requestAnimationFrame(()=>{
            fn();
            if (this.namedRafs_.has(name)) this.namedRafs_.delete(name);
        });
        this.namedRafs_.set(name, id);
        return name;
    }
    /**
   * Cancels a current named animation frame if it exists.
   *
   * @param {string} name
   *        The name of the requestAnimationFrame to cancel.
   */ cancelNamedAnimationFrame(name) {
        if (!this.namedRafs_.has(name)) return;
        this.cancelAnimationFrame(this.namedRafs_.get(name));
        this.namedRafs_.delete(name);
    }
    /**
   * Cancels a queued callback passed to {@link Component#requestAnimationFrame}
   * (rAF).
   *
   * If you queue an rAF callback via {@link Component#requestAnimationFrame},
   * use this function instead of `window.cancelAnimationFrame`. If you don't,
   * your dispose listener will not get cleaned up until {@link Component#dispose}!
   *
   * @param {number} id
   *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.
   *
   * @return {number}
   *         Returns the rAF ID that was cleared.
   *
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}
   */ cancelAnimationFrame(id) {
        if (this.rafIds_.has(id)) {
            this.rafIds_.delete(id);
            (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).cancelAnimationFrame(id);
        }
        return id;
    }
    /**
   * A function to setup `requestAnimationFrame`, `setTimeout`,
   * and `setInterval`, clearing on dispose.
   *
   * > Previously each timer added and removed dispose listeners on it's own.
   * For better performance it was decided to batch them all, and use `Set`s
   * to track outstanding timer ids.
   *
   * @private
   */ clearTimersOnDispose_() {
        if (this.clearingTimersOnDispose_) return;
        this.clearingTimersOnDispose_ = true;
        this.one("dispose", ()=>{
            [
                [
                    "namedRafs_",
                    "cancelNamedAnimationFrame"
                ],
                [
                    "rafIds_",
                    "cancelAnimationFrame"
                ],
                [
                    "setTimeoutIds_",
                    "clearTimeout"
                ],
                [
                    "setIntervalIds_",
                    "clearInterval"
                ]
            ].forEach(([idName, cancelName])=>{
                // for a `Set` key will actually be the value again
                // so forEach((val, val) =>` but for maps we want to use
                // the key.
                this[idName].forEach((val, key)=>this[cancelName](key));
            });
            this.clearingTimersOnDispose_ = false;
        });
    }
    /**
   * Register a `Component` with `videojs` given the name and the component.
   *
   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s
   *         should be registered using {@link Tech.registerTech} or
   *         {@link videojs:videojs.registerTech}.
   *
   * > NOTE: This function can also be seen on videojs as
   *         {@link videojs:videojs.registerComponent}.
   *
   * @param {string} name
   *        The name of the `Component` to register.
   *
   * @param {Component} ComponentToRegister
   *        The `Component` class to register.
   *
   * @return {Component}
   *         The `Component` that was registered.
   */ static registerComponent(name, ComponentToRegister) {
        if (typeof name !== "string" || !name) throw new Error(`Illegal component name, "${name}"; must be a non-empty string.`);
        const Tech = $e88cd91ee18355c1$var$Component$1.getComponent("Tech");
        // We need to make sure this check is only done if Tech has been registered.
        const isTech = Tech && Tech.isTech(ComponentToRegister);
        const isComp = $e88cd91ee18355c1$var$Component$1 === ComponentToRegister || $e88cd91ee18355c1$var$Component$1.prototype.isPrototypeOf(ComponentToRegister.prototype);
        if (isTech || !isComp) {
            let reason;
            if (isTech) reason = "techs must be registered using Tech.registerTech()";
            else reason = "must be a Component subclass";
            throw new Error(`Illegal component, "${name}"; ${reason}.`);
        }
        name = $e88cd91ee18355c1$var$toTitleCase$1(name);
        if (!$e88cd91ee18355c1$var$Component$1.components_) $e88cd91ee18355c1$var$Component$1.components_ = {};
        const Player = $e88cd91ee18355c1$var$Component$1.getComponent("Player");
        if (name === "Player" && Player && Player.players) {
            const players = Player.players;
            const playerNames = Object.keys(players);
            // If we have players that were disposed, then their name will still be
            // in Players.players. So, we must loop through and verify that the value
            // for each item is not null. This allows registration of the Player component
            // after all players have been disposed or before any were created.
            if (players && playerNames.length > 0 && playerNames.map((pname)=>players[pname]).every(Boolean)) throw new Error("Can not register Player component after player has been created.");
        }
        $e88cd91ee18355c1$var$Component$1.components_[name] = ComponentToRegister;
        $e88cd91ee18355c1$var$Component$1.components_[$e88cd91ee18355c1$var$toLowerCase(name)] = ComponentToRegister;
        return ComponentToRegister;
    }
    /**
   * Get a `Component` based on the name it was registered with.
   *
   * @param {string} name
   *        The Name of the component to get.
   *
   * @return {typeof Component}
   *         The `Component` that got registered under the given name.
   */ static getComponent(name) {
        if (!name || !$e88cd91ee18355c1$var$Component$1.components_) return;
        return $e88cd91ee18355c1$var$Component$1.components_[name];
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("Component", $e88cd91ee18355c1$var$Component$1);
/**
 * @file time.js
 * @module time
 */ /**
 * Returns the time for the specified index at the start or end
 * of a TimeRange object.
 *
 * @typedef    {Function} TimeRangeIndex
 *
 * @param      {number} [index=0]
 *             The range number to return the time for.
 *
 * @return     {number}
 *             The time offset at the specified index.
 *
 * @deprecated The index argument must be provided.
 *             In the future, leaving it out will throw an error.
 */ /**
 * An object that contains ranges of time, which mimics {@link TimeRanges}.
 *
 * @typedef  {Object} TimeRange
 *
 * @property {number} length
 *           The number of time ranges represented by this object.
 *
 * @property {module:time~TimeRangeIndex} start
 *           Returns the time offset at which a specified time range begins.
 *
 * @property {module:time~TimeRangeIndex} end
 *           Returns the time offset at which a specified time range ends.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges
 */ /**
 * Check if any of the time ranges are over the maximum index.
 *
 * @private
 * @param   {string} fnName
 *          The function name to use for logging
 *
 * @param   {number} index
 *          The index to check
 *
 * @param   {number} maxIndex
 *          The maximum possible index
 *
 * @throws  {Error} if the timeRanges provided are over the maxIndex
 */ function $e88cd91ee18355c1$var$rangeCheck(fnName, index, maxIndex) {
    if (typeof index !== "number" || index < 0 || index > maxIndex) throw new Error(`Failed to execute '${fnName}' on 'TimeRanges': The index provided (${index}) is non-numeric or out of bounds (0-${maxIndex}).`);
}
/**
 * Get the time for the specified index at the start or end
 * of a TimeRange object.
 *
 * @private
 * @param      {string} fnName
 *             The function name to use for logging
 *
 * @param      {string} valueIndex
 *             The property that should be used to get the time. should be
 *             'start' or 'end'
 *
 * @param      {Array} ranges
 *             An array of time ranges
 *
 * @param      {Array} [rangeIndex=0]
 *             The index to start the search at
 *
 * @return     {number}
 *             The time that offset at the specified index.
 *
 * @deprecated rangeIndex must be set to a value, in the future this will throw an error.
 * @throws     {Error} if rangeIndex is more than the length of ranges
 */ function $e88cd91ee18355c1$var$getRange(fnName, valueIndex, ranges, rangeIndex) {
    $e88cd91ee18355c1$var$rangeCheck(fnName, rangeIndex, ranges.length - 1);
    return ranges[rangeIndex][valueIndex];
}
/**
 * Create a time range object given ranges of time.
 *
 * @private
 * @param   {Array} [ranges]
 *          An array of time ranges.
 *
 * @return  {TimeRange}
 */ function $e88cd91ee18355c1$var$createTimeRangesObj(ranges) {
    let timeRangesObj;
    if (ranges === undefined || ranges.length === 0) timeRangesObj = {
        length: 0,
        start () {
            throw new Error("This TimeRanges object is empty");
        },
        end () {
            throw new Error("This TimeRanges object is empty");
        }
    };
    else timeRangesObj = {
        length: ranges.length,
        start: $e88cd91ee18355c1$var$getRange.bind(null, "start", 0, ranges),
        end: $e88cd91ee18355c1$var$getRange.bind(null, "end", 1, ranges)
    };
    if ((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).Symbol && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).Symbol.iterator) timeRangesObj[(0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).Symbol.iterator] = ()=>(ranges || []).values();
    return timeRangesObj;
}
/**
 * Create a `TimeRange` object which mimics an
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges|HTML5 TimeRanges instance}.
 *
 * @param {number|Array[]} start
 *        The start of a single range (a number) or an array of ranges (an
 *        array of arrays of two numbers each).
 *
 * @param {number} end
 *        The end of a single range. Cannot be used with the array form of
 *        the `start` argument.
 *
 * @return {TimeRange}
 */ function $e88cd91ee18355c1$var$createTimeRanges$1(start, end) {
    if (Array.isArray(start)) return $e88cd91ee18355c1$var$createTimeRangesObj(start);
    else if (start === undefined || end === undefined) return $e88cd91ee18355c1$var$createTimeRangesObj();
    return $e88cd91ee18355c1$var$createTimeRangesObj([
        [
            start,
            end
        ]
    ]);
}
/**
 * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in
 * seconds) will force a number of leading zeros to cover the length of the
 * guide.
 *
 * @private
 * @param  {number} seconds
 *         Number of seconds to be turned into a string
 *
 * @param  {number} guide
 *         Number (in seconds) to model the string after
 *
 * @return {string}
 *         Time formatted as H:MM:SS or M:SS
 */ const $e88cd91ee18355c1$var$defaultImplementation = function(seconds, guide) {
    seconds = seconds < 0 ? 0 : seconds;
    let s = Math.floor(seconds % 60);
    let m = Math.floor(seconds / 60 % 60);
    let h = Math.floor(seconds / 3600);
    const gm = Math.floor(guide / 60 % 60);
    const gh = Math.floor(guide / 3600);
    // handle invalid times
    if (isNaN(seconds) || seconds === Infinity) // '-' is false for all relational operators (e.g. <, >=) so this setting
    // will add the minimum number of fields specified by the guide
    h = m = s = "-";
    // Check if we need to show hours
    h = h > 0 || gh > 0 ? h + ":" : "";
    // If hours are showing, we may need to add a leading zero.
    // Always show at least one digit of minutes.
    m = ((h || gm >= 10) && m < 10 ? "0" + m : m) + ":";
    // Check if leading zero is need for seconds
    s = s < 10 ? "0" + s : s;
    return h + m + s;
};
// Internal pointer to the current implementation.
let $e88cd91ee18355c1$var$implementation = $e88cd91ee18355c1$var$defaultImplementation;
/**
 * Replaces the default formatTime implementation with a custom implementation.
 *
 * @param {Function} customImplementation
 *        A function which will be used in place of the default formatTime
 *        implementation. Will receive the current time in seconds and the
 *        guide (in seconds) as arguments.
 */ function $e88cd91ee18355c1$var$setFormatTime(customImplementation) {
    $e88cd91ee18355c1$var$implementation = customImplementation;
}
/**
 * Resets formatTime to the default implementation.
 */ function $e88cd91ee18355c1$var$resetFormatTime() {
    $e88cd91ee18355c1$var$implementation = $e88cd91ee18355c1$var$defaultImplementation;
}
/**
 * Delegates to either the default time formatting function or a custom
 * function supplied via `setFormatTime`.
 *
 * Formats seconds as a time string (H:MM:SS or M:SS). Supplying a
 * guide (in seconds) will force a number of leading zeros to cover the
 * length of the guide.
 *
 * @example  formatTime(125, 600) === "02:05"
 * @param    {number} seconds
 *           Number of seconds to be turned into a string
 *
 * @param    {number} guide
 *           Number (in seconds) to model the string after
 *
 * @return   {string}
 *           Time formatted as H:MM:SS or M:SS
 */ function $e88cd91ee18355c1$var$formatTime(seconds, guide = seconds) {
    return $e88cd91ee18355c1$var$implementation(seconds, guide);
}
var $e88cd91ee18355c1$var$Time = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    createTimeRanges: $e88cd91ee18355c1$var$createTimeRanges$1,
    createTimeRange: $e88cd91ee18355c1$var$createTimeRanges$1,
    setFormatTime: $e88cd91ee18355c1$var$setFormatTime,
    resetFormatTime: $e88cd91ee18355c1$var$resetFormatTime,
    formatTime: $e88cd91ee18355c1$var$formatTime
});
/**
 * @file buffer.js
 * @module buffer
 */ /**
 * Compute the percentage of the media that has been buffered.
 *
 * @param { import('./time').TimeRange } buffered
 *        The current `TimeRanges` object representing buffered time ranges
 *
 * @param {number} duration
 *        Total duration of the media
 *
 * @return {number}
 *         Percent buffered of the total duration in decimal form.
 */ function $e88cd91ee18355c1$var$bufferedPercent(buffered, duration) {
    let bufferedDuration = 0;
    let start;
    let end;
    if (!duration) return 0;
    if (!buffered || !buffered.length) buffered = $e88cd91ee18355c1$var$createTimeRanges$1(0, 0);
    for(let i = 0; i < buffered.length; i++){
        start = buffered.start(i);
        end = buffered.end(i);
        // buffered end can be bigger than duration by a very small fraction
        if (end > duration) end = duration;
        bufferedDuration += end - start;
    }
    return bufferedDuration / duration;
}
/**
 * @file media-error.js
 */ /**
 * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.
 *
 * @param {number|string|Object|MediaError} value
 *        This can be of multiple types:
 *        - number: should be a standard error code
 *        - string: an error message (the code will be 0)
 *        - Object: arbitrary properties
 *        - `MediaError` (native): used to populate a video.js `MediaError` object
 *        - `MediaError` (video.js): will return itself if it's already a
 *          video.js `MediaError` object.
 *
 * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}
 * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}
 *
 * @class MediaError
 */ function $e88cd91ee18355c1$var$MediaError(value) {
    // Allow redundant calls to this constructor to avoid having `instanceof`
    // checks peppered around the code.
    if (value instanceof $e88cd91ee18355c1$var$MediaError) return value;
    if (typeof value === "number") this.code = value;
    else if (typeof value === "string") // default code is zero, so this is a custom error
    this.message = value;
    else if ($e88cd91ee18355c1$var$isObject(value)) {
        // We assign the `code` property manually because native `MediaError` objects
        // do not expose it as an own/enumerable property of the object.
        if (typeof value.code === "number") this.code = value.code;
        Object.assign(this, value);
    }
    if (!this.message) this.message = $e88cd91ee18355c1$var$MediaError.defaultMessages[this.code] || "";
}
/**
 * The error code that refers two one of the defined `MediaError` types
 *
 * @type {Number}
 */ $e88cd91ee18355c1$var$MediaError.prototype.code = 0;
/**
 * An optional message that to show with the error. Message is not part of the HTML5
 * video spec but allows for more informative custom errors.
 *
 * @type {String}
 */ $e88cd91ee18355c1$var$MediaError.prototype.message = "";
/**
 * An optional status code that can be set by plugins to allow even more detail about
 * the error. For example a plugin might provide a specific HTTP status code and an
 * error message for that code. Then when the plugin gets that error this class will
 * know how to display an error message for it. This allows a custom message to show
 * up on the `Player` error overlay.
 *
 * @type {Array}
 */ $e88cd91ee18355c1$var$MediaError.prototype.status = null;
/**
 * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the
 * specification listed under {@link MediaError} for more information.
 *
 * @enum {array}
 * @readonly
 * @property {string} 0 - MEDIA_ERR_CUSTOM
 * @property {string} 1 - MEDIA_ERR_ABORTED
 * @property {string} 2 - MEDIA_ERR_NETWORK
 * @property {string} 3 - MEDIA_ERR_DECODE
 * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED
 * @property {string} 5 - MEDIA_ERR_ENCRYPTED
 */ $e88cd91ee18355c1$var$MediaError.errorTypes = [
    "MEDIA_ERR_CUSTOM",
    "MEDIA_ERR_ABORTED",
    "MEDIA_ERR_NETWORK",
    "MEDIA_ERR_DECODE",
    "MEDIA_ERR_SRC_NOT_SUPPORTED",
    "MEDIA_ERR_ENCRYPTED"
];
/**
 * The default `MediaError` messages based on the {@link MediaError.errorTypes}.
 *
 * @type {Array}
 * @constant
 */ $e88cd91ee18355c1$var$MediaError.defaultMessages = {
    1: "You aborted the media playback",
    2: "A network error caused the media download to fail part-way.",
    3: "The media playback was aborted due to a corruption problem or because the media used features your browser did not support.",
    4: "The media could not be loaded, either because the server or network failed or because the format is not supported.",
    5: "The media is encrypted and we do not have the keys to decrypt it."
};
// Add types as properties on MediaError
// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
for(let errNum = 0; errNum < $e88cd91ee18355c1$var$MediaError.errorTypes.length; errNum++){
    $e88cd91ee18355c1$var$MediaError[$e88cd91ee18355c1$var$MediaError.errorTypes[errNum]] = errNum;
    // values should be accessible on both the class and instance
    $e88cd91ee18355c1$var$MediaError.prototype[$e88cd91ee18355c1$var$MediaError.errorTypes[errNum]] = errNum;
}
/**
 * Returns whether an object is `Promise`-like (i.e. has a `then` method).
 *
 * @param  {Object}  value
 *         An object that may or may not be `Promise`-like.
 *
 * @return {boolean}
 *         Whether or not the object is `Promise`-like.
 */ function $e88cd91ee18355c1$var$isPromise(value) {
    return value !== undefined && value !== null && typeof value.then === "function";
}
/**
 * Silence a Promise-like object.
 *
 * This is useful for avoiding non-harmful, but potentially confusing "uncaught
 * play promise" rejection error messages.
 *
 * @param  {Object} value
 *         An object that may or may not be `Promise`-like.
 */ function $e88cd91ee18355c1$var$silencePromise(value) {
    if ($e88cd91ee18355c1$var$isPromise(value)) value.then(null, (e)=>{});
}
/**
 * @file text-track-list-converter.js Utilities for capturing text track state and
 * re-creating tracks based on a capture.
 *
 * @module text-track-list-converter
 */ /**
 * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that
 * represents the {@link TextTrack}'s state.
 *
 * @param {TextTrack} track
 *        The text track to query.
 *
 * @return {Object}
 *         A serializable javascript representation of the TextTrack.
 * @private
 */ const $e88cd91ee18355c1$var$trackToJson_ = function(track) {
    const ret = [
        "kind",
        "label",
        "language",
        "id",
        "inBandMetadataTrackDispatchType",
        "mode",
        "src"
    ].reduce((acc, prop, i)=>{
        if (track[prop]) acc[prop] = track[prop];
        return acc;
    }, {
        cues: track.cues && Array.prototype.map.call(track.cues, function(cue) {
            return {
                startTime: cue.startTime,
                endTime: cue.endTime,
                text: cue.text,
                id: cue.id
            };
        })
    });
    return ret;
};
/**
 * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the
 * state of all {@link TextTrack}s currently configured. The return array is compatible with
 * {@link text-track-list-converter:jsonToTextTracks}.
 *
 * @param { import('../tech/tech').default } tech
 *        The tech object to query
 *
 * @return {Array}
 *         A serializable javascript representation of the {@link Tech}s
 *         {@link TextTrackList}.
 */ const $e88cd91ee18355c1$var$textTracksToJson = function(tech) {
    const trackEls = tech.$$("track");
    const trackObjs = Array.prototype.map.call(trackEls, (t)=>t.track);
    const tracks = Array.prototype.map.call(trackEls, function(trackEl) {
        const json = $e88cd91ee18355c1$var$trackToJson_(trackEl.track);
        if (trackEl.src) json.src = trackEl.src;
        return json;
    });
    return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function(track) {
        return trackObjs.indexOf(track) === -1;
    }).map($e88cd91ee18355c1$var$trackToJson_));
};
/**
 * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript
 * object {@link TextTrack} representations.
 *
 * @param {Array} json
 *        An array of `TextTrack` representation objects, like those that would be
 *        produced by `textTracksToJson`.
 *
 * @param {Tech} tech
 *        The `Tech` to create the `TextTrack`s on.
 */ const $e88cd91ee18355c1$var$jsonToTextTracks = function(json, tech) {
    json.forEach(function(track) {
        const addedTrack = tech.addRemoteTextTrack(track).track;
        if (!track.src && track.cues) track.cues.forEach((cue)=>addedTrack.addCue(cue));
    });
    return tech.textTracks();
};
var $e88cd91ee18355c1$var$textTrackConverter = {
    textTracksToJson: $e88cd91ee18355c1$var$textTracksToJson,
    jsonToTextTracks: $e88cd91ee18355c1$var$jsonToTextTracks,
    trackToJson_: $e88cd91ee18355c1$var$trackToJson_
};
/**
 * @file modal-dialog.js
 */ const $e88cd91ee18355c1$var$MODAL_CLASS_NAME = "vjs-modal-dialog";
/**
 * The `ModalDialog` displays over the video and its controls, which blocks
 * interaction with the player until it is closed.
 *
 * Modal dialogs include a "Close" button and will close when that button
 * is activated - or when ESC is pressed anywhere.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$ModalDialog extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Create an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param { import('./utils/dom').ContentDescriptor} [options.content=undefined]
   *        Provide customized content for this modal.
   *
   * @param {string} [options.description]
   *        A text description for the modal, primarily for accessibility.
   *
   * @param {boolean} [options.fillAlways=false]
   *        Normally, modals are automatically filled only the first time
   *        they open. This tells the modal to refresh its content
   *        every time it opens.
   *
   * @param {string} [options.label]
   *        A text label for the modal, primarily for accessibility.
   *
   * @param {boolean} [options.pauseOnOpen=true]
   *        If `true`, playback will will be paused if playing when
   *        the modal opens, and resumed when it closes.
   *
   * @param {boolean} [options.temporary=true]
   *        If `true`, the modal can only be opened once; it will be
   *        disposed as soon as it's closed.
   *
   * @param {boolean} [options.uncloseable=false]
   *        If `true`, the user will not be able to close the modal
   *        through the UI in the normal ways. Programmatic closing is
   *        still possible.
   */ constructor(player, options){
        super(player, options);
        this.handleKeyDown_ = (e)=>this.handleKeyDown(e);
        this.close_ = (e)=>this.close(e);
        this.opened_ = this.hasBeenOpened_ = this.hasBeenFilled_ = false;
        this.closeable(!this.options_.uncloseable);
        this.content(this.options_.content);
        // Make sure the contentEl is defined AFTER any children are initialized
        // because we only want the contents of the modal in the contentEl
        // (not the UI elements like the close button).
        this.contentEl_ = $e88cd91ee18355c1$var$createEl("div", {
            className: `${$e88cd91ee18355c1$var$MODAL_CLASS_NAME}-content`
        }, {
            role: "document"
        });
        this.descEl_ = $e88cd91ee18355c1$var$createEl("p", {
            className: `${$e88cd91ee18355c1$var$MODAL_CLASS_NAME}-description vjs-control-text`,
            id: this.el().getAttribute("aria-describedby")
        });
        $e88cd91ee18355c1$var$textContent(this.descEl_, this.description());
        this.el_.appendChild(this.descEl_);
        this.el_.appendChild(this.contentEl_);
    }
    /**
   * Create the `ModalDialog`'s DOM element
   *
   * @return {Element}
   *         The DOM element that gets created.
   */ createEl() {
        return super.createEl("div", {
            className: this.buildCSSClass(),
            tabIndex: -1
        }, {
            "aria-describedby": `${this.id()}_description`,
            "aria-hidden": "true",
            "aria-label": this.label(),
            "role": "dialog"
        });
    }
    dispose() {
        this.contentEl_ = null;
        this.descEl_ = null;
        this.previouslyActiveEl_ = null;
        super.dispose();
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return `${$e88cd91ee18355c1$var$MODAL_CLASS_NAME} vjs-hidden ${super.buildCSSClass()}`;
    }
    /**
   * Returns the label string for this modal. Primarily used for accessibility.
   *
   * @return {string}
   *         the localized or raw label of this modal.
   */ label() {
        return this.localize(this.options_.label || "Modal Window");
    }
    /**
   * Returns the description string for this modal. Primarily used for
   * accessibility.
   *
   * @return {string}
   *         The localized or raw description of this modal.
   */ description() {
        let desc = this.options_.description || this.localize("This is a modal window.");
        // Append a universal closeability message if the modal is closeable.
        if (this.closeable()) desc += " " + this.localize("This modal can be closed by pressing the Escape key or activating the close button.");
        return desc;
    }
    /**
   * Opens the modal.
   *
   * @fires ModalDialog#beforemodalopen
   * @fires ModalDialog#modalopen
   */ open() {
        if (!this.opened_) {
            const player = this.player();
            /**
        * Fired just before a `ModalDialog` is opened.
        *
        * @event ModalDialog#beforemodalopen
        * @type {Event}
        */ this.trigger("beforemodalopen");
            this.opened_ = true;
            // Fill content if the modal has never opened before and
            // never been filled.
            if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) this.fill();
            // If the player was playing, pause it and take note of its previously
            // playing state.
            this.wasPlaying_ = !player.paused();
            if (this.options_.pauseOnOpen && this.wasPlaying_) player.pause();
            this.on("keydown", this.handleKeyDown_);
            // Hide controls and note if they were enabled.
            this.hadControls_ = player.controls();
            player.controls(false);
            this.show();
            this.conditionalFocus_();
            this.el().setAttribute("aria-hidden", "false");
            /**
        * Fired just after a `ModalDialog` is opened.
        *
        * @event ModalDialog#modalopen
        * @type {Event}
        */ this.trigger("modalopen");
            this.hasBeenOpened_ = true;
        }
    }
    /**
   * If the `ModalDialog` is currently open or closed.
   *
   * @param  {boolean} [value]
   *         If given, it will open (`true`) or close (`false`) the modal.
   *
   * @return {boolean}
   *         the current open state of the modaldialog
   */ opened(value) {
        if (typeof value === "boolean") this[value ? "open" : "close"]();
        return this.opened_;
    }
    /**
   * Closes the modal, does nothing if the `ModalDialog` is
   * not open.
   *
   * @fires ModalDialog#beforemodalclose
   * @fires ModalDialog#modalclose
   */ close() {
        if (!this.opened_) return;
        const player = this.player();
        /**
      * Fired just before a `ModalDialog` is closed.
      *
      * @event ModalDialog#beforemodalclose
      * @type {Event}
      */ this.trigger("beforemodalclose");
        this.opened_ = false;
        if (this.wasPlaying_ && this.options_.pauseOnOpen) player.play();
        this.off("keydown", this.handleKeyDown_);
        if (this.hadControls_) player.controls(true);
        this.hide();
        this.el().setAttribute("aria-hidden", "true");
        /**
      * Fired just after a `ModalDialog` is closed.
      *
      * @event ModalDialog#modalclose
      * @type {Event}
      */ this.trigger("modalclose");
        this.conditionalBlur_();
        if (this.options_.temporary) this.dispose();
    }
    /**
   * Check to see if the `ModalDialog` is closeable via the UI.
   *
   * @param  {boolean} [value]
   *         If given as a boolean, it will set the `closeable` option.
   *
   * @return {boolean}
   *         Returns the final value of the closable option.
   */ closeable(value) {
        if (typeof value === "boolean") {
            const closeable = this.closeable_ = !!value;
            let close = this.getChild("closeButton");
            // If this is being made closeable and has no close button, add one.
            if (closeable && !close) {
                // The close button should be a child of the modal - not its
                // content element, so temporarily change the content element.
                const temp = this.contentEl_;
                this.contentEl_ = this.el_;
                close = this.addChild("closeButton", {
                    controlText: "Close Modal Dialog"
                });
                this.contentEl_ = temp;
                this.on(close, "close", this.close_);
            }
            // If this is being made uncloseable and has a close button, remove it.
            if (!closeable && close) {
                this.off(close, "close", this.close_);
                this.removeChild(close);
                close.dispose();
            }
        }
        return this.closeable_;
    }
    /**
   * Fill the modal's content element with the modal's "content" option.
   * The content element will be emptied before this change takes place.
   */ fill() {
        this.fillWith(this.content());
    }
    /**
   * Fill the modal's content element with arbitrary content.
   * The content element will be emptied before this change takes place.
   *
   * @fires ModalDialog#beforemodalfill
   * @fires ModalDialog#modalfill
   *
   * @param { import('./utils/dom').ContentDescriptor} [content]
   *        The same rules apply to this as apply to the `content` option.
   */ fillWith(content) {
        const contentEl = this.contentEl();
        const parentEl = contentEl.parentNode;
        const nextSiblingEl = contentEl.nextSibling;
        /**
      * Fired just before a `ModalDialog` is filled with content.
      *
      * @event ModalDialog#beforemodalfill
      * @type {Event}
      */ this.trigger("beforemodalfill");
        this.hasBeenFilled_ = true;
        // Detach the content element from the DOM before performing
        // manipulation to avoid modifying the live DOM multiple times.
        parentEl.removeChild(contentEl);
        this.empty();
        $e88cd91ee18355c1$var$insertContent(contentEl, content);
        /**
     * Fired just after a `ModalDialog` is filled with content.
     *
     * @event ModalDialog#modalfill
     * @type {Event}
     */ this.trigger("modalfill");
        // Re-inject the re-filled content element.
        if (nextSiblingEl) parentEl.insertBefore(contentEl, nextSiblingEl);
        else parentEl.appendChild(contentEl);
        // make sure that the close button is last in the dialog DOM
        const closeButton = this.getChild("closeButton");
        if (closeButton) parentEl.appendChild(closeButton.el_);
    }
    /**
   * Empties the content element. This happens anytime the modal is filled.
   *
   * @fires ModalDialog#beforemodalempty
   * @fires ModalDialog#modalempty
   */ empty() {
        /**
    * Fired just before a `ModalDialog` is emptied.
    *
    * @event ModalDialog#beforemodalempty
    * @type {Event}
    */ this.trigger("beforemodalempty");
        $e88cd91ee18355c1$var$emptyEl(this.contentEl());
        /**
    * Fired just after a `ModalDialog` is emptied.
    *
    * @event ModalDialog#modalempty
    * @type {Event}
    */ this.trigger("modalempty");
    }
    /**
   * Gets or sets the modal content, which gets normalized before being
   * rendered into the DOM.
   *
   * This does not update the DOM or fill the modal, but it is called during
   * that process.
   *
   * @param  { import('./utils/dom').ContentDescriptor} [value]
   *         If defined, sets the internal content value to be used on the
   *         next call(s) to `fill`. This value is normalized before being
   *         inserted. To "clear" the internal content value, pass `null`.
   *
   * @return { import('./utils/dom').ContentDescriptor}
   *         The current content of the modal dialog
   */ content(value) {
        if (typeof value !== "undefined") this.content_ = value;
        return this.content_;
    }
    /**
   * conditionally focus the modal dialog if focus was previously on the player.
   *
   * @private
   */ conditionalFocus_() {
        const activeEl = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).activeElement;
        const playerEl = this.player_.el_;
        this.previouslyActiveEl_ = null;
        if (playerEl.contains(activeEl) || playerEl === activeEl) {
            this.previouslyActiveEl_ = activeEl;
            this.focus();
        }
    }
    /**
   * conditionally blur the element and refocus the last focused element
   *
   * @private
   */ conditionalBlur_() {
        if (this.previouslyActiveEl_) {
            this.previouslyActiveEl_.focus();
            this.previouslyActiveEl_ = null;
        }
    }
    /**
   * Keydown handler. Attached when modal is focused.
   *
   * @listens keydown
   */ handleKeyDown(event) {
        // Do not allow keydowns to reach out of the modal dialog.
        event.stopPropagation();
        if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Escape") && this.closeable()) {
            event.preventDefault();
            this.close();
            return;
        }
        // exit early if it isn't a tab key
        if (!(0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Tab")) return;
        const focusableEls = this.focusableEls_();
        const activeEl = this.el_.querySelector(":focus");
        let focusIndex;
        for(let i = 0; i < focusableEls.length; i++)if (activeEl === focusableEls[i]) {
            focusIndex = i;
            break;
        }
        if ((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).activeElement === this.el_) focusIndex = 0;
        if (event.shiftKey && focusIndex === 0) {
            focusableEls[focusableEls.length - 1].focus();
            event.preventDefault();
        } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {
            focusableEls[0].focus();
            event.preventDefault();
        }
    }
    /**
   * get all focusable elements
   *
   * @private
   */ focusableEls_() {
        const allChildren = this.el_.querySelectorAll("*");
        return Array.prototype.filter.call(allChildren, (child)=>{
            return (child instanceof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).HTMLAnchorElement || child instanceof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).HTMLAreaElement) && child.hasAttribute("href") || (child instanceof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).HTMLInputElement || child instanceof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).HTMLSelectElement || child instanceof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).HTMLTextAreaElement || child instanceof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).HTMLButtonElement) && !child.hasAttribute("disabled") || child instanceof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).HTMLIFrameElement || child instanceof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).HTMLObjectElement || child instanceof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).HTMLEmbedElement || child.hasAttribute("tabindex") && child.getAttribute("tabindex") !== -1 || child.hasAttribute("contenteditable");
        });
    }
}
/**
 * Default options for `ModalDialog` default options.
 *
 * @type {Object}
 * @private
 */ $e88cd91ee18355c1$var$ModalDialog.prototype.options_ = {
    pauseOnOpen: true,
    temporary: true
};
$e88cd91ee18355c1$var$Component$1.registerComponent("ModalDialog", $e88cd91ee18355c1$var$ModalDialog);
/**
 * @file track-list.js
 */ /**
 * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and
 * {@link VideoTrackList}
 *
 * @extends EventTarget
 */ class $e88cd91ee18355c1$var$TrackList extends $e88cd91ee18355c1$var$EventTarget$2 {
    /**
   * Create an instance of this class
   *
   * @param { import('./track').default[] } tracks
   *        A list of tracks to initialize the list with.
   *
   * @abstract
   */ constructor(tracks = []){
        super();
        this.tracks_ = [];
        /**
     * @memberof TrackList
     * @member {number} length
     *         The current number of `Track`s in the this Trackist.
     * @instance
     */ Object.defineProperty(this, "length", {
            get () {
                return this.tracks_.length;
            }
        });
        for(let i = 0; i < tracks.length; i++)this.addTrack(tracks[i]);
    }
    /**
   * Add a {@link Track} to the `TrackList`
   *
   * @param { import('./track').default } track
   *        The audio, video, or text track to add to the list.
   *
   * @fires TrackList#addtrack
   */ addTrack(track) {
        const index = this.tracks_.length;
        if (!("" + index in this)) Object.defineProperty(this, index, {
            get () {
                return this.tracks_[index];
            }
        });
        // Do not add duplicate tracks
        if (this.tracks_.indexOf(track) === -1) {
            this.tracks_.push(track);
            /**
       * Triggered when a track is added to a track list.
       *
       * @event TrackList#addtrack
       * @type {Event}
       * @property {Track} track
       *           A reference to track that was added.
       */ this.trigger({
                track: track,
                type: "addtrack",
                target: this
            });
        }
        /**
     * Triggered when a track label is changed.
     *
     * @event TrackList#addtrack
     * @type {Event}
     * @property {Track} track
     *           A reference to track that was added.
     */ track.labelchange_ = ()=>{
            this.trigger({
                track: track,
                type: "labelchange",
                target: this
            });
        };
        if ($e88cd91ee18355c1$var$isEvented(track)) track.addEventListener("labelchange", track.labelchange_);
    }
    /**
   * Remove a {@link Track} from the `TrackList`
   *
   * @param { import('./track').default } rtrack
   *        The audio, video, or text track to remove from the list.
   *
   * @fires TrackList#removetrack
   */ removeTrack(rtrack) {
        let track;
        for(let i = 0, l = this.length; i < l; i++)if (this[i] === rtrack) {
            track = this[i];
            if (track.off) track.off();
            this.tracks_.splice(i, 1);
            break;
        }
        if (!track) return;
        /**
     * Triggered when a track is removed from track list.
     *
     * @event TrackList#removetrack
     * @type {Event}
     * @property {Track} track
     *           A reference to track that was removed.
     */ this.trigger({
            track: track,
            type: "removetrack",
            target: this
        });
    }
    /**
   * Get a Track from the TrackList by a tracks id
   *
   * @param {string} id - the id of the track to get
   * @method getTrackById
   * @return { import('./track').default }
   * @private
   */ getTrackById(id) {
        let result = null;
        for(let i = 0, l = this.length; i < l; i++){
            const track = this[i];
            if (track.id === id) {
                result = track;
                break;
            }
        }
        return result;
    }
}
/**
 * Triggered when a different track is selected/enabled.
 *
 * @event TrackList#change
 * @type {Event}
 */ /**
 * Events that can be called with on + eventName. See {@link EventHandler}.
 *
 * @property {Object} TrackList#allowedEvents_
 * @protected
 */ $e88cd91ee18355c1$var$TrackList.prototype.allowedEvents_ = {
    change: "change",
    addtrack: "addtrack",
    removetrack: "removetrack",
    labelchange: "labelchange"
};
// emulate attribute EventHandler support to allow for feature detection
for(const event in $e88cd91ee18355c1$var$TrackList.prototype.allowedEvents_)$e88cd91ee18355c1$var$TrackList.prototype["on" + event] = null;
/**
 * @file audio-track-list.js
 */ /**
 * Anywhere we call this function we diverge from the spec
 * as we only support one enabled audiotrack at a time
 *
 * @param {AudioTrackList} list
 *        list to work on
 *
 * @param { import('./audio-track').default } track
 *        The track to skip
 *
 * @private
 */ const $e88cd91ee18355c1$var$disableOthers$1 = function(list, track) {
    for(let i = 0; i < list.length; i++){
        if (!Object.keys(list[i]).length || track.id === list[i].id) continue;
        // another audio track is enabled, disable it
        list[i].enabled = false;
    }
};
/**
 * The current list of {@link AudioTrack} for a media file.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}
 * @extends TrackList
 */ class $e88cd91ee18355c1$var$AudioTrackList extends $e88cd91ee18355c1$var$TrackList {
    /**
   * Create an instance of this class.
   *
   * @param { import('./audio-track').default[] } [tracks=[]]
   *        A list of `AudioTrack` to instantiate the list with.
   */ constructor(tracks = []){
        // make sure only 1 track is enabled
        // sorted from last index to first index
        for(let i = tracks.length - 1; i >= 0; i--)if (tracks[i].enabled) {
            $e88cd91ee18355c1$var$disableOthers$1(tracks, tracks[i]);
            break;
        }
        super(tracks);
        this.changing_ = false;
    }
    /**
   * Add an {@link AudioTrack} to the `AudioTrackList`.
   *
   * @param { import('./audio-track').default } track
   *        The AudioTrack to add to the list
   *
   * @fires TrackList#addtrack
   */ addTrack(track) {
        if (track.enabled) $e88cd91ee18355c1$var$disableOthers$1(this, track);
        super.addTrack(track);
        // native tracks don't have this
        if (!track.addEventListener) return;
        track.enabledChange_ = ()=>{
            // when we are disabling other tracks (since we don't support
            // more than one track at a time) we will set changing_
            // to true so that we don't trigger additional change events
            if (this.changing_) return;
            this.changing_ = true;
            $e88cd91ee18355c1$var$disableOthers$1(this, track);
            this.changing_ = false;
            this.trigger("change");
        };
        /**
     * @listens AudioTrack#enabledchange
     * @fires TrackList#change
     */ track.addEventListener("enabledchange", track.enabledChange_);
    }
    removeTrack(rtrack) {
        super.removeTrack(rtrack);
        if (rtrack.removeEventListener && rtrack.enabledChange_) {
            rtrack.removeEventListener("enabledchange", rtrack.enabledChange_);
            rtrack.enabledChange_ = null;
        }
    }
}
/**
 * @file video-track-list.js
 */ /**
 * Un-select all other {@link VideoTrack}s that are selected.
 *
 * @param {VideoTrackList} list
 *        list to work on
 *
 * @param { import('./video-track').default } track
 *        The track to skip
 *
 * @private
 */ const $e88cd91ee18355c1$var$disableOthers = function(list, track) {
    for(let i = 0; i < list.length; i++){
        if (!Object.keys(list[i]).length || track.id === list[i].id) continue;
        // another video track is enabled, disable it
        list[i].selected = false;
    }
};
/**
 * The current list of {@link VideoTrack} for a video.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}
 * @extends TrackList
 */ class $e88cd91ee18355c1$var$VideoTrackList extends $e88cd91ee18355c1$var$TrackList {
    /**
   * Create an instance of this class.
   *
   * @param {VideoTrack[]} [tracks=[]]
   *        A list of `VideoTrack` to instantiate the list with.
   */ constructor(tracks = []){
        // make sure only 1 track is enabled
        // sorted from last index to first index
        for(let i = tracks.length - 1; i >= 0; i--)if (tracks[i].selected) {
            $e88cd91ee18355c1$var$disableOthers(tracks, tracks[i]);
            break;
        }
        super(tracks);
        this.changing_ = false;
        /**
     * @member {number} VideoTrackList#selectedIndex
     *         The current index of the selected {@link VideoTrack`}.
     */ Object.defineProperty(this, "selectedIndex", {
            get () {
                for(let i = 0; i < this.length; i++){
                    if (this[i].selected) return i;
                }
                return -1;
            },
            set () {}
        });
    }
    /**
   * Add a {@link VideoTrack} to the `VideoTrackList`.
   *
   * @param { import('./video-track').default } track
   *        The VideoTrack to add to the list
   *
   * @fires TrackList#addtrack
   */ addTrack(track) {
        if (track.selected) $e88cd91ee18355c1$var$disableOthers(this, track);
        super.addTrack(track);
        // native tracks don't have this
        if (!track.addEventListener) return;
        track.selectedChange_ = ()=>{
            if (this.changing_) return;
            this.changing_ = true;
            $e88cd91ee18355c1$var$disableOthers(this, track);
            this.changing_ = false;
            this.trigger("change");
        };
        /**
     * @listens VideoTrack#selectedchange
     * @fires TrackList#change
     */ track.addEventListener("selectedchange", track.selectedChange_);
    }
    removeTrack(rtrack) {
        super.removeTrack(rtrack);
        if (rtrack.removeEventListener && rtrack.selectedChange_) {
            rtrack.removeEventListener("selectedchange", rtrack.selectedChange_);
            rtrack.selectedChange_ = null;
        }
    }
}
/**
 * @file text-track-list.js
 */ /**
 * The current list of {@link TextTrack} for a media file.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}
 * @extends TrackList
 */ class $e88cd91ee18355c1$var$TextTrackList extends $e88cd91ee18355c1$var$TrackList {
    /**
   * Add a {@link TextTrack} to the `TextTrackList`
   *
   * @param { import('./text-track').default } track
   *        The text track to add to the list.
   *
   * @fires TrackList#addtrack
   */ addTrack(track) {
        super.addTrack(track);
        if (!this.queueChange_) this.queueChange_ = ()=>this.queueTrigger("change");
        if (!this.triggerSelectedlanguagechange) this.triggerSelectedlanguagechange_ = ()=>this.trigger("selectedlanguagechange");
        /**
     * @listens TextTrack#modechange
     * @fires TrackList#change
     */ track.addEventListener("modechange", this.queueChange_);
        const nonLanguageTextTrackKind = [
            "metadata",
            "chapters"
        ];
        if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) track.addEventListener("modechange", this.triggerSelectedlanguagechange_);
    }
    removeTrack(rtrack) {
        super.removeTrack(rtrack);
        // manually remove the event handlers we added
        if (rtrack.removeEventListener) {
            if (this.queueChange_) rtrack.removeEventListener("modechange", this.queueChange_);
            if (this.selectedlanguagechange_) rtrack.removeEventListener("modechange", this.triggerSelectedlanguagechange_);
        }
    }
}
/**
 * @file html-track-element-list.js
 */ /**
 * The current list of {@link HtmlTrackElement}s.
 */ class $e88cd91ee18355c1$var$HtmlTrackElementList {
    /**
   * Create an instance of this class.
   *
   * @param {HtmlTrackElement[]} [tracks=[]]
   *        A list of `HtmlTrackElement` to instantiate the list with.
   */ constructor(trackElements = []){
        this.trackElements_ = [];
        /**
     * @memberof HtmlTrackElementList
     * @member {number} length
     *         The current number of `Track`s in the this Trackist.
     * @instance
     */ Object.defineProperty(this, "length", {
            get () {
                return this.trackElements_.length;
            }
        });
        for(let i = 0, length = trackElements.length; i < length; i++)this.addTrackElement_(trackElements[i]);
    }
    /**
   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`
   *
   * @param {HtmlTrackElement} trackElement
   *        The track element to add to the list.
   *
   * @private
   */ addTrackElement_(trackElement) {
        const index = this.trackElements_.length;
        if (!("" + index in this)) Object.defineProperty(this, index, {
            get () {
                return this.trackElements_[index];
            }
        });
        // Do not add duplicate elements
        if (this.trackElements_.indexOf(trackElement) === -1) this.trackElements_.push(trackElement);
    }
    /**
   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an
   * {@link TextTrack}.
   *
   * @param {TextTrack} track
   *        The track associated with a track element.
   *
   * @return {HtmlTrackElement|undefined}
   *         The track element that was found or undefined.
   *
   * @private
   */ getTrackElementByTrack_(track) {
        let trackElement_;
        for(let i = 0, length = this.trackElements_.length; i < length; i++)if (track === this.trackElements_[i].track) {
            trackElement_ = this.trackElements_[i];
            break;
        }
        return trackElement_;
    }
    /**
   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`
   *
   * @param {HtmlTrackElement} trackElement
   *        The track element to remove from the list.
   *
   * @private
   */ removeTrackElement_(trackElement) {
        for(let i = 0, length = this.trackElements_.length; i < length; i++)if (trackElement === this.trackElements_[i]) {
            if (this.trackElements_[i].track && typeof this.trackElements_[i].track.off === "function") this.trackElements_[i].track.off();
            if (typeof this.trackElements_[i].off === "function") this.trackElements_[i].off();
            this.trackElements_.splice(i, 1);
            break;
        }
    }
}
/**
 * @file text-track-cue-list.js
 */ /**
 * @typedef {Object} TextTrackCueList~TextTrackCue
 *
 * @property {string} id
 *           The unique id for this text track cue
 *
 * @property {number} startTime
 *           The start time for this text track cue
 *
 * @property {number} endTime
 *           The end time for this text track cue
 *
 * @property {boolean} pauseOnExit
 *           Pause when the end time is reached if true.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}
 */ /**
 * A List of TextTrackCues.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}
 */ class $e88cd91ee18355c1$var$TextTrackCueList {
    /**
   * Create an instance of this class..
   *
   * @param {Array} cues
   *        A list of cues to be initialized with
   */ constructor(cues){
        $e88cd91ee18355c1$var$TextTrackCueList.prototype.setCues_.call(this, cues);
        /**
     * @memberof TextTrackCueList
     * @member {number} length
     *         The current number of `TextTrackCue`s in the TextTrackCueList.
     * @instance
     */ Object.defineProperty(this, "length", {
            get () {
                return this.length_;
            }
        });
    }
    /**
   * A setter for cues in this list. Creates getters
   * an an index for the cues.
   *
   * @param {Array} cues
   *        An array of cues to set
   *
   * @private
   */ setCues_(cues) {
        const oldLength = this.length || 0;
        let i = 0;
        const l = cues.length;
        this.cues_ = cues;
        this.length_ = cues.length;
        const defineProp = function(index) {
            if (!("" + index in this)) Object.defineProperty(this, "" + index, {
                get () {
                    return this.cues_[index];
                }
            });
        };
        if (oldLength < l) {
            i = oldLength;
            for(; i < l; i++)defineProp.call(this, i);
        }
    }
    /**
   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.
   *
   * @param {string} id
   *        The id of the cue that should be searched for.
   *
   * @return {TextTrackCueList~TextTrackCue|null}
   *         A single cue or null if none was found.
   */ getCueById(id) {
        let result = null;
        for(let i = 0, l = this.length; i < l; i++){
            const cue = this[i];
            if (cue.id === id) {
                result = cue;
                break;
            }
        }
        return result;
    }
}
/**
 * @file track-kinds.js
 */ /**
 * All possible `VideoTrackKind`s
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind
 * @typedef VideoTrack~Kind
 * @enum
 */ const $e88cd91ee18355c1$var$VideoTrackKind = {
    alternative: "alternative",
    captions: "captions",
    main: "main",
    sign: "sign",
    subtitles: "subtitles",
    commentary: "commentary"
};
/**
 * All possible `AudioTrackKind`s
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind
 * @typedef AudioTrack~Kind
 * @enum
 */ const $e88cd91ee18355c1$var$AudioTrackKind = {
    "alternative": "alternative",
    "descriptions": "descriptions",
    "main": "main",
    "main-desc": "main-desc",
    "translation": "translation",
    "commentary": "commentary"
};
/**
 * All possible `TextTrackKind`s
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind
 * @typedef TextTrack~Kind
 * @enum
 */ const $e88cd91ee18355c1$var$TextTrackKind = {
    subtitles: "subtitles",
    captions: "captions",
    descriptions: "descriptions",
    chapters: "chapters",
    metadata: "metadata"
};
/**
 * All possible `TextTrackMode`s
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode
 * @typedef TextTrack~Mode
 * @enum
 */ const $e88cd91ee18355c1$var$TextTrackMode = {
    disabled: "disabled",
    hidden: "hidden",
    showing: "showing"
};
/**
 * @file track.js
 */ /**
 * A Track class that contains all of the common functionality for {@link AudioTrack},
 * {@link VideoTrack}, and {@link TextTrack}.
 *
 * > Note: This class should not be used directly
 *
 * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}
 * @extends EventTarget
 * @abstract
 */ class $e88cd91ee18355c1$var$Track extends $e88cd91ee18355c1$var$EventTarget$2 {
    /**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {string} [options.kind='']
   *        A valid kind for the track type you are creating.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @abstract
   */ constructor(options = {}){
        super();
        const trackProps = {
            id: options.id || "vjs_track_" + $e88cd91ee18355c1$var$newGUID(),
            kind: options.kind || "",
            language: options.language || ""
        };
        let label = options.label || "";
        /**
     * @memberof Track
     * @member {string} id
     *         The id of this track. Cannot be changed after creation.
     * @instance
     *
     * @readonly
     */ /**
     * @memberof Track
     * @member {string} kind
     *         The kind of track that this is. Cannot be changed after creation.
     * @instance
     *
     * @readonly
     */ /**
     * @memberof Track
     * @member {string} language
     *         The two letter language code for this track. Cannot be changed after
     *         creation.
     * @instance
     *
     * @readonly
     */ for(const key in trackProps)Object.defineProperty(this, key, {
            get () {
                return trackProps[key];
            },
            set () {}
        });
        /**
     * @memberof Track
     * @member {string} label
     *         The label of this track. Cannot be changed after creation.
     * @instance
     *
     * @fires Track#labelchange
     */ Object.defineProperty(this, "label", {
            get () {
                return label;
            },
            set (newLabel) {
                if (newLabel !== label) {
                    label = newLabel;
                    /**
           * An event that fires when label changes on this track.
           *
           * > Note: This is not part of the spec!
           *
           * @event Track#labelchange
           * @type {Event}
           */ this.trigger("labelchange");
                }
            }
        });
    }
}
/**
 * @file url.js
 * @module url
 */ /**
 * @typedef {Object} url:URLObject
 *
 * @property {string} protocol
 *           The protocol of the url that was parsed.
 *
 * @property {string} hostname
 *           The hostname of the url that was parsed.
 *
 * @property {string} port
 *           The port of the url that was parsed.
 *
 * @property {string} pathname
 *           The pathname of the url that was parsed.
 *
 * @property {string} search
 *           The search query of the url that was parsed.
 *
 * @property {string} hash
 *           The hash of the url that was parsed.
 *
 * @property {string} host
 *           The host of the url that was parsed.
 */ /**
 * Resolve and parse the elements of a URL.
 *
 * @function
 * @param    {String} url
 *           The url to parse
 *
 * @return   {url:URLObject}
 *           An object of url details
 */ const $e88cd91ee18355c1$var$parseUrl = function(url) {
    // This entire method can be replace with URL once we are able to drop IE11
    const props = [
        "protocol",
        "hostname",
        "port",
        "pathname",
        "search",
        "hash",
        "host"
    ];
    // add the url to an anchor and let the browser parse the URL
    const a = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("a");
    a.href = url;
    // Copy the specific URL properties to a new object
    // This is also needed for IE because the anchor loses its
    // properties when it's removed from the dom
    const details = {};
    for(let i = 0; i < props.length; i++)details[props[i]] = a[props[i]];
    // IE adds the port to the host property unlike everyone else. If
    // a port identifier is added for standard ports, strip it.
    if (details.protocol === "http:") details.host = details.host.replace(/:80$/, "");
    if (details.protocol === "https:") details.host = details.host.replace(/:443$/, "");
    if (!details.protocol) details.protocol = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).location.protocol;
    /* istanbul ignore if */ if (!details.host) details.host = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).location.host;
    return details;
};
/**
 * Get absolute version of relative URL.
 *
 * @function
 * @param    {string} url
 *           URL to make absolute
 *
 * @return   {string}
 *           Absolute URL
 *
 * @see      http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
 */ const $e88cd91ee18355c1$var$getAbsoluteURL = function(url) {
    // Check if absolute URL
    if (!url.match(/^https?:\/\//)) {
        // Add the url to an anchor and let the browser parse it to convert to an absolute url
        const a = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("a");
        a.href = url;
        url = a.href;
    }
    return url;
};
/**
 * Returns the extension of the passed file name. It will return an empty string
 * if passed an invalid path.
 *
 * @function
 * @param    {string} path
 *           The fileName path like '/path/to/file.mp4'
 *
 * @return  {string}
 *           The extension in lower case or an empty string if no
 *           extension could be found.
 */ const $e88cd91ee18355c1$var$getFileExtension = function(path) {
    if (typeof path === "string") {
        const splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/;
        const pathParts = splitPathRe.exec(path);
        if (pathParts) return pathParts.pop().toLowerCase();
    }
    return "";
};
/**
 * Returns whether the url passed is a cross domain request or not.
 *
 * @function
 * @param    {string} url
 *           The url to check.
 *
 * @param    {Object} [winLoc]
 *           the domain to check the url against, defaults to window.location
 *
 * @param    {string} [winLoc.protocol]
 *           The window location protocol defaults to window.location.protocol
 *
 * @param    {string} [winLoc.host]
 *           The window location host defaults to window.location.host
 *
 * @return   {boolean}
 *           Whether it is a cross domain request or not.
 */ const $e88cd91ee18355c1$var$isCrossOrigin = function(url, winLoc = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).location) {
    const urlInfo = $e88cd91ee18355c1$var$parseUrl(url);
    // IE8 protocol relative urls will return ':' for protocol
    const srcProtocol = urlInfo.protocol === ":" ? winLoc.protocol : urlInfo.protocol;
    // Check if url is for another domain/origin
    // IE8 doesn't know location.origin, so we won't rely on it here
    const crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;
    return crossOrigin;
};
var $e88cd91ee18355c1$var$Url = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    parseUrl: $e88cd91ee18355c1$var$parseUrl,
    getAbsoluteURL: $e88cd91ee18355c1$var$getAbsoluteURL,
    getFileExtension: $e88cd91ee18355c1$var$getFileExtension,
    isCrossOrigin: $e88cd91ee18355c1$var$isCrossOrigin
});
/**
 * @file text-track.js
 */ /**
 * Takes a webvtt file contents and parses it into cues
 *
 * @param {string} srcContent
 *        webVTT file contents
 *
 * @param {TextTrack} track
 *        TextTrack to add cues to. Cues come from the srcContent.
 *
 * @private
 */ const $e88cd91ee18355c1$var$parseCues = function(srcContent, track) {
    const parser = new (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebVTT.Parser((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))), (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).vttjs, (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebVTT.StringDecoder());
    const errors = [];
    parser.oncue = function(cue) {
        track.addCue(cue);
    };
    parser.onparsingerror = function(error) {
        errors.push(error);
    };
    parser.onflush = function() {
        track.trigger({
            type: "loadeddata",
            target: track
        });
    };
    parser.parse(srcContent);
    if (errors.length > 0) {
        if ((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).console && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).console.groupCollapsed) (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).console.groupCollapsed(`Text Track parsing errors for ${track.src}`);
        errors.forEach((error)=>$e88cd91ee18355c1$var$log$1.error(error));
        if ((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).console && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).console.groupEnd) (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).console.groupEnd();
    }
    parser.flush();
};
/**
 * Load a `TextTrack` from a specified url.
 *
 * @param {string} src
 *        Url to load track from.
 *
 * @param {TextTrack} track
 *        Track to add cues to. Comes from the content at the end of `url`.
 *
 * @private
 */ const $e88cd91ee18355c1$var$loadTrack = function(src, track) {
    const opts = {
        uri: src
    };
    const crossOrigin = $e88cd91ee18355c1$var$isCrossOrigin(src);
    if (crossOrigin) opts.cors = crossOrigin;
    const withCredentials = track.tech_.crossOrigin() === "use-credentials";
    if (withCredentials) opts.withCredentials = withCredentials;
    (0, (/*@__PURE__*/$parcel$interopDefault($cd8ca4e7fb39bc63$exports)))(opts, $e88cd91ee18355c1$var$bind_(this, function(err, response, responseBody) {
        if (err) return $e88cd91ee18355c1$var$log$1.error(err, response);
        track.loaded_ = true;
        // Make sure that vttjs has loaded, otherwise, wait till it finished loading
        // NOTE: this is only used for the alt/video.novtt.js build
        if (typeof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebVTT !== "function") {
            if (track.tech_) // to prevent use before define eslint error, we define loadHandler
            // as a let here
            track.tech_.any([
                "vttjsloaded",
                "vttjserror"
            ], (event)=>{
                if (event.type === "vttjserror") {
                    $e88cd91ee18355c1$var$log$1.error(`vttjs failed to load, stopping trying to process ${track.src}`);
                    return;
                }
                return $e88cd91ee18355c1$var$parseCues(responseBody, track);
            });
        } else $e88cd91ee18355c1$var$parseCues(responseBody, track);
    }));
};
/**
 * A representation of a single `TextTrack`.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}
 * @extends Track
 */ class $e88cd91ee18355c1$var$TextTrack extends $e88cd91ee18355c1$var$Track {
    /**
   * Create an instance of this class.
   *
   * @param {Object} options={}
   *        Object of option names and values
   *
   * @param { import('../tech/tech').default } options.tech
   *        A reference to the tech that owns this TextTrack.
   *
   * @param {TextTrack~Kind} [options.kind='subtitles']
   *        A valid text track kind.
   *
   * @param {TextTrack~Mode} [options.mode='disabled']
   *        A valid text track mode.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this TextTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {string} [options.srclang='']
   *        A valid two character language code. An alternative, but deprioritized
   *        version of `options.language`
   *
   * @param {string} [options.src]
   *        A url to TextTrack cues.
   *
   * @param {boolean} [options.default]
   *        If this track should default to on or off.
   */ constructor(options = {}){
        if (!options.tech) throw new Error("A tech was not provided.");
        const settings = $e88cd91ee18355c1$var$merge$1(options, {
            kind: $e88cd91ee18355c1$var$TextTrackKind[options.kind] || "subtitles",
            language: options.language || options.srclang || ""
        });
        let mode = $e88cd91ee18355c1$var$TextTrackMode[settings.mode] || "disabled";
        const default_ = settings.default;
        if (settings.kind === "metadata" || settings.kind === "chapters") mode = "hidden";
        super(settings);
        this.tech_ = settings.tech;
        this.cues_ = [];
        this.activeCues_ = [];
        this.preload_ = this.tech_.preloadTextTracks !== false;
        const cues = new $e88cd91ee18355c1$var$TextTrackCueList(this.cues_);
        const activeCues = new $e88cd91ee18355c1$var$TextTrackCueList(this.activeCues_);
        let changed = false;
        this.timeupdateHandler = $e88cd91ee18355c1$var$bind_(this, function(event = {}) {
            if (this.tech_.isDisposed()) return;
            if (!this.tech_.isReady_) {
                if (event.type !== "timeupdate") this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);
                return;
            }
            // Accessing this.activeCues for the side-effects of updating itself
            // due to its nature as a getter function. Do not remove or cues will
            // stop updating!
            // Use the setter to prevent deletion from uglify (pure_getters rule)
            this.activeCues = this.activeCues;
            if (changed) {
                this.trigger("cuechange");
                changed = false;
            }
            if (event.type !== "timeupdate") this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);
        });
        const disposeHandler = ()=>{
            this.stopTracking();
        };
        this.tech_.one("dispose", disposeHandler);
        if (mode !== "disabled") this.startTracking();
        Object.defineProperties(this, {
            /**
       * @memberof TextTrack
       * @member {boolean} default
       *         If this track was set to be on or off by default. Cannot be changed after
       *         creation.
       * @instance
       *
       * @readonly
       */ default: {
                get () {
                    return default_;
                },
                set () {}
            },
            /**
       * @memberof TextTrack
       * @member {string} mode
       *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will
       *         not be set if setting to an invalid mode.
       * @instance
       *
       * @fires TextTrack#modechange
       */ mode: {
                get () {
                    return mode;
                },
                set (newMode) {
                    if (!$e88cd91ee18355c1$var$TextTrackMode[newMode]) return;
                    if (mode === newMode) return;
                    mode = newMode;
                    if (!this.preload_ && mode !== "disabled" && this.cues.length === 0) // On-demand load.
                    $e88cd91ee18355c1$var$loadTrack(this.src, this);
                    this.stopTracking();
                    if (mode !== "disabled") this.startTracking();
                    /**
           * An event that fires when mode changes on this track. This allows
           * the TextTrackList that holds this track to act accordingly.
           *
           * > Note: This is not part of the spec!
           *
           * @event TextTrack#modechange
           * @type {Event}
           */ this.trigger("modechange");
                }
            },
            /**
       * @memberof TextTrack
       * @member {TextTrackCueList} cues
       *         The text track cue list for this TextTrack.
       * @instance
       */ cues: {
                get () {
                    if (!this.loaded_) return null;
                    return cues;
                },
                set () {}
            },
            /**
       * @memberof TextTrack
       * @member {TextTrackCueList} activeCues
       *         The list text track cues that are currently active for this TextTrack.
       * @instance
       */ activeCues: {
                get () {
                    if (!this.loaded_) return null;
                    // nothing to do
                    if (this.cues.length === 0) return activeCues;
                    const ct = this.tech_.currentTime();
                    const active = [];
                    for(let i = 0, l = this.cues.length; i < l; i++){
                        const cue = this.cues[i];
                        if (cue.startTime <= ct && cue.endTime >= ct) active.push(cue);
                    }
                    changed = false;
                    if (active.length !== this.activeCues_.length) changed = true;
                    else {
                        for(let i = 0; i < active.length; i++)if (this.activeCues_.indexOf(active[i]) === -1) changed = true;
                    }
                    this.activeCues_ = active;
                    activeCues.setCues_(this.activeCues_);
                    return activeCues;
                },
                // /!\ Keep this setter empty (see the timeupdate handler above)
                set () {}
            }
        });
        if (settings.src) {
            this.src = settings.src;
            if (!this.preload_) // Tracks will load on-demand.
            // Act like we're loaded for other purposes.
            this.loaded_ = true;
            if (this.preload_ || settings.kind !== "subtitles" && settings.kind !== "captions") $e88cd91ee18355c1$var$loadTrack(this.src, this);
        } else this.loaded_ = true;
    }
    startTracking() {
        // More precise cues based on requestVideoFrameCallback with a requestAnimationFram fallback
        this.rvf_ = this.tech_.requestVideoFrameCallback(this.timeupdateHandler);
        // Also listen to timeupdate in case rVFC/rAF stops (window in background, audio in video el)
        this.tech_.on("timeupdate", this.timeupdateHandler);
    }
    stopTracking() {
        if (this.rvf_) {
            this.tech_.cancelVideoFrameCallback(this.rvf_);
            this.rvf_ = undefined;
        }
        this.tech_.off("timeupdate", this.timeupdateHandler);
    }
    /**
   * Add a cue to the internal list of cues.
   *
   * @param {TextTrack~Cue} cue
   *        The cue to add to our internal list
   */ addCue(originalCue) {
        let cue = originalCue;
        // Testing if the cue is a VTTCue in a way that survives minification
        if (!("getCueAsHTML" in cue)) {
            cue = new (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);
            for(const prop in originalCue)if (!(prop in cue)) cue[prop] = originalCue[prop];
            // make sure that `id` is copied over
            cue.id = originalCue.id;
            cue.originalCue_ = originalCue;
        }
        const tracks = this.tech_.textTracks();
        for(let i = 0; i < tracks.length; i++)if (tracks[i] !== this) tracks[i].removeCue(cue);
        this.cues_.push(cue);
        this.cues.setCues_(this.cues_);
    }
    /**
   * Remove a cue from our internal list
   *
   * @param {TextTrack~Cue} removeCue
   *        The cue to remove from our internal list
   */ removeCue(removeCue) {
        let i = this.cues_.length;
        while(i--){
            const cue = this.cues_[i];
            if (cue === removeCue || cue.originalCue_ && cue.originalCue_ === removeCue) {
                this.cues_.splice(i, 1);
                this.cues.setCues_(this.cues_);
                break;
            }
        }
    }
}
/**
 * cuechange - One or more cues in the track have become active or stopped being active.
 * @protected
 */ $e88cd91ee18355c1$var$TextTrack.prototype.allowedEvents_ = {
    cuechange: "cuechange"
};
/**
 * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}
 * only one `AudioTrack` in the list will be enabled at a time.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}
 * @extends Track
 */ class $e88cd91ee18355c1$var$AudioTrack extends $e88cd91ee18355c1$var$Track {
    /**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {AudioTrack~Kind} [options.kind='']
   *        A valid audio track kind
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {boolean} [options.enabled]
   *        If this track is the one that is currently playing. If this track is part of
   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.
   */ constructor(options = {}){
        const settings = $e88cd91ee18355c1$var$merge$1(options, {
            kind: $e88cd91ee18355c1$var$AudioTrackKind[options.kind] || ""
        });
        super(settings);
        let enabled = false;
        /**
     * @memberof AudioTrack
     * @member {boolean} enabled
     *         If this `AudioTrack` is enabled or not. When setting this will
     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.
     * @instance
     *
     * @fires VideoTrack#selectedchange
     */ Object.defineProperty(this, "enabled", {
            get () {
                return enabled;
            },
            set (newEnabled) {
                // an invalid or unchanged value
                if (typeof newEnabled !== "boolean" || newEnabled === enabled) return;
                enabled = newEnabled;
                /**
         * An event that fires when enabled changes on this track. This allows
         * the AudioTrackList that holds this track to act accordingly.
         *
         * > Note: This is not part of the spec! Native tracks will do
         *         this internally without an event.
         *
         * @event AudioTrack#enabledchange
         * @type {Event}
         */ this.trigger("enabledchange");
            }
        });
        // if the user sets this track to selected then
        // set selected to that true value otherwise
        // we keep it false
        if (settings.enabled) this.enabled = settings.enabled;
        this.loaded_ = true;
    }
}
/**
 * A representation of a single `VideoTrack`.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}
 * @extends Track
 */ class $e88cd91ee18355c1$var$VideoTrack extends $e88cd91ee18355c1$var$Track {
    /**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {string} [options.kind='']
   *        A valid {@link VideoTrack~Kind}
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {boolean} [options.selected]
   *        If this track is the one that is currently playing.
   */ constructor(options = {}){
        const settings = $e88cd91ee18355c1$var$merge$1(options, {
            kind: $e88cd91ee18355c1$var$VideoTrackKind[options.kind] || ""
        });
        super(settings);
        let selected = false;
        /**
     * @memberof VideoTrack
     * @member {boolean} selected
     *         If this `VideoTrack` is selected or not. When setting this will
     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.
     * @instance
     *
     * @fires VideoTrack#selectedchange
     */ Object.defineProperty(this, "selected", {
            get () {
                return selected;
            },
            set (newSelected) {
                // an invalid or unchanged value
                if (typeof newSelected !== "boolean" || newSelected === selected) return;
                selected = newSelected;
                /**
         * An event that fires when selected changes on this track. This allows
         * the VideoTrackList that holds this track to act accordingly.
         *
         * > Note: This is not part of the spec! Native tracks will do
         *         this internally without an event.
         *
         * @event VideoTrack#selectedchange
         * @type {Event}
         */ this.trigger("selectedchange");
            }
        });
        // if the user sets this track to selected then
        // set selected to that true value otherwise
        // we keep it false
        if (settings.selected) this.selected = settings.selected;
    }
}
/**
 * @file html-track-element.js
 */ /**
 * A single track represented in the DOM.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}
 * @extends EventTarget
 */ class $e88cd91ee18355c1$var$HTMLTrackElement extends $e88cd91ee18355c1$var$EventTarget$2 {
    /**
   * Create an instance of this class.
   *
   * @param {Object} options={}
   *        Object of option names and values
   *
   * @param { import('../tech/tech').default } options.tech
   *        A reference to the tech that owns this HTMLTrackElement.
   *
   * @param {TextTrack~Kind} [options.kind='subtitles']
   *        A valid text track kind.
   *
   * @param {TextTrack~Mode} [options.mode='disabled']
   *        A valid text track mode.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this TextTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {string} [options.srclang='']
   *        A valid two character language code. An alternative, but deprioritized
   *        version of `options.language`
   *
   * @param {string} [options.src]
   *        A url to TextTrack cues.
   *
   * @param {boolean} [options.default]
   *        If this track should default to on or off.
   */ constructor(options = {}){
        super();
        let readyState;
        const track = new $e88cd91ee18355c1$var$TextTrack(options);
        this.kind = track.kind;
        this.src = track.src;
        this.srclang = track.language;
        this.label = track.label;
        this.default = track.default;
        Object.defineProperties(this, {
            /**
       * @memberof HTMLTrackElement
       * @member {HTMLTrackElement~ReadyState} readyState
       *         The current ready state of the track element.
       * @instance
       */ readyState: {
                get () {
                    return readyState;
                }
            },
            /**
       * @memberof HTMLTrackElement
       * @member {TextTrack} track
       *         The underlying TextTrack object.
       * @instance
       *
       */ track: {
                get () {
                    return track;
                }
            }
        });
        readyState = $e88cd91ee18355c1$var$HTMLTrackElement.NONE;
        /**
     * @listens TextTrack#loadeddata
     * @fires HTMLTrackElement#load
     */ track.addEventListener("loadeddata", ()=>{
            readyState = $e88cd91ee18355c1$var$HTMLTrackElement.LOADED;
            this.trigger({
                type: "load",
                target: this
            });
        });
    }
}
/**
 * @protected
 */ $e88cd91ee18355c1$var$HTMLTrackElement.prototype.allowedEvents_ = {
    load: "load"
};
/**
 * The text track not loaded state.
 *
 * @type {number}
 * @static
 */ $e88cd91ee18355c1$var$HTMLTrackElement.NONE = 0;
/**
 * The text track loading state.
 *
 * @type {number}
 * @static
 */ $e88cd91ee18355c1$var$HTMLTrackElement.LOADING = 1;
/**
 * The text track loaded state.
 *
 * @type {number}
 * @static
 */ $e88cd91ee18355c1$var$HTMLTrackElement.LOADED = 2;
/**
 * The text track failed to load state.
 *
 * @type {number}
 * @static
 */ $e88cd91ee18355c1$var$HTMLTrackElement.ERROR = 3;
/*
 * This file contains all track properties that are used in
 * player.js, tech.js, html5.js and possibly other techs in the future.
 */ const $e88cd91ee18355c1$var$NORMAL = {
    audio: {
        ListClass: $e88cd91ee18355c1$var$AudioTrackList,
        TrackClass: $e88cd91ee18355c1$var$AudioTrack,
        capitalName: "Audio"
    },
    video: {
        ListClass: $e88cd91ee18355c1$var$VideoTrackList,
        TrackClass: $e88cd91ee18355c1$var$VideoTrack,
        capitalName: "Video"
    },
    text: {
        ListClass: $e88cd91ee18355c1$var$TextTrackList,
        TrackClass: $e88cd91ee18355c1$var$TextTrack,
        capitalName: "Text"
    }
};
Object.keys($e88cd91ee18355c1$var$NORMAL).forEach(function(type) {
    $e88cd91ee18355c1$var$NORMAL[type].getterName = `${type}Tracks`;
    $e88cd91ee18355c1$var$NORMAL[type].privateName = `${type}Tracks_`;
});
const $e88cd91ee18355c1$var$REMOTE = {
    remoteText: {
        ListClass: $e88cd91ee18355c1$var$TextTrackList,
        TrackClass: $e88cd91ee18355c1$var$TextTrack,
        capitalName: "RemoteText",
        getterName: "remoteTextTracks",
        privateName: "remoteTextTracks_"
    },
    remoteTextEl: {
        ListClass: $e88cd91ee18355c1$var$HtmlTrackElementList,
        TrackClass: $e88cd91ee18355c1$var$HTMLTrackElement,
        capitalName: "RemoteTextTrackEls",
        getterName: "remoteTextTrackEls",
        privateName: "remoteTextTrackEls_"
    }
};
const $e88cd91ee18355c1$var$ALL = Object.assign({}, $e88cd91ee18355c1$var$NORMAL, $e88cd91ee18355c1$var$REMOTE);
$e88cd91ee18355c1$var$REMOTE.names = Object.keys($e88cd91ee18355c1$var$REMOTE);
$e88cd91ee18355c1$var$NORMAL.names = Object.keys($e88cd91ee18355c1$var$NORMAL);
$e88cd91ee18355c1$var$ALL.names = [].concat($e88cd91ee18355c1$var$REMOTE.names).concat($e88cd91ee18355c1$var$NORMAL.names);
/**
 * @file tech.js
 */ /**
 * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string
 * that just contains the src url alone.
 * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`
   * `var SourceString = 'http://example.com/some-video.mp4';`
 *
 * @typedef {Object|string} SourceObject
 *
 * @property {string} src
 *           The url to the source
 *
 * @property {string} type
 *           The mime type of the source
 */ /**
 * A function used by {@link Tech} to create a new {@link TextTrack}.
 *
 * @private
 *
 * @param {Tech} self
 *        An instance of the Tech class.
 *
 * @param {string} kind
 *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
 *
 * @param {string} [label]
 *        Label to identify the text track
 *
 * @param {string} [language]
 *        Two letter language abbreviation
 *
 * @param {Object} [options={}]
 *        An object with additional text track options
 *
 * @return {TextTrack}
 *          The text track that was created.
 */ function $e88cd91ee18355c1$var$createTrackHelper(self1, kind, label, language, options = {}) {
    const tracks = self1.textTracks();
    options.kind = kind;
    if (label) options.label = label;
    if (language) options.language = language;
    options.tech = self1;
    const track = new $e88cd91ee18355c1$var$ALL.text.TrackClass(options);
    tracks.addTrack(track);
    return track;
}
/**
 * This is the base class for media playback technology controllers, such as
 * {@link HTML5}
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$Tech extends $e88cd91ee18355c1$var$Component$1 {
    /**
  * Create an instance of this Tech.
  *
  * @param {Object} [options]
  *        The key/value store of player options.
  *
  * @param {Function} [ready]
  *        Callback function to call when the `HTML5` Tech is ready.
  */ constructor(options = {}, ready = function() {}){
        // we don't want the tech to report user activity automatically.
        // This is done manually in addControlsListeners
        options.reportTouchActivity = false;
        super(null, options, ready);
        this.onDurationChange_ = (e)=>this.onDurationChange(e);
        this.trackProgress_ = (e)=>this.trackProgress(e);
        this.trackCurrentTime_ = (e)=>this.trackCurrentTime(e);
        this.stopTrackingCurrentTime_ = (e)=>this.stopTrackingCurrentTime(e);
        this.disposeSourceHandler_ = (e)=>this.disposeSourceHandler(e);
        this.queuedHanders_ = new Set();
        // keep track of whether the current source has played at all to
        // implement a very limited played()
        this.hasStarted_ = false;
        this.on("playing", function() {
            this.hasStarted_ = true;
        });
        this.on("loadstart", function() {
            this.hasStarted_ = false;
        });
        $e88cd91ee18355c1$var$ALL.names.forEach((name)=>{
            const props = $e88cd91ee18355c1$var$ALL[name];
            if (options && options[props.getterName]) this[props.privateName] = options[props.getterName];
        });
        // Manually track progress in cases where the browser/tech doesn't report it.
        if (!this.featuresProgressEvents) this.manualProgressOn();
        // Manually track timeupdates in cases where the browser/tech doesn't report it.
        if (!this.featuresTimeupdateEvents) this.manualTimeUpdatesOn();
        [
            "Text",
            "Audio",
            "Video"
        ].forEach((track)=>{
            if (options[`native${track}Tracks`] === false) this[`featuresNative${track}Tracks`] = false;
        });
        if (options.nativeCaptions === false || options.nativeTextTracks === false) this.featuresNativeTextTracks = false;
        else if (options.nativeCaptions === true || options.nativeTextTracks === true) this.featuresNativeTextTracks = true;
        if (!this.featuresNativeTextTracks) this.emulateTextTracks();
        this.preloadTextTracks = options.preloadTextTracks !== false;
        this.autoRemoteTextTracks_ = new $e88cd91ee18355c1$var$ALL.text.ListClass();
        this.initTrackListeners();
        // Turn on component tap events only if not using native controls
        if (!options.nativeControlsForTouch) this.emitTapEvents();
        if (this.constructor) this.name_ = this.constructor.name || "Unknown Tech";
    }
    /**
   * A special function to trigger source set in a way that will allow player
   * to re-trigger if the player or tech are not ready yet.
   *
   * @fires Tech#sourceset
   * @param {string} src The source string at the time of the source changing.
   */ triggerSourceset(src) {
        if (!this.isReady_) // on initial ready we have to trigger source set
        // 1ms after ready so that player can watch for it.
        this.one("ready", ()=>this.setTimeout(()=>this.triggerSourceset(src), 1));
        /**
     * Fired when the source is set on the tech causing the media element
     * to reload.
     *
     * @see {@link Player#event:sourceset}
     * @event Tech#sourceset
     * @type {Event}
     */ this.trigger({
            src: src,
            type: "sourceset"
        });
    }
    /* Fallbacks for unsupported event types
  ================================================================================ */ /**
   * Polyfill the `progress` event for browsers that don't support it natively.
   *
   * @see {@link Tech#trackProgress}
   */ manualProgressOn() {
        this.on("durationchange", this.onDurationChange_);
        this.manualProgress = true;
        // Trigger progress watching when a source begins loading
        this.one("ready", this.trackProgress_);
    }
    /**
   * Turn off the polyfill for `progress` events that was created in
   * {@link Tech#manualProgressOn}
   */ manualProgressOff() {
        this.manualProgress = false;
        this.stopTrackingProgress();
        this.off("durationchange", this.onDurationChange_);
    }
    /**
   * This is used to trigger a `progress` event when the buffered percent changes. It
   * sets an interval function that will be called every 500 milliseconds to check if the
   * buffer end percent has changed.
   *
   * > This function is called by {@link Tech#manualProgressOn}
   *
   * @param {Event} event
   *        The `ready` event that caused this to run.
   *
   * @listens Tech#ready
   * @fires Tech#progress
   */ trackProgress(event) {
        this.stopTrackingProgress();
        this.progressInterval = this.setInterval($e88cd91ee18355c1$var$bind_(this, function() {
            // Don't trigger unless buffered amount is greater than last time
            const numBufferedPercent = this.bufferedPercent();
            if (this.bufferedPercent_ !== numBufferedPercent) /**
         * See {@link Player#progress}
         *
         * @event Tech#progress
         * @type {Event}
         */ this.trigger("progress");
            this.bufferedPercent_ = numBufferedPercent;
            if (numBufferedPercent === 1) this.stopTrackingProgress();
        }), 500);
    }
    /**
   * Update our internal duration on a `durationchange` event by calling
   * {@link Tech#duration}.
   *
   * @param {Event} event
   *        The `durationchange` event that caused this to run.
   *
   * @listens Tech#durationchange
   */ onDurationChange(event) {
        this.duration_ = this.duration();
    }
    /**
   * Get and create a `TimeRange` object for buffering.
   *
   * @return { import('../utils/time').TimeRange }
   *         The time range object that was created.
   */ buffered() {
        return $e88cd91ee18355c1$var$createTimeRanges$1(0, 0);
    }
    /**
   * Get the percentage of the current video that is currently buffered.
   *
   * @return {number}
   *         A number from 0 to 1 that represents the decimal percentage of the
   *         video that is buffered.
   *
   */ bufferedPercent() {
        return $e88cd91ee18355c1$var$bufferedPercent(this.buffered(), this.duration_);
    }
    /**
   * Turn off the polyfill for `progress` events that was created in
   * {@link Tech#manualProgressOn}
   * Stop manually tracking progress events by clearing the interval that was set in
   * {@link Tech#trackProgress}.
   */ stopTrackingProgress() {
        this.clearInterval(this.progressInterval);
    }
    /**
   * Polyfill the `timeupdate` event for browsers that don't support it.
   *
   * @see {@link Tech#trackCurrentTime}
   */ manualTimeUpdatesOn() {
        this.manualTimeUpdates = true;
        this.on("play", this.trackCurrentTime_);
        this.on("pause", this.stopTrackingCurrentTime_);
    }
    /**
   * Turn off the polyfill for `timeupdate` events that was created in
   * {@link Tech#manualTimeUpdatesOn}
   */ manualTimeUpdatesOff() {
        this.manualTimeUpdates = false;
        this.stopTrackingCurrentTime();
        this.off("play", this.trackCurrentTime_);
        this.off("pause", this.stopTrackingCurrentTime_);
    }
    /**
   * Sets up an interval function to track current time and trigger `timeupdate` every
   * 250 milliseconds.
   *
   * @listens Tech#play
   * @triggers Tech#timeupdate
   */ trackCurrentTime() {
        if (this.currentTimeInterval) this.stopTrackingCurrentTime();
        this.currentTimeInterval = this.setInterval(function() {
            /**
       * Triggered at an interval of 250ms to indicated that time is passing in the video.
       *
       * @event Tech#timeupdate
       * @type {Event}
       */ this.trigger({
                type: "timeupdate",
                target: this,
                manuallyTriggered: true
            });
        // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
        }, 250);
    }
    /**
   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the
   * `timeupdate` event is no longer triggered.
   *
   * @listens {Tech#pause}
   */ stopTrackingCurrentTime() {
        this.clearInterval(this.currentTimeInterval);
        // #1002 - if the video ends right before the next timeupdate would happen,
        // the progress bar won't make it all the way to the end
        this.trigger({
            type: "timeupdate",
            target: this,
            manuallyTriggered: true
        });
    }
    /**
   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},
   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.
   *
   * @fires Component#dispose
   */ dispose() {
        // clear out all tracks because we can't reuse them between techs
        this.clearTracks($e88cd91ee18355c1$var$NORMAL.names);
        // Turn off any manual progress or timeupdate tracking
        if (this.manualProgress) this.manualProgressOff();
        if (this.manualTimeUpdates) this.manualTimeUpdatesOff();
        super.dispose();
    }
    /**
   * Clear out a single `TrackList` or an array of `TrackLists` given their names.
   *
   * > Note: Techs without source handlers should call this between sources for `video`
   *         & `audio` tracks. You don't want to use them between tracks!
   *
   * @param {string[]|string} types
   *        TrackList names to clear, valid names are `video`, `audio`, and
   *        `text`.
   */ clearTracks(types) {
        types = [].concat(types);
        // clear out all tracks because we can't reuse them between techs
        types.forEach((type)=>{
            const list = this[`${type}Tracks`]() || [];
            let i = list.length;
            while(i--){
                const track = list[i];
                if (type === "text") this.removeRemoteTextTrack(track);
                list.removeTrack(track);
            }
        });
    }
    /**
   * Remove any TextTracks added via addRemoteTextTrack that are
   * flagged for automatic garbage collection
   */ cleanupAutoTextTracks() {
        const list = this.autoRemoteTextTracks_ || [];
        let i = list.length;
        while(i--){
            const track = list[i];
            this.removeRemoteTextTrack(track);
        }
    }
    /**
   * Reset the tech, which will removes all sources and reset the internal readyState.
   *
   * @abstract
   */ reset() {}
    /**
   * Get the value of `crossOrigin` from the tech.
   *
   * @abstract
   *
   * @see {Html5#crossOrigin}
   */ crossOrigin() {}
    /**
   * Set the value of `crossOrigin` on the tech.
   *
   * @abstract
   *
   * @param {string} crossOrigin the crossOrigin value
   * @see {Html5#setCrossOrigin}
   */ setCrossOrigin() {}
    /**
   * Get or set an error on the Tech.
   *
   * @param {MediaError} [err]
   *        Error to set on the Tech
   *
   * @return {MediaError|null}
   *         The current error object on the tech, or null if there isn't one.
   */ error(err) {
        if (err !== undefined) {
            this.error_ = new $e88cd91ee18355c1$var$MediaError(err);
            this.trigger("error");
        }
        return this.error_;
    }
    /**
   * Returns the `TimeRange`s that have been played through for the current source.
   *
   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.
   *         It only checks whether the source has played at all or not.
   *
   * @return { import('../utils/time').TimeRange }
   *         - A single time range if this video has played
   *         - An empty set of ranges if not.
   */ played() {
        if (this.hasStarted_) return $e88cd91ee18355c1$var$createTimeRanges$1(0, 0);
        return $e88cd91ee18355c1$var$createTimeRanges$1();
    }
    /**
   * Start playback
   *
   * @abstract
   *
   * @see {Html5#play}
   */ play() {}
    /**
   * Set whether we are scrubbing or not
   *
   * @abstract
   * @param {boolean} _isScrubbing
   *                  - true for we are currently scrubbing
   *                  - false for we are no longer scrubbing
   *
   * @see {Html5#setScrubbing}
   */ setScrubbing(_isScrubbing) {}
    /**
   * Get whether we are scrubbing or not
   *
   * @abstract
   *
   * @see {Html5#scrubbing}
   */ scrubbing() {}
    /**
   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was
   * previously called.
   *
   * @param {number} _seconds
   *        Set the current time of the media to this.
   * @fires Tech#timeupdate
   */ setCurrentTime(_seconds) {
        // improve the accuracy of manual timeupdates
        if (this.manualTimeUpdates) /**
       * A manual `timeupdate` event.
       *
       * @event Tech#timeupdate
       * @type {Event}
       */ this.trigger({
            type: "timeupdate",
            target: this,
            manuallyTriggered: true
        });
    }
    /**
   * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and
   * {@link TextTrackList} events.
   *
   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.
   *
   * @fires Tech#audiotrackchange
   * @fires Tech#videotrackchange
   * @fires Tech#texttrackchange
   */ initTrackListeners() {
        /**
      * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}
      *
      * @event Tech#audiotrackchange
      * @type {Event}
      */ /**
      * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}
      *
      * @event Tech#videotrackchange
      * @type {Event}
      */ /**
      * Triggered when tracks are added or removed on the Tech {@link TextTrackList}
      *
      * @event Tech#texttrackchange
      * @type {Event}
      */ $e88cd91ee18355c1$var$NORMAL.names.forEach((name)=>{
            const props = $e88cd91ee18355c1$var$NORMAL[name];
            const trackListChanges = ()=>{
                this.trigger(`${name}trackchange`);
            };
            const tracks = this[props.getterName]();
            tracks.addEventListener("removetrack", trackListChanges);
            tracks.addEventListener("addtrack", trackListChanges);
            this.on("dispose", ()=>{
                tracks.removeEventListener("removetrack", trackListChanges);
                tracks.removeEventListener("addtrack", trackListChanges);
            });
        });
    }
    /**
   * Emulate TextTracks using vtt.js if necessary
   *
   * @fires Tech#vttjsloaded
   * @fires Tech#vttjserror
   */ addWebVttScript_() {
        if ((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebVTT) return;
        // Initially, Tech.el_ is a child of a dummy-div wait until the Component system
        // signals that the Tech is ready at which point Tech.el_ is part of the DOM
        // before inserting the WebVTT script
        if ((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).body.contains(this.el())) {
            // load via require if available and vtt.js script location was not passed in
            // as an option. novtt builds will turn the above require call into an empty object
            // which will cause this if check to always fail.
            if (!this.options_["vtt.js"] && $e88cd91ee18355c1$var$isPlain((0, (/*@__PURE__*/$parcel$interopDefault($c9029e8aaad0b4d6$exports)))) && Object.keys((0, (/*@__PURE__*/$parcel$interopDefault($c9029e8aaad0b4d6$exports)))).length > 0) {
                this.trigger("vttjsloaded");
                return;
            }
            // load vtt.js via the script location option or the cdn of no location was
            // passed in
            const script = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("script");
            script.src = this.options_["vtt.js"] || "https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js";
            script.onload = ()=>{
                /**
         * Fired when vtt.js is loaded.
         *
         * @event Tech#vttjsloaded
         * @type {Event}
         */ this.trigger("vttjsloaded");
            };
            script.onerror = ()=>{
                /**
         * Fired when vtt.js was not loaded due to an error
         *
         * @event Tech#vttjsloaded
         * @type {Event}
         */ this.trigger("vttjserror");
            };
            this.on("dispose", ()=>{
                script.onload = null;
                script.onerror = null;
            });
            // but have not loaded yet and we set it to true before the inject so that
            // we don't overwrite the injected window.WebVTT if it loads right away
            (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebVTT = true;
            this.el().parentNode.appendChild(script);
        } else this.ready(this.addWebVttScript_);
    }
    /**
   * Emulate texttracks
   *
   */ emulateTextTracks() {
        const tracks = this.textTracks();
        const remoteTracks = this.remoteTextTracks();
        const handleAddTrack = (e)=>tracks.addTrack(e.track);
        const handleRemoveTrack = (e)=>tracks.removeTrack(e.track);
        remoteTracks.on("addtrack", handleAddTrack);
        remoteTracks.on("removetrack", handleRemoveTrack);
        this.addWebVttScript_();
        const updateDisplay = ()=>this.trigger("texttrackchange");
        const textTracksChanges = ()=>{
            updateDisplay();
            for(let i = 0; i < tracks.length; i++){
                const track = tracks[i];
                track.removeEventListener("cuechange", updateDisplay);
                if (track.mode === "showing") track.addEventListener("cuechange", updateDisplay);
            }
        };
        textTracksChanges();
        tracks.addEventListener("change", textTracksChanges);
        tracks.addEventListener("addtrack", textTracksChanges);
        tracks.addEventListener("removetrack", textTracksChanges);
        this.on("dispose", function() {
            remoteTracks.off("addtrack", handleAddTrack);
            remoteTracks.off("removetrack", handleRemoveTrack);
            tracks.removeEventListener("change", textTracksChanges);
            tracks.removeEventListener("addtrack", textTracksChanges);
            tracks.removeEventListener("removetrack", textTracksChanges);
            for(let i = 0; i < tracks.length; i++){
                const track = tracks[i];
                track.removeEventListener("cuechange", updateDisplay);
            }
        });
    }
    /**
   * Create and returns a remote {@link TextTrack} object.
   *
   * @param {string} kind
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
   *
   * @param {string} [label]
   *        Label to identify the text track
   *
   * @param {string} [language]
   *        Two letter language abbreviation
   *
   * @return {TextTrack}
   *         The TextTrack that gets created.
   */ addTextTrack(kind, label, language) {
        if (!kind) throw new Error("TextTrack kind is required but was not provided");
        return $e88cd91ee18355c1$var$createTrackHelper(this, kind, label, language);
    }
    /**
   * Create an emulated TextTrack for use by addRemoteTextTrack
   *
   * This is intended to be overridden by classes that inherit from
   * Tech in order to create native or custom TextTracks.
   *
   * @param {Object} options
   *        The object should contain the options to initialize the TextTrack with.
   *
   * @param {string} [options.kind]
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
   *
   * @param {string} [options.label].
   *        Label to identify the text track
   *
   * @param {string} [options.language]
   *        Two letter language abbreviation.
   *
   * @return {HTMLTrackElement}
   *         The track element that gets created.
   */ createRemoteTextTrack(options) {
        const track = $e88cd91ee18355c1$var$merge$1(options, {
            tech: this
        });
        return new $e88cd91ee18355c1$var$REMOTE.remoteTextEl.TrackClass(track);
    }
    /**
   * Creates a remote text track object and returns an html track element.
   *
   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.
   *
   * @param {Object} options
   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.
   *
   * @param {boolean} [manualCleanup=false]
   *        - When false: the TextTrack will be automatically removed from the video
   *          element whenever the source changes
   *        - When True: The TextTrack will have to be cleaned up manually
   *
   * @return {HTMLTrackElement}
   *         An Html Track Element.
   *
   */ addRemoteTextTrack(options = {}, manualCleanup) {
        const htmlTrackElement = this.createRemoteTextTrack(options);
        if (typeof manualCleanup !== "boolean") manualCleanup = false;
        // store HTMLTrackElement and TextTrack to remote list
        this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
        this.remoteTextTracks().addTrack(htmlTrackElement.track);
        if (manualCleanup === false) // create the TextTrackList if it doesn't exist
        this.ready(()=>this.autoRemoteTextTracks_.addTrack(htmlTrackElement.track));
        return htmlTrackElement;
    }
    /**
   * Remove a remote text track from the remote `TextTrackList`.
   *
   * @param {TextTrack} track
   *        `TextTrack` to remove from the `TextTrackList`
   */ removeRemoteTextTrack(track) {
        const trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);
        // remove HTMLTrackElement and TextTrack from remote list
        this.remoteTextTrackEls().removeTrackElement_(trackElement);
        this.remoteTextTracks().removeTrack(track);
        this.autoRemoteTextTracks_.removeTrack(track);
    }
    /**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object}
   *         An object with supported media playback quality metrics
   *
   * @abstract
   */ getVideoPlaybackQuality() {
        return {};
    }
    /**
   * Attempt to create a floating video window always on top of other windows
   * so that users may continue consuming media while they interact with other
   * content sites, or applications on their device.
   *
   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
   *
   * @return {Promise|undefined}
   *         A promise with a Picture-in-Picture window if the browser supports
   *         Promises (or one was passed in as an option). It returns undefined
   *         otherwise.
   *
   * @abstract
   */ requestPictureInPicture() {
        return Promise.reject();
    }
    /**
   * A method to check for the value of the 'disablePictureInPicture' <video> property.
   * Defaults to true, as it should be considered disabled if the tech does not support pip
   *
   * @abstract
   */ disablePictureInPicture() {
        return true;
    }
    /**
   * A method to set or unset the 'disablePictureInPicture' <video> property.
   *
   * @abstract
   */ setDisablePictureInPicture() {}
    /**
   * A fallback implementation of requestVideoFrameCallback using requestAnimationFrame
   *
   * @param {function} cb
   * @return {number} request id
   */ requestVideoFrameCallback(cb) {
        const id = $e88cd91ee18355c1$var$newGUID();
        if (!this.isReady_ || this.paused()) {
            this.queuedHanders_.add(id);
            this.one("playing", ()=>{
                if (this.queuedHanders_.has(id)) {
                    this.queuedHanders_.delete(id);
                    cb();
                }
            });
        } else this.requestNamedAnimationFrame(id, cb);
        return id;
    }
    /**
   * A fallback implementation of cancelVideoFrameCallback
   *
   * @param {number} id id of callback to be cancelled
   */ cancelVideoFrameCallback(id) {
        if (this.queuedHanders_.has(id)) this.queuedHanders_.delete(id);
        else this.cancelNamedAnimationFrame(id);
    }
    /**
   * A method to set a poster from a `Tech`.
   *
   * @abstract
   */ setPoster() {}
    /**
   * A method to check for the presence of the 'playsinline' <video> attribute.
   *
   * @abstract
   */ playsinline() {}
    /**
   * A method to set or unset the 'playsinline' <video> attribute.
   *
   * @abstract
   */ setPlaysinline() {}
    /**
   * Attempt to force override of native audio tracks.
   *
   * @param {boolean} override - If set to true native audio will be overridden,
   * otherwise native audio will potentially be used.
   *
   * @abstract
   */ overrideNativeAudioTracks(override) {}
    /**
   * Attempt to force override of native video tracks.
   *
   * @param {boolean} override - If set to true native video will be overridden,
   * otherwise native video will potentially be used.
   *
   * @abstract
   */ overrideNativeVideoTracks(override) {}
    /**
   * Check if the tech can support the given mime-type.
   *
   * The base tech does not support any type, but source handlers might
   * overwrite this.
   *
   * @param  {string} _type
   *         The mimetype to check for support
   *
   * @return {string}
   *         'probably', 'maybe', or empty string
   *
   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}
   *
   * @abstract
   */ canPlayType(_type) {
        return "";
    }
    /**
   * Check if the type is supported by this tech.
   *
   * The base tech does not support any type, but source handlers might
   * overwrite this.
   *
   * @param {string} _type
   *        The media type to check
   * @return {string} Returns the native video element's response
   */ static canPlayType(_type) {
        return "";
    }
    /**
   * Check if the tech can support the given source
   *
   * @param {Object} srcObj
   *        The source object
   * @param {Object} options
   *        The options passed to the tech
   * @return {string} 'probably', 'maybe', or '' (empty string)
   */ static canPlaySource(srcObj, options) {
        return $e88cd91ee18355c1$var$Tech.canPlayType(srcObj.type);
    }
    /*
   * Return whether the argument is a Tech or not.
   * Can be passed either a Class like `Html5` or a instance like `player.tech_`
   *
   * @param {Object} component
   *        The item to check
   *
   * @return {boolean}
   *         Whether it is a tech or not
   *         - True if it is a tech
   *         - False if it is not
   */ static isTech(component) {
        return component.prototype instanceof $e88cd91ee18355c1$var$Tech || component instanceof $e88cd91ee18355c1$var$Tech || component === $e88cd91ee18355c1$var$Tech;
    }
    /**
   * Registers a `Tech` into a shared list for videojs.
   *
   * @param {string} name
   *        Name of the `Tech` to register.
   *
   * @param {Object} tech
   *        The `Tech` class to register.
   */ static registerTech(name, tech) {
        if (!$e88cd91ee18355c1$var$Tech.techs_) $e88cd91ee18355c1$var$Tech.techs_ = {};
        if (!$e88cd91ee18355c1$var$Tech.isTech(tech)) throw new Error(`Tech ${name} must be a Tech`);
        if (!$e88cd91ee18355c1$var$Tech.canPlayType) throw new Error("Techs must have a static canPlayType method on them");
        if (!$e88cd91ee18355c1$var$Tech.canPlaySource) throw new Error("Techs must have a static canPlaySource method on them");
        name = $e88cd91ee18355c1$var$toTitleCase$1(name);
        $e88cd91ee18355c1$var$Tech.techs_[name] = tech;
        $e88cd91ee18355c1$var$Tech.techs_[$e88cd91ee18355c1$var$toLowerCase(name)] = tech;
        if (name !== "Tech") // camel case the techName for use in techOrder
        $e88cd91ee18355c1$var$Tech.defaultTechOrder_.push(name);
        return tech;
    }
    /**
   * Get a `Tech` from the shared list by name.
   *
   * @param {string} name
   *        `camelCase` or `TitleCase` name of the Tech to get
   *
   * @return {Tech|undefined}
   *         The `Tech` or undefined if there was no tech with the name requested.
   */ static getTech(name) {
        if (!name) return;
        if ($e88cd91ee18355c1$var$Tech.techs_ && $e88cd91ee18355c1$var$Tech.techs_[name]) return $e88cd91ee18355c1$var$Tech.techs_[name];
        name = $e88cd91ee18355c1$var$toTitleCase$1(name);
        if ((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))) && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).videojs && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).videojs[name]) {
            $e88cd91ee18355c1$var$log$1.warn(`The ${name} tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)`);
            return (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).videojs[name];
        }
    }
}
/**
 * Get the {@link VideoTrackList}
 *
 * @returns {VideoTrackList}
 * @method Tech.prototype.videoTracks
 */ /**
 * Get the {@link AudioTrackList}
 *
 * @returns {AudioTrackList}
 * @method Tech.prototype.audioTracks
 */ /**
 * Get the {@link TextTrackList}
 *
 * @returns {TextTrackList}
 * @method Tech.prototype.textTracks
 */ /**
 * Get the remote element {@link TextTrackList}
 *
 * @returns {TextTrackList}
 * @method Tech.prototype.remoteTextTracks
 */ /**
 * Get the remote element {@link HtmlTrackElementList}
 *
 * @returns {HtmlTrackElementList}
 * @method Tech.prototype.remoteTextTrackEls
 */ $e88cd91ee18355c1$var$ALL.names.forEach(function(name) {
    const props = $e88cd91ee18355c1$var$ALL[name];
    $e88cd91ee18355c1$var$Tech.prototype[props.getterName] = function() {
        this[props.privateName] = this[props.privateName] || new props.ListClass();
        return this[props.privateName];
    };
});
/**
 * List of associated text tracks
 *
 * @type {TextTrackList}
 * @private
 * @property Tech#textTracks_
 */ /**
 * List of associated audio tracks.
 *
 * @type {AudioTrackList}
 * @private
 * @property Tech#audioTracks_
 */ /**
 * List of associated video tracks.
 *
 * @type {VideoTrackList}
 * @private
 * @property Tech#videoTracks_
 */ /**
 * Boolean indicating whether the `Tech` supports volume control.
 *
 * @type {boolean}
 * @default
 */ $e88cd91ee18355c1$var$Tech.prototype.featuresVolumeControl = true;
/**
 * Boolean indicating whether the `Tech` supports muting volume.
 *
 * @type {boolean}
 * @default
 */ $e88cd91ee18355c1$var$Tech.prototype.featuresMuteControl = true;
/**
 * Boolean indicating whether the `Tech` supports fullscreen resize control.
 * Resizing plugins using request fullscreen reloads the plugin
 *
 * @type {boolean}
 * @default
 */ $e88cd91ee18355c1$var$Tech.prototype.featuresFullscreenResize = false;
/**
 * Boolean indicating whether the `Tech` supports changing the speed at which the video
 * plays. Examples:
 *   - Set player to play 2x (twice) as fast
 *   - Set player to play 0.5x (half) as fast
 *
 * @type {boolean}
 * @default
 */ $e88cd91ee18355c1$var$Tech.prototype.featuresPlaybackRate = false;
/**
 * Boolean indicating whether the `Tech` supports the `progress` event.
 * This will be used to determine if {@link Tech#manualProgressOn} should be called.
 *
 * @type {boolean}
 * @default
 */ $e88cd91ee18355c1$var$Tech.prototype.featuresProgressEvents = false;
/**
 * Boolean indicating whether the `Tech` supports the `sourceset` event.
 *
 * A tech should set this to `true` and then use {@link Tech#triggerSourceset}
 * to trigger a {@link Tech#event:sourceset} at the earliest time after getting
 * a new source.
 *
 * @type {boolean}
 * @default
 */ $e88cd91ee18355c1$var$Tech.prototype.featuresSourceset = false;
/**
 * Boolean indicating whether the `Tech` supports the `timeupdate` event.
 * This will be used to determine if {@link Tech#manualTimeUpdates} should be called.
 *
 * @type {boolean}
 * @default
 */ $e88cd91ee18355c1$var$Tech.prototype.featuresTimeupdateEvents = false;
/**
 * Boolean indicating whether the `Tech` supports the native `TextTrack`s.
 * This will help us integrate with native `TextTrack`s if the browser supports them.
 *
 * @type {boolean}
 * @default
 */ $e88cd91ee18355c1$var$Tech.prototype.featuresNativeTextTracks = false;
/**
 * Boolean indicating whether the `Tech` supports `requestVideoFrameCallback`.
 *
 * @type {boolean}
 * @default
 */ $e88cd91ee18355c1$var$Tech.prototype.featuresVideoFrameCallback = false;
/**
 * A functional mixin for techs that want to use the Source Handler pattern.
 * Source handlers are scripts for handling specific formats.
 * The source handler pattern is used for adaptive formats (HLS, DASH) that
 * manually load video data and feed it into a Source Buffer (Media Source Extensions)
 * Example: `Tech.withSourceHandlers.call(MyTech);`
 *
 * @param {Tech} _Tech
 *        The tech to add source handler functions to.
 *
 * @mixes Tech~SourceHandlerAdditions
 */ $e88cd91ee18355c1$var$Tech.withSourceHandlers = function(_Tech) {
    /**
   * Register a source handler
   *
   * @param {Function} handler
   *        The source handler class
   *
   * @param {number} [index]
   *        Register it at the following index
   */ _Tech.registerSourceHandler = function(handler, index) {
        let handlers = _Tech.sourceHandlers;
        if (!handlers) handlers = _Tech.sourceHandlers = [];
        if (index === undefined) // add to the end of the list
        index = handlers.length;
        handlers.splice(index, 0, handler);
    };
    /**
   * Check if the tech can support the given type. Also checks the
   * Techs sourceHandlers.
   *
   * @param {string} type
   *         The mimetype to check.
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */ _Tech.canPlayType = function(type) {
        const handlers = _Tech.sourceHandlers || [];
        let can;
        for(let i = 0; i < handlers.length; i++){
            can = handlers[i].canPlayType(type);
            if (can) return can;
        }
        return "";
    };
    /**
   * Returns the first source handler that supports the source.
   *
   * TODO: Answer question: should 'probably' be prioritized over 'maybe'
   *
   * @param {SourceObject} source
   *        The source object
   *
   * @param {Object} options
   *        The options passed to the tech
   *
   * @return {SourceHandler|null}
   *          The first source handler that supports the source or null if
   *          no SourceHandler supports the source
   */ _Tech.selectSourceHandler = function(source, options) {
        const handlers = _Tech.sourceHandlers || [];
        let can;
        for(let i = 0; i < handlers.length; i++){
            can = handlers[i].canHandleSource(source, options);
            if (can) return handlers[i];
        }
        return null;
    };
    /**
   * Check if the tech can support the given source.
   *
   * @param {SourceObject} srcObj
   *        The source object
   *
   * @param {Object} options
   *        The options passed to the tech
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */ _Tech.canPlaySource = function(srcObj, options) {
        const sh = _Tech.selectSourceHandler(srcObj, options);
        if (sh) return sh.canHandleSource(srcObj, options);
        return "";
    };
    /**
   * When using a source handler, prefer its implementation of
   * any function normally provided by the tech.
   */ const deferrable = [
        "seekable",
        "seeking",
        "duration"
    ];
    /**
   * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable
   * function if it exists, with a fallback to the Techs seekable function.
   *
   * @method _Tech.seekable
   */ /**
   * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration
   * function if it exists, otherwise it will fallback to the techs duration function.
   *
   * @method _Tech.duration
   */ deferrable.forEach(function(fnName) {
        const originalFn = this[fnName];
        if (typeof originalFn !== "function") return;
        this[fnName] = function() {
            if (this.sourceHandler_ && this.sourceHandler_[fnName]) return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);
            return originalFn.apply(this, arguments);
        };
    }, _Tech.prototype);
    /**
   * Create a function for setting the source using a source object
   * and source handlers.
   * Should never be called unless a source handler was found.
   *
   * @param {SourceObject} source
   *        A source object with src and type keys
   */ _Tech.prototype.setSource = function(source) {
        let sh = _Tech.selectSourceHandler(source, this.options_);
        if (!sh) {
            // Fall back to a native source handler when unsupported sources are
            // deliberately set
            if (_Tech.nativeSourceHandler) sh = _Tech.nativeSourceHandler;
            else $e88cd91ee18355c1$var$log$1.error("No source handler found for the current source.");
        }
        // Dispose any existing source handler
        this.disposeSourceHandler();
        this.off("dispose", this.disposeSourceHandler_);
        if (sh !== _Tech.nativeSourceHandler) this.currentSource_ = source;
        this.sourceHandler_ = sh.handleSource(source, this, this.options_);
        this.one("dispose", this.disposeSourceHandler_);
    };
    /**
   * Clean up any existing SourceHandlers and listeners when the Tech is disposed.
   *
   * @listens Tech#dispose
   */ _Tech.prototype.disposeSourceHandler = function() {
        // if we have a source and get another one
        // then we are loading something new
        // than clear all of our current tracks
        if (this.currentSource_) {
            this.clearTracks([
                "audio",
                "video"
            ]);
            this.currentSource_ = null;
        }
        // always clean up auto-text tracks
        this.cleanupAutoTextTracks();
        if (this.sourceHandler_) {
            if (this.sourceHandler_.dispose) this.sourceHandler_.dispose();
            this.sourceHandler_ = null;
        }
    };
};
// The base Tech class needs to be registered as a Component. It is the only
// Tech that can be registered as a Component.
$e88cd91ee18355c1$var$Component$1.registerComponent("Tech", $e88cd91ee18355c1$var$Tech);
$e88cd91ee18355c1$var$Tech.registerTech("Tech", $e88cd91ee18355c1$var$Tech);
/**
 * A list of techs that should be added to techOrder on Players
 *
 * @private
 */ $e88cd91ee18355c1$var$Tech.defaultTechOrder_ = [];
/**
 * @file middleware.js
 * @module middleware
 */ const $e88cd91ee18355c1$var$middlewares = {};
const $e88cd91ee18355c1$var$middlewareInstances = {};
const $e88cd91ee18355c1$var$TERMINATOR = {};
/**
 * A middleware object is a plain JavaScript object that has methods that
 * match the {@link Tech} methods found in the lists of allowed
 * {@link module:middleware.allowedGetters|getters},
 * {@link module:middleware.allowedSetters|setters}, and
 * {@link module:middleware.allowedMediators|mediators}.
 *
 * @typedef {Object} MiddlewareObject
 */ /**
 * A middleware factory function that should return a
 * {@link module:middleware~MiddlewareObject|MiddlewareObject}.
 *
 * This factory will be called for each player when needed, with the player
 * passed in as an argument.
 *
 * @callback MiddlewareFactory
 * @param { import('../player').default } player
 *        A Video.js player.
 */ /**
 * Define a middleware that the player should use by way of a factory function
 * that returns a middleware object.
 *
 * @param  {string} type
 *         The MIME type to match or `"*"` for all MIME types.
 *
 * @param  {MiddlewareFactory} middleware
 *         A middleware factory function that will be executed for
 *         matching types.
 */ function $e88cd91ee18355c1$var$use(type, middleware) {
    $e88cd91ee18355c1$var$middlewares[type] = $e88cd91ee18355c1$var$middlewares[type] || [];
    $e88cd91ee18355c1$var$middlewares[type].push(middleware);
}
/**
 * Asynchronously sets a source using middleware by recursing through any
 * matching middlewares and calling `setSource` on each, passing along the
 * previous returned value each time.
 *
 * @param  { import('../player').default } player
 *         A {@link Player} instance.
 *
 * @param  {Tech~SourceObject} src
 *         A source object.
 *
 * @param  {Function}
 *         The next middleware to run.
 */ function $e88cd91ee18355c1$var$setSource(player, src, next) {
    player.setTimeout(()=>$e88cd91ee18355c1$var$setSourceHelper(src, $e88cd91ee18355c1$var$middlewares[src.type], next, player), 1);
}
/**
 * When the tech is set, passes the tech to each middleware's `setTech` method.
 *
 * @param {Object[]} middleware
 *        An array of middleware instances.
 *
 * @param { import('../tech/tech').default } tech
 *        A Video.js tech.
 */ function $e88cd91ee18355c1$var$setTech(middleware, tech) {
    middleware.forEach((mw)=>mw.setTech && mw.setTech(tech));
}
/**
 * Calls a getter on the tech first, through each middleware
 * from right to left to the player.
 *
 * @param  {Object[]} middleware
 *         An array of middleware instances.
 *
 * @param  { import('../tech/tech').default } tech
 *         The current tech.
 *
 * @param  {string} method
 *         A method name.
 *
 * @return {*}
 *         The final value from the tech after middleware has intercepted it.
 */ function $e88cd91ee18355c1$var$get(middleware, tech, method) {
    return middleware.reduceRight($e88cd91ee18355c1$var$middlewareIterator(method), tech[method]());
}
/**
 * Takes the argument given to the player and calls the setter method on each
 * middleware from left to right to the tech.
 *
 * @param  {Object[]} middleware
 *         An array of middleware instances.
 *
 * @param  { import('../tech/tech').default } tech
 *         The current tech.
 *
 * @param  {string} method
 *         A method name.
 *
 * @param  {*} arg
 *         The value to set on the tech.
 *
 * @return {*}
 *         The return value of the `method` of the `tech`.
 */ function $e88cd91ee18355c1$var$set(middleware, tech, method, arg) {
    return tech[method](middleware.reduce($e88cd91ee18355c1$var$middlewareIterator(method), arg));
}
/**
 * Takes the argument given to the player and calls the `call` version of the
 * method on each middleware from left to right.
 *
 * Then, call the passed in method on the tech and return the result unchanged
 * back to the player, through middleware, this time from right to left.
 *
 * @param  {Object[]} middleware
 *         An array of middleware instances.
 *
 * @param  { import('../tech/tech').default } tech
 *         The current tech.
 *
 * @param  {string} method
 *         A method name.
 *
 * @param  {*} arg
 *         The value to set on the tech.
 *
 * @return {*}
 *         The return value of the `method` of the `tech`, regardless of the
 *         return values of middlewares.
 */ function $e88cd91ee18355c1$var$mediate(middleware, tech, method, arg = null) {
    const callMethod = "call" + $e88cd91ee18355c1$var$toTitleCase$1(method);
    const middlewareValue = middleware.reduce($e88cd91ee18355c1$var$middlewareIterator(callMethod), arg);
    const terminated = middlewareValue === $e88cd91ee18355c1$var$TERMINATOR;
    // deprecated. The `null` return value should instead return TERMINATOR to
    // prevent confusion if a techs method actually returns null.
    const returnValue = terminated ? null : tech[method](middlewareValue);
    $e88cd91ee18355c1$var$executeRight(middleware, method, returnValue, terminated);
    return returnValue;
}
/**
 * Enumeration of allowed getters where the keys are method names.
 *
 * @type {Object}
 */ const $e88cd91ee18355c1$var$allowedGetters = {
    buffered: 1,
    currentTime: 1,
    duration: 1,
    muted: 1,
    played: 1,
    paused: 1,
    seekable: 1,
    volume: 1,
    ended: 1
};
/**
 * Enumeration of allowed setters where the keys are method names.
 *
 * @type {Object}
 */ const $e88cd91ee18355c1$var$allowedSetters = {
    setCurrentTime: 1,
    setMuted: 1,
    setVolume: 1
};
/**
 * Enumeration of allowed mediators where the keys are method names.
 *
 * @type {Object}
 */ const $e88cd91ee18355c1$var$allowedMediators = {
    play: 1,
    pause: 1
};
function $e88cd91ee18355c1$var$middlewareIterator(method) {
    return (value, mw)=>{
        // if the previous middleware terminated, pass along the termination
        if (value === $e88cd91ee18355c1$var$TERMINATOR) return $e88cd91ee18355c1$var$TERMINATOR;
        if (mw[method]) return mw[method](value);
        return value;
    };
}
function $e88cd91ee18355c1$var$executeRight(mws, method, value, terminated) {
    for(let i = mws.length - 1; i >= 0; i--){
        const mw = mws[i];
        if (mw[method]) mw[method](terminated, value);
    }
}
/**
 * Clear the middleware cache for a player.
 *
 * @param  { import('../player').default } player
 *         A {@link Player} instance.
 */ function $e88cd91ee18355c1$var$clearCacheForPlayer(player) {
    $e88cd91ee18355c1$var$middlewareInstances[player.id()] = null;
}
/**
 * {
 *  [playerId]: [[mwFactory, mwInstance], ...]
 * }
 *
 * @private
 */ function $e88cd91ee18355c1$var$getOrCreateFactory(player, mwFactory) {
    const mws = $e88cd91ee18355c1$var$middlewareInstances[player.id()];
    let mw = null;
    if (mws === undefined || mws === null) {
        mw = mwFactory(player);
        $e88cd91ee18355c1$var$middlewareInstances[player.id()] = [
            [
                mwFactory,
                mw
            ]
        ];
        return mw;
    }
    for(let i = 0; i < mws.length; i++){
        const [mwf, mwi] = mws[i];
        if (mwf !== mwFactory) continue;
        mw = mwi;
    }
    if (mw === null) {
        mw = mwFactory(player);
        mws.push([
            mwFactory,
            mw
        ]);
    }
    return mw;
}
function $e88cd91ee18355c1$var$setSourceHelper(src = {}, middleware = [], next, player, acc = [], lastRun = false) {
    const [mwFactory, ...mwrest] = middleware;
    // if mwFactory is a string, then we're at a fork in the road
    if (typeof mwFactory === "string") $e88cd91ee18355c1$var$setSourceHelper(src, $e88cd91ee18355c1$var$middlewares[mwFactory], next, player, acc, lastRun);
    else if (mwFactory) {
        const mw = $e88cd91ee18355c1$var$getOrCreateFactory(player, mwFactory);
        // if setSource isn't present, implicitly select this middleware
        if (!mw.setSource) {
            acc.push(mw);
            return $e88cd91ee18355c1$var$setSourceHelper(src, mwrest, next, player, acc, lastRun);
        }
        mw.setSource(Object.assign({}, src), function(err, _src) {
            // something happened, try the next middleware on the current level
            // make sure to use the old src
            if (err) return $e88cd91ee18355c1$var$setSourceHelper(src, mwrest, next, player, acc, lastRun);
            // we've succeeded, now we need to go deeper
            acc.push(mw);
            // if it's the same type, continue down the current chain
            // otherwise, we want to go down the new chain
            $e88cd91ee18355c1$var$setSourceHelper(_src, src.type === _src.type ? mwrest : $e88cd91ee18355c1$var$middlewares[_src.type], next, player, acc, lastRun);
        });
    } else if (mwrest.length) $e88cd91ee18355c1$var$setSourceHelper(src, mwrest, next, player, acc, lastRun);
    else if (lastRun) next(src, acc);
    else $e88cd91ee18355c1$var$setSourceHelper(src, $e88cd91ee18355c1$var$middlewares["*"], next, player, acc, true);
}
/**
 * Mimetypes
 *
 * @see https://www.iana.org/assignments/media-types/media-types.xhtml
 * @typedef Mimetypes~Kind
 * @enum
 */ const $e88cd91ee18355c1$var$MimetypesKind = {
    opus: "video/ogg",
    ogv: "video/ogg",
    mp4: "video/mp4",
    mov: "video/mp4",
    m4v: "video/mp4",
    mkv: "video/x-matroska",
    m4a: "audio/mp4",
    mp3: "audio/mpeg",
    aac: "audio/aac",
    caf: "audio/x-caf",
    flac: "audio/flac",
    oga: "audio/ogg",
    wav: "audio/wav",
    m3u8: "application/x-mpegURL",
    mpd: "application/dash+xml",
    jpg: "image/jpeg",
    jpeg: "image/jpeg",
    gif: "image/gif",
    png: "image/png",
    svg: "image/svg+xml",
    webp: "image/webp"
};
/**
 * Get the mimetype of a given src url if possible
 *
 * @param {string} src
 *        The url to the src
 *
 * @return {string}
 *         return the mimetype if it was known or empty string otherwise
 */ const $e88cd91ee18355c1$var$getMimetype = function(src = "") {
    const ext = $e88cd91ee18355c1$var$getFileExtension(src);
    const mimetype = $e88cd91ee18355c1$var$MimetypesKind[ext.toLowerCase()];
    return mimetype || "";
};
/**
 * Find the mime type of a given source string if possible. Uses the player
 * source cache.
 *
 * @param { import('../player').default } player
 *        The player object
 *
 * @param {string} src
 *        The source string
 *
 * @return {string}
 *         The type that was found
 */ const $e88cd91ee18355c1$var$findMimetype = (player, src)=>{
    if (!src) return "";
    // 1. check for the type in the `source` cache
    if (player.cache_.source.src === src && player.cache_.source.type) return player.cache_.source.type;
    // 2. see if we have this source in our `currentSources` cache
    const matchingSources = player.cache_.sources.filter((s)=>s.src === src);
    if (matchingSources.length) return matchingSources[0].type;
    // 3. look for the src url in source elements and use the type there
    const sources = player.$$("source");
    for(let i = 0; i < sources.length; i++){
        const s = sources[i];
        if (s.type && s.src && s.src === src) return s.type;
    }
    // 4. finally fallback to our list of mime types based on src url extension
    return $e88cd91ee18355c1$var$getMimetype(src);
};
/**
 * @module filter-source
 */ /**
 * Filter out single bad source objects or multiple source objects in an
 * array. Also flattens nested source object arrays into a 1 dimensional
 * array of source objects.
 *
 * @param {Tech~SourceObject|Tech~SourceObject[]} src
 *        The src object to filter
 *
 * @return {Tech~SourceObject[]}
 *         An array of sourceobjects containing only valid sources
 *
 * @private
 */ const $e88cd91ee18355c1$var$filterSource = function(src) {
    // traverse array
    if (Array.isArray(src)) {
        let newsrc = [];
        src.forEach(function(srcobj) {
            srcobj = $e88cd91ee18355c1$var$filterSource(srcobj);
            if (Array.isArray(srcobj)) newsrc = newsrc.concat(srcobj);
            else if ($e88cd91ee18355c1$var$isObject(srcobj)) newsrc.push(srcobj);
        });
        src = newsrc;
    } else if (typeof src === "string" && src.trim()) // convert string into object
    src = [
        $e88cd91ee18355c1$var$fixSource({
            src: src
        })
    ];
    else if ($e88cd91ee18355c1$var$isObject(src) && typeof src.src === "string" && src.src && src.src.trim()) // src is already valid
    src = [
        $e88cd91ee18355c1$var$fixSource(src)
    ];
    else // invalid source, turn it into an empty array
    src = [];
    return src;
};
/**
 * Checks src mimetype, adding it when possible
 *
 * @param {Tech~SourceObject} src
 *        The src object to check
 * @return {Tech~SourceObject}
 *        src Object with known type
 */ function $e88cd91ee18355c1$var$fixSource(src) {
    if (!src.type) {
        const mimetype = $e88cd91ee18355c1$var$getMimetype(src.src);
        if (mimetype) src.type = mimetype;
    }
    return src;
}
var $e88cd91ee18355c1$var$icons = '<svg xmlns="http://www.w3.org/2000/svg">\n  <defs>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-play">\n      <path d="M16 10v28l22-14z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-pause">\n      <path d="M12 38h8V10h-8v28zm16-28v28h8V10h-8z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-audio">\n      <path d="M24 2C14.06 2 6 10.06 6 20v14c0 3.31 2.69 6 6 6h6V24h-8v-4c0-7.73 6.27-14 14-14s14 6.27 14 14v4h-8v16h6c3.31 0 6-2.69 6-6V20c0-9.94-8.06-18-18-18z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-captions">\n      <path d="M38 8H10c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h28c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zM22 22h-3v-1h-4v6h4v-1h3v2a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2zm14 0h-3v-1h-4v6h4v-1h3v2a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-subtitles">\n      <path d="M40 8H8c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h32c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zM8 24h8v4H8v-4zm20 12H8v-4h20v4zm12 0h-8v-4h8v4zm0-8H20v-4h20v4z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-fullscreen-enter">\n      <path d="M14 28h-4v10h10v-4h-6v-6zm-4-8h4v-6h6v-4H10v10zm24 14h-6v4h10V28h-4v6zm-6-24v4h6v6h4V10H28z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-fullscreen-exit">\n      <path d="M10 32h6v6h4V28H10v4zm6-16h-6v4h10V10h-4v6zm12 22h4v-6h6v-4H28v10zm4-22v-6h-4v10h10v-4h-6z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-play-circle">\n      <path d="M20 33l12-9-12-9v18zm4-29C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-volume-mute">\n      <path d="M33 24c0-3.53-2.04-6.58-5-8.05v4.42l4.91 4.91c.06-.42.09-.85.09-1.28zm5 0c0 1.88-.41 3.65-1.08 5.28l3.03 3.03C41.25 29.82 42 27 42 24c0-8.56-5.99-15.72-14-17.54v4.13c5.78 1.72 10 7.07 10 13.41zM8.55 6L6 8.55 15.45 18H6v12h8l10 10V26.55l8.51 8.51c-1.34 1.03-2.85 1.86-4.51 2.36v4.13a17.94 17.94 0 0 0 7.37-3.62L39.45 42 42 39.45l-18-18L8.55 6zM24 8l-4.18 4.18L24 16.36V8z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-volume-low">\n      <path d="M14 18v12h8l10 10V8L22 18h-8z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-volume-medium">\n      <path d="M37 24c0-3.53-2.04-6.58-5-8.05v16.11c2.96-1.48 5-4.53 5-8.06zm-27-6v12h8l10 10V8L18 18h-8z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-volume-high">\n      <path d="M6 18v12h8l10 10V8L14 18H6zm27 6c0-3.53-2.04-6.58-5-8.05v16.11c2.96-1.48 5-4.53 5-8.06zM28 6.46v4.13c5.78 1.72 10 7.07 10 13.41s-4.22 11.69-10 13.41v4.13c8.01-1.82 14-8.97 14-17.54S36.01 8.28 28 6.46z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-spinner">\n      <path d="M18.8 21l9.53-16.51C26.94 4.18 25.49 4 24 4c-4.8 0-9.19 1.69-12.64 4.51l7.33 12.69.11-.2zm24.28-3c-1.84-5.85-6.3-10.52-11.99-12.68L23.77 18h19.31zm.52 2H28.62l.58 1 9.53 16.5C41.99 33.94 44 29.21 44 24c0-1.37-.14-2.71-.4-4zm-26.53 4l-7.8-13.5C6.01 14.06 4 18.79 4 24c0 1.37.14 2.71.4 4h14.98l-2.31-4zM4.92 30c1.84 5.85 6.3 10.52 11.99 12.68L24.23 30H4.92zm22.54 0l-7.8 13.51c1.4.31 2.85.49 4.34.49 4.8 0 9.19-1.69 12.64-4.51L29.31 26.8 27.46 30z"></path>\n    </symbol>\n    <symbol viewBox="0 0 24 24" id="vjs-icon-hd">\n      <path d="M19 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-8 12H9.5v-2h-2v2H6V9h1.5v2.5h2V9H11v6zm2-6h4c.55 0 1 .45 1 1v4c0 .55-.45 1-1 1h-4V9zm1.5 4.5h2v-3h-2v3z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-chapters">\n      <path d="M6 26h4v-4H6v4zm0 8h4v-4H6v4zm0-16h4v-4H6v4zm8 8h28v-4H14v4zm0 8h28v-4H14v4zm0-20v4h28v-4H14z"></path>\n    </symbol>\n    <symbol viewBox="0 0 40 40" id="vjs-icon-downloading">\n      <path d="M18.208 36.875q-3.208-.292-5.979-1.729-2.771-1.438-4.812-3.729-2.042-2.292-3.188-5.229-1.146-2.938-1.146-6.23 0-6.583 4.334-11.416 4.333-4.834 10.833-5.5v3.166q-5.167.75-8.583 4.646Q6.25 14.75 6.25 19.958q0 5.209 3.396 9.104 3.396 3.896 8.562 4.646zM20 28.417L11.542 20l2.083-2.083 4.917 4.916v-11.25h2.916v11.25l4.875-4.916L28.417 20zm1.792 8.458v-3.167q1.833-.25 3.541-.958 1.709-.708 3.167-1.875l2.333 2.292q-1.958 1.583-4.25 2.541-2.291.959-4.791 1.167zm6.791-27.792q-1.541-1.125-3.25-1.854-1.708-.729-3.541-1.021V3.042q2.5.25 4.77 1.208 2.271.958 4.271 2.5zm4.584 21.584l-2.25-2.25q1.166-1.5 1.854-3.209.687-1.708.937-3.541h3.209q-.292 2.5-1.229 4.791-.938 2.292-2.521 4.209zm.541-12.417q-.291-1.833-.958-3.562-.667-1.73-1.833-3.188l2.375-2.208q1.541 1.916 2.458 4.208.917 2.292 1.167 4.75z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-file-download">\n      <path d="M10.8 40.55q-1.35 0-2.375-1T7.4 37.15v-7.7h3.4v7.7h26.35v-7.7h3.4v7.7q0 1.4-1 2.4t-2.4 1zM24 32.1L13.9 22.05l2.45-2.45 5.95 5.95V7.15h3.4v18.4l5.95-5.95 2.45 2.45z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-file-download-done">\n      <path d="M9.8 40.5v-3.45h28.4v3.45zm9.2-9.05L7.4 19.85l2.45-2.35L19 26.65l19.2-19.2 2.4 2.4z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-file-download-off">\n      <path d="M4.9 4.75L43.25 43.1 41 45.3l-4.75-4.75q-.05.05-.075.025-.025-.025-.075-.025H10.8q-1.35 0-2.375-1T7.4 37.15v-7.7h3.4v7.7h22.05l-7-7-1.85 1.8L13.9 21.9l1.85-1.85L2.7 7zm26.75 14.7l2.45 2.45-3.75 3.8-2.45-2.5zM25.7 7.15V21.1l-3.4-3.45V7.15z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-share">\n      <path d="M36 32.17c-1.52 0-2.89.59-3.93 1.54L17.82 25.4c.11-.45.18-.92.18-1.4s-.07-.95-.18-1.4l14.1-8.23c1.07 1 2.5 1.62 4.08 1.62 3.31 0 6-2.69 6-6s-2.69-6-6-6-6 2.69-6 6c0 .48.07.95.18 1.4l-14.1 8.23c-1.07-1-2.5-1.62-4.08-1.62-3.31 0-6 2.69-6 6s2.69 6 6 6c1.58 0 3.01-.62 4.08-1.62l14.25 8.31c-.1.42-.16.86-.16 1.31A5.83 5.83 0 1 0 36 32.17z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-cog">\n      <path d="M38.86 25.95c.08-.64.14-1.29.14-1.95s-.06-1.31-.14-1.95l4.23-3.31c.38-.3.49-.84.24-1.28l-4-6.93c-.25-.43-.77-.61-1.22-.43l-4.98 2.01c-1.03-.79-2.16-1.46-3.38-1.97L29 4.84c-.09-.47-.5-.84-1-.84h-8c-.5 0-.91.37-.99.84l-.75 5.3a14.8 14.8 0 0 0-3.38 1.97L9.9 10.1a1 1 0 0 0-1.22.43l-4 6.93c-.25.43-.14.97.24 1.28l4.22 3.31C9.06 22.69 9 23.34 9 24s.06 1.31.14 1.95l-4.22 3.31c-.38.3-.49.84-.24 1.28l4 6.93c.25.43.77.61 1.22.43l4.98-2.01c1.03.79 2.16 1.46 3.38 1.97l.75 5.3c.08.47.49.84.99.84h8c.5 0 .91-.37.99-.84l.75-5.3a14.8 14.8 0 0 0 3.38-1.97l4.98 2.01a1 1 0 0 0 1.22-.43l4-6.93c.25-.43.14-.97-.24-1.28l-4.22-3.31zM24 31c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-square">\n      <path d="M36 8H12c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h24c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zm0 28H12V12h24v24z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-circle">\n      <circle cx="24" cy="24" r="20"></circle>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-circle-outline">\n      <path d="M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-circle-inner-circle">\n      <path d="M24 4C12.97 4 4 12.97 4 24s8.97 20 20 20 20-8.97 20-20S35.03 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16zm6-16c0 3.31-2.69 6-6 6s-6-2.69-6-6 2.69-6 6-6 6 2.69 6 6z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-cancel">\n      <path d="M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm10 27.17L31.17 34 24 26.83 16.83 34 14 31.17 21.17 24 14 16.83 16.83 14 24 21.17 31.17 14 34 16.83 26.83 24 34 31.17z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-replay">\n      <path d="M24 10V2L14 12l10 10v-8c6.63 0 12 5.37 12 12s-5.37 12-12 12-12-5.37-12-12H8c0 8.84 7.16 16 16 16s16-7.16 16-16-7.16-16-16-16z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-repeat">\n      <path d="M14 14h20v6l8-8-8-8v6H10v12h4v-8zm20 20H14v-6l-8 8 8 8v-6h24V26h-4v8z"></path>\n    </symbol>\n    <symbol viewBox="0 96 48 48" id="vjs-icon-replay-5">\n      <path d="M17.689 98l-8.697 8.696 8.697 8.697 2.486-2.485-4.32-4.319h1.302c4.93 0 9.071 1.722 12.424 5.165 3.352 3.443 5.029 7.638 5.029 12.584h3.55c0-2.958-.553-5.73-1.658-8.313-1.104-2.583-2.622-4.841-4.555-6.774-1.932-1.932-4.19-3.45-6.773-4.555-2.584-1.104-5.355-1.657-8.313-1.657H15.5l4.615-4.615zm-8.08 21.659v13.861h11.357v5.008H9.609V143h12.7c.834 0 1.55-.298 2.146-.894.596-.597.895-1.31.895-2.145v-7.781c0-.835-.299-1.55-.895-2.147a2.929 2.929 0 0 0-2.147-.894h-8.227v-5.096H25.35v-4.384z"></path>\n    </symbol>\n    <symbol viewBox="0 96 48 48" id="vjs-icon-replay-10">\n      <path d="M42.315 125.63c0-4.997-1.694-9.235-5.08-12.713-3.388-3.479-7.571-5.218-12.552-5.218h-1.315l4.363 4.363-2.51 2.51-8.787-8.786L25.221 97l2.45 2.45-4.662 4.663h1.375c2.988 0 5.788.557 8.397 1.673 2.61 1.116 4.892 2.65 6.844 4.602 1.953 1.953 3.487 4.234 4.602 6.844 1.116 2.61 1.674 5.41 1.674 8.398zM8.183 142v-19.657H3.176V117.8h9.643V142zm13.63 0c-1.156 0-2.127-.393-2.912-1.178-.778-.778-1.168-1.746-1.168-2.902v-16.04c0-1.156.393-2.127 1.178-2.912.779-.779 1.746-1.168 2.902-1.168h7.696c1.156 0 2.126.392 2.911 1.177.779.78 1.168 1.747 1.168 2.903v16.04c0 1.156-.392 2.127-1.177 2.912-.779.779-1.746 1.168-2.902 1.168zm.556-4.636h6.583v-15.02H22.37z"></path>\n    </symbol>\n    <symbol viewBox="0 96 48 48" id="vjs-icon-replay-30">\n      <path d="M26.047 97l-8.733 8.732 8.733 8.733 2.496-2.494-4.336-4.338h1.307c4.95 0 9.108 1.73 12.474 5.187 3.367 3.458 5.051 7.668 5.051 12.635h3.565c0-2.97-.556-5.751-1.665-8.346-1.109-2.594-2.633-4.862-4.574-6.802-1.94-1.941-4.208-3.466-6.803-4.575-2.594-1.109-5.375-1.664-8.345-1.664H23.85l4.634-4.634zM2.555 117.531v4.688h10.297v5.25H5.873v4.687h6.979v5.156H2.555V142H13.36c1.061 0 1.95-.395 2.668-1.186.718-.79 1.076-1.772 1.076-2.94v-16.218c0-1.168-.358-2.149-1.076-2.94-.717-.79-1.607-1.185-2.668-1.185zm22.482.14c-1.149 0-2.11.39-2.885 1.165-.78.78-1.172 1.744-1.172 2.893v15.943c0 1.149.388 2.11 1.163 2.885.78.78 1.745 1.172 2.894 1.172h7.649c1.148 0 2.11-.388 2.884-1.163.78-.78 1.17-1.745 1.17-2.894v-15.943c0-1.15-.386-2.111-1.16-2.885-.78-.78-1.746-1.172-2.894-1.172zm.553 4.518h6.545v14.93H25.59z"></path>\n    </symbol>\n    <symbol viewBox="0 96 48 48" id="vjs-icon-forward-5">\n      <path d="M29.508 97l-2.431 2.43 4.625 4.625h-1.364c-2.965 0-5.742.554-8.332 1.66-2.589 1.107-4.851 2.629-6.788 4.566-1.937 1.937-3.458 4.2-4.565 6.788-1.107 2.59-1.66 5.367-1.66 8.331h3.557c0-4.957 1.68-9.16 5.04-12.611 3.36-3.45 7.51-5.177 12.451-5.177h1.304l-4.326 4.33 2.49 2.49 8.715-8.716zm-9.783 21.61v13.89h11.382v5.018H19.725V142h12.727a2.93 2.93 0 0 0 2.15-.896 2.93 2.93 0 0 0 .896-2.15v-7.798c0-.837-.299-1.554-.896-2.152a2.93 2.93 0 0 0-2.15-.896h-8.245V123h11.29v-4.392z"></path>\n    </symbol>\n    <symbol viewBox="0 96 48 48" id="vjs-icon-forward-10">\n      <path d="M23.119 97l-2.386 2.383 4.538 4.538h-1.339c-2.908 0-5.633.543-8.173 1.63-2.54 1.085-4.76 2.577-6.66 4.478-1.9 1.9-3.392 4.12-4.478 6.66-1.085 2.54-1.629 5.264-1.629 8.172h3.49c0-4.863 1.648-8.986 4.944-12.372 3.297-3.385 7.368-5.078 12.216-5.078h1.279l-4.245 4.247 2.443 2.442 8.55-8.55zm-9.52 21.45v4.42h4.871V142h4.513v-23.55zm18.136 0c-1.125 0-2.066.377-2.824 1.135-.764.764-1.148 1.709-1.148 2.834v15.612c0 1.124.38 2.066 1.139 2.824.764.764 1.708 1.145 2.833 1.145h7.489c1.125 0 2.066-.378 2.824-1.136.764-.764 1.145-1.709 1.145-2.833v-15.612c0-1.125-.378-2.067-1.136-2.825-.764-.764-1.708-1.145-2.833-1.145zm.54 4.42h6.408v14.617h-6.407z"></path>\n    </symbol>\n    <symbol viewBox="0 96 48 48" id="vjs-icon-forward-30">\n      <path d="M25.549 97l-2.437 2.434 4.634 4.635H26.38c-2.97 0-5.753.555-8.347 1.664-2.594 1.109-4.861 2.633-6.802 4.574-1.94 1.94-3.465 4.207-4.574 6.802-1.109 2.594-1.664 5.377-1.664 8.347h3.565c0-4.967 1.683-9.178 5.05-12.636 3.366-3.458 7.525-5.187 12.475-5.187h1.307l-4.335 4.338 2.495 2.494 8.732-8.732zm-11.553 20.53v4.689h10.297v5.249h-6.978v4.688h6.978v5.156H13.996V142h10.808c1.06 0 1.948-.395 2.666-1.186.718-.79 1.077-1.771 1.077-2.94v-16.217c0-1.169-.36-2.15-1.077-2.94-.718-.79-1.605-1.186-2.666-1.186zm21.174.168c-1.149 0-2.11.389-2.884 1.163-.78.78-1.172 1.745-1.172 2.894v15.942c0 1.15.388 2.11 1.162 2.885.78.78 1.745 1.17 2.894 1.17h7.649c1.149 0 2.11-.386 2.885-1.16.78-.78 1.17-1.746 1.17-2.895v-15.942c0-1.15-.387-2.11-1.161-2.885-.78-.78-1.745-1.172-2.894-1.172zm.552 4.516h6.542v14.931h-6.542z"></path>\n    </symbol>\n    <symbol viewBox="0 0 512 512" id="vjs-icon-audio-description">\n      <g fill-rule="evenodd"><path d="M227.29 381.351V162.993c50.38-1.017 89.108-3.028 117.631 17.126 27.374 19.342 48.734 56.965 44.89 105.325-4.067 51.155-41.335 94.139-89.776 98.475-24.085 2.155-71.972 0-71.972 0s-.84-1.352-.773-2.568m48.755-54.804c31.43 1.26 53.208-16.633 56.495-45.386 4.403-38.51-21.188-63.552-58.041-60.796v103.612c-.036 1.466.575 2.22 1.546 2.57"></path><path d="M383.78 381.328c13.336 3.71 17.387-11.06 23.215-21.408 12.722-22.571 22.294-51.594 22.445-84.774.221-47.594-18.343-82.517-35.6-106.182h-8.51c-.587 3.874 2.226 7.315 3.865 10.276 13.166 23.762 25.367 56.553 25.54 94.194.2 43.176-14.162 79.278-30.955 107.894"></path><path d="M425.154 381.328c13.336 3.71 17.384-11.061 23.215-21.408 12.721-22.571 22.291-51.594 22.445-84.774.221-47.594-18.343-82.517-35.6-106.182h-8.511c-.586 3.874 2.226 7.315 3.866 10.276 13.166 23.762 25.367 56.553 25.54 94.194.2 43.176-14.162 79.278-30.955 107.894"></path><path d="M466.26 381.328c13.337 3.71 17.385-11.061 23.216-21.408 12.722-22.571 22.292-51.594 22.445-84.774.221-47.594-18.343-82.517-35.6-106.182h-8.51c-.587 3.874 2.225 7.315 3.865 10.276 13.166 23.762 25.367 56.553 25.54 94.194.2 43.176-14.162 79.278-30.955 107.894M4.477 383.005H72.58l18.573-28.484 64.169-.135s.065 19.413.065 28.62h48.756V160.307h-58.816c-5.653 9.537-140.85 222.697-140.85 222.697zm152.667-145.282v71.158l-40.453-.27 40.453-70.888z"></path></g>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-next-item">\n      <path d="M12 36l17-12-17-12v24zm20-24v24h4V12h-4z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-previous-item">\n      <path d="M12 12h4v24h-4zm7 12l17 12V12z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-shuffle">\n      <path d="M21.17 18.34L10.83 8 8 10.83l10.34 10.34 2.83-2.83zM29 8l4.09 4.09L8 37.17 10.83 40l25.09-25.09L40 19V8H29zm.66 18.83l-2.83 2.83 6.26 6.26L29 40h11V29l-4.09 4.09-6.25-6.26z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-cast">\n      <path d="M42 6H6c-2.21 0-4 1.79-4 4v6h4v-6h36v28H28v4h14c2.21 0 4-1.79 4-4V10c0-2.21-1.79-4-4-4zM2 36v6h6c0-3.31-2.69-6-6-6zm0-8v4c5.52 0 10 4.48 10 10h4c0-7.73-6.27-14-14-14zm0-8v4c9.94 0 18 8.06 18 18h4c0-12.15-9.85-22-22-22z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-picture-in-picture-enter">\n      <path d="M38 22H22v11.99h16V22zm8 16V9.96C46 7.76 44.2 6 42 6H6C3.8 6 2 7.76 2 9.96V38c0 2.2 1.8 4 4 4h36c2.2 0 4-1.8 4-4zm-4 .04H6V9.94h36v28.1z"></path>\n    </symbol>\n    <symbol viewBox="0 0 22 18" id="vjs-icon-picture-in-picture-exit">\n      <path d="M18 4H4v10h14V4zm4 12V1.98C22 .88 21.1 0 20 0H2C.9 0 0 .88 0 1.98V16c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2zm-2 .02H2V1.97h18v14.05z"></path>\n      <path fill="none" d="M-1-3h24v24H-1z"></path>\n    </symbol>\n    <symbol viewBox="0 0 1792 1792" id="vjs-icon-facebook">\n      <path d="M1343 12v264h-157q-86 0-116 36t-30 108v189h293l-39 296h-254v759H734V905H479V609h255V391q0-186 104-288.5T1115 0q147 0 228 12z"></path>\n    </symbol>\n    <symbol viewBox="0 0 1792 1792" id="vjs-icon-linkedin">\n      <path d="M477 625v991H147V625h330zm21-306q1 73-50.5 122T312 490h-2q-82 0-132-49t-50-122q0-74 51.5-122.5T314 148t133 48.5T498 319zm1166 729v568h-329v-530q0-105-40.5-164.5T1168 862q-63 0-105.5 34.5T999 982q-11 30-11 81v553H659q2-399 2-647t-1-296l-1-48h329v144h-2q20-32 41-56t56.5-52 87-43.5T1285 602q171 0 275 113.5t104 332.5z"></path>\n    </symbol>\n    <symbol viewBox="0 0 1792 1792" id="vjs-icon-twitter">\n      <path d="M1684 408q-67 98-162 167 1 14 1 42 0 130-38 259.5T1369.5 1125 1185 1335.5t-258 146-323 54.5q-271 0-496-145 35 4 78 4 225 0 401-138-105-2-188-64.5T285 1033q33 5 61 5 43 0 85-11-112-23-185.5-111.5T172 710v-4q68 38 146 41-66-44-105-115t-39-154q0-88 44-163 121 149 294.5 238.5T884 653q-8-38-8-74 0-134 94.5-228.5T1199 256q140 0 236 102 109-21 205-78-37 115-142 178 93-10 186-50z"></path>\n    </symbol>\n    <symbol viewBox="0 0 1792 1792" id="vjs-icon-tumblr">\n      <path d="M1328 1329l80 237q-23 35-111 66t-177 32q-104 2-190.5-26T787 1564t-95-106-55.5-120-16.5-118V676H452V461q72-26 129-69.5t91-90 58-102 34-99T779 12q1-5 4.5-8.5T791 0h244v424h333v252h-334v518q0 30 6.5 56t22.5 52.5 49.5 41.5 81.5 14q78-2 134-29z"></path>\n    </symbol>\n    <symbol viewBox="0 0 1792 1792" id="vjs-icon-pinterest">\n      <path d="M1664 896q0 209-103 385.5T1281.5 1561 896 1664q-111 0-218-32 59-93 78-164 9-34 54-211 20 39 73 67.5t114 28.5q121 0 216-68.5t147-188.5 52-270q0-114-59.5-214T1180 449t-255-63q-105 0-196 29t-154.5 77-109 110.5-67 129.5T377 866q0 104 40 183t117 111q30 12 38-20 2-7 8-31t8-30q6-23-11-43-51-61-51-151 0-151 104.5-259.5T904 517q151 0 235.5 82t84.5 213q0 170-68.5 289T980 1220q-61 0-98-43.5T859 1072q8-35 26.5-93.5t30-103T927 800q0-50-27-83t-77-33q-62 0-105 57t-43 142q0 73 25 122l-99 418q-17 70-13 177-206-91-333-281T128 896q0-209 103-385.5T510.5 231 896 128t385.5 103T1561 510.5 1664 896z"></path>\n    </symbol>\n  </defs>\n</svg>';
/**
 * @file loader.js
 */ /**
 * The `MediaLoader` is the `Component` that decides which playback technology to load
 * when a player is initialized.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$MediaLoader extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Create an instance of this class.
   *
   * @param { import('../player').default } player
   *        The `Player` that this class should attach to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function that is run when this component is ready.
   */ constructor(player, options, ready){
        // MediaLoader has no element
        const options_ = $e88cd91ee18355c1$var$merge$1({
            createEl: false
        }, options);
        super(player, options_, ready);
        // If there are no sources when the player is initialized,
        // load the first supported playback technology.
        if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) for(let i = 0, j = options.playerOptions.techOrder; i < j.length; i++){
            const techName = $e88cd91ee18355c1$var$toTitleCase$1(j[i]);
            let tech = $e88cd91ee18355c1$var$Tech.getTech(techName);
            // Support old behavior of techs being registered as components.
            // Remove once that deprecated behavior is removed.
            if (!techName) tech = $e88cd91ee18355c1$var$Component$1.getComponent(techName);
            // Check if the browser supports this technology
            if (tech && tech.isSupported()) {
                player.loadTech_(techName);
                break;
            }
        }
        else // Loop through playback technologies (e.g. HTML5) and check for support.
        // Then load the best source.
        // A few assumptions here:
        //   All playback technologies respect preload false.
        player.src(options.playerOptions.sources);
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("MediaLoader", $e88cd91ee18355c1$var$MediaLoader);
/**
 * @file clickable-component.js
 */ /**
 * Component which is clickable or keyboard actionable, but is not a
 * native HTML button.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$ClickableComponent extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Creates an instance of this class.
   *
   * @param  { import('./player').default } player
   *         The `Player` that this class should be attached to.
   *
   * @param  {Object} [options]
   *         The key/value store of component options.
   *
   * @param  {function} [options.clickHandler]
   *         The function to call when the button is clicked / activated
   *
   * @param  {string} [options.controlText]
   *         The text to set on the button
   *
   * @param  {string} [options.className]
   *         A class or space separated list of classes to add the component
   *
   */ constructor(player, options){
        super(player, options);
        if (this.options_.controlText) this.controlText(this.options_.controlText);
        this.handleMouseOver_ = (e)=>this.handleMouseOver(e);
        this.handleMouseOut_ = (e)=>this.handleMouseOut(e);
        this.handleClick_ = (e)=>this.handleClick(e);
        this.handleKeyDown_ = (e)=>this.handleKeyDown(e);
        this.emitTapEvents();
        this.enable();
    }
    /**
   * Create the `ClickableComponent`s DOM element.
   *
   * @param {string} [tag=div]
   *        The element's node type.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element.
   *
   * @param {Object} [attributes={}]
   *        An object of attributes that should be set on the element.
   *
   * @return {Element}
   *         The element that gets created.
   */ createEl(tag = "div", props = {}, attributes = {}) {
        props = Object.assign({
            className: this.buildCSSClass(),
            tabIndex: 0
        }, props);
        if (tag === "button") $e88cd91ee18355c1$var$log$1.error(`Creating a ClickableComponent with an HTML element of ${tag} is not supported; use a Button instead.`);
        // Add ARIA attributes for clickable element which is not a native HTML button
        attributes = Object.assign({
            role: "button"
        }, attributes);
        this.tabIndex_ = props.tabIndex;
        const el = $e88cd91ee18355c1$var$createEl(tag, props, attributes);
        if (!this.player_.options_.experimentalSvgIcons) el.appendChild($e88cd91ee18355c1$var$createEl("span", {
            className: "vjs-icon-placeholder"
        }, {
            "aria-hidden": true
        }));
        this.createControlTextEl(el);
        return el;
    }
    dispose() {
        // remove controlTextEl_ on dispose
        this.controlTextEl_ = null;
        super.dispose();
    }
    /**
   * Create a control text element on this `ClickableComponent`
   *
   * @param {Element} [el]
   *        Parent element for the control text.
   *
   * @return {Element}
   *         The control text element that gets created.
   */ createControlTextEl(el) {
        this.controlTextEl_ = $e88cd91ee18355c1$var$createEl("span", {
            className: "vjs-control-text"
        }, {
            // let the screen reader user know that the text of the element may change
            "aria-live": "polite"
        });
        if (el) el.appendChild(this.controlTextEl_);
        this.controlText(this.controlText_, el);
        return this.controlTextEl_;
    }
    /**
   * Get or set the localize text to use for the controls on the `ClickableComponent`.
   *
   * @param {string} [text]
   *        Control text for element.
   *
   * @param {Element} [el=this.el()]
   *        Element to set the title on.
   *
   * @return {string}
   *         - The control text when getting
   */ controlText(text, el = this.el()) {
        if (text === undefined) return this.controlText_ || "Need Text";
        const localizedText = this.localize(text);
        /** @protected */ this.controlText_ = text;
        $e88cd91ee18355c1$var$textContent(this.controlTextEl_, localizedText);
        if (!this.nonIconControl && !this.player_.options_.noUITitleAttributes) // Set title attribute if only an icon is shown
        el.setAttribute("title", localizedText);
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return `vjs-control vjs-button ${super.buildCSSClass()}`;
    }
    /**
   * Enable this `ClickableComponent`
   */ enable() {
        if (!this.enabled_) {
            this.enabled_ = true;
            this.removeClass("vjs-disabled");
            this.el_.setAttribute("aria-disabled", "false");
            if (typeof this.tabIndex_ !== "undefined") this.el_.setAttribute("tabIndex", this.tabIndex_);
            this.on([
                "tap",
                "click"
            ], this.handleClick_);
            this.on("keydown", this.handleKeyDown_);
        }
    }
    /**
   * Disable this `ClickableComponent`
   */ disable() {
        this.enabled_ = false;
        this.addClass("vjs-disabled");
        this.el_.setAttribute("aria-disabled", "true");
        if (typeof this.tabIndex_ !== "undefined") this.el_.removeAttribute("tabIndex");
        this.off("mouseover", this.handleMouseOver_);
        this.off("mouseout", this.handleMouseOut_);
        this.off([
            "tap",
            "click"
        ], this.handleClick_);
        this.off("keydown", this.handleKeyDown_);
    }
    /**
   * Handles language change in ClickableComponent for the player in components
   *
   *
   */ handleLanguagechange() {
        this.controlText(this.controlText_);
    }
    /**
   * Event handler that is called when a `ClickableComponent` receives a
   * `click` or `tap` event.
   *
   * @param {Event} event
   *        The `tap` or `click` event that caused this function to be called.
   *
   * @listens tap
   * @listens click
   * @abstract
   */ handleClick(event) {
        if (this.options_.clickHandler) this.options_.clickHandler.call(this, arguments);
    }
    /**
   * Event handler that is called when a `ClickableComponent` receives a
   * `keydown` event.
   *
   * By default, if the key is Space or Enter, it will trigger a `click` event.
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */ handleKeyDown(event) {
        // Support Space or Enter key operation to fire a click event. Also,
        // prevent the event from propagating through the DOM and triggering
        // Player hotkeys.
        if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Space") || (0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Enter")) {
            event.preventDefault();
            event.stopPropagation();
            this.trigger("click");
        } else // Pass keypress handling up for unsupported keys
        super.handleKeyDown(event);
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("ClickableComponent", $e88cd91ee18355c1$var$ClickableComponent);
/**
 * @file poster-image.js
 */ /**
 * A `ClickableComponent` that handles showing the poster image for the player.
 *
 * @extends ClickableComponent
 */ class $e88cd91ee18355c1$var$PosterImage extends $e88cd91ee18355c1$var$ClickableComponent {
    /**
   * Create an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should attach to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.update();
        this.update_ = (e)=>this.update(e);
        player.on("posterchange", this.update_);
    }
    /**
   * Clean up and dispose of the `PosterImage`.
   */ dispose() {
        this.player().off("posterchange", this.update_);
        super.dispose();
    }
    /**
   * Create the `PosterImage`s DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */ createEl() {
        // The el is an empty div to keep position in the DOM
        // A picture and img el will be inserted when a source is set
        return $e88cd91ee18355c1$var$createEl("div", {
            className: "vjs-poster"
        });
    }
    /**
   * Get or set the `PosterImage`'s crossOrigin option.
   *
   * @param {string|null} [value]
   *        The value to set the crossOrigin to. If an argument is
   *        given, must be one of `'anonymous'` or `'use-credentials'`, or 'null'.
   *
   * @return {string|null}
   *         - The current crossOrigin value of the `Player` when getting.
   *         - undefined when setting
   */ crossOrigin(value) {
        // `null` can be set to unset a value
        if (typeof value === "undefined") {
            if (this.$("img")) // If the poster's element exists, give its value
            return this.$("img").crossOrigin;
            else if (this.player_.tech_ && this.player_.tech_.isReady_) // If not but the tech is ready, query the tech
            return this.player_.crossOrigin();
            // Otherwise check options as the  poster is usually set before the state of crossorigin
            // can be retrieved by the getter
            return this.player_.options_.crossOrigin || this.player_.options_.crossorigin || null;
        }
        if (value !== null && value !== "anonymous" && value !== "use-credentials") {
            this.player_.log.warn(`crossOrigin must be null,  "anonymous" or "use-credentials", given "${value}"`);
            return;
        }
        if (this.$("img")) this.$("img").crossOrigin = value;
        return;
    }
    /**
   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.
   *
   * @listens Player#posterchange
   *
   * @param {Event} [event]
   *        The `Player#posterchange` event that triggered this function.
   */ update(event) {
        const url = this.player().poster();
        this.setSrc(url);
        // If there's no poster source we should display:none on this component
        // so it's not still clickable or right-clickable
        if (url) this.show();
        else this.hide();
    }
    /**
   * Set the source of the `PosterImage` depending on the display method. (Re)creates
   * the inner picture and img elementss when needed.
   *
   * @param {string} [url]
   *        The URL to the source for the `PosterImage`. If not specified or falsy,
   *        any source and ant inner picture/img are removed.
   */ setSrc(url) {
        if (!url) {
            this.el_.textContent = "";
            return;
        }
        if (!this.$("img")) this.el_.appendChild($e88cd91ee18355c1$var$createEl("picture", {
            className: "vjs-poster",
            // Don't want poster to be tabbable.
            tabIndex: -1
        }, {}, $e88cd91ee18355c1$var$createEl("img", {
            loading: "lazy",
            crossOrigin: this.crossOrigin()
        }, {
            alt: ""
        })));
        this.$("img").src = url;
    }
    /**
   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See
   * {@link ClickableComponent#handleClick} for instances where this will be triggered.
   *
   * @listens tap
   * @listens click
   * @listens keydown
   *
   * @param {Event} event
   +        The `click`, `tap` or `keydown` event that caused this function to be called.
   */ handleClick(event) {
        // We don't want a click to trigger playback when controls are disabled
        if (!this.player_.controls()) return;
        if (this.player_.tech(true)) this.player_.tech(true).focus();
        if (this.player_.paused()) $e88cd91ee18355c1$var$silencePromise(this.player_.play());
        else this.player_.pause();
    }
}
/**
 * Get or set the `PosterImage`'s crossorigin option. For the HTML5 player, this
 * sets the `crossOrigin` property on the `<img>` tag to control the CORS
 * behavior.
 *
 * @param {string|null} [value]
 *        The value to set the `PosterImages`'s crossorigin to. If an argument is
 *        given, must be one of `anonymous` or `use-credentials`.
 *
 * @return {string|null|undefined}
 *         - The current crossorigin value of the `Player` when getting.
 *         - undefined when setting
 */ $e88cd91ee18355c1$var$PosterImage.prototype.crossorigin = $e88cd91ee18355c1$var$PosterImage.prototype.crossOrigin;
$e88cd91ee18355c1$var$Component$1.registerComponent("PosterImage", $e88cd91ee18355c1$var$PosterImage);
/**
 * @file text-track-display.js
 */ const $e88cd91ee18355c1$var$darkGray = "#222";
const $e88cd91ee18355c1$var$lightGray = "#ccc";
const $e88cd91ee18355c1$var$fontMap = {
    monospace: "monospace",
    sansSerif: "sans-serif",
    serif: "serif",
    monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
    monospaceSerif: '"Courier New", monospace',
    proportionalSansSerif: "sans-serif",
    proportionalSerif: "serif",
    casual: '"Comic Sans MS", Impact, fantasy',
    script: '"Monotype Corsiva", cursive',
    smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
};
/**
 * Construct an rgba color from a given hex color code.
 *
 * @param {number} color
 *        Hex number for color, like #f0e or #f604e2.
 *
 * @param {number} opacity
 *        Value for opacity, 0.0 - 1.0.
 *
 * @return {string}
 *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.
 */ function $e88cd91ee18355c1$var$constructColor(color, opacity) {
    let hex;
    if (color.length === 4) // color looks like "#f0e"
    hex = color[1] + color[1] + color[2] + color[2] + color[3] + color[3];
    else if (color.length === 7) // color looks like "#f604e2"
    hex = color.slice(1);
    else throw new Error("Invalid color code provided, " + color + "; must be formatted as e.g. #f0e or #f604e2.");
    return "rgba(" + parseInt(hex.slice(0, 2), 16) + "," + parseInt(hex.slice(2, 4), 16) + "," + parseInt(hex.slice(4, 6), 16) + "," + opacity + ")";
}
/**
 * Try to update the style of a DOM element. Some style changes will throw an error,
 * particularly in IE8. Those should be noops.
 *
 * @param {Element} el
 *        The DOM element to be styled.
 *
 * @param {string} style
 *        The CSS property on the element that should be styled.
 *
 * @param {string} rule
 *        The style rule that should be applied to the property.
 *
 * @private
 */ function $e88cd91ee18355c1$var$tryUpdateStyle(el, style, rule) {
    try {
        el.style[style] = rule;
    } catch (e) {
        // Satisfies linter.
        return;
    }
}
/**
 * Converts the CSS top/right/bottom/left property numeric value to string in pixels.
 *
 * @param {number} position
 *        The CSS top/right/bottom/left property value.
 *
 * @return {string}
 *          The CSS property value that was created, like '10px'.
 *
 * @private
 */ function $e88cd91ee18355c1$var$getCSSPositionValue(position) {
    return position ? `${position}px` : "";
}
/**
 * The component for displaying text track cues.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$TextTrackDisplay extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when `TextTrackDisplay` is ready.
   */ constructor(player, options, ready){
        super(player, options, ready);
        const updateDisplayTextHandler = (e)=>this.updateDisplay(e);
        const updateDisplayHandler = (e)=>{
            this.updateDisplayOverlay();
            this.updateDisplay(e);
        };
        player.on("loadstart", (e)=>this.toggleDisplay(e));
        player.on("texttrackchange", updateDisplayTextHandler);
        player.on("loadedmetadata", (e)=>{
            this.updateDisplayOverlay();
            this.preselectTrack(e);
        });
        // This used to be called during player init, but was causing an error
        // if a track should show by default and the display hadn't loaded yet.
        // Should probably be moved to an external track loader when we support
        // tracks that don't need a display.
        player.ready($e88cd91ee18355c1$var$bind_(this, function() {
            if (player.tech_ && player.tech_.featuresNativeTextTracks) {
                this.hide();
                return;
            }
            player.on("fullscreenchange", updateDisplayHandler);
            player.on("playerresize", updateDisplayHandler);
            const screenOrientation = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).screen.orientation || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7)));
            const changeOrientationEvent = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).screen.orientation ? "change" : "orientationchange";
            screenOrientation.addEventListener(changeOrientationEvent, updateDisplayHandler);
            player.on("dispose", ()=>screenOrientation.removeEventListener(changeOrientationEvent, updateDisplayHandler));
            const tracks = this.options_.playerOptions.tracks || [];
            for(let i = 0; i < tracks.length; i++)this.player_.addRemoteTextTrack(tracks[i], true);
            this.preselectTrack();
        }));
    }
    /**
  * Preselect a track following this precedence:
  * - matches the previously selected {@link TextTrack}'s language and kind
  * - matches the previously selected {@link TextTrack}'s language only
  * - is the first default captions track
  * - is the first default descriptions track
  *
  * @listens Player#loadstart
  */ preselectTrack() {
        const modes = {
            captions: 1,
            subtitles: 1
        };
        const trackList = this.player_.textTracks();
        const userPref = this.player_.cache_.selectedLanguage;
        let firstDesc;
        let firstCaptions;
        let preferredTrack;
        for(let i = 0; i < trackList.length; i++){
            const track = trackList[i];
            if (userPref && userPref.enabled && userPref.language && userPref.language === track.language && track.kind in modes) {
                // Always choose the track that matches both language and kind
                if (track.kind === userPref.kind) preferredTrack = track;
                else if (!preferredTrack) preferredTrack = track;
            // clear everything if offTextTrackMenuItem was clicked
            } else if (userPref && !userPref.enabled) {
                preferredTrack = null;
                firstDesc = null;
                firstCaptions = null;
            } else if (track.default) {
                if (track.kind === "descriptions" && !firstDesc) firstDesc = track;
                else if (track.kind in modes && !firstCaptions) firstCaptions = track;
            }
        }
        // The preferredTrack matches the user preference and takes
        // precedence over all the other tracks.
        // So, display the preferredTrack before the first default track
        // and the subtitles/captions track before the descriptions track
        if (preferredTrack) preferredTrack.mode = "showing";
        else if (firstCaptions) firstCaptions.mode = "showing";
        else if (firstDesc) firstDesc.mode = "showing";
    }
    /**
   * Turn display of {@link TextTrack}'s from the current state into the other state.
   * There are only two states:
   * - 'shown'
   * - 'hidden'
   *
   * @listens Player#loadstart
   */ toggleDisplay() {
        if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) this.hide();
        else this.show();
    }
    /**
   * Create the {@link Component}'s DOM element.
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        return super.createEl("div", {
            className: "vjs-text-track-display"
        }, {
            "translate": "yes",
            "aria-live": "off",
            "aria-atomic": "true"
        });
    }
    /**
   * Clear all displayed {@link TextTrack}s.
   */ clearDisplay() {
        if (typeof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebVTT === "function") (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebVTT.processCues((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))), [], this.el_);
    }
    /**
   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or
   * a {@link Player#fullscreenchange} is fired.
   *
   * @listens Player#texttrackchange
   * @listens Player#fullscreenchange
   */ updateDisplay() {
        const tracks = this.player_.textTracks();
        const allowMultipleShowingTracks = this.options_.allowMultipleShowingTracks;
        this.clearDisplay();
        if (allowMultipleShowingTracks) {
            const showingTracks = [];
            for(let i = 0; i < tracks.length; ++i){
                const track = tracks[i];
                if (track.mode !== "showing") continue;
                showingTracks.push(track);
            }
            this.updateForTrack(showingTracks);
            return;
        }
        //  Track display prioritization model: if multiple tracks are 'showing',
        //  display the first 'subtitles' or 'captions' track which is 'showing',
        //  otherwise display the first 'descriptions' track which is 'showing'
        let descriptionsTrack = null;
        let captionsSubtitlesTrack = null;
        let i = tracks.length;
        while(i--){
            const track = tracks[i];
            if (track.mode === "showing") {
                if (track.kind === "descriptions") descriptionsTrack = track;
                else captionsSubtitlesTrack = track;
            }
        }
        if (captionsSubtitlesTrack) {
            if (this.getAttribute("aria-live") !== "off") this.setAttribute("aria-live", "off");
            this.updateForTrack(captionsSubtitlesTrack);
        } else if (descriptionsTrack) {
            if (this.getAttribute("aria-live") !== "assertive") this.setAttribute("aria-live", "assertive");
            this.updateForTrack(descriptionsTrack);
        }
    }
    /**
   * Updates the displayed TextTrack to be sure it overlays the video when a either
   * a {@link Player#texttrackchange} or a {@link Player#fullscreenchange} is fired.
   */ updateDisplayOverlay() {
        // inset-inline and inset-block are not supprted on old chrome, but these are
        // only likely to be used on TV devices
        if (!this.player_.videoHeight() || !(0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).CSS.supports("inset-inline: 10px")) return;
        const playerWidth = this.player_.currentWidth();
        const playerHeight = this.player_.currentHeight();
        const playerAspectRatio = playerWidth / playerHeight;
        const videoAspectRatio = this.player_.videoWidth() / this.player_.videoHeight();
        let insetInlineMatch = 0;
        let insetBlockMatch = 0;
        if (Math.abs(playerAspectRatio - videoAspectRatio) > 0.1) {
            if (playerAspectRatio > videoAspectRatio) insetInlineMatch = Math.round((playerWidth - playerHeight * videoAspectRatio) / 2);
            else insetBlockMatch = Math.round((playerHeight - playerWidth / videoAspectRatio) / 2);
        }
        $e88cd91ee18355c1$var$tryUpdateStyle(this.el_, "insetInline", $e88cd91ee18355c1$var$getCSSPositionValue(insetInlineMatch));
        $e88cd91ee18355c1$var$tryUpdateStyle(this.el_, "insetBlock", $e88cd91ee18355c1$var$getCSSPositionValue(insetBlockMatch));
    }
    /**
   * Style {@Link TextTrack} activeCues according to {@Link TextTrackSettings}.
   *
   * @param {TextTrack} track
   *        Text track object containing active cues to style.
   */ updateDisplayState(track) {
        const overrides = this.player_.textTrackSettings.getValues();
        const cues = track.activeCues;
        let i = cues.length;
        while(i--){
            const cue = cues[i];
            if (!cue) continue;
            const cueDiv = cue.displayState;
            if (overrides.color) cueDiv.firstChild.style.color = overrides.color;
            if (overrides.textOpacity) $e88cd91ee18355c1$var$tryUpdateStyle(cueDiv.firstChild, "color", $e88cd91ee18355c1$var$constructColor(overrides.color || "#fff", overrides.textOpacity));
            if (overrides.backgroundColor) cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
            if (overrides.backgroundOpacity) $e88cd91ee18355c1$var$tryUpdateStyle(cueDiv.firstChild, "backgroundColor", $e88cd91ee18355c1$var$constructColor(overrides.backgroundColor || "#000", overrides.backgroundOpacity));
            if (overrides.windowColor) {
                if (overrides.windowOpacity) $e88cd91ee18355c1$var$tryUpdateStyle(cueDiv, "backgroundColor", $e88cd91ee18355c1$var$constructColor(overrides.windowColor, overrides.windowOpacity));
                else cueDiv.style.backgroundColor = overrides.windowColor;
            }
            if (overrides.edgeStyle) {
                if (overrides.edgeStyle === "dropshadow") cueDiv.firstChild.style.textShadow = `2px 2px 3px ${$e88cd91ee18355c1$var$darkGray}, 2px 2px 4px ${$e88cd91ee18355c1$var$darkGray}, 2px 2px 5px ${$e88cd91ee18355c1$var$darkGray}`;
                else if (overrides.edgeStyle === "raised") cueDiv.firstChild.style.textShadow = `1px 1px ${$e88cd91ee18355c1$var$darkGray}, 2px 2px ${$e88cd91ee18355c1$var$darkGray}, 3px 3px ${$e88cd91ee18355c1$var$darkGray}`;
                else if (overrides.edgeStyle === "depressed") cueDiv.firstChild.style.textShadow = `1px 1px ${$e88cd91ee18355c1$var$lightGray}, 0 1px ${$e88cd91ee18355c1$var$lightGray}, -1px -1px ${$e88cd91ee18355c1$var$darkGray}, 0 -1px ${$e88cd91ee18355c1$var$darkGray}`;
                else if (overrides.edgeStyle === "uniform") cueDiv.firstChild.style.textShadow = `0 0 4px ${$e88cd91ee18355c1$var$darkGray}, 0 0 4px ${$e88cd91ee18355c1$var$darkGray}, 0 0 4px ${$e88cd91ee18355c1$var$darkGray}, 0 0 4px ${$e88cd91ee18355c1$var$darkGray}`;
            }
            if (overrides.fontPercent && overrides.fontPercent !== 1) {
                const fontSize = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).parseFloat(cueDiv.style.fontSize);
                cueDiv.style.fontSize = fontSize * overrides.fontPercent + "px";
                cueDiv.style.height = "auto";
                cueDiv.style.top = "auto";
            }
            if (overrides.fontFamily && overrides.fontFamily !== "default") {
                if (overrides.fontFamily === "small-caps") cueDiv.firstChild.style.fontVariant = "small-caps";
                else cueDiv.firstChild.style.fontFamily = $e88cd91ee18355c1$var$fontMap[overrides.fontFamily];
            }
        }
    }
    /**
   * Add an {@link TextTrack} to to the {@link Tech}s {@link TextTrackList}.
   *
   * @param {TextTrack|TextTrack[]} tracks
   *        Text track object or text track array to be added to the list.
   */ updateForTrack(tracks) {
        if (!Array.isArray(tracks)) tracks = [
            tracks
        ];
        if (typeof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebVTT !== "function" || tracks.every((track)=>{
            return !track.activeCues;
        })) return;
        const cues = [];
        // push all active track cues
        for(let i = 0; i < tracks.length; ++i){
            const track = tracks[i];
            for(let j = 0; j < track.activeCues.length; ++j)cues.push(track.activeCues[j]);
        }
        // removes all cues before it processes new ones
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebVTT.processCues((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))), cues, this.el_);
        // add unique class to each language text track & add settings styling if necessary
        for(let i = 0; i < tracks.length; ++i){
            const track = tracks[i];
            for(let j = 0; j < track.activeCues.length; ++j){
                const cueEl = track.activeCues[j].displayState;
                $e88cd91ee18355c1$var$addClass(cueEl, "vjs-text-track-cue", "vjs-text-track-cue-" + (track.language ? track.language : i));
                if (track.language) $e88cd91ee18355c1$var$setAttribute(cueEl, "lang", track.language);
            }
            if (this.player_.textTrackSettings) this.updateDisplayState(track);
        }
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("TextTrackDisplay", $e88cd91ee18355c1$var$TextTrackDisplay);
/**
 * @file loading-spinner.js
 */ /**
 * A loading spinner for use during waiting/loading events.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$LoadingSpinner extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Create the `LoadingSpinner`s DOM element.
   *
   * @return {Element}
   *         The dom element that gets created.
   */ createEl() {
        const isAudio = this.player_.isAudio();
        const playerType = this.localize(isAudio ? "Audio Player" : "Video Player");
        const controlText = $e88cd91ee18355c1$var$createEl("span", {
            className: "vjs-control-text",
            textContent: this.localize("{1} is loading.", [
                playerType
            ])
        });
        const el = super.createEl("div", {
            className: "vjs-loading-spinner",
            dir: "ltr"
        });
        el.appendChild(controlText);
        return el;
    }
    /**
   * Update control text on languagechange
   */ handleLanguagechange() {
        this.$(".vjs-control-text").textContent = this.localize("{1} is loading.", [
            this.player_.isAudio() ? "Audio Player" : "Video Player"
        ]);
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("LoadingSpinner", $e88cd91ee18355c1$var$LoadingSpinner);
/**
 * @file button.js
 */ /**
 * Base class for all buttons.
 *
 * @extends ClickableComponent
 */ class $e88cd91ee18355c1$var$Button extends $e88cd91ee18355c1$var$ClickableComponent {
    /**
   * Create the `Button`s DOM element.
   *
   * @param {string} [tag="button"]
   *        The element's node type. This argument is IGNORED: no matter what
   *        is passed, it will always create a `button` element.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element.
   *
   * @param {Object} [attributes={}]
   *        An object of attributes that should be set on the element.
   *
   * @return {Element}
   *         The element that gets created.
   */ createEl(tag, props = {}, attributes = {}) {
        tag = "button";
        props = Object.assign({
            className: this.buildCSSClass()
        }, props);
        // Add attributes for button element
        attributes = Object.assign({
            // Necessary since the default button type is "submit"
            type: "button"
        }, attributes);
        const el = $e88cd91ee18355c1$var$createEl(tag, props, attributes);
        if (!this.player_.options_.experimentalSvgIcons) el.appendChild($e88cd91ee18355c1$var$createEl("span", {
            className: "vjs-icon-placeholder"
        }, {
            "aria-hidden": true
        }));
        this.createControlTextEl(el);
        return el;
    }
    /**
   * Add a child `Component` inside of this `Button`.
   *
   * @param {string|Component} child
   *        The name or instance of a child to add.
   *
   * @param {Object} [options={}]
   *        The key/value store of options that will get passed to children of
   *        the child.
   *
   * @return {Component}
   *         The `Component` that gets added as a child. When using a string the
   *         `Component` will get created by this process.
   *
   * @deprecated since version 5
   */ addChild(child, options = {}) {
        const className = this.constructor.name;
        $e88cd91ee18355c1$var$log$1.warn(`Adding an actionable (user controllable) child to a Button (${className}) is not supported; use a ClickableComponent instead.`);
        // Avoid the error message generated by ClickableComponent's addChild method
        return $e88cd91ee18355c1$var$Component$1.prototype.addChild.call(this, child, options);
    }
    /**
   * Enable the `Button` element so that it can be activated or clicked. Use this with
   * {@link Button#disable}.
   */ enable() {
        super.enable();
        this.el_.removeAttribute("disabled");
    }
    /**
   * Disable the `Button` element so that it cannot be activated or clicked. Use this with
   * {@link Button#enable}.
   */ disable() {
        super.disable();
        this.el_.setAttribute("disabled", "disabled");
    }
    /**
   * This gets called when a `Button` has focus and `keydown` is triggered via a key
   * press.
   *
   * @param {KeyboardEvent} event
   *        The event that caused this function to get called.
   *
   * @listens keydown
   */ handleKeyDown(event) {
        // Ignore Space or Enter key operation, which is handled by the browser for
        // a button - though not for its super class, ClickableComponent. Also,
        // prevent the event from propagating through the DOM and triggering Player
        // hotkeys. We do not preventDefault here because we _want_ the browser to
        // handle it.
        if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Space") || (0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Enter")) {
            event.stopPropagation();
            return;
        }
        // Pass keypress handling up for unsupported keys
        super.handleKeyDown(event);
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("Button", $e88cd91ee18355c1$var$Button);
/**
 * @file big-play-button.js
 */ /**
 * The initial play button that shows before the video has played. The hiding of the
 * `BigPlayButton` get done via CSS and `Player` states.
 *
 * @extends Button
 */ class $e88cd91ee18355c1$var$BigPlayButton extends $e88cd91ee18355c1$var$Button {
    constructor(player, options){
        super(player, options);
        this.mouseused_ = false;
        this.setIcon("play");
        this.on("mousedown", (e)=>this.handleMouseDown(e));
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.
   */ buildCSSClass() {
        return "vjs-big-play-button";
    }
    /**
   * This gets called when a `BigPlayButton` "clicked". See {@link ClickableComponent}
   * for more detailed information on what a click can be.
   *
   * @param {KeyboardEvent|MouseEvent|TouchEvent} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */ handleClick(event) {
        const playPromise = this.player_.play();
        // exit early if clicked via the mouse
        if (this.mouseused_ && "clientX" in event && "clientY" in event) {
            $e88cd91ee18355c1$var$silencePromise(playPromise);
            if (this.player_.tech(true)) this.player_.tech(true).focus();
            return;
        }
        const cb = this.player_.getChild("controlBar");
        const playToggle = cb && cb.getChild("playToggle");
        if (!playToggle) {
            this.player_.tech(true).focus();
            return;
        }
        const playFocus = ()=>playToggle.focus();
        if ($e88cd91ee18355c1$var$isPromise(playPromise)) playPromise.then(playFocus, ()=>{});
        else this.setTimeout(playFocus, 1);
    }
    /**
   * Event handler that is called when a `BigPlayButton` receives a
   * `keydown` event.
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */ handleKeyDown(event) {
        this.mouseused_ = false;
        super.handleKeyDown(event);
    }
    /**
   * Handle `mousedown` events on the `BigPlayButton`.
   *
   * @param {MouseEvent} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   */ handleMouseDown(event) {
        this.mouseused_ = true;
    }
}
/**
 * The text that should display over the `BigPlayButton`s controls. Added to for localization.
 *
 * @type {string}
 * @protected
 */ $e88cd91ee18355c1$var$BigPlayButton.prototype.controlText_ = "Play Video";
$e88cd91ee18355c1$var$Component$1.registerComponent("BigPlayButton", $e88cd91ee18355c1$var$BigPlayButton);
/**
 * @file close-button.js
 */ /**
 * The `CloseButton` is a `{@link Button}` that fires a `close` event when
 * it gets clicked.
 *
 * @extends Button
 */ class $e88cd91ee18355c1$var$CloseButton extends $e88cd91ee18355c1$var$Button {
    /**
  * Creates an instance of the this class.
  *
  * @param  { import('./player').default } player
  *         The `Player` that this class should be attached to.
  *
  * @param  {Object} [options]
  *         The key/value store of player options.
  */ constructor(player, options){
        super(player, options);
        this.setIcon("cancel");
        this.controlText(options && options.controlText || this.localize("Close"));
    }
    /**
  * Builds the default DOM `className`.
  *
  * @return {string}
  *         The DOM `className` for this object.
  */ buildCSSClass() {
        return `vjs-close-button ${super.buildCSSClass()}`;
    }
    /**
   * This gets called when a `CloseButton` gets clicked. See
   * {@link ClickableComponent#handleClick} for more information on when
   * this will be triggered
   *
   * @param {Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   * @fires CloseButton#close
   */ handleClick(event) {
        /**
     * Triggered when the a `CloseButton` is clicked.
     *
     * @event CloseButton#close
     * @type {Event}
     *
     * @property {boolean} [bubbles=false]
     *           set to false so that the close event does not
     *           bubble up to parents if there is no listener
     */ this.trigger({
            type: "close",
            bubbles: false
        });
    }
    /**
   * Event handler that is called when a `CloseButton` receives a
   * `keydown` event.
   *
   * By default, if the key is Esc, it will trigger a `click` event.
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */ handleKeyDown(event) {
        // Esc button will trigger `click` event
        if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Esc")) {
            event.preventDefault();
            event.stopPropagation();
            this.trigger("click");
        } else // Pass keypress handling up for unsupported keys
        super.handleKeyDown(event);
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("CloseButton", $e88cd91ee18355c1$var$CloseButton);
/**
 * @file play-toggle.js
 */ /**
 * Button to toggle between play and pause.
 *
 * @extends Button
 */ class $e88cd91ee18355c1$var$PlayToggle extends $e88cd91ee18355c1$var$Button {
    /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */ constructor(player, options = {}){
        super(player, options);
        // show or hide replay icon
        options.replay = options.replay === undefined || options.replay;
        this.setIcon("play");
        this.on(player, "play", (e)=>this.handlePlay(e));
        this.on(player, "pause", (e)=>this.handlePause(e));
        if (options.replay) this.on(player, "ended", (e)=>this.handleEnded(e));
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return `vjs-play-control ${super.buildCSSClass()}`;
    }
    /**
   * This gets called when an `PlayToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */ handleClick(event) {
        if (this.player_.paused()) $e88cd91ee18355c1$var$silencePromise(this.player_.play());
        else this.player_.pause();
    }
    /**
   * This gets called once after the video has ended and the user seeks so that
   * we can change the replay button back to a play button.
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#seeked
   */ handleSeeked(event) {
        this.removeClass("vjs-ended");
        if (this.player_.paused()) this.handlePause(event);
        else this.handlePlay(event);
    }
    /**
   * Add the vjs-playing class to the element so it can change appearance.
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#play
   */ handlePlay(event) {
        this.removeClass("vjs-ended", "vjs-paused");
        this.addClass("vjs-playing");
        // change the button text to "Pause"
        this.setIcon("pause");
        this.controlText("Pause");
    }
    /**
   * Add the vjs-paused class to the element so it can change appearance.
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#pause
   */ handlePause(event) {
        this.removeClass("vjs-playing");
        this.addClass("vjs-paused");
        // change the button text to "Play"
        this.setIcon("play");
        this.controlText("Play");
    }
    /**
   * Add the vjs-ended class to the element so it can change appearance
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#ended
   */ handleEnded(event) {
        this.removeClass("vjs-playing");
        this.addClass("vjs-ended");
        // change the button text to "Replay"
        this.setIcon("replay");
        this.controlText("Replay");
        // on the next seek remove the replay button
        this.one(this.player_, "seeked", (e)=>this.handleSeeked(e));
    }
}
/**
 * The text that should display over the `PlayToggle`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */ $e88cd91ee18355c1$var$PlayToggle.prototype.controlText_ = "Play";
$e88cd91ee18355c1$var$Component$1.registerComponent("PlayToggle", $e88cd91ee18355c1$var$PlayToggle);
/**
 * @file time-display.js
 */ /**
 * Displays time information about the video
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$TimeDisplay extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.on(player, [
            "timeupdate",
            "ended",
            "seeking"
        ], (e)=>this.update(e));
        this.updateTextNode_();
    }
    /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        const className = this.buildCSSClass();
        const el = super.createEl("div", {
            className: `${className} vjs-time-control vjs-control`
        });
        const span = $e88cd91ee18355c1$var$createEl("span", {
            className: "vjs-control-text",
            textContent: `${this.localize(this.labelText_)}\u00a0`
        }, {
            role: "presentation"
        });
        el.appendChild(span);
        this.contentEl_ = $e88cd91ee18355c1$var$createEl("span", {
            className: `${className}-display`
        }, {
            // span elements have no implicit role, but some screen readers (notably VoiceOver)
            // treat them as a break between items in the DOM when using arrow keys
            // (or left-to-right swipes on iOS) to read contents of a page. Using
            // role='presentation' causes VoiceOver to NOT treat this span as a break.
            role: "presentation"
        });
        el.appendChild(this.contentEl_);
        return el;
    }
    dispose() {
        this.contentEl_ = null;
        this.textNode_ = null;
        super.dispose();
    }
    /**
   * Updates the displayed time according to the `updateContent` function which is defined in the child class.
   *
   * @param {Event} [event]
   *          The `timeupdate`, `ended` or `seeking` (if enableSmoothSeeking is true) event that caused this function to be called.
   */ update(event) {
        if (!this.player_.options_.enableSmoothSeeking && event.type === "seeking") return;
        this.updateContent(event);
    }
    /**
   * Updates the time display text node with a new time
   *
   * @param {number} [time=0] the time to update to
   *
   * @private
   */ updateTextNode_(time = 0) {
        time = $e88cd91ee18355c1$var$formatTime(time);
        if (this.formattedTime_ === time) return;
        this.formattedTime_ = time;
        this.requestNamedAnimationFrame("TimeDisplay#updateTextNode_", ()=>{
            if (!this.contentEl_) return;
            let oldNode = this.textNode_;
            if (oldNode && this.contentEl_.firstChild !== oldNode) {
                oldNode = null;
                $e88cd91ee18355c1$var$log$1.warn("TimeDisplay#updateTextnode_: Prevented replacement of text node element since it was no longer a child of this node. Appending a new node instead.");
            }
            this.textNode_ = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createTextNode(this.formattedTime_);
            if (!this.textNode_) return;
            if (oldNode) this.contentEl_.replaceChild(this.textNode_, oldNode);
            else this.contentEl_.appendChild(this.textNode_);
        });
    }
    /**
   * To be filled out in the child class, should update the displayed time
   * in accordance with the fact that the current time has changed.
   *
   * @param {Event} [event]
   *        The `timeupdate`  event that caused this to run.
   *
   * @listens Player#timeupdate
   */ updateContent(event) {}
}
/**
 * The text that is added to the `TimeDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */ $e88cd91ee18355c1$var$TimeDisplay.prototype.labelText_ = "Time";
/**
 * The text that should display over the `TimeDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @protected
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */ $e88cd91ee18355c1$var$TimeDisplay.prototype.controlText_ = "Time";
$e88cd91ee18355c1$var$Component$1.registerComponent("TimeDisplay", $e88cd91ee18355c1$var$TimeDisplay);
/**
 * @file current-time-display.js
 */ /**
 * Displays the current time
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$CurrentTimeDisplay extends $e88cd91ee18355c1$var$TimeDisplay {
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return "vjs-current-time";
    }
    /**
   * Update current time display
   *
   * @param {Event} [event]
   *        The `timeupdate` event that caused this function to run.
   *
   * @listens Player#timeupdate
   */ updateContent(event) {
        // Allows for smooth scrubbing, when player can't keep up.
        let time;
        if (this.player_.ended()) time = this.player_.duration();
        else time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
        this.updateTextNode_(time);
    }
}
/**
 * The text that is added to the `CurrentTimeDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */ $e88cd91ee18355c1$var$CurrentTimeDisplay.prototype.labelText_ = "Current Time";
/**
 * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @protected
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */ $e88cd91ee18355c1$var$CurrentTimeDisplay.prototype.controlText_ = "Current Time";
$e88cd91ee18355c1$var$Component$1.registerComponent("CurrentTimeDisplay", $e88cd91ee18355c1$var$CurrentTimeDisplay);
/**
 * @file duration-display.js
 */ /**
 * Displays the duration
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$DurationDisplay extends $e88cd91ee18355c1$var$TimeDisplay {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        const updateContent = (e)=>this.updateContent(e);
        // we do not want to/need to throttle duration changes,
        // as they should always display the changed duration as
        // it has changed
        this.on(player, "durationchange", updateContent);
        // Listen to loadstart because the player duration is reset when a new media element is loaded,
        // but the durationchange on the user agent will not fire.
        // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}
        this.on(player, "loadstart", updateContent);
        // Also listen for timeupdate (in the parent) and loadedmetadata because removing those
        // listeners could have broken dependent applications/libraries. These
        // can likely be removed for 7.0.
        this.on(player, "loadedmetadata", updateContent);
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return "vjs-duration";
    }
    /**
   * Update duration time display.
   *
   * @param {Event} [event]
   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused
   *        this function to be called.
   *
   * @listens Player#durationchange
   * @listens Player#timeupdate
   * @listens Player#loadedmetadata
   */ updateContent(event) {
        const duration = this.player_.duration();
        this.updateTextNode_(duration);
    }
}
/**
 * The text that is added to the `DurationDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */ $e88cd91ee18355c1$var$DurationDisplay.prototype.labelText_ = "Duration";
/**
 * The text that should display over the `DurationDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @protected
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */ $e88cd91ee18355c1$var$DurationDisplay.prototype.controlText_ = "Duration";
$e88cd91ee18355c1$var$Component$1.registerComponent("DurationDisplay", $e88cd91ee18355c1$var$DurationDisplay);
/**
 * @file time-divider.js
 */ /**
 * The separator between the current time and duration.
 * Can be hidden if it's not needed in the design.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$TimeDivider extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Create the component's DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        const el = super.createEl("div", {
            className: "vjs-time-control vjs-time-divider"
        }, {
            // this element and its contents can be hidden from assistive techs since
            // it is made extraneous by the announcement of the control text
            // for the current time and duration displays
            "aria-hidden": true
        });
        const div = super.createEl("div");
        const span = super.createEl("span", {
            textContent: "/"
        });
        div.appendChild(span);
        el.appendChild(div);
        return el;
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("TimeDivider", $e88cd91ee18355c1$var$TimeDivider);
/**
 * @file remaining-time-display.js
 */ /**
 * Displays the time left in the video
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$RemainingTimeDisplay extends $e88cd91ee18355c1$var$TimeDisplay {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.on(player, "durationchange", (e)=>this.updateContent(e));
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return "vjs-remaining-time";
    }
    /**
   * Create the `Component`'s DOM element with the "minus" character prepend to the time
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        const el = super.createEl();
        if (this.options_.displayNegative !== false) el.insertBefore($e88cd91ee18355c1$var$createEl("span", {}, {
            "aria-hidden": true
        }, "-"), this.contentEl_);
        return el;
    }
    /**
   * Update remaining time display.
   *
   * @param {Event} [event]
   *        The `timeupdate` or `durationchange` event that caused this to run.
   *
   * @listens Player#timeupdate
   * @listens Player#durationchange
   */ updateContent(event) {
        if (typeof this.player_.duration() !== "number") return;
        let time;
        // @deprecated We should only use remainingTimeDisplay
        // as of video.js 7
        if (this.player_.ended()) time = 0;
        else if (this.player_.remainingTimeDisplay) time = this.player_.remainingTimeDisplay();
        else time = this.player_.remainingTime();
        this.updateTextNode_(time);
    }
}
/**
 * The text that is added to the `RemainingTimeDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */ $e88cd91ee18355c1$var$RemainingTimeDisplay.prototype.labelText_ = "Remaining Time";
/**
 * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @protected
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */ $e88cd91ee18355c1$var$RemainingTimeDisplay.prototype.controlText_ = "Remaining Time";
$e88cd91ee18355c1$var$Component$1.registerComponent("RemainingTimeDisplay", $e88cd91ee18355c1$var$RemainingTimeDisplay);
/**
 * @file live-display.js
 */ // TODO - Future make it click to snap to live
/**
 * Displays the live indicator when duration is Infinity.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$LiveDisplay extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.updateShowing();
        this.on(this.player(), "durationchange", (e)=>this.updateShowing(e));
    }
    /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        const el = super.createEl("div", {
            className: "vjs-live-control vjs-control"
        });
        this.contentEl_ = $e88cd91ee18355c1$var$createEl("div", {
            className: "vjs-live-display"
        }, {
            "aria-live": "off"
        });
        this.contentEl_.appendChild($e88cd91ee18355c1$var$createEl("span", {
            className: "vjs-control-text",
            textContent: `${this.localize("Stream Type")}\u00a0`
        }));
        this.contentEl_.appendChild((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createTextNode(this.localize("LIVE")));
        el.appendChild(this.contentEl_);
        return el;
    }
    dispose() {
        this.contentEl_ = null;
        super.dispose();
    }
    /**
   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide
   * it accordingly
   *
   * @param {Event} [event]
   *        The {@link Player#durationchange} event that caused this function to run.
   *
   * @listens Player#durationchange
   */ updateShowing(event) {
        if (this.player().duration() === Infinity) this.show();
        else this.hide();
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("LiveDisplay", $e88cd91ee18355c1$var$LiveDisplay);
/**
 * @file seek-to-live.js
 */ /**
 * Displays the live indicator when duration is Infinity.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$SeekToLive extends $e88cd91ee18355c1$var$Button {
    /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.updateLiveEdgeStatus();
        if (this.player_.liveTracker) {
            this.updateLiveEdgeStatusHandler_ = (e)=>this.updateLiveEdgeStatus(e);
            this.on(this.player_.liveTracker, "liveedgechange", this.updateLiveEdgeStatusHandler_);
        }
    }
    /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        const el = super.createEl("button", {
            className: "vjs-seek-to-live-control vjs-control"
        });
        this.setIcon("circle", el);
        this.textEl_ = $e88cd91ee18355c1$var$createEl("span", {
            className: "vjs-seek-to-live-text",
            textContent: this.localize("LIVE")
        }, {
            "aria-hidden": "true"
        });
        el.appendChild(this.textEl_);
        return el;
    }
    /**
   * Update the state of this button if we are at the live edge
   * or not
   */ updateLiveEdgeStatus() {
        // default to live edge
        if (!this.player_.liveTracker || this.player_.liveTracker.atLiveEdge()) {
            this.setAttribute("aria-disabled", true);
            this.addClass("vjs-at-live-edge");
            this.controlText("Seek to live, currently playing live");
        } else {
            this.setAttribute("aria-disabled", false);
            this.removeClass("vjs-at-live-edge");
            this.controlText("Seek to live, currently behind live");
        }
    }
    /**
   * On click bring us as near to the live point as possible.
   * This requires that we wait for the next `live-seekable-change`
   * event which will happen every segment length seconds.
   */ handleClick() {
        this.player_.liveTracker.seekToLiveEdge();
    }
    /**
   * Dispose of the element and stop tracking
   */ dispose() {
        if (this.player_.liveTracker) this.off(this.player_.liveTracker, "liveedgechange", this.updateLiveEdgeStatusHandler_);
        this.textEl_ = null;
        super.dispose();
    }
}
/**
 * The text that should display over the `SeekToLive`s control. Added for localization.
 *
 * @type {string}
 * @protected
 */ $e88cd91ee18355c1$var$SeekToLive.prototype.controlText_ = "Seek to live, currently playing live";
$e88cd91ee18355c1$var$Component$1.registerComponent("SeekToLive", $e88cd91ee18355c1$var$SeekToLive);
/**
 * @file num.js
 * @module num
 */ /**
 * Keep a number between a min and a max value
 *
 * @param {number} number
 *        The number to clamp
 *
 * @param {number} min
 *        The minimum value
 * @param {number} max
 *        The maximum value
 *
 * @return {number}
 *         the clamped number
 */ function $e88cd91ee18355c1$var$clamp(number, min, max) {
    number = Number(number);
    return Math.min(max, Math.max(min, isNaN(number) ? min : number));
}
var $e88cd91ee18355c1$var$Num = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    clamp: $e88cd91ee18355c1$var$clamp
});
/**
 * @file slider.js
 */ /**
 * The base functionality for a slider. Can be vertical or horizontal.
 * For instance the volume bar or the seek bar on a video is a slider.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$Slider extends $e88cd91ee18355c1$var$Component$1 {
    /**
  * Create an instance of this class
  *
  * @param { import('../player').default } player
  *        The `Player` that this class should be attached to.
  *
  * @param {Object} [options]
  *        The key/value store of player options.
  */ constructor(player, options){
        super(player, options);
        this.handleMouseDown_ = (e)=>this.handleMouseDown(e);
        this.handleMouseUp_ = (e)=>this.handleMouseUp(e);
        this.handleKeyDown_ = (e)=>this.handleKeyDown(e);
        this.handleClick_ = (e)=>this.handleClick(e);
        this.handleMouseMove_ = (e)=>this.handleMouseMove(e);
        this.update_ = (e)=>this.update(e);
        // Set property names to bar to match with the child Slider class is looking for
        this.bar = this.getChild(this.options_.barName);
        // Set a horizontal or vertical class on the slider depending on the slider type
        this.vertical(!!this.options_.vertical);
        this.enable();
    }
    /**
   * Are controls are currently enabled for this slider or not.
   *
   * @return {boolean}
   *         true if controls are enabled, false otherwise
   */ enabled() {
        return this.enabled_;
    }
    /**
   * Enable controls for this slider if they are disabled
   */ enable() {
        if (this.enabled()) return;
        this.on("mousedown", this.handleMouseDown_);
        this.on("touchstart", this.handleMouseDown_);
        this.on("keydown", this.handleKeyDown_);
        this.on("click", this.handleClick_);
        // TODO: deprecated, controlsvisible does not seem to be fired
        this.on(this.player_, "controlsvisible", this.update);
        if (this.playerEvent) this.on(this.player_, this.playerEvent, this.update);
        this.removeClass("disabled");
        this.setAttribute("tabindex", 0);
        this.enabled_ = true;
    }
    /**
   * Disable controls for this slider if they are enabled
   */ disable() {
        if (!this.enabled()) return;
        const doc = this.bar.el_.ownerDocument;
        this.off("mousedown", this.handleMouseDown_);
        this.off("touchstart", this.handleMouseDown_);
        this.off("keydown", this.handleKeyDown_);
        this.off("click", this.handleClick_);
        this.off(this.player_, "controlsvisible", this.update_);
        this.off(doc, "mousemove", this.handleMouseMove_);
        this.off(doc, "mouseup", this.handleMouseUp_);
        this.off(doc, "touchmove", this.handleMouseMove_);
        this.off(doc, "touchend", this.handleMouseUp_);
        this.removeAttribute("tabindex");
        this.addClass("disabled");
        if (this.playerEvent) this.off(this.player_, this.playerEvent, this.update);
        this.enabled_ = false;
    }
    /**
   * Create the `Slider`s DOM element.
   *
   * @param {string} type
   *        Type of element to create.
   *
   * @param {Object} [props={}]
   *        List of properties in Object form.
   *
   * @param {Object} [attributes={}]
   *        list of attributes in Object form.
   *
   * @return {Element}
   *         The element that gets created.
   */ createEl(type, props = {}, attributes = {}) {
        // Add the slider element class to all sub classes
        props.className = props.className + " vjs-slider";
        props = Object.assign({
            tabIndex: 0
        }, props);
        attributes = Object.assign({
            "role": "slider",
            "aria-valuenow": 0,
            "aria-valuemin": 0,
            "aria-valuemax": 100
        }, attributes);
        return super.createEl(type, props, attributes);
    }
    /**
   * Handle `mousedown` or `touchstart` events on the `Slider`.
   *
   * @param {MouseEvent} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   * @fires Slider#slideractive
   */ handleMouseDown(event) {
        const doc = this.bar.el_.ownerDocument;
        if (event.type === "mousedown") event.preventDefault();
        // Do not call preventDefault() on touchstart in Chrome
        // to avoid console warnings. Use a 'touch-action: none' style
        // instead to prevent unintended scrolling.
        // https://developers.google.com/web/updates/2017/01/scrolling-intervention
        if (event.type === "touchstart" && !$e88cd91ee18355c1$var$IS_CHROME) event.preventDefault();
        $e88cd91ee18355c1$var$blockTextSelection();
        this.addClass("vjs-sliding");
        /**
     * Triggered when the slider is in an active state
     *
     * @event Slider#slideractive
     * @type {MouseEvent}
     */ this.trigger("slideractive");
        this.on(doc, "mousemove", this.handleMouseMove_);
        this.on(doc, "mouseup", this.handleMouseUp_);
        this.on(doc, "touchmove", this.handleMouseMove_);
        this.on(doc, "touchend", this.handleMouseUp_);
        this.handleMouseMove(event, true);
    }
    /**
   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.
   * The `mousemove` and `touchmove` events will only only trigger this function during
   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and
   * {@link Slider#handleMouseUp}.
   *
   * @param {MouseEvent} event
   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered
   *        this function
   * @param {boolean} mouseDown this is a flag that should be set to true if `handleMouseMove` is called directly. It allows us to skip things that should not happen if coming from mouse down but should happen on regular mouse move handler. Defaults to false.
   *
   * @listens mousemove
   * @listens touchmove
   */ handleMouseMove(event) {}
    /**
   * Handle `mouseup` or `touchend` events on the `Slider`.
   *
   * @param {MouseEvent} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   * @fires Slider#sliderinactive
   */ handleMouseUp(event) {
        const doc = this.bar.el_.ownerDocument;
        $e88cd91ee18355c1$var$unblockTextSelection();
        this.removeClass("vjs-sliding");
        /**
     * Triggered when the slider is no longer in an active state.
     *
     * @event Slider#sliderinactive
     * @type {Event}
     */ this.trigger("sliderinactive");
        this.off(doc, "mousemove", this.handleMouseMove_);
        this.off(doc, "mouseup", this.handleMouseUp_);
        this.off(doc, "touchmove", this.handleMouseMove_);
        this.off(doc, "touchend", this.handleMouseUp_);
        this.update();
    }
    /**
   * Update the progress bar of the `Slider`.
   *
   * @return {number}
   *          The percentage of progress the progress bar represents as a
   *          number from 0 to 1.
   */ update() {
        // In VolumeBar init we have a setTimeout for update that pops and update
        // to the end of the execution stack. The player is destroyed before then
        // update will cause an error
        // If there's no bar...
        if (!this.el_ || !this.bar) return;
        // clamp progress between 0 and 1
        // and only round to four decimal places, as we round to two below
        const progress = this.getProgress();
        if (progress === this.progress_) return progress;
        this.progress_ = progress;
        this.requestNamedAnimationFrame("Slider#update", ()=>{
            // Set the new bar width or height
            const sizeKey = this.vertical() ? "height" : "width";
            // Convert to a percentage for css value
            this.bar.el().style[sizeKey] = (progress * 100).toFixed(2) + "%";
        });
        return progress;
    }
    /**
   * Get the percentage of the bar that should be filled
   * but clamped and rounded.
   *
   * @return {number}
   *         percentage filled that the slider is
   */ getProgress() {
        return Number($e88cd91ee18355c1$var$clamp(this.getPercent(), 0, 1).toFixed(4));
    }
    /**
   * Calculate distance for slider
   *
   * @param {Event} event
   *        The event that caused this function to run.
   *
   * @return {number}
   *         The current position of the Slider.
   *         - position.x for vertical `Slider`s
   *         - position.y for horizontal `Slider`s
   */ calculateDistance(event) {
        const position = $e88cd91ee18355c1$var$getPointerPosition(this.el_, event);
        if (this.vertical()) return position.y;
        return position.x;
    }
    /**
   * Handle a `keydown` event on the `Slider`. Watches for left, right, up, and down
   * arrow keys. This function will only be called when the slider has focus. See
   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.
   *
   * @param {KeyboardEvent} event
   *        the `keydown` event that caused this function to run.
   *
   * @listens keydown
   */ handleKeyDown(event) {
        // Left and Down Arrows
        if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Left") || (0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Down")) {
            event.preventDefault();
            event.stopPropagation();
            this.stepBack();
        // Up and Right Arrows
        } else if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Right") || (0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Up")) {
            event.preventDefault();
            event.stopPropagation();
            this.stepForward();
        } else // Pass keydown handling up for unsupported keys
        super.handleKeyDown(event);
    }
    /**
   * Listener for click events on slider, used to prevent clicks
   *   from bubbling up to parent elements like button menus.
   *
   * @param {Object} event
   *        Event that caused this object to run
   */ handleClick(event) {
        event.stopPropagation();
        event.preventDefault();
    }
    /**
   * Get/set if slider is horizontal for vertical
   *
   * @param {boolean} [bool]
   *        - true if slider is vertical,
   *        - false is horizontal
   *
   * @return {boolean}
   *         - true if slider is vertical, and getting
   *         - false if the slider is horizontal, and getting
   */ vertical(bool) {
        if (bool === undefined) return this.vertical_ || false;
        this.vertical_ = !!bool;
        if (this.vertical_) this.addClass("vjs-slider-vertical");
        else this.addClass("vjs-slider-horizontal");
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("Slider", $e88cd91ee18355c1$var$Slider);
/**
 * @file load-progress-bar.js
 */ // get the percent width of a time compared to the total end
const $e88cd91ee18355c1$var$percentify = (time, end)=>$e88cd91ee18355c1$var$clamp(time / end * 100, 0, 100).toFixed(2) + "%";
/**
 * Shows loading progress
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$LoadProgressBar extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.partEls_ = [];
        this.on(player, "progress", (e)=>this.update(e));
    }
    /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        const el = super.createEl("div", {
            className: "vjs-load-progress"
        });
        const wrapper = $e88cd91ee18355c1$var$createEl("span", {
            className: "vjs-control-text"
        });
        const loadedText = $e88cd91ee18355c1$var$createEl("span", {
            textContent: this.localize("Loaded")
        });
        const separator = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createTextNode(": ");
        this.percentageEl_ = $e88cd91ee18355c1$var$createEl("span", {
            className: "vjs-control-text-loaded-percentage",
            textContent: "0%"
        });
        el.appendChild(wrapper);
        wrapper.appendChild(loadedText);
        wrapper.appendChild(separator);
        wrapper.appendChild(this.percentageEl_);
        return el;
    }
    dispose() {
        this.partEls_ = null;
        this.percentageEl_ = null;
        super.dispose();
    }
    /**
   * Update progress bar
   *
   * @param {Event} [event]
   *        The `progress` event that caused this function to run.
   *
   * @listens Player#progress
   */ update(event) {
        this.requestNamedAnimationFrame("LoadProgressBar#update", ()=>{
            const liveTracker = this.player_.liveTracker;
            const buffered = this.player_.buffered();
            const duration = liveTracker && liveTracker.isLive() ? liveTracker.seekableEnd() : this.player_.duration();
            const bufferedEnd = this.player_.bufferedEnd();
            const children = this.partEls_;
            const percent = $e88cd91ee18355c1$var$percentify(bufferedEnd, duration);
            if (this.percent_ !== percent) {
                // update the width of the progress bar
                this.el_.style.width = percent;
                // update the control-text
                $e88cd91ee18355c1$var$textContent(this.percentageEl_, percent);
                this.percent_ = percent;
            }
            // add child elements to represent the individual buffered time ranges
            for(let i = 0; i < buffered.length; i++){
                const start = buffered.start(i);
                const end = buffered.end(i);
                let part = children[i];
                if (!part) {
                    part = this.el_.appendChild($e88cd91ee18355c1$var$createEl());
                    children[i] = part;
                }
                //  only update if changed
                if (part.dataset.start === start && part.dataset.end === end) continue;
                part.dataset.start = start;
                part.dataset.end = end;
                // set the percent based on the width of the progress bar (bufferedEnd)
                part.style.left = $e88cd91ee18355c1$var$percentify(start, bufferedEnd);
                part.style.width = $e88cd91ee18355c1$var$percentify(end - start, bufferedEnd);
            }
            // remove unused buffered range elements
            for(let i = children.length; i > buffered.length; i--)this.el_.removeChild(children[i - 1]);
            children.length = buffered.length;
        });
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("LoadProgressBar", $e88cd91ee18355c1$var$LoadProgressBar);
/**
 * @file time-tooltip.js
 */ /**
 * Time tooltips display a time above the progress bar.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$TimeTooltip extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.update = $e88cd91ee18355c1$var$throttle($e88cd91ee18355c1$var$bind_(this, this.update), $e88cd91ee18355c1$var$UPDATE_REFRESH_INTERVAL);
    }
    /**
   * Create the time tooltip DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        return super.createEl("div", {
            className: "vjs-time-tooltip"
        }, {
            "aria-hidden": "true"
        });
    }
    /**
   * Updates the position of the time tooltip relative to the `SeekBar`.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   */ update(seekBarRect, seekBarPoint, content) {
        const tooltipRect = $e88cd91ee18355c1$var$findPosition(this.el_);
        const playerRect = $e88cd91ee18355c1$var$getBoundingClientRect(this.player_.el());
        const seekBarPointPx = seekBarRect.width * seekBarPoint;
        // do nothing if either rect isn't available
        // for example, if the player isn't in the DOM for testing
        if (!playerRect || !tooltipRect) return;
        // This is the space left of the `seekBarPoint` available within the bounds
        // of the player. We calculate any gap between the left edge of the player
        // and the left edge of the `SeekBar` and add the number of pixels in the
        // `SeekBar` before hitting the `seekBarPoint`
        const spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx;
        // This is the space right of the `seekBarPoint` available within the bounds
        // of the player. We calculate the number of pixels from the `seekBarPoint`
        // to the right edge of the `SeekBar` and add to that any gap between the
        // right edge of the `SeekBar` and the player.
        const spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right);
        // This is the number of pixels by which the tooltip will need to be pulled
        // further to the right to center it over the `seekBarPoint`.
        let pullTooltipBy = tooltipRect.width / 2;
        // Adjust the `pullTooltipBy` distance to the left or right depending on
        // the results of the space calculations above.
        if (spaceLeftOfPoint < pullTooltipBy) pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;
        else if (spaceRightOfPoint < pullTooltipBy) pullTooltipBy = spaceRightOfPoint;
        // Due to the imprecision of decimal/ratio based calculations and varying
        // rounding behaviors, there are cases where the spacing adjustment is off
        // by a pixel or two. This adds insurance to these calculations.
        if (pullTooltipBy < 0) pullTooltipBy = 0;
        else if (pullTooltipBy > tooltipRect.width) pullTooltipBy = tooltipRect.width;
        // prevent small width fluctuations within 0.4px from
        // changing the value below.
        // This really helps for live to prevent the play
        // progress time tooltip from jittering
        pullTooltipBy = Math.round(pullTooltipBy);
        this.el_.style.right = `-${pullTooltipBy}px`;
        this.write(content);
    }
    /**
   * Write the time to the tooltip DOM element.
   *
   * @param {string} content
   *        The formatted time for the tooltip.
   */ write(content) {
        $e88cd91ee18355c1$var$textContent(this.el_, content);
    }
    /**
   * Updates the position of the time tooltip relative to the `SeekBar`.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   *
   * @param {number} time
   *        The time to update the tooltip to, not used during live playback
   *
   * @param {Function} cb
   *        A function that will be called during the request animation frame
   *        for tooltips that need to do additional animations from the default
   */ updateTime(seekBarRect, seekBarPoint, time, cb) {
        this.requestNamedAnimationFrame("TimeTooltip#updateTime", ()=>{
            let content;
            const duration = this.player_.duration();
            if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {
                const liveWindow = this.player_.liveTracker.liveWindow();
                const secondsBehind = liveWindow - seekBarPoint * liveWindow;
                content = (secondsBehind < 1 ? "" : "-") + $e88cd91ee18355c1$var$formatTime(secondsBehind, liveWindow);
            } else content = $e88cd91ee18355c1$var$formatTime(time, duration);
            this.update(seekBarRect, seekBarPoint, content);
            if (cb) cb();
        });
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("TimeTooltip", $e88cd91ee18355c1$var$TimeTooltip);
/**
 * @file play-progress-bar.js
 */ /**
 * Used by {@link SeekBar} to display media playback progress as part of the
 * {@link ProgressControl}.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$PlayProgressBar extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.setIcon("circle");
        this.update = $e88cd91ee18355c1$var$throttle($e88cd91ee18355c1$var$bind_(this, this.update), $e88cd91ee18355c1$var$UPDATE_REFRESH_INTERVAL);
    }
    /**
   * Create the the DOM element for this class.
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        return super.createEl("div", {
            className: "vjs-play-progress vjs-slider-bar"
        }, {
            "aria-hidden": "true"
        });
    }
    /**
   * Enqueues updates to its own DOM as well as the DOM of its
   * {@link TimeTooltip} child.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   */ update(seekBarRect, seekBarPoint) {
        const timeTooltip = this.getChild("timeTooltip");
        if (!timeTooltip) return;
        const time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
        timeTooltip.updateTime(seekBarRect, seekBarPoint, time);
    }
}
/**
 * Default options for {@link PlayProgressBar}.
 *
 * @type {Object}
 * @private
 */ $e88cd91ee18355c1$var$PlayProgressBar.prototype.options_ = {
    children: []
};
// Time tooltips should not be added to a player on mobile devices
if (!$e88cd91ee18355c1$var$IS_IOS && !$e88cd91ee18355c1$var$IS_ANDROID) $e88cd91ee18355c1$var$PlayProgressBar.prototype.options_.children.push("timeTooltip");
$e88cd91ee18355c1$var$Component$1.registerComponent("PlayProgressBar", $e88cd91ee18355c1$var$PlayProgressBar);
/**
 * @file mouse-time-display.js
 */ /**
 * The {@link MouseTimeDisplay} component tracks mouse movement over the
 * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}
 * indicating the time which is represented by a given point in the
 * {@link ProgressControl}.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$MouseTimeDisplay extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.update = $e88cd91ee18355c1$var$throttle($e88cd91ee18355c1$var$bind_(this, this.update), $e88cd91ee18355c1$var$UPDATE_REFRESH_INTERVAL);
    }
    /**
   * Create the DOM element for this class.
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        return super.createEl("div", {
            className: "vjs-mouse-display"
        });
    }
    /**
   * Enqueues updates to its own DOM as well as the DOM of its
   * {@link TimeTooltip} child.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   */ update(seekBarRect, seekBarPoint) {
        const time = seekBarPoint * this.player_.duration();
        this.getChild("timeTooltip").updateTime(seekBarRect, seekBarPoint, time, ()=>{
            this.el_.style.left = `${seekBarRect.width * seekBarPoint}px`;
        });
    }
}
/**
 * Default options for `MouseTimeDisplay`
 *
 * @type {Object}
 * @private
 */ $e88cd91ee18355c1$var$MouseTimeDisplay.prototype.options_ = {
    children: [
        "timeTooltip"
    ]
};
$e88cd91ee18355c1$var$Component$1.registerComponent("MouseTimeDisplay", $e88cd91ee18355c1$var$MouseTimeDisplay);
/**
 * @file seek-bar.js
 */ // The number of seconds the `step*` functions move the timeline.
const $e88cd91ee18355c1$var$STEP_SECONDS = 5;
// The multiplier of STEP_SECONDS that PgUp/PgDown move the timeline.
const $e88cd91ee18355c1$var$PAGE_KEY_MULTIPLIER = 12;
/**
 * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}
 * as its `bar`.
 *
 * @extends Slider
 */ class $e88cd91ee18355c1$var$SeekBar extends $e88cd91ee18355c1$var$Slider {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.setEventHandlers_();
    }
    /**
   * Sets the event handlers
   *
   * @private
   */ setEventHandlers_() {
        this.update_ = $e88cd91ee18355c1$var$bind_(this, this.update);
        this.update = $e88cd91ee18355c1$var$throttle(this.update_, $e88cd91ee18355c1$var$UPDATE_REFRESH_INTERVAL);
        this.on(this.player_, [
            "ended",
            "durationchange",
            "timeupdate"
        ], this.update);
        if (this.player_.liveTracker) this.on(this.player_.liveTracker, "liveedgechange", this.update);
        // when playing, let's ensure we smoothly update the play progress bar
        // via an interval
        this.updateInterval = null;
        this.enableIntervalHandler_ = (e)=>this.enableInterval_(e);
        this.disableIntervalHandler_ = (e)=>this.disableInterval_(e);
        this.on(this.player_, [
            "playing"
        ], this.enableIntervalHandler_);
        this.on(this.player_, [
            "ended",
            "pause",
            "waiting"
        ], this.disableIntervalHandler_);
        // we don't need to update the play progress if the document is hidden,
        // also, this causes the CPU to spike and eventually crash the page on IE11.
        if ("hidden" in (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))) && "visibilityState" in (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X)))) this.on((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))), "visibilitychange", this.toggleVisibility_);
    }
    toggleVisibility_(e) {
        if ((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).visibilityState === "hidden") {
            this.cancelNamedAnimationFrame("SeekBar#update");
            this.cancelNamedAnimationFrame("Slider#update");
            this.disableInterval_(e);
        } else {
            if (!this.player_.ended() && !this.player_.paused()) this.enableInterval_();
            // we just switched back to the page and someone may be looking, so, update ASAP
            this.update();
        }
    }
    enableInterval_() {
        if (this.updateInterval) return;
        this.updateInterval = this.setInterval(this.update, $e88cd91ee18355c1$var$UPDATE_REFRESH_INTERVAL);
    }
    disableInterval_(e) {
        if (this.player_.liveTracker && this.player_.liveTracker.isLive() && e && e.type !== "ended") return;
        if (!this.updateInterval) return;
        this.clearInterval(this.updateInterval);
        this.updateInterval = null;
    }
    /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        return super.createEl("div", {
            className: "vjs-progress-holder"
        }, {
            "aria-label": this.localize("Progress Bar")
        });
    }
    /**
   * This function updates the play progress bar and accessibility
   * attributes to whatever is passed in.
   *
   * @param {Event} [event]
   *        The `timeupdate` or `ended` event that caused this to run.
   *
   * @listens Player#timeupdate
   *
   * @return {number}
   *          The current percent at a number from 0-1
   */ update(event) {
        // ignore updates while the tab is hidden
        if ((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).visibilityState === "hidden") return;
        const percent = super.update();
        this.requestNamedAnimationFrame("SeekBar#update", ()=>{
            const currentTime = this.player_.ended() ? this.player_.duration() : this.getCurrentTime_();
            const liveTracker = this.player_.liveTracker;
            let duration = this.player_.duration();
            if (liveTracker && liveTracker.isLive()) duration = this.player_.liveTracker.liveCurrentTime();
            if (this.percent_ !== percent) {
                // machine readable value of progress bar (percentage complete)
                this.el_.setAttribute("aria-valuenow", (percent * 100).toFixed(2));
                this.percent_ = percent;
            }
            if (this.currentTime_ !== currentTime || this.duration_ !== duration) {
                // human readable value of progress bar (time complete)
                this.el_.setAttribute("aria-valuetext", this.localize("progress bar timing: currentTime={1} duration={2}", [
                    $e88cd91ee18355c1$var$formatTime(currentTime, duration),
                    $e88cd91ee18355c1$var$formatTime(duration, duration)
                ], "{1} of {2}"));
                this.currentTime_ = currentTime;
                this.duration_ = duration;
            }
            // update the progress bar time tooltip with the current time
            if (this.bar) this.bar.update($e88cd91ee18355c1$var$getBoundingClientRect(this.el()), this.getProgress());
        });
        return percent;
    }
    /**
   * Prevent liveThreshold from causing seeks to seem like they
   * are not happening from a user perspective.
   *
   * @param {number} ct
   *        current time to seek to
   */ userSeek_(ct) {
        if (this.player_.liveTracker && this.player_.liveTracker.isLive()) this.player_.liveTracker.nextSeekedFromUser();
        this.player_.currentTime(ct);
    }
    /**
   * Get the value of current time but allows for smooth scrubbing,
   * when player can't keep up.
   *
   * @return {number}
   *         The current time value to display
   *
   * @private
   */ getCurrentTime_() {
        return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
    }
    /**
   * Get the percentage of media played so far.
   *
   * @return {number}
   *         The percentage of media played so far (0 to 1).
   */ getPercent() {
        const currentTime = this.getCurrentTime_();
        let percent;
        const liveTracker = this.player_.liveTracker;
        if (liveTracker && liveTracker.isLive()) {
            percent = (currentTime - liveTracker.seekableStart()) / liveTracker.liveWindow();
            // prevent the percent from changing at the live edge
            if (liveTracker.atLiveEdge()) percent = 1;
        } else percent = currentTime / this.player_.duration();
        return percent;
    }
    /**
   * Handle mouse down on seek bar
   *
   * @param {MouseEvent} event
   *        The `mousedown` event that caused this to run.
   *
   * @listens mousedown
   */ handleMouseDown(event) {
        if (!$e88cd91ee18355c1$var$isSingleLeftClick(event)) return;
        // Stop event propagation to prevent double fire in progress-control.js
        event.stopPropagation();
        this.videoWasPlaying = !this.player_.paused();
        this.player_.pause();
        super.handleMouseDown(event);
    }
    /**
   * Handle mouse move on seek bar
   *
   * @param {MouseEvent} event
   *        The `mousemove` event that caused this to run.
   * @param {boolean} mouseDown this is a flag that should be set to true if `handleMouseMove` is called directly. It allows us to skip things that should not happen if coming from mouse down but should happen on regular mouse move handler. Defaults to false
   *
   * @listens mousemove
   */ handleMouseMove(event, mouseDown = false) {
        if (!$e88cd91ee18355c1$var$isSingleLeftClick(event) || isNaN(this.player_.duration())) return;
        if (!mouseDown && !this.player_.scrubbing()) this.player_.scrubbing(true);
        let newTime;
        const distance = this.calculateDistance(event);
        const liveTracker = this.player_.liveTracker;
        if (!liveTracker || !liveTracker.isLive()) {
            newTime = distance * this.player_.duration();
            // Don't let video end while scrubbing.
            if (newTime === this.player_.duration()) newTime = newTime - 0.1;
        } else {
            if (distance >= 0.99) {
                liveTracker.seekToLiveEdge();
                return;
            }
            const seekableStart = liveTracker.seekableStart();
            const seekableEnd = liveTracker.liveCurrentTime();
            newTime = seekableStart + distance * liveTracker.liveWindow();
            // Don't let video end while scrubbing.
            if (newTime >= seekableEnd) newTime = seekableEnd;
            // Compensate for precision differences so that currentTime is not less
            // than seekable start
            if (newTime <= seekableStart) newTime = seekableStart + 0.1;
            // On android seekableEnd can be Infinity sometimes,
            // this will cause newTime to be Infinity, which is
            // not a valid currentTime.
            if (newTime === Infinity) return;
        }
        // Set new time (tell player to seek to new time)
        this.userSeek_(newTime);
        if (this.player_.options_.enableSmoothSeeking) this.update();
    }
    enable() {
        super.enable();
        const mouseTimeDisplay = this.getChild("mouseTimeDisplay");
        if (!mouseTimeDisplay) return;
        mouseTimeDisplay.show();
    }
    disable() {
        super.disable();
        const mouseTimeDisplay = this.getChild("mouseTimeDisplay");
        if (!mouseTimeDisplay) return;
        mouseTimeDisplay.hide();
    }
    /**
   * Handle mouse up on seek bar
   *
   * @param {MouseEvent} event
   *        The `mouseup` event that caused this to run.
   *
   * @listens mouseup
   */ handleMouseUp(event) {
        super.handleMouseUp(event);
        // Stop event propagation to prevent double fire in progress-control.js
        if (event) event.stopPropagation();
        this.player_.scrubbing(false);
        /**
     * Trigger timeupdate because we're done seeking and the time has changed.
     * This is particularly useful for if the player is paused to time the time displays.
     *
     * @event Tech#timeupdate
     * @type {Event}
     */ this.player_.trigger({
            type: "timeupdate",
            target: this,
            manuallyTriggered: true
        });
        if (this.videoWasPlaying) $e88cd91ee18355c1$var$silencePromise(this.player_.play());
        else // We're done seeking and the time has changed.
        // If the player is paused, make sure we display the correct time on the seek bar.
        this.update_();
    }
    /**
   * Move more quickly fast forward for keyboard-only users
   */ stepForward() {
        this.userSeek_(this.player_.currentTime() + $e88cd91ee18355c1$var$STEP_SECONDS);
    }
    /**
   * Move more quickly rewind for keyboard-only users
   */ stepBack() {
        this.userSeek_(this.player_.currentTime() - $e88cd91ee18355c1$var$STEP_SECONDS);
    }
    /**
   * Toggles the playback state of the player
   * This gets called when enter or space is used on the seekbar
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called
   *
   */ handleAction(event) {
        if (this.player_.paused()) this.player_.play();
        else this.player_.pause();
    }
    /**
   * Called when this SeekBar has focus and a key gets pressed down.
   * Supports the following keys:
   *
   *   Space or Enter key fire a click event
   *   Home key moves to start of the timeline
   *   End key moves to end of the timeline
   *   Digit "0" through "9" keys move to 0%, 10% ... 80%, 90% of the timeline
   *   PageDown key moves back a larger step than ArrowDown
   *   PageUp key moves forward a large step
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */ handleKeyDown(event) {
        const liveTracker = this.player_.liveTracker;
        if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Space") || (0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Enter")) {
            event.preventDefault();
            event.stopPropagation();
            this.handleAction(event);
        } else if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Home")) {
            event.preventDefault();
            event.stopPropagation();
            this.userSeek_(0);
        } else if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "End")) {
            event.preventDefault();
            event.stopPropagation();
            if (liveTracker && liveTracker.isLive()) this.userSeek_(liveTracker.liveCurrentTime());
            else this.userSeek_(this.player_.duration());
        } else if (/^[0-9]$/.test((0, (/*@__PURE__*/$parcel$interopDefault($kplZx)))(event))) {
            event.preventDefault();
            event.stopPropagation();
            const gotoFraction = ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).codes[(0, (/*@__PURE__*/$parcel$interopDefault($kplZx)))(event)] - (0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).codes["0"]) * 10.0 / 100.0;
            if (liveTracker && liveTracker.isLive()) this.userSeek_(liveTracker.seekableStart() + liveTracker.liveWindow() * gotoFraction);
            else this.userSeek_(this.player_.duration() * gotoFraction);
        } else if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "PgDn")) {
            event.preventDefault();
            event.stopPropagation();
            this.userSeek_(this.player_.currentTime() - $e88cd91ee18355c1$var$STEP_SECONDS * $e88cd91ee18355c1$var$PAGE_KEY_MULTIPLIER);
        } else if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "PgUp")) {
            event.preventDefault();
            event.stopPropagation();
            this.userSeek_(this.player_.currentTime() + $e88cd91ee18355c1$var$STEP_SECONDS * $e88cd91ee18355c1$var$PAGE_KEY_MULTIPLIER);
        } else // Pass keydown handling up for unsupported keys
        super.handleKeyDown(event);
    }
    dispose() {
        this.disableInterval_();
        this.off(this.player_, [
            "ended",
            "durationchange",
            "timeupdate"
        ], this.update);
        if (this.player_.liveTracker) this.off(this.player_.liveTracker, "liveedgechange", this.update);
        this.off(this.player_, [
            "playing"
        ], this.enableIntervalHandler_);
        this.off(this.player_, [
            "ended",
            "pause",
            "waiting"
        ], this.disableIntervalHandler_);
        // we don't need to update the play progress if the document is hidden,
        // also, this causes the CPU to spike and eventually crash the page on IE11.
        if ("hidden" in (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))) && "visibilityState" in (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X)))) this.off((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))), "visibilitychange", this.toggleVisibility_);
        super.dispose();
    }
}
/**
 * Default options for the `SeekBar`
 *
 * @type {Object}
 * @private
 */ $e88cd91ee18355c1$var$SeekBar.prototype.options_ = {
    children: [
        "loadProgressBar",
        "playProgressBar"
    ],
    barName: "playProgressBar"
};
// MouseTimeDisplay tooltips should not be added to a player on mobile devices
if (!$e88cd91ee18355c1$var$IS_IOS && !$e88cd91ee18355c1$var$IS_ANDROID) $e88cd91ee18355c1$var$SeekBar.prototype.options_.children.splice(1, 0, "mouseTimeDisplay");
$e88cd91ee18355c1$var$Component$1.registerComponent("SeekBar", $e88cd91ee18355c1$var$SeekBar);
/**
 * @file progress-control.js
 */ /**
 * The Progress Control component contains the seek bar, load progress,
 * and play progress.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$ProgressControl extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.handleMouseMove = $e88cd91ee18355c1$var$throttle($e88cd91ee18355c1$var$bind_(this, this.handleMouseMove), $e88cd91ee18355c1$var$UPDATE_REFRESH_INTERVAL);
        this.throttledHandleMouseSeek = $e88cd91ee18355c1$var$throttle($e88cd91ee18355c1$var$bind_(this, this.handleMouseSeek), $e88cd91ee18355c1$var$UPDATE_REFRESH_INTERVAL);
        this.handleMouseUpHandler_ = (e)=>this.handleMouseUp(e);
        this.handleMouseDownHandler_ = (e)=>this.handleMouseDown(e);
        this.enable();
    }
    /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        return super.createEl("div", {
            className: "vjs-progress-control vjs-control"
        });
    }
    /**
   * When the mouse moves over the `ProgressControl`, the pointer position
   * gets passed down to the `MouseTimeDisplay` component.
   *
   * @param {Event} event
   *        The `mousemove` event that caused this function to run.
   *
   * @listen mousemove
   */ handleMouseMove(event) {
        const seekBar = this.getChild("seekBar");
        if (!seekBar) return;
        const playProgressBar = seekBar.getChild("playProgressBar");
        const mouseTimeDisplay = seekBar.getChild("mouseTimeDisplay");
        if (!playProgressBar && !mouseTimeDisplay) return;
        const seekBarEl = seekBar.el();
        const seekBarRect = $e88cd91ee18355c1$var$findPosition(seekBarEl);
        let seekBarPoint = $e88cd91ee18355c1$var$getPointerPosition(seekBarEl, event).x;
        // The default skin has a gap on either side of the `SeekBar`. This means
        // that it's possible to trigger this behavior outside the boundaries of
        // the `SeekBar`. This ensures we stay within it at all times.
        seekBarPoint = $e88cd91ee18355c1$var$clamp(seekBarPoint, 0, 1);
        if (mouseTimeDisplay) mouseTimeDisplay.update(seekBarRect, seekBarPoint);
        if (playProgressBar) playProgressBar.update(seekBarRect, seekBar.getProgress());
    }
    /**
   * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.
   *
   * @method ProgressControl#throttledHandleMouseSeek
   * @param {Event} event
   *        The `mousemove` event that caused this function to run.
   *
   * @listen mousemove
   * @listen touchmove
   */ /**
   * Handle `mousemove` or `touchmove` events on the `ProgressControl`.
   *
   * @param {Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousemove
   * @listens touchmove
   */ handleMouseSeek(event) {
        const seekBar = this.getChild("seekBar");
        if (seekBar) seekBar.handleMouseMove(event);
    }
    /**
   * Are controls are currently enabled for this progress control.
   *
   * @return {boolean}
   *         true if controls are enabled, false otherwise
   */ enabled() {
        return this.enabled_;
    }
    /**
   * Disable all controls on the progress control and its children
   */ disable() {
        this.children().forEach((child)=>child.disable && child.disable());
        if (!this.enabled()) return;
        this.off([
            "mousedown",
            "touchstart"
        ], this.handleMouseDownHandler_);
        this.off(this.el_, "mousemove", this.handleMouseMove);
        this.removeListenersAddedOnMousedownAndTouchstart();
        this.addClass("disabled");
        this.enabled_ = false;
        // Restore normal playback state if controls are disabled while scrubbing
        if (this.player_.scrubbing()) {
            const seekBar = this.getChild("seekBar");
            this.player_.scrubbing(false);
            if (seekBar.videoWasPlaying) $e88cd91ee18355c1$var$silencePromise(this.player_.play());
        }
    }
    /**
   * Enable all controls on the progress control and its children
   */ enable() {
        this.children().forEach((child)=>child.enable && child.enable());
        if (this.enabled()) return;
        this.on([
            "mousedown",
            "touchstart"
        ], this.handleMouseDownHandler_);
        this.on(this.el_, "mousemove", this.handleMouseMove);
        this.removeClass("disabled");
        this.enabled_ = true;
    }
    /**
   * Cleanup listeners after the user finishes interacting with the progress controls
   */ removeListenersAddedOnMousedownAndTouchstart() {
        const doc = this.el_.ownerDocument;
        this.off(doc, "mousemove", this.throttledHandleMouseSeek);
        this.off(doc, "touchmove", this.throttledHandleMouseSeek);
        this.off(doc, "mouseup", this.handleMouseUpHandler_);
        this.off(doc, "touchend", this.handleMouseUpHandler_);
    }
    /**
   * Handle `mousedown` or `touchstart` events on the `ProgressControl`.
   *
   * @param {Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   */ handleMouseDown(event) {
        const doc = this.el_.ownerDocument;
        const seekBar = this.getChild("seekBar");
        if (seekBar) seekBar.handleMouseDown(event);
        this.on(doc, "mousemove", this.throttledHandleMouseSeek);
        this.on(doc, "touchmove", this.throttledHandleMouseSeek);
        this.on(doc, "mouseup", this.handleMouseUpHandler_);
        this.on(doc, "touchend", this.handleMouseUpHandler_);
    }
    /**
   * Handle `mouseup` or `touchend` events on the `ProgressControl`.
   *
   * @param {Event} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   */ handleMouseUp(event) {
        const seekBar = this.getChild("seekBar");
        if (seekBar) seekBar.handleMouseUp(event);
        this.removeListenersAddedOnMousedownAndTouchstart();
    }
}
/**
 * Default options for `ProgressControl`
 *
 * @type {Object}
 * @private
 */ $e88cd91ee18355c1$var$ProgressControl.prototype.options_ = {
    children: [
        "seekBar"
    ]
};
$e88cd91ee18355c1$var$Component$1.registerComponent("ProgressControl", $e88cd91ee18355c1$var$ProgressControl);
/**
 * @file picture-in-picture-toggle.js
 */ /**
 * Toggle Picture-in-Picture mode
 *
 * @extends Button
 */ class $e88cd91ee18355c1$var$PictureInPictureToggle extends $e88cd91ee18355c1$var$Button {
    /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @listens Player#enterpictureinpicture
   * @listens Player#leavepictureinpicture
   */ constructor(player, options){
        super(player, options);
        this.setIcon("picture-in-picture-enter");
        this.on(player, [
            "enterpictureinpicture",
            "leavepictureinpicture"
        ], (e)=>this.handlePictureInPictureChange(e));
        this.on(player, [
            "disablepictureinpicturechanged",
            "loadedmetadata"
        ], (e)=>this.handlePictureInPictureEnabledChange(e));
        this.on(player, [
            "loadedmetadata",
            "audioonlymodechange",
            "audiopostermodechange"
        ], ()=>this.handlePictureInPictureAudioModeChange());
        // TODO: Deactivate button on player emptied event.
        this.disable();
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return `vjs-picture-in-picture-control vjs-hidden ${super.buildCSSClass()}`;
    }
    /**
   * Displays or hides the button depending on the audio mode detection.
   * Exits picture-in-picture if it is enabled when switching to audio mode.
   */ handlePictureInPictureAudioModeChange() {
        // This audio detection will not detect HLS or DASH audio-only streams because there was no reliable way to detect them at the time
        const isSourceAudio = this.player_.currentType().substring(0, 5) === "audio";
        const isAudioMode = isSourceAudio || this.player_.audioPosterMode() || this.player_.audioOnlyMode();
        if (!isAudioMode) {
            this.show();
            return;
        }
        if (this.player_.isInPictureInPicture()) this.player_.exitPictureInPicture();
        this.hide();
    }
    /**
   * Enables or disables button based on availability of a Picture-In-Picture mode.
   *
   * Enabled if
   * - `player.options().enableDocumentPictureInPicture` is true and
   *   window.documentPictureInPicture is available; or
   * - `player.disablePictureInPicture()` is false and
   *   element.requestPictureInPicture is available
   */ handlePictureInPictureEnabledChange() {
        if ((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).pictureInPictureEnabled && this.player_.disablePictureInPicture() === false || this.player_.options_.enableDocumentPictureInPicture && "documentPictureInPicture" in (0, (/*@__PURE__*/$parcel$interopDefault($cktB7)))) this.enable();
        else this.disable();
    }
    /**
   * Handles enterpictureinpicture and leavepictureinpicture on the player and change control text accordingly.
   *
   * @param {Event} [event]
   *        The {@link Player#enterpictureinpicture} or {@link Player#leavepictureinpicture} event that caused this function to be
   *        called.
   *
   * @listens Player#enterpictureinpicture
   * @listens Player#leavepictureinpicture
   */ handlePictureInPictureChange(event) {
        if (this.player_.isInPictureInPicture()) {
            this.setIcon("picture-in-picture-exit");
            this.controlText("Exit Picture-in-Picture");
        } else {
            this.setIcon("picture-in-picture-enter");
            this.controlText("Picture-in-Picture");
        }
        this.handlePictureInPictureEnabledChange();
    }
    /**
   * This gets called when an `PictureInPictureToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */ handleClick(event) {
        if (!this.player_.isInPictureInPicture()) this.player_.requestPictureInPicture();
        else this.player_.exitPictureInPicture();
    }
    /**
   * Show the `Component`s element if it is hidden by removing the
   * 'vjs-hidden' class name from it only in browsers that support the Picture-in-Picture API.
   */ show() {
        // Does not allow to display the pictureInPictureToggle in browsers that do not support the Picture-in-Picture API, e.g. Firefox.
        if (typeof (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).exitPictureInPicture !== "function") return;
        super.show();
    }
}
/**
 * The text that should display over the `PictureInPictureToggle`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */ $e88cd91ee18355c1$var$PictureInPictureToggle.prototype.controlText_ = "Picture-in-Picture";
$e88cd91ee18355c1$var$Component$1.registerComponent("PictureInPictureToggle", $e88cd91ee18355c1$var$PictureInPictureToggle);
/**
 * @file fullscreen-toggle.js
 */ /**
 * Toggle fullscreen video
 *
 * @extends Button
 */ class $e88cd91ee18355c1$var$FullscreenToggle extends $e88cd91ee18355c1$var$Button {
    /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.setIcon("fullscreen-enter");
        this.on(player, "fullscreenchange", (e)=>this.handleFullscreenChange(e));
        if ((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X)))[player.fsApi_.fullscreenEnabled] === false) this.disable();
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return `vjs-fullscreen-control ${super.buildCSSClass()}`;
    }
    /**
   * Handles fullscreenchange on the player and change control text accordingly.
   *
   * @param {Event} [event]
   *        The {@link Player#fullscreenchange} event that caused this function to be
   *        called.
   *
   * @listens Player#fullscreenchange
   */ handleFullscreenChange(event) {
        if (this.player_.isFullscreen()) {
            this.controlText("Exit Fullscreen");
            this.setIcon("fullscreen-exit");
        } else {
            this.controlText("Fullscreen");
            this.setIcon("fullscreen-enter");
        }
    }
    /**
   * This gets called when an `FullscreenToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */ handleClick(event) {
        if (!this.player_.isFullscreen()) this.player_.requestFullscreen();
        else this.player_.exitFullscreen();
    }
}
/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */ $e88cd91ee18355c1$var$FullscreenToggle.prototype.controlText_ = "Fullscreen";
$e88cd91ee18355c1$var$Component$1.registerComponent("FullscreenToggle", $e88cd91ee18355c1$var$FullscreenToggle);
/**
 * Check if volume control is supported and if it isn't hide the
 * `Component` that was passed  using the `vjs-hidden` class.
 *
 * @param { import('../../component').default } self
 *        The component that should be hidden if volume is unsupported
 *
 * @param { import('../../player').default } player
 *        A reference to the player
 *
 * @private
 */ const $e88cd91ee18355c1$var$checkVolumeSupport = function(self1, player) {
    // hide volume controls when they're not supported by the current tech
    if (player.tech_ && !player.tech_.featuresVolumeControl) self1.addClass("vjs-hidden");
    self1.on(player, "loadstart", function() {
        if (!player.tech_.featuresVolumeControl) self1.addClass("vjs-hidden");
        else self1.removeClass("vjs-hidden");
    });
};
/**
 * @file volume-level.js
 */ /**
 * Shows volume level
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$VolumeLevel extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        const el = super.createEl("div", {
            className: "vjs-volume-level"
        });
        this.setIcon("circle", el);
        el.appendChild(super.createEl("span", {
            className: "vjs-control-text"
        }));
        return el;
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("VolumeLevel", $e88cd91ee18355c1$var$VolumeLevel);
/**
 * @file volume-level-tooltip.js
 */ /**
 * Volume level tooltips display a volume above or side by side the volume bar.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$VolumeLevelTooltip extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.update = $e88cd91ee18355c1$var$throttle($e88cd91ee18355c1$var$bind_(this, this.update), $e88cd91ee18355c1$var$UPDATE_REFRESH_INTERVAL);
    }
    /**
   * Create the volume tooltip DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        return super.createEl("div", {
            className: "vjs-volume-tooltip"
        }, {
            "aria-hidden": "true"
        });
    }
    /**
   * Updates the position of the tooltip relative to the `VolumeBar` and
   * its content text.
   *
   * @param {Object} rangeBarRect
   *        The `ClientRect` for the {@link VolumeBar} element.
   *
   * @param {number} rangeBarPoint
   *        A number from 0 to 1, representing a horizontal/vertical reference point
   *        from the left edge of the {@link VolumeBar}
   *
   * @param {boolean} vertical
   *        Referees to the Volume control position
   *        in the control bar{@link VolumeControl}
   *
   */ update(rangeBarRect, rangeBarPoint, vertical, content) {
        if (!vertical) {
            const tooltipRect = $e88cd91ee18355c1$var$getBoundingClientRect(this.el_);
            const playerRect = $e88cd91ee18355c1$var$getBoundingClientRect(this.player_.el());
            const volumeBarPointPx = rangeBarRect.width * rangeBarPoint;
            if (!playerRect || !tooltipRect) return;
            const spaceLeftOfPoint = rangeBarRect.left - playerRect.left + volumeBarPointPx;
            const spaceRightOfPoint = rangeBarRect.width - volumeBarPointPx + (playerRect.right - rangeBarRect.right);
            let pullTooltipBy = tooltipRect.width / 2;
            if (spaceLeftOfPoint < pullTooltipBy) pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;
            else if (spaceRightOfPoint < pullTooltipBy) pullTooltipBy = spaceRightOfPoint;
            if (pullTooltipBy < 0) pullTooltipBy = 0;
            else if (pullTooltipBy > tooltipRect.width) pullTooltipBy = tooltipRect.width;
            this.el_.style.right = `-${pullTooltipBy}px`;
        }
        this.write(`${content}%`);
    }
    /**
   * Write the volume to the tooltip DOM element.
   *
   * @param {string} content
   *        The formatted volume for the tooltip.
   */ write(content) {
        $e88cd91ee18355c1$var$textContent(this.el_, content);
    }
    /**
   * Updates the position of the volume tooltip relative to the `VolumeBar`.
   *
   * @param {Object} rangeBarRect
   *        The `ClientRect` for the {@link VolumeBar} element.
   *
   * @param {number} rangeBarPoint
   *        A number from 0 to 1, representing a horizontal/vertical reference point
   *        from the left edge of the {@link VolumeBar}
   *
   * @param {boolean} vertical
   *        Referees to the Volume control position
   *        in the control bar{@link VolumeControl}
   *
   * @param {number} volume
   *        The volume level to update the tooltip to
   *
   * @param {Function} cb
   *        A function that will be called during the request animation frame
   *        for tooltips that need to do additional animations from the default
   */ updateVolume(rangeBarRect, rangeBarPoint, vertical, volume, cb) {
        this.requestNamedAnimationFrame("VolumeLevelTooltip#updateVolume", ()=>{
            this.update(rangeBarRect, rangeBarPoint, vertical, volume.toFixed(0));
            if (cb) cb();
        });
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("VolumeLevelTooltip", $e88cd91ee18355c1$var$VolumeLevelTooltip);
/**
 * @file mouse-volume-level-display.js
 */ /**
 * The {@link MouseVolumeLevelDisplay} component tracks mouse movement over the
 * {@link VolumeControl}. It displays an indicator and a {@link VolumeLevelTooltip}
 * indicating the volume level which is represented by a given point in the
 * {@link VolumeBar}.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$MouseVolumeLevelDisplay extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.update = $e88cd91ee18355c1$var$throttle($e88cd91ee18355c1$var$bind_(this, this.update), $e88cd91ee18355c1$var$UPDATE_REFRESH_INTERVAL);
    }
    /**
   * Create the DOM element for this class.
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        return super.createEl("div", {
            className: "vjs-mouse-display"
        });
    }
    /**
   * Enquires updates to its own DOM as well as the DOM of its
   * {@link VolumeLevelTooltip} child.
   *
   * @param {Object} rangeBarRect
   *        The `ClientRect` for the {@link VolumeBar} element.
   *
   * @param {number} rangeBarPoint
   *        A number from 0 to 1, representing a horizontal/vertical reference point
   *        from the left edge of the {@link VolumeBar}
   *
   * @param {boolean} vertical
   *        Referees to the Volume control position
   *        in the control bar{@link VolumeControl}
   *
   */ update(rangeBarRect, rangeBarPoint, vertical) {
        const volume = 100 * rangeBarPoint;
        this.getChild("volumeLevelTooltip").updateVolume(rangeBarRect, rangeBarPoint, vertical, volume, ()=>{
            if (vertical) this.el_.style.bottom = `${rangeBarRect.height * rangeBarPoint}px`;
            else this.el_.style.left = `${rangeBarRect.width * rangeBarPoint}px`;
        });
    }
}
/**
 * Default options for `MouseVolumeLevelDisplay`
 *
 * @type {Object}
 * @private
 */ $e88cd91ee18355c1$var$MouseVolumeLevelDisplay.prototype.options_ = {
    children: [
        "volumeLevelTooltip"
    ]
};
$e88cd91ee18355c1$var$Component$1.registerComponent("MouseVolumeLevelDisplay", $e88cd91ee18355c1$var$MouseVolumeLevelDisplay);
/**
 * @file volume-bar.js
 */ /**
 * The bar that contains the volume level and can be clicked on to adjust the level
 *
 * @extends Slider
 */ class $e88cd91ee18355c1$var$VolumeBar extends $e88cd91ee18355c1$var$Slider {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.on("slideractive", (e)=>this.updateLastVolume_(e));
        this.on(player, "volumechange", (e)=>this.updateARIAAttributes(e));
        player.ready(()=>this.updateARIAAttributes());
    }
    /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        return super.createEl("div", {
            className: "vjs-volume-bar vjs-slider-bar"
        }, {
            "aria-label": this.localize("Volume Level"),
            "aria-live": "polite"
        });
    }
    /**
   * Handle mouse down on volume bar
   *
   * @param {Event} event
   *        The `mousedown` event that caused this to run.
   *
   * @listens mousedown
   */ handleMouseDown(event) {
        if (!$e88cd91ee18355c1$var$isSingleLeftClick(event)) return;
        super.handleMouseDown(event);
    }
    /**
   * Handle movement events on the {@link VolumeMenuButton}.
   *
   * @param {Event} event
   *        The event that caused this function to run.
   *
   * @listens mousemove
   */ handleMouseMove(event) {
        const mouseVolumeLevelDisplay = this.getChild("mouseVolumeLevelDisplay");
        if (mouseVolumeLevelDisplay) {
            const volumeBarEl = this.el();
            const volumeBarRect = $e88cd91ee18355c1$var$getBoundingClientRect(volumeBarEl);
            const vertical = this.vertical();
            let volumeBarPoint = $e88cd91ee18355c1$var$getPointerPosition(volumeBarEl, event);
            volumeBarPoint = vertical ? volumeBarPoint.y : volumeBarPoint.x;
            // The default skin has a gap on either side of the `VolumeBar`. This means
            // that it's possible to trigger this behavior outside the boundaries of
            // the `VolumeBar`. This ensures we stay within it at all times.
            volumeBarPoint = $e88cd91ee18355c1$var$clamp(volumeBarPoint, 0, 1);
            mouseVolumeLevelDisplay.update(volumeBarRect, volumeBarPoint, vertical);
        }
        if (!$e88cd91ee18355c1$var$isSingleLeftClick(event)) return;
        this.checkMuted();
        this.player_.volume(this.calculateDistance(event));
    }
    /**
   * If the player is muted unmute it.
   */ checkMuted() {
        if (this.player_.muted()) this.player_.muted(false);
    }
    /**
   * Get percent of volume level
   *
   * @return {number}
   *         Volume level percent as a decimal number.
   */ getPercent() {
        if (this.player_.muted()) return 0;
        return this.player_.volume();
    }
    /**
   * Increase volume level for keyboard users
   */ stepForward() {
        this.checkMuted();
        this.player_.volume(this.player_.volume() + 0.1);
    }
    /**
   * Decrease volume level for keyboard users
   */ stepBack() {
        this.checkMuted();
        this.player_.volume(this.player_.volume() - 0.1);
    }
    /**
   * Update ARIA accessibility attributes
   *
   * @param {Event} [event]
   *        The `volumechange` event that caused this function to run.
   *
   * @listens Player#volumechange
   */ updateARIAAttributes(event) {
        const ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();
        this.el_.setAttribute("aria-valuenow", ariaValue);
        this.el_.setAttribute("aria-valuetext", ariaValue + "%");
    }
    /**
   * Returns the current value of the player volume as a percentage
   *
   * @private
   */ volumeAsPercentage_() {
        return Math.round(this.player_.volume() * 100);
    }
    /**
   * When user starts dragging the VolumeBar, store the volume and listen for
   * the end of the drag. When the drag ends, if the volume was set to zero,
   * set lastVolume to the stored volume.
   *
   * @listens slideractive
   * @private
   */ updateLastVolume_() {
        const volumeBeforeDrag = this.player_.volume();
        this.one("sliderinactive", ()=>{
            if (this.player_.volume() === 0) this.player_.lastVolume_(volumeBeforeDrag);
        });
    }
}
/**
 * Default options for the `VolumeBar`
 *
 * @type {Object}
 * @private
 */ $e88cd91ee18355c1$var$VolumeBar.prototype.options_ = {
    children: [
        "volumeLevel"
    ],
    barName: "volumeLevel"
};
// MouseVolumeLevelDisplay tooltip should not be added to a player on mobile devices
if (!$e88cd91ee18355c1$var$IS_IOS && !$e88cd91ee18355c1$var$IS_ANDROID) $e88cd91ee18355c1$var$VolumeBar.prototype.options_.children.splice(0, 0, "mouseVolumeLevelDisplay");
/**
 * Call the update event for this Slider when this event happens on the player.
 *
 * @type {string}
 */ $e88cd91ee18355c1$var$VolumeBar.prototype.playerEvent = "volumechange";
$e88cd91ee18355c1$var$Component$1.registerComponent("VolumeBar", $e88cd91ee18355c1$var$VolumeBar);
/**
 * @file volume-control.js
 */ /**
 * The component for controlling the volume level
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$VolumeControl extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */ constructor(player, options = {}){
        options.vertical = options.vertical || false;
        // Pass the vertical option down to the VolumeBar if
        // the VolumeBar is turned on.
        if (typeof options.volumeBar === "undefined" || $e88cd91ee18355c1$var$isPlain(options.volumeBar)) {
            options.volumeBar = options.volumeBar || {};
            options.volumeBar.vertical = options.vertical;
        }
        super(player, options);
        // hide this control if volume support is missing
        $e88cd91ee18355c1$var$checkVolumeSupport(this, player);
        this.throttledHandleMouseMove = $e88cd91ee18355c1$var$throttle($e88cd91ee18355c1$var$bind_(this, this.handleMouseMove), $e88cd91ee18355c1$var$UPDATE_REFRESH_INTERVAL);
        this.handleMouseUpHandler_ = (e)=>this.handleMouseUp(e);
        this.on("mousedown", (e)=>this.handleMouseDown(e));
        this.on("touchstart", (e)=>this.handleMouseDown(e));
        this.on("mousemove", (e)=>this.handleMouseMove(e));
        // while the slider is active (the mouse has been pressed down and
        // is dragging) or in focus we do not want to hide the VolumeBar
        this.on(this.volumeBar, [
            "focus",
            "slideractive"
        ], ()=>{
            this.volumeBar.addClass("vjs-slider-active");
            this.addClass("vjs-slider-active");
            this.trigger("slideractive");
        });
        this.on(this.volumeBar, [
            "blur",
            "sliderinactive"
        ], ()=>{
            this.volumeBar.removeClass("vjs-slider-active");
            this.removeClass("vjs-slider-active");
            this.trigger("sliderinactive");
        });
    }
    /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        let orientationClass = "vjs-volume-horizontal";
        if (this.options_.vertical) orientationClass = "vjs-volume-vertical";
        return super.createEl("div", {
            className: `vjs-volume-control vjs-control ${orientationClass}`
        });
    }
    /**
   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
   *
   * @param {Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   */ handleMouseDown(event) {
        const doc = this.el_.ownerDocument;
        this.on(doc, "mousemove", this.throttledHandleMouseMove);
        this.on(doc, "touchmove", this.throttledHandleMouseMove);
        this.on(doc, "mouseup", this.handleMouseUpHandler_);
        this.on(doc, "touchend", this.handleMouseUpHandler_);
    }
    /**
   * Handle `mouseup` or `touchend` events on the `VolumeControl`.
   *
   * @param {Event} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   */ handleMouseUp(event) {
        const doc = this.el_.ownerDocument;
        this.off(doc, "mousemove", this.throttledHandleMouseMove);
        this.off(doc, "touchmove", this.throttledHandleMouseMove);
        this.off(doc, "mouseup", this.handleMouseUpHandler_);
        this.off(doc, "touchend", this.handleMouseUpHandler_);
    }
    /**
   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
   *
   * @param {Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   */ handleMouseMove(event) {
        this.volumeBar.handleMouseMove(event);
    }
}
/**
 * Default options for the `VolumeControl`
 *
 * @type {Object}
 * @private
 */ $e88cd91ee18355c1$var$VolumeControl.prototype.options_ = {
    children: [
        "volumeBar"
    ]
};
$e88cd91ee18355c1$var$Component$1.registerComponent("VolumeControl", $e88cd91ee18355c1$var$VolumeControl);
/**
 * Check if muting volume is supported and if it isn't hide the mute toggle
 * button.
 *
 * @param { import('../../component').default } self
 *        A reference to the mute toggle button
 *
 * @param { import('../../player').default } player
 *        A reference to the player
 *
 * @private
 */ const $e88cd91ee18355c1$var$checkMuteSupport = function(self1, player) {
    // hide mute toggle button if it's not supported by the current tech
    if (player.tech_ && !player.tech_.featuresMuteControl) self1.addClass("vjs-hidden");
    self1.on(player, "loadstart", function() {
        if (!player.tech_.featuresMuteControl) self1.addClass("vjs-hidden");
        else self1.removeClass("vjs-hidden");
    });
};
/**
 * @file mute-toggle.js
 */ /**
 * A button component for muting the audio.
 *
 * @extends Button
 */ class $e88cd91ee18355c1$var$MuteToggle extends $e88cd91ee18355c1$var$Button {
    /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        // hide this control if volume support is missing
        $e88cd91ee18355c1$var$checkMuteSupport(this, player);
        this.on(player, [
            "loadstart",
            "volumechange"
        ], (e)=>this.update(e));
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return `vjs-mute-control ${super.buildCSSClass()}`;
    }
    /**
   * This gets called when an `MuteToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */ handleClick(event) {
        const vol = this.player_.volume();
        const lastVolume = this.player_.lastVolume_();
        if (vol === 0) {
            const volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;
            this.player_.volume(volumeToSet);
            this.player_.muted(false);
        } else this.player_.muted(this.player_.muted() ? false : true);
    }
    /**
   * Update the `MuteToggle` button based on the state of `volume` and `muted`
   * on the player.
   *
   * @param {Event} [event]
   *        The {@link Player#loadstart} event if this function was called
   *        through an event.
   *
   * @listens Player#loadstart
   * @listens Player#volumechange
   */ update(event) {
        this.updateIcon_();
        this.updateControlText_();
    }
    /**
   * Update the appearance of the `MuteToggle` icon.
   *
   * Possible states (given `level` variable below):
   * - 0: crossed out
   * - 1: zero bars of volume
   * - 2: one bar of volume
   * - 3: two bars of volume
   *
   * @private
   */ updateIcon_() {
        const vol = this.player_.volume();
        let level = 3;
        this.setIcon("volume-high");
        // in iOS when a player is loaded with muted attribute
        // and volume is changed with a native mute button
        // we want to make sure muted state is updated
        if ($e88cd91ee18355c1$var$IS_IOS && this.player_.tech_ && this.player_.tech_.el_) this.player_.muted(this.player_.tech_.el_.muted);
        if (vol === 0 || this.player_.muted()) {
            this.setIcon("volume-mute");
            level = 0;
        } else if (vol < 0.33) {
            this.setIcon("volume-low");
            level = 1;
        } else if (vol < 0.67) {
            this.setIcon("volume-medium");
            level = 2;
        }
        $e88cd91ee18355c1$var$removeClass(this.el_, [
            0,
            1,
            2,
            3
        ].reduce((str, i)=>str + `${i ? " " : ""}vjs-vol-${i}`, ""));
        $e88cd91ee18355c1$var$addClass(this.el_, `vjs-vol-${level}`);
    }
    /**
   * If `muted` has changed on the player, update the control text
   * (`title` attribute on `vjs-mute-control` element and content of
   * `vjs-control-text` element).
   *
   * @private
   */ updateControlText_() {
        const soundOff = this.player_.muted() || this.player_.volume() === 0;
        const text = soundOff ? "Unmute" : "Mute";
        if (this.controlText() !== text) this.controlText(text);
    }
}
/**
 * The text that should display over the `MuteToggle`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */ $e88cd91ee18355c1$var$MuteToggle.prototype.controlText_ = "Mute";
$e88cd91ee18355c1$var$Component$1.registerComponent("MuteToggle", $e88cd91ee18355c1$var$MuteToggle);
/**
 * @file volume-control.js
 */ /**
 * A Component to contain the MuteToggle and VolumeControl so that
 * they can work together.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$VolumePanel extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */ constructor(player, options = {}){
        if (typeof options.inline !== "undefined") options.inline = options.inline;
        else options.inline = true;
        // pass the inline option down to the VolumeControl as vertical if
        // the VolumeControl is on.
        if (typeof options.volumeControl === "undefined" || $e88cd91ee18355c1$var$isPlain(options.volumeControl)) {
            options.volumeControl = options.volumeControl || {};
            options.volumeControl.vertical = !options.inline;
        }
        super(player, options);
        // this handler is used by mouse handler methods below
        this.handleKeyPressHandler_ = (e)=>this.handleKeyPress(e);
        this.on(player, [
            "loadstart"
        ], (e)=>this.volumePanelState_(e));
        this.on(this.muteToggle, "keyup", (e)=>this.handleKeyPress(e));
        this.on(this.volumeControl, "keyup", (e)=>this.handleVolumeControlKeyUp(e));
        this.on("keydown", (e)=>this.handleKeyPress(e));
        this.on("mouseover", (e)=>this.handleMouseOver(e));
        this.on("mouseout", (e)=>this.handleMouseOut(e));
        // while the slider is active (the mouse has been pressed down and
        // is dragging) we do not want to hide the VolumeBar
        this.on(this.volumeControl, [
            "slideractive"
        ], this.sliderActive_);
        this.on(this.volumeControl, [
            "sliderinactive"
        ], this.sliderInactive_);
    }
    /**
   * Add vjs-slider-active class to the VolumePanel
   *
   * @listens VolumeControl#slideractive
   * @private
   */ sliderActive_() {
        this.addClass("vjs-slider-active");
    }
    /**
   * Removes vjs-slider-active class to the VolumePanel
   *
   * @listens VolumeControl#sliderinactive
   * @private
   */ sliderInactive_() {
        this.removeClass("vjs-slider-active");
    }
    /**
   * Adds vjs-hidden or vjs-mute-toggle-only to the VolumePanel
   * depending on MuteToggle and VolumeControl state
   *
   * @listens Player#loadstart
   * @private
   */ volumePanelState_() {
        // hide volume panel if neither volume control or mute toggle
        // are displayed
        if (this.volumeControl.hasClass("vjs-hidden") && this.muteToggle.hasClass("vjs-hidden")) this.addClass("vjs-hidden");
        // if only mute toggle is visible we don't want
        // volume panel expanding when hovered or active
        if (this.volumeControl.hasClass("vjs-hidden") && !this.muteToggle.hasClass("vjs-hidden")) this.addClass("vjs-mute-toggle-only");
    }
    /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        let orientationClass = "vjs-volume-panel-horizontal";
        if (!this.options_.inline) orientationClass = "vjs-volume-panel-vertical";
        return super.createEl("div", {
            className: `vjs-volume-panel vjs-control ${orientationClass}`
        });
    }
    /**
   * Dispose of the `volume-panel` and all child components.
   */ dispose() {
        this.handleMouseOut();
        super.dispose();
    }
    /**
   * Handles `keyup` events on the `VolumeControl`, looking for ESC, which closes
   * the volume panel and sets focus on `MuteToggle`.
   *
   * @param {Event} event
   *        The `keyup` event that caused this function to be called.
   *
   * @listens keyup
   */ handleVolumeControlKeyUp(event) {
        if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Esc")) this.muteToggle.focus();
    }
    /**
   * This gets called when a `VolumePanel` gains hover via a `mouseover` event.
   * Turns on listening for `mouseover` event. When they happen it
   * calls `this.handleMouseOver`.
   *
   * @param {Event} event
   *        The `mouseover` event that caused this function to be called.
   *
   * @listens mouseover
   */ handleMouseOver(event) {
        this.addClass("vjs-hover");
        $e88cd91ee18355c1$var$on((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))), "keyup", this.handleKeyPressHandler_);
    }
    /**
   * This gets called when a `VolumePanel` gains hover via a `mouseout` event.
   * Turns on listening for `mouseout` event. When they happen it
   * calls `this.handleMouseOut`.
   *
   * @param {Event} event
   *        The `mouseout` event that caused this function to be called.
   *
   * @listens mouseout
   */ handleMouseOut(event) {
        this.removeClass("vjs-hover");
        $e88cd91ee18355c1$var$off((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))), "keyup", this.handleKeyPressHandler_);
    }
    /**
   * Handles `keyup` event on the document or `keydown` event on the `VolumePanel`,
   * looking for ESC, which hides the `VolumeControl`.
   *
   * @param {Event} event
   *        The keypress that triggered this event.
   *
   * @listens keydown | keyup
   */ handleKeyPress(event) {
        if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Esc")) this.handleMouseOut();
    }
}
/**
 * Default options for the `VolumeControl`
 *
 * @type {Object}
 * @private
 */ $e88cd91ee18355c1$var$VolumePanel.prototype.options_ = {
    children: [
        "muteToggle",
        "volumeControl"
    ]
};
$e88cd91ee18355c1$var$Component$1.registerComponent("VolumePanel", $e88cd91ee18355c1$var$VolumePanel);
/**
 * Button to skip forward a configurable amount of time
 * through a video. Renders in the control bar.
 *
 * e.g. options: {controlBar: {skipButtons: forward: 5}}
 *
 * @extends Button
 */ class $e88cd91ee18355c1$var$SkipForward extends $e88cd91ee18355c1$var$Button {
    constructor(player, options){
        super(player, options);
        this.validOptions = [
            5,
            10,
            30
        ];
        this.skipTime = this.getSkipForwardTime();
        if (this.skipTime && this.validOptions.includes(this.skipTime)) {
            this.setIcon(`forward-${this.skipTime}`);
            this.controlText(this.localize("Skip forward {1} seconds", [
                this.skipTime
            ]));
            this.show();
        } else this.hide();
    }
    getSkipForwardTime() {
        const playerOptions = this.options_.playerOptions;
        return playerOptions.controlBar && playerOptions.controlBar.skipButtons && playerOptions.controlBar.skipButtons.forward;
    }
    buildCSSClass() {
        return `vjs-skip-forward-${this.getSkipForwardTime()} ${super.buildCSSClass()}`;
    }
    /**
   * On click, skips forward in the duration/seekable range by a configurable amount of seconds.
   * If the time left in the duration/seekable range is less than the configured 'skip forward' time,
   * skips to end of duration/seekable range.
   *
   * Handle a click on a `SkipForward` button
   *
   * @param {EventTarget~Event} event
   *        The `click` event that caused this function
   *        to be called
   */ handleClick(event) {
        if (isNaN(this.player_.duration())) return;
        const currentVideoTime = this.player_.currentTime();
        const liveTracker = this.player_.liveTracker;
        const duration = liveTracker && liveTracker.isLive() ? liveTracker.seekableEnd() : this.player_.duration();
        let newTime;
        if (currentVideoTime + this.skipTime <= duration) newTime = currentVideoTime + this.skipTime;
        else newTime = duration;
        this.player_.currentTime(newTime);
    }
    /**
   * Update control text on languagechange
   */ handleLanguagechange() {
        this.controlText(this.localize("Skip forward {1} seconds", [
            this.skipTime
        ]));
    }
}
$e88cd91ee18355c1$var$SkipForward.prototype.controlText_ = "Skip Forward";
$e88cd91ee18355c1$var$Component$1.registerComponent("SkipForward", $e88cd91ee18355c1$var$SkipForward);
/**
 * Button to skip backward a configurable amount of time
 * through a video. Renders in the control bar.
 *
 *  * e.g. options: {controlBar: {skipButtons: backward: 5}}
 *
 * @extends Button
 */ class $e88cd91ee18355c1$var$SkipBackward extends $e88cd91ee18355c1$var$Button {
    constructor(player, options){
        super(player, options);
        this.validOptions = [
            5,
            10,
            30
        ];
        this.skipTime = this.getSkipBackwardTime();
        if (this.skipTime && this.validOptions.includes(this.skipTime)) {
            this.setIcon(`replay-${this.skipTime}`);
            this.controlText(this.localize("Skip backward {1} seconds", [
                this.skipTime
            ]));
            this.show();
        } else this.hide();
    }
    getSkipBackwardTime() {
        const playerOptions = this.options_.playerOptions;
        return playerOptions.controlBar && playerOptions.controlBar.skipButtons && playerOptions.controlBar.skipButtons.backward;
    }
    buildCSSClass() {
        return `vjs-skip-backward-${this.getSkipBackwardTime()} ${super.buildCSSClass()}`;
    }
    /**
   * On click, skips backward in the video by a configurable amount of seconds.
   * If the current time in the video is less than the configured 'skip backward' time,
   * skips to beginning of video or seekable range.
   *
   * Handle a click on a `SkipBackward` button
   *
   * @param {EventTarget~Event} event
   *        The `click` event that caused this function
   *        to be called
   */ handleClick(event) {
        const currentVideoTime = this.player_.currentTime();
        const liveTracker = this.player_.liveTracker;
        const seekableStart = liveTracker && liveTracker.isLive() && liveTracker.seekableStart();
        let newTime;
        if (seekableStart && currentVideoTime - this.skipTime <= seekableStart) newTime = seekableStart;
        else if (currentVideoTime >= this.skipTime) newTime = currentVideoTime - this.skipTime;
        else newTime = 0;
        this.player_.currentTime(newTime);
    }
    /**
   * Update control text on languagechange
   */ handleLanguagechange() {
        this.controlText(this.localize("Skip backward {1} seconds", [
            this.skipTime
        ]));
    }
}
$e88cd91ee18355c1$var$SkipBackward.prototype.controlText_ = "Skip Backward";
$e88cd91ee18355c1$var$Component$1.registerComponent("SkipBackward", $e88cd91ee18355c1$var$SkipBackward);
/**
 * @file menu.js
 */ /**
 * The Menu component is used to build popup menus, including subtitle and
 * captions selection menus.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$Menu extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Create an instance of this class.
   *
   * @param { import('../player').default } player
   *        the player that this component should attach to
   *
   * @param {Object} [options]
   *        Object of option names and values
   *
   */ constructor(player, options){
        super(player, options);
        if (options) this.menuButton_ = options.menuButton;
        this.focusedChild_ = -1;
        this.on("keydown", (e)=>this.handleKeyDown(e));
        // All the menu item instances share the same blur handler provided by the menu container.
        this.boundHandleBlur_ = (e)=>this.handleBlur(e);
        this.boundHandleTapClick_ = (e)=>this.handleTapClick(e);
    }
    /**
   * Add event listeners to the {@link MenuItem}.
   *
   * @param {Object} component
   *        The instance of the `MenuItem` to add listeners to.
   *
   */ addEventListenerForItem(component) {
        if (!(component instanceof $e88cd91ee18355c1$var$Component$1)) return;
        this.on(component, "blur", this.boundHandleBlur_);
        this.on(component, [
            "tap",
            "click"
        ], this.boundHandleTapClick_);
    }
    /**
   * Remove event listeners from the {@link MenuItem}.
   *
   * @param {Object} component
   *        The instance of the `MenuItem` to remove listeners.
   *
   */ removeEventListenerForItem(component) {
        if (!(component instanceof $e88cd91ee18355c1$var$Component$1)) return;
        this.off(component, "blur", this.boundHandleBlur_);
        this.off(component, [
            "tap",
            "click"
        ], this.boundHandleTapClick_);
    }
    /**
   * This method will be called indirectly when the component has been added
   * before the component adds to the new menu instance by `addItem`.
   * In this case, the original menu instance will remove the component
   * by calling `removeChild`.
   *
   * @param {Object} component
   *        The instance of the `MenuItem`
   */ removeChild(component) {
        if (typeof component === "string") component = this.getChild(component);
        this.removeEventListenerForItem(component);
        super.removeChild(component);
    }
    /**
   * Add a {@link MenuItem} to the menu.
   *
   * @param {Object|string} component
   *        The name or instance of the `MenuItem` to add.
   *
   */ addItem(component) {
        const childComponent = this.addChild(component);
        if (childComponent) this.addEventListenerForItem(childComponent);
    }
    /**
   * Create the `Menu`s DOM element.
   *
   * @return {Element}
   *         the element that was created
   */ createEl() {
        const contentElType = this.options_.contentElType || "ul";
        this.contentEl_ = $e88cd91ee18355c1$var$createEl(contentElType, {
            className: "vjs-menu-content"
        });
        this.contentEl_.setAttribute("role", "menu");
        const el = super.createEl("div", {
            append: this.contentEl_,
            className: "vjs-menu"
        });
        el.appendChild(this.contentEl_);
        // Prevent clicks from bubbling up. Needed for Menu Buttons,
        // where a click on the parent is significant
        $e88cd91ee18355c1$var$on(el, "click", function(event) {
            event.preventDefault();
            event.stopImmediatePropagation();
        });
        return el;
    }
    dispose() {
        this.contentEl_ = null;
        this.boundHandleBlur_ = null;
        this.boundHandleTapClick_ = null;
        super.dispose();
    }
    /**
   * Called when a `MenuItem` loses focus.
   *
   * @param {Event} event
   *        The `blur` event that caused this function to be called.
   *
   * @listens blur
   */ handleBlur(event) {
        const relatedTarget = event.relatedTarget || (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).activeElement;
        // Close menu popup when a user clicks outside the menu
        if (!this.children().some((element)=>{
            return element.el() === relatedTarget;
        })) {
            const btn = this.menuButton_;
            if (btn && btn.buttonPressed_ && relatedTarget !== btn.el().firstChild) btn.unpressButton();
        }
    }
    /**
   * Called when a `MenuItem` gets clicked or tapped.
   *
   * @param {Event} event
   *        The `click` or `tap` event that caused this function to be called.
   *
   * @listens click,tap
   */ handleTapClick(event) {
        // Unpress the associated MenuButton, and move focus back to it
        if (this.menuButton_) {
            this.menuButton_.unpressButton();
            const childComponents = this.children();
            if (!Array.isArray(childComponents)) return;
            const foundComponent = childComponents.filter((component)=>component.el() === event.target)[0];
            if (!foundComponent) return;
            // don't focus menu button if item is a caption settings item
            // because focus will move elsewhere
            if (foundComponent.name() !== "CaptionSettingsMenuItem") this.menuButton_.focus();
        }
    }
    /**
   * Handle a `keydown` event on this menu. This listener is added in the constructor.
   *
   * @param {KeyboardEvent} event
   *        A `keydown` event that happened on the menu.
   *
   * @listens keydown
   */ handleKeyDown(event) {
        // Left and Down Arrows
        if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Left") || (0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Down")) {
            event.preventDefault();
            event.stopPropagation();
            this.stepForward();
        // Up and Right Arrows
        } else if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Right") || (0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Up")) {
            event.preventDefault();
            event.stopPropagation();
            this.stepBack();
        }
    }
    /**
   * Move to next (lower) menu item for keyboard users.
   */ stepForward() {
        let stepChild = 0;
        if (this.focusedChild_ !== undefined) stepChild = this.focusedChild_ + 1;
        this.focus(stepChild);
    }
    /**
   * Move to previous (higher) menu item for keyboard users.
   */ stepBack() {
        let stepChild = 0;
        if (this.focusedChild_ !== undefined) stepChild = this.focusedChild_ - 1;
        this.focus(stepChild);
    }
    /**
   * Set focus on a {@link MenuItem} in the `Menu`.
   *
   * @param {Object|string} [item=0]
   *        Index of child item set focus on.
   */ focus(item = 0) {
        const children = this.children().slice();
        const haveTitle = children.length && children[0].hasClass("vjs-menu-title");
        if (haveTitle) children.shift();
        if (children.length > 0) {
            if (item < 0) item = 0;
            else if (item >= children.length) item = children.length - 1;
            this.focusedChild_ = item;
            children[item].el_.focus();
        }
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("Menu", $e88cd91ee18355c1$var$Menu);
/**
 * @file menu-button.js
 */ /**
 * A `MenuButton` class for any popup {@link Menu}.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$MenuButton extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */ constructor(player, options = {}){
        super(player, options);
        this.menuButton_ = new $e88cd91ee18355c1$var$Button(player, options);
        this.menuButton_.controlText(this.controlText_);
        this.menuButton_.el_.setAttribute("aria-haspopup", "true");
        // Add buildCSSClass values to the button, not the wrapper
        const buttonClass = $e88cd91ee18355c1$var$Button.prototype.buildCSSClass();
        this.menuButton_.el_.className = this.buildCSSClass() + " " + buttonClass;
        this.menuButton_.removeClass("vjs-control");
        this.addChild(this.menuButton_);
        this.update();
        this.enabled_ = true;
        const handleClick = (e)=>this.handleClick(e);
        this.handleMenuKeyUp_ = (e)=>this.handleMenuKeyUp(e);
        this.on(this.menuButton_, "tap", handleClick);
        this.on(this.menuButton_, "click", handleClick);
        this.on(this.menuButton_, "keydown", (e)=>this.handleKeyDown(e));
        this.on(this.menuButton_, "mouseenter", ()=>{
            this.addClass("vjs-hover");
            this.menu.show();
            $e88cd91ee18355c1$var$on((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))), "keyup", this.handleMenuKeyUp_);
        });
        this.on("mouseleave", (e)=>this.handleMouseLeave(e));
        this.on("keydown", (e)=>this.handleSubmenuKeyDown(e));
    }
    /**
   * Update the menu based on the current state of its items.
   */ update() {
        const menu = this.createMenu();
        if (this.menu) {
            this.menu.dispose();
            this.removeChild(this.menu);
        }
        this.menu = menu;
        this.addChild(menu);
        /**
     * Track the state of the menu button
     *
     * @type {Boolean}
     * @private
     */ this.buttonPressed_ = false;
        this.menuButton_.el_.setAttribute("aria-expanded", "false");
        if (this.items && this.items.length <= this.hideThreshold_) {
            this.hide();
            this.menu.contentEl_.removeAttribute("role");
        } else {
            this.show();
            this.menu.contentEl_.setAttribute("role", "menu");
        }
    }
    /**
   * Create the menu and add all items to it.
   *
   * @return {Menu}
   *         The constructed menu
   */ createMenu() {
        const menu = new $e88cd91ee18355c1$var$Menu(this.player_, {
            menuButton: this
        });
        /**
     * Hide the menu if the number of items is less than or equal to this threshold. This defaults
     * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list
     * it here because every time we run `createMenu` we need to reset the value.
     *
     * @protected
     * @type {Number}
     */ this.hideThreshold_ = 0;
        // Add a title list item to the top
        if (this.options_.title) {
            const titleEl = $e88cd91ee18355c1$var$createEl("li", {
                className: "vjs-menu-title",
                textContent: $e88cd91ee18355c1$var$toTitleCase$1(this.options_.title),
                tabIndex: -1
            });
            const titleComponent = new $e88cd91ee18355c1$var$Component$1(this.player_, {
                el: titleEl
            });
            menu.addItem(titleComponent);
        }
        this.items = this.createItems();
        if (this.items) // Add menu items to the menu
        for(let i = 0; i < this.items.length; i++)menu.addItem(this.items[i]);
        return menu;
    }
    /**
   * Create the list of menu items. Specific to each subclass.
   *
   * @abstract
   */ createItems() {}
    /**
   * Create the `MenuButtons`s DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */ createEl() {
        return super.createEl("div", {
            className: this.buildWrapperCSSClass()
        }, {});
    }
    /**
   * Overwrites the `setIcon` method from `Component`.
   * In this case, we want the icon to be appended to the menuButton.
   *
   * @param {string} name
   *         The icon name to be added.
   */ setIcon(name) {
        super.setIcon(name, this.menuButton_.el_);
    }
    /**
   * Allow sub components to stack CSS class names for the wrapper element
   *
   * @return {string}
   *         The constructed wrapper DOM `className`
   */ buildWrapperCSSClass() {
        let menuButtonClass = "vjs-menu-button";
        // If the inline option is passed, we want to use different styles altogether.
        if (this.options_.inline === true) menuButtonClass += "-inline";
        else menuButtonClass += "-popup";
        // TODO: Fix the CSS so that this isn't necessary
        const buttonClass = $e88cd91ee18355c1$var$Button.prototype.buildCSSClass();
        return `vjs-menu-button ${menuButtonClass} ${buttonClass} ${super.buildCSSClass()}`;
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        let menuButtonClass = "vjs-menu-button";
        // If the inline option is passed, we want to use different styles altogether.
        if (this.options_.inline === true) menuButtonClass += "-inline";
        else menuButtonClass += "-popup";
        return `vjs-menu-button ${menuButtonClass} ${super.buildCSSClass()}`;
    }
    /**
   * Get or set the localized control text that will be used for accessibility.
   *
   * > NOTE: This will come from the internal `menuButton_` element.
   *
   * @param {string} [text]
   *        Control text for element.
   *
   * @param {Element} [el=this.menuButton_.el()]
   *        Element to set the title on.
   *
   * @return {string}
   *         - The control text when getting
   */ controlText(text, el = this.menuButton_.el()) {
        return this.menuButton_.controlText(text, el);
    }
    /**
   * Dispose of the `menu-button` and all child components.
   */ dispose() {
        this.handleMouseLeave();
        super.dispose();
    }
    /**
   * Handle a click on a `MenuButton`.
   * See {@link ClickableComponent#handleClick} for instances where this is called.
   *
   * @param {Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */ handleClick(event) {
        if (this.buttonPressed_) this.unpressButton();
        else this.pressButton();
    }
    /**
   * Handle `mouseleave` for `MenuButton`.
   *
   * @param {Event} event
   *        The `mouseleave` event that caused this function to be called.
   *
   * @listens mouseleave
   */ handleMouseLeave(event) {
        this.removeClass("vjs-hover");
        $e88cd91ee18355c1$var$off((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))), "keyup", this.handleMenuKeyUp_);
    }
    /**
   * Set the focus to the actual button, not to this element
   */ focus() {
        this.menuButton_.focus();
    }
    /**
   * Remove the focus from the actual button, not this element
   */ blur() {
        this.menuButton_.blur();
    }
    /**
   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See
   * {@link ClickableComponent#handleKeyDown} for instances where this is called.
   *
   * @param {Event} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */ handleKeyDown(event) {
        // Escape or Tab unpress the 'button'
        if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Esc") || (0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Tab")) {
            if (this.buttonPressed_) this.unpressButton();
            // Don't preventDefault for Tab key - we still want to lose focus
            if (!(0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Tab")) {
                event.preventDefault();
                // Set focus back to the menu button's button
                this.menuButton_.focus();
            }
        // Up Arrow or Down Arrow also 'press' the button to open the menu
        } else if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Up") || (0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Down")) {
            if (!this.buttonPressed_) {
                event.preventDefault();
                this.pressButton();
            }
        }
    }
    /**
   * Handle a `keyup` event on a `MenuButton`. The listener for this is added in
   * the constructor.
   *
   * @param {Event} event
   *        Key press event
   *
   * @listens keyup
   */ handleMenuKeyUp(event) {
        // Escape hides popup menu
        if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Esc") || (0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Tab")) this.removeClass("vjs-hover");
    }
    /**
   * This method name now delegates to `handleSubmenuKeyDown`. This means
   * anyone calling `handleSubmenuKeyPress` will not see their method calls
   * stop working.
   *
   * @param {Event} event
   *        The event that caused this function to be called.
   */ handleSubmenuKeyPress(event) {
        this.handleSubmenuKeyDown(event);
    }
    /**
   * Handle a `keydown` event on a sub-menu. The listener for this is added in
   * the constructor.
   *
   * @param {Event} event
   *        Key press event
   *
   * @listens keydown
   */ handleSubmenuKeyDown(event) {
        // Escape or Tab unpress the 'button'
        if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Esc") || (0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Tab")) {
            if (this.buttonPressed_) this.unpressButton();
            // Don't preventDefault for Tab key - we still want to lose focus
            if (!(0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Tab")) {
                event.preventDefault();
                // Set focus back to the menu button's button
                this.menuButton_.focus();
            }
        }
    }
    /**
   * Put the current `MenuButton` into a pressed state.
   */ pressButton() {
        if (this.enabled_) {
            this.buttonPressed_ = true;
            this.menu.show();
            this.menu.lockShowing();
            this.menuButton_.el_.setAttribute("aria-expanded", "true");
            // set the focus into the submenu, except on iOS where it is resulting in
            // undesired scrolling behavior when the player is in an iframe
            if ($e88cd91ee18355c1$var$IS_IOS && $e88cd91ee18355c1$var$isInFrame()) // Return early so that the menu isn't focused
            return;
            this.menu.focus();
        }
    }
    /**
   * Take the current `MenuButton` out of a pressed state.
   */ unpressButton() {
        if (this.enabled_) {
            this.buttonPressed_ = false;
            this.menu.unlockShowing();
            this.menu.hide();
            this.menuButton_.el_.setAttribute("aria-expanded", "false");
        }
    }
    /**
   * Disable the `MenuButton`. Don't allow it to be clicked.
   */ disable() {
        this.unpressButton();
        this.enabled_ = false;
        this.addClass("vjs-disabled");
        this.menuButton_.disable();
    }
    /**
   * Enable the `MenuButton`. Allow it to be clicked.
   */ enable() {
        this.enabled_ = true;
        this.removeClass("vjs-disabled");
        this.menuButton_.enable();
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("MenuButton", $e88cd91ee18355c1$var$MenuButton);
/**
 * @file track-button.js
 */ /**
 * The base class for buttons that toggle specific  track types (e.g. subtitles).
 *
 * @extends MenuButton
 */ class $e88cd91ee18355c1$var$TrackButton extends $e88cd91ee18355c1$var$MenuButton {
    /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        const tracks = options.tracks;
        super(player, options);
        if (this.items.length <= 1) this.hide();
        if (!tracks) return;
        const updateHandler = $e88cd91ee18355c1$var$bind_(this, this.update);
        tracks.addEventListener("removetrack", updateHandler);
        tracks.addEventListener("addtrack", updateHandler);
        tracks.addEventListener("labelchange", updateHandler);
        this.player_.on("ready", updateHandler);
        this.player_.on("dispose", function() {
            tracks.removeEventListener("removetrack", updateHandler);
            tracks.removeEventListener("addtrack", updateHandler);
            tracks.removeEventListener("labelchange", updateHandler);
        });
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("TrackButton", $e88cd91ee18355c1$var$TrackButton);
/**
 * @file menu-keys.js
 */ /**
  * All keys used for operation of a menu (`MenuButton`, `Menu`, and `MenuItem`)
  * Note that 'Enter' and 'Space' are not included here (otherwise they would
  * prevent the `MenuButton` and `MenuItem` from being keyboard-clickable)
 *
  * @typedef MenuKeys
  * @array
  */ const $e88cd91ee18355c1$var$MenuKeys = [
    "Tab",
    "Esc",
    "Up",
    "Down",
    "Right",
    "Left"
];
/**
 * @file menu-item.js
 */ /**
 * The component for a menu item. `<li>`
 *
 * @extends ClickableComponent
 */ class $e88cd91ee18355c1$var$MenuItem extends $e88cd91ee18355c1$var$ClickableComponent {
    /**
   * Creates an instance of the this class.
   *
   * @param { import('../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   *
   */ constructor(player, options){
        super(player, options);
        this.selectable = options.selectable;
        this.isSelected_ = options.selected || false;
        this.multiSelectable = options.multiSelectable;
        this.selected(this.isSelected_);
        if (this.selectable) {
            if (this.multiSelectable) this.el_.setAttribute("role", "menuitemcheckbox");
            else this.el_.setAttribute("role", "menuitemradio");
        } else this.el_.setAttribute("role", "menuitem");
    }
    /**
   * Create the `MenuItem's DOM element
   *
   * @param {string} [type=li]
   *        Element's node type, not actually used, always set to `li`.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element
   *
   * @param {Object} [attrs={}]
   *        An object of attributes that should be set on the element
   *
   * @return {Element}
   *         The element that gets created.
   */ createEl(type, props, attrs) {
        // The control is textual, not just an icon
        this.nonIconControl = true;
        const el = super.createEl("li", Object.assign({
            className: "vjs-menu-item",
            tabIndex: -1
        }, props), attrs);
        // swap icon with menu item text.
        const menuItemEl = $e88cd91ee18355c1$var$createEl("span", {
            className: "vjs-menu-item-text",
            textContent: this.localize(this.options_.label)
        });
        // If using SVG icons, the element with vjs-icon-placeholder will be added separately.
        if (this.player_.options_.experimentalSvgIcons) el.appendChild(menuItemEl);
        else el.replaceChild(menuItemEl, el.querySelector(".vjs-icon-placeholder"));
        return el;
    }
    /**
   * Ignore keys which are used by the menu, but pass any other ones up. See
   * {@link ClickableComponent#handleKeyDown} for instances where this is called.
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */ handleKeyDown(event) {
        if (!$e88cd91ee18355c1$var$MenuKeys.some((key)=>(0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, key))) // Pass keydown handling up for unused keys
        super.handleKeyDown(event);
    }
    /**
   * Any click on a `MenuItem` puts it into the selected state.
   * See {@link ClickableComponent#handleClick} for instances where this is called.
   *
   * @param {Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */ handleClick(event) {
        this.selected(true);
    }
    /**
   * Set the state for this menu item as selected or not.
   *
   * @param {boolean} selected
   *        if the menu item is selected or not
   */ selected(selected) {
        if (this.selectable) {
            if (selected) {
                this.addClass("vjs-selected");
                this.el_.setAttribute("aria-checked", "true");
                // aria-checked isn't fully supported by browsers/screen readers,
                // so indicate selected state to screen reader in the control text.
                this.controlText(", selected");
                this.isSelected_ = true;
            } else {
                this.removeClass("vjs-selected");
                this.el_.setAttribute("aria-checked", "false");
                // Indicate un-selected state to screen reader
                this.controlText("");
                this.isSelected_ = false;
            }
        }
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("MenuItem", $e88cd91ee18355c1$var$MenuItem);
/**
 * @file text-track-menu-item.js
 */ /**
 * The specific menu item type for selecting a language within a text track kind
 *
 * @extends MenuItem
 */ class $e88cd91ee18355c1$var$TextTrackMenuItem extends $e88cd91ee18355c1$var$MenuItem {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        const track = options.track;
        const tracks = player.textTracks();
        // Modify options for parent MenuItem class's init.
        options.label = track.label || track.language || "Unknown";
        options.selected = track.mode === "showing";
        super(player, options);
        this.track = track;
        // Determine the relevant kind(s) of tracks for this component and filter
        // out empty kinds.
        this.kinds = (options.kinds || [
            options.kind || this.track.kind
        ]).filter(Boolean);
        const changeHandler = (...args)=>{
            this.handleTracksChange.apply(this, args);
        };
        const selectedLanguageChangeHandler = (...args)=>{
            this.handleSelectedLanguageChange.apply(this, args);
        };
        player.on([
            "loadstart",
            "texttrackchange"
        ], changeHandler);
        tracks.addEventListener("change", changeHandler);
        tracks.addEventListener("selectedlanguagechange", selectedLanguageChangeHandler);
        this.on("dispose", function() {
            player.off([
                "loadstart",
                "texttrackchange"
            ], changeHandler);
            tracks.removeEventListener("change", changeHandler);
            tracks.removeEventListener("selectedlanguagechange", selectedLanguageChangeHandler);
        });
        // iOS7 doesn't dispatch change events to TextTrackLists when an
        // associated track's mode changes. Without something like
        // Object.observe() (also not present on iOS7), it's not
        // possible to detect changes to the mode attribute and polyfill
        // the change event. As a poor substitute, we manually dispatch
        // change events whenever the controls modify the mode.
        if (tracks.onchange === undefined) {
            let event;
            this.on([
                "tap",
                "click"
            ], function() {
                if (typeof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).Event !== "object") // Android 2.3 throws an Illegal Constructor error for window.Event
                try {
                    event = new (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).Event("change");
                } catch (err) {
                // continue regardless of error
                }
                if (!event) {
                    event = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createEvent("Event");
                    event.initEvent("change", true, true);
                }
                tracks.dispatchEvent(event);
            });
        }
        // set the default state based on current tracks
        this.handleTracksChange();
    }
    /**
   * This gets called when an `TextTrackMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */ handleClick(event) {
        const referenceTrack = this.track;
        const tracks = this.player_.textTracks();
        super.handleClick(event);
        if (!tracks) return;
        for(let i = 0; i < tracks.length; i++){
            const track = tracks[i];
            // If the track from the text tracks list is not of the right kind,
            // skip it. We do not want to affect tracks of incompatible kind(s).
            if (this.kinds.indexOf(track.kind) === -1) continue;
            // If this text track is the component's track and it is not showing,
            // set it to showing.
            if (track === referenceTrack) {
                if (track.mode !== "showing") track.mode = "showing";
            } else if (track.mode !== "disabled") track.mode = "disabled";
        }
    }
    /**
   * Handle text track list change
   *
   * @param {Event} event
   *        The `change` event that caused this function to be called.
   *
   * @listens TextTrackList#change
   */ handleTracksChange(event) {
        const shouldBeSelected = this.track.mode === "showing";
        // Prevent redundant selected() calls because they may cause
        // screen readers to read the appended control text unnecessarily
        if (shouldBeSelected !== this.isSelected_) this.selected(shouldBeSelected);
    }
    handleSelectedLanguageChange(event) {
        if (this.track.mode === "showing") {
            const selectedLanguage = this.player_.cache_.selectedLanguage;
            // Don't replace the kind of track across the same language
            if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) return;
            this.player_.cache_.selectedLanguage = {
                enabled: true,
                language: this.track.language,
                kind: this.track.kind
            };
        }
    }
    dispose() {
        // remove reference to track object on dispose
        this.track = null;
        super.dispose();
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("TextTrackMenuItem", $e88cd91ee18355c1$var$TextTrackMenuItem);
/**
 * @file off-text-track-menu-item.js
 */ /**
 * A special menu item for turning off a specific type of text track
 *
 * @extends TextTrackMenuItem
 */ class $e88cd91ee18355c1$var$OffTextTrackMenuItem extends $e88cd91ee18355c1$var$TextTrackMenuItem {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        // Create pseudo track info
        // Requires options['kind']
        options.track = {
            player: player,
            // it is no longer necessary to store `kind` or `kinds` on the track itself
            // since they are now stored in the `kinds` property of all instances of
            // TextTrackMenuItem, but this will remain for backwards compatibility
            kind: options.kind,
            kinds: options.kinds,
            default: false,
            mode: "disabled"
        };
        if (!options.kinds) options.kinds = [
            options.kind
        ];
        if (options.label) options.track.label = options.label;
        else options.track.label = options.kinds.join(" and ") + " off";
        // MenuItem is selectable
        options.selectable = true;
        // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
        options.multiSelectable = false;
        super(player, options);
    }
    /**
   * Handle text track change
   *
   * @param {Event} event
   *        The event that caused this function to run
   */ handleTracksChange(event) {
        const tracks = this.player().textTracks();
        let shouldBeSelected = true;
        for(let i = 0, l = tracks.length; i < l; i++){
            const track = tracks[i];
            if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === "showing") {
                shouldBeSelected = false;
                break;
            }
        }
        // Prevent redundant selected() calls because they may cause
        // screen readers to read the appended control text unnecessarily
        if (shouldBeSelected !== this.isSelected_) this.selected(shouldBeSelected);
    }
    handleSelectedLanguageChange(event) {
        const tracks = this.player().textTracks();
        let allHidden = true;
        for(let i = 0, l = tracks.length; i < l; i++){
            const track = tracks[i];
            if ([
                "captions",
                "descriptions",
                "subtitles"
            ].indexOf(track.kind) > -1 && track.mode === "showing") {
                allHidden = false;
                break;
            }
        }
        if (allHidden) this.player_.cache_.selectedLanguage = {
            enabled: false
        };
    }
    /**
   * Update control text and label on languagechange
   */ handleLanguagechange() {
        this.$(".vjs-menu-item-text").textContent = this.player_.localize(this.options_.label);
        super.handleLanguagechange();
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("OffTextTrackMenuItem", $e88cd91ee18355c1$var$OffTextTrackMenuItem);
/**
 * @file text-track-button.js
 */ /**
 * The base class for buttons that toggle specific text track types (e.g. subtitles)
 *
 * @extends MenuButton
 */ class $e88cd91ee18355c1$var$TextTrackButton extends $e88cd91ee18355c1$var$TrackButton {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */ constructor(player, options = {}){
        options.tracks = player.textTracks();
        super(player, options);
    }
    /**
   * Create a menu item for each text track
   *
   * @param {TextTrackMenuItem[]} [items=[]]
   *        Existing array of items to use during creation
   *
   * @return {TextTrackMenuItem[]}
   *         Array of menu items that were created
   */ createItems(items = [], TrackMenuItem = $e88cd91ee18355c1$var$TextTrackMenuItem) {
        // Label is an override for the [track] off label
        // USed to localise captions/subtitles
        let label;
        if (this.label_) label = `${this.label_} off`;
        // Add an OFF menu item to turn all tracks off
        items.push(new $e88cd91ee18355c1$var$OffTextTrackMenuItem(this.player_, {
            kinds: this.kinds_,
            kind: this.kind_,
            label: label
        }));
        this.hideThreshold_ += 1;
        const tracks = this.player_.textTracks();
        if (!Array.isArray(this.kinds_)) this.kinds_ = [
            this.kind_
        ];
        for(let i = 0; i < tracks.length; i++){
            const track = tracks[i];
            // only add tracks that are of an appropriate kind and have a label
            if (this.kinds_.indexOf(track.kind) > -1) {
                const item = new TrackMenuItem(this.player_, {
                    track: track,
                    kinds: this.kinds_,
                    kind: this.kind_,
                    // MenuItem is selectable
                    selectable: true,
                    // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
                    multiSelectable: false
                });
                item.addClass(`vjs-${track.kind}-menu-item`);
                items.push(item);
            }
        }
        return items;
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("TextTrackButton", $e88cd91ee18355c1$var$TextTrackButton);
/**
 * @file chapters-track-menu-item.js
 */ /**
 * The chapter track menu item
 *
 * @extends MenuItem
 */ class $e88cd91ee18355c1$var$ChaptersTrackMenuItem extends $e88cd91ee18355c1$var$MenuItem {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        const track = options.track;
        const cue = options.cue;
        const currentTime = player.currentTime();
        // Modify options for parent MenuItem class's init.
        options.selectable = true;
        options.multiSelectable = false;
        options.label = cue.text;
        options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;
        super(player, options);
        this.track = track;
        this.cue = cue;
    }
    /**
   * This gets called when an `ChaptersTrackMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */ handleClick(event) {
        super.handleClick();
        this.player_.currentTime(this.cue.startTime);
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("ChaptersTrackMenuItem", $e88cd91ee18355c1$var$ChaptersTrackMenuItem);
/**
 * @file chapters-button.js
 */ /**
 * The button component for toggling and selecting chapters
 * Chapters act much differently than other text tracks
 * Cues are navigation vs. other tracks of alternative languages
 *
 * @extends TextTrackButton
 */ class $e88cd91ee18355c1$var$ChaptersButton extends $e88cd91ee18355c1$var$TextTrackButton {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when this function is ready.
   */ constructor(player, options, ready){
        super(player, options, ready);
        this.setIcon("chapters");
        this.selectCurrentItem_ = ()=>{
            this.items.forEach((item)=>{
                item.selected(this.track_.activeCues[0] === item.cue);
            });
        };
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return `vjs-chapters-button ${super.buildCSSClass()}`;
    }
    buildWrapperCSSClass() {
        return `vjs-chapters-button ${super.buildWrapperCSSClass()}`;
    }
    /**
   * Update the menu based on the current state of its items.
   *
   * @param {Event} [event]
   *        An event that triggered this function to run.
   *
   * @listens TextTrackList#addtrack
   * @listens TextTrackList#removetrack
   * @listens TextTrackList#change
   */ update(event) {
        if (event && event.track && event.track.kind !== "chapters") return;
        const track = this.findChaptersTrack();
        if (track !== this.track_) {
            this.setTrack(track);
            super.update();
        } else if (!this.items || track && track.cues && track.cues.length !== this.items.length) // Update the menu initially or if the number of cues has changed since set
        super.update();
    }
    /**
   * Set the currently selected track for the chapters button.
   *
   * @param {TextTrack} track
   *        The new track to select. Nothing will change if this is the currently selected
   *        track.
   */ setTrack(track) {
        if (this.track_ === track) return;
        if (!this.updateHandler_) this.updateHandler_ = this.update.bind(this);
        // here this.track_ refers to the old track instance
        if (this.track_) {
            const remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
            if (remoteTextTrackEl) remoteTextTrackEl.removeEventListener("load", this.updateHandler_);
            this.track_.removeEventListener("cuechange", this.selectCurrentItem_);
            this.track_ = null;
        }
        this.track_ = track;
        // here this.track_ refers to the new track instance
        if (this.track_) {
            this.track_.mode = "hidden";
            const remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
            if (remoteTextTrackEl) remoteTextTrackEl.addEventListener("load", this.updateHandler_);
            this.track_.addEventListener("cuechange", this.selectCurrentItem_);
        }
    }
    /**
   * Find the track object that is currently in use by this ChaptersButton
   *
   * @return {TextTrack|undefined}
   *         The current track or undefined if none was found.
   */ findChaptersTrack() {
        const tracks = this.player_.textTracks() || [];
        for(let i = tracks.length - 1; i >= 0; i--){
            // We will always choose the last track as our chaptersTrack
            const track = tracks[i];
            if (track.kind === this.kind_) return track;
        }
    }
    /**
   * Get the caption for the ChaptersButton based on the track label. This will also
   * use the current tracks localized kind as a fallback if a label does not exist.
   *
   * @return {string}
   *         The tracks current label or the localized track kind.
   */ getMenuCaption() {
        if (this.track_ && this.track_.label) return this.track_.label;
        return this.localize($e88cd91ee18355c1$var$toTitleCase$1(this.kind_));
    }
    /**
   * Create menu from chapter track
   *
   * @return { import('../../menu/menu').default }
   *         New menu for the chapter buttons
   */ createMenu() {
        this.options_.title = this.getMenuCaption();
        return super.createMenu();
    }
    /**
   * Create a menu item for each text track
   *
   * @return  { import('./text-track-menu-item').default[] }
   *         Array of menu items
   */ createItems() {
        const items = [];
        if (!this.track_) return items;
        const cues = this.track_.cues;
        if (!cues) return items;
        for(let i = 0, l = cues.length; i < l; i++){
            const cue = cues[i];
            const mi = new $e88cd91ee18355c1$var$ChaptersTrackMenuItem(this.player_, {
                track: this.track_,
                cue: cue
            });
            items.push(mi);
        }
        return items;
    }
}
/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */ $e88cd91ee18355c1$var$ChaptersButton.prototype.kind_ = "chapters";
/**
 * The text that should display over the `ChaptersButton`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */ $e88cd91ee18355c1$var$ChaptersButton.prototype.controlText_ = "Chapters";
$e88cd91ee18355c1$var$Component$1.registerComponent("ChaptersButton", $e88cd91ee18355c1$var$ChaptersButton);
/**
 * @file descriptions-button.js
 */ /**
 * The button component for toggling and selecting descriptions
 *
 * @extends TextTrackButton
 */ class $e88cd91ee18355c1$var$DescriptionsButton extends $e88cd91ee18355c1$var$TextTrackButton {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when this component is ready.
   */ constructor(player, options, ready){
        super(player, options, ready);
        this.setIcon("audio-description");
        const tracks = player.textTracks();
        const changeHandler = $e88cd91ee18355c1$var$bind_(this, this.handleTracksChange);
        tracks.addEventListener("change", changeHandler);
        this.on("dispose", function() {
            tracks.removeEventListener("change", changeHandler);
        });
    }
    /**
   * Handle text track change
   *
   * @param {Event} event
   *        The event that caused this function to run
   *
   * @listens TextTrackList#change
   */ handleTracksChange(event) {
        const tracks = this.player().textTracks();
        let disabled = false;
        // Check whether a track of a different kind is showing
        for(let i = 0, l = tracks.length; i < l; i++){
            const track = tracks[i];
            if (track.kind !== this.kind_ && track.mode === "showing") {
                disabled = true;
                break;
            }
        }
        // If another track is showing, disable this menu button
        if (disabled) this.disable();
        else this.enable();
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return `vjs-descriptions-button ${super.buildCSSClass()}`;
    }
    buildWrapperCSSClass() {
        return `vjs-descriptions-button ${super.buildWrapperCSSClass()}`;
    }
}
/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */ $e88cd91ee18355c1$var$DescriptionsButton.prototype.kind_ = "descriptions";
/**
 * The text that should display over the `DescriptionsButton`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */ $e88cd91ee18355c1$var$DescriptionsButton.prototype.controlText_ = "Descriptions";
$e88cd91ee18355c1$var$Component$1.registerComponent("DescriptionsButton", $e88cd91ee18355c1$var$DescriptionsButton);
/**
 * @file subtitles-button.js
 */ /**
 * The button component for toggling and selecting subtitles
 *
 * @extends TextTrackButton
 */ class $e88cd91ee18355c1$var$SubtitlesButton extends $e88cd91ee18355c1$var$TextTrackButton {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when this component is ready.
   */ constructor(player, options, ready){
        super(player, options, ready);
        this.setIcon("subtitles");
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return `vjs-subtitles-button ${super.buildCSSClass()}`;
    }
    buildWrapperCSSClass() {
        return `vjs-subtitles-button ${super.buildWrapperCSSClass()}`;
    }
}
/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */ $e88cd91ee18355c1$var$SubtitlesButton.prototype.kind_ = "subtitles";
/**
 * The text that should display over the `SubtitlesButton`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */ $e88cd91ee18355c1$var$SubtitlesButton.prototype.controlText_ = "Subtitles";
$e88cd91ee18355c1$var$Component$1.registerComponent("SubtitlesButton", $e88cd91ee18355c1$var$SubtitlesButton);
/**
 * @file caption-settings-menu-item.js
 */ /**
 * The menu item for caption track settings menu
 *
 * @extends TextTrackMenuItem
 */ class $e88cd91ee18355c1$var$CaptionSettingsMenuItem extends $e88cd91ee18355c1$var$TextTrackMenuItem {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        options.track = {
            player: player,
            kind: options.kind,
            label: options.kind + " settings",
            selectable: false,
            default: false,
            mode: "disabled"
        };
        // CaptionSettingsMenuItem has no concept of 'selected'
        options.selectable = false;
        options.name = "CaptionSettingsMenuItem";
        super(player, options);
        this.addClass("vjs-texttrack-settings");
        this.controlText(", opens " + options.kind + " settings dialog");
    }
    /**
   * This gets called when an `CaptionSettingsMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */ handleClick(event) {
        this.player().getChild("textTrackSettings").open();
    }
    /**
   * Update control text and label on languagechange
   */ handleLanguagechange() {
        this.$(".vjs-menu-item-text").textContent = this.player_.localize(this.options_.kind + " settings");
        super.handleLanguagechange();
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("CaptionSettingsMenuItem", $e88cd91ee18355c1$var$CaptionSettingsMenuItem);
/**
 * @file captions-button.js
 */ /**
 * The button component for toggling and selecting captions
 *
 * @extends TextTrackButton
 */ class $e88cd91ee18355c1$var$CaptionsButton extends $e88cd91ee18355c1$var$TextTrackButton {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when this component is ready.
   */ constructor(player, options, ready){
        super(player, options, ready);
        this.setIcon("captions");
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return `vjs-captions-button ${super.buildCSSClass()}`;
    }
    buildWrapperCSSClass() {
        return `vjs-captions-button ${super.buildWrapperCSSClass()}`;
    }
    /**
   * Create caption menu items
   *
   * @return {CaptionSettingsMenuItem[]}
   *         The array of current menu items.
   */ createItems() {
        const items = [];
        if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings")) {
            items.push(new $e88cd91ee18355c1$var$CaptionSettingsMenuItem(this.player_, {
                kind: this.kind_
            }));
            this.hideThreshold_ += 1;
        }
        return super.createItems(items);
    }
}
/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */ $e88cd91ee18355c1$var$CaptionsButton.prototype.kind_ = "captions";
/**
 * The text that should display over the `CaptionsButton`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */ $e88cd91ee18355c1$var$CaptionsButton.prototype.controlText_ = "Captions";
$e88cd91ee18355c1$var$Component$1.registerComponent("CaptionsButton", $e88cd91ee18355c1$var$CaptionsButton);
/**
 * @file subs-caps-menu-item.js
 */ /**
 * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles
 * in the SubsCapsMenu.
 *
 * @extends TextTrackMenuItem
 */ class $e88cd91ee18355c1$var$SubsCapsMenuItem extends $e88cd91ee18355c1$var$TextTrackMenuItem {
    createEl(type, props, attrs) {
        const el = super.createEl(type, props, attrs);
        const parentSpan = el.querySelector(".vjs-menu-item-text");
        if (this.options_.track.kind === "captions") {
            if (this.player_.options_.experimentalSvgIcons) this.setIcon("captions", el);
            else parentSpan.appendChild($e88cd91ee18355c1$var$createEl("span", {
                className: "vjs-icon-placeholder"
            }, {
                "aria-hidden": true
            }));
            parentSpan.appendChild($e88cd91ee18355c1$var$createEl("span", {
                className: "vjs-control-text",
                // space added as the text will visually flow with the
                // label
                textContent: ` ${this.localize("Captions")}`
            }));
        }
        return el;
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("SubsCapsMenuItem", $e88cd91ee18355c1$var$SubsCapsMenuItem);
/**
 * @file sub-caps-button.js
 */ /**
 * The button component for toggling and selecting captions and/or subtitles
 *
 * @extends TextTrackButton
 */ class $e88cd91ee18355c1$var$SubsCapsButton extends $e88cd91ee18355c1$var$TextTrackButton {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when this component is ready.
   */ constructor(player, options = {}){
        super(player, options);
        // Although North America uses "captions" in most cases for
        // "captions and subtitles" other locales use "subtitles"
        this.label_ = "subtitles";
        this.setIcon("subtitles");
        if ([
            "en",
            "en-us",
            "en-ca",
            "fr-ca"
        ].indexOf(this.player_.language_) > -1) {
            this.label_ = "captions";
            this.setIcon("captions");
        }
        this.menuButton_.controlText($e88cd91ee18355c1$var$toTitleCase$1(this.label_));
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return `vjs-subs-caps-button ${super.buildCSSClass()}`;
    }
    buildWrapperCSSClass() {
        return `vjs-subs-caps-button ${super.buildWrapperCSSClass()}`;
    }
    /**
   * Create caption/subtitles menu items
   *
   * @return {CaptionSettingsMenuItem[]}
   *         The array of current menu items.
   */ createItems() {
        let items = [];
        if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings")) {
            items.push(new $e88cd91ee18355c1$var$CaptionSettingsMenuItem(this.player_, {
                kind: this.label_
            }));
            this.hideThreshold_ += 1;
        }
        items = super.createItems(items, $e88cd91ee18355c1$var$SubsCapsMenuItem);
        return items;
    }
}
/**
 * `kind`s of TextTrack to look for to associate it with this menu.
 *
 * @type {array}
 * @private
 */ $e88cd91ee18355c1$var$SubsCapsButton.prototype.kinds_ = [
    "captions",
    "subtitles"
];
/**
 * The text that should display over the `SubsCapsButton`s controls.
 *
 *
 * @type {string}
 * @protected
 */ $e88cd91ee18355c1$var$SubsCapsButton.prototype.controlText_ = "Subtitles";
$e88cd91ee18355c1$var$Component$1.registerComponent("SubsCapsButton", $e88cd91ee18355c1$var$SubsCapsButton);
/**
 * @file audio-track-menu-item.js
 */ /**
 * An {@link AudioTrack} {@link MenuItem}
 *
 * @extends MenuItem
 */ class $e88cd91ee18355c1$var$AudioTrackMenuItem extends $e88cd91ee18355c1$var$MenuItem {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        const track = options.track;
        const tracks = player.audioTracks();
        // Modify options for parent MenuItem class's init.
        options.label = track.label || track.language || "Unknown";
        options.selected = track.enabled;
        super(player, options);
        this.track = track;
        this.addClass(`vjs-${track.kind}-menu-item`);
        const changeHandler = (...args)=>{
            this.handleTracksChange.apply(this, args);
        };
        tracks.addEventListener("change", changeHandler);
        this.on("dispose", ()=>{
            tracks.removeEventListener("change", changeHandler);
        });
    }
    createEl(type, props, attrs) {
        const el = super.createEl(type, props, attrs);
        const parentSpan = el.querySelector(".vjs-menu-item-text");
        if ([
            "main-desc",
            "description"
        ].indexOf(this.options_.track.kind) >= 0) {
            parentSpan.appendChild($e88cd91ee18355c1$var$createEl("span", {
                className: "vjs-icon-placeholder"
            }, {
                "aria-hidden": true
            }));
            parentSpan.appendChild($e88cd91ee18355c1$var$createEl("span", {
                className: "vjs-control-text",
                textContent: " " + this.localize("Descriptions")
            }));
        }
        return el;
    }
    /**
   * This gets called when an `AudioTrackMenuItem is "clicked". See {@link ClickableComponent}
   * for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */ handleClick(event) {
        super.handleClick(event);
        // the audio track list will automatically toggle other tracks
        // off for us.
        this.track.enabled = true;
        // when native audio tracks are used, we want to make sure that other tracks are turned off
        if (this.player_.tech_.featuresNativeAudioTracks) {
            const tracks = this.player_.audioTracks();
            for(let i = 0; i < tracks.length; i++){
                const track = tracks[i];
                // skip the current track since we enabled it above
                if (track === this.track) continue;
                track.enabled = track === this.track;
            }
        }
    }
    /**
   * Handle any {@link AudioTrack} change.
   *
   * @param {Event} [event]
   *        The {@link AudioTrackList#change} event that caused this to run.
   *
   * @listens AudioTrackList#change
   */ handleTracksChange(event) {
        this.selected(this.track.enabled);
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("AudioTrackMenuItem", $e88cd91ee18355c1$var$AudioTrackMenuItem);
/**
 * @file audio-track-button.js
 */ /**
 * The base class for buttons that toggle specific {@link AudioTrack} types.
 *
 * @extends TrackButton
 */ class $e88cd91ee18355c1$var$AudioTrackButton extends $e88cd91ee18355c1$var$TrackButton {
    /**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */ constructor(player, options = {}){
        options.tracks = player.audioTracks();
        super(player, options);
        this.setIcon("audio");
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return `vjs-audio-button ${super.buildCSSClass()}`;
    }
    buildWrapperCSSClass() {
        return `vjs-audio-button ${super.buildWrapperCSSClass()}`;
    }
    /**
   * Create a menu item for each audio track
   *
   * @param {AudioTrackMenuItem[]} [items=[]]
   *        An array of existing menu items to use.
   *
   * @return {AudioTrackMenuItem[]}
   *         An array of menu items
   */ createItems(items = []) {
        // if there's only one audio track, there no point in showing it
        this.hideThreshold_ = 1;
        const tracks = this.player_.audioTracks();
        for(let i = 0; i < tracks.length; i++){
            const track = tracks[i];
            items.push(new $e88cd91ee18355c1$var$AudioTrackMenuItem(this.player_, {
                track: track,
                // MenuItem is selectable
                selectable: true,
                // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
                multiSelectable: false
            }));
        }
        return items;
    }
}
/**
 * The text that should display over the `AudioTrackButton`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */ $e88cd91ee18355c1$var$AudioTrackButton.prototype.controlText_ = "Audio Track";
$e88cd91ee18355c1$var$Component$1.registerComponent("AudioTrackButton", $e88cd91ee18355c1$var$AudioTrackButton);
/**
 * @file playback-rate-menu-item.js
 */ /**
 * The specific menu item type for selecting a playback rate.
 *
 * @extends MenuItem
 */ class $e88cd91ee18355c1$var$PlaybackRateMenuItem extends $e88cd91ee18355c1$var$MenuItem {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        const label = options.rate;
        const rate = parseFloat(label, 10);
        // Modify options for parent MenuItem class's init.
        options.label = label;
        options.selected = rate === player.playbackRate();
        options.selectable = true;
        options.multiSelectable = false;
        super(player, options);
        this.label = label;
        this.rate = rate;
        this.on(player, "ratechange", (e)=>this.update(e));
    }
    /**
   * This gets called when an `PlaybackRateMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */ handleClick(event) {
        super.handleClick();
        this.player().playbackRate(this.rate);
    }
    /**
   * Update the PlaybackRateMenuItem when the playbackrate changes.
   *
   * @param {Event} [event]
   *        The `ratechange` event that caused this function to run.
   *
   * @listens Player#ratechange
   */ update(event) {
        this.selected(this.player().playbackRate() === this.rate);
    }
}
/**
 * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */ $e88cd91ee18355c1$var$PlaybackRateMenuItem.prototype.contentElType = "button";
$e88cd91ee18355c1$var$Component$1.registerComponent("PlaybackRateMenuItem", $e88cd91ee18355c1$var$PlaybackRateMenuItem);
/**
 * @file playback-rate-menu-button.js
 */ /**
 * The component for controlling the playback rate.
 *
 * @extends MenuButton
 */ class $e88cd91ee18355c1$var$PlaybackRateMenuButton extends $e88cd91ee18355c1$var$MenuButton {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.menuButton_.el_.setAttribute("aria-describedby", this.labelElId_);
        this.updateVisibility();
        this.updateLabel();
        this.on(player, "loadstart", (e)=>this.updateVisibility(e));
        this.on(player, "ratechange", (e)=>this.updateLabel(e));
        this.on(player, "playbackrateschange", (e)=>this.handlePlaybackRateschange(e));
    }
    /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        const el = super.createEl();
        this.labelElId_ = "vjs-playback-rate-value-label-" + this.id_;
        this.labelEl_ = $e88cd91ee18355c1$var$createEl("div", {
            className: "vjs-playback-rate-value",
            id: this.labelElId_,
            textContent: "1x"
        });
        el.appendChild(this.labelEl_);
        return el;
    }
    dispose() {
        this.labelEl_ = null;
        super.dispose();
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return `vjs-playback-rate ${super.buildCSSClass()}`;
    }
    buildWrapperCSSClass() {
        return `vjs-playback-rate ${super.buildWrapperCSSClass()}`;
    }
    /**
   * Create the list of menu items. Specific to each subclass.
   *
   */ createItems() {
        const rates = this.playbackRates();
        const items = [];
        for(let i = rates.length - 1; i >= 0; i--)items.push(new $e88cd91ee18355c1$var$PlaybackRateMenuItem(this.player(), {
            rate: rates[i] + "x"
        }));
        return items;
    }
    /**
   * On playbackrateschange, update the menu to account for the new items.
   *
   * @listens Player#playbackrateschange
   */ handlePlaybackRateschange(event) {
        this.update();
    }
    /**
   * Get possible playback rates
   *
   * @return {Array}
   *         All possible playback rates
   */ playbackRates() {
        const player = this.player();
        return player.playbackRates && player.playbackRates() || [];
    }
    /**
   * Get whether playback rates is supported by the tech
   * and an array of playback rates exists
   *
   * @return {boolean}
   *         Whether changing playback rate is supported
   */ playbackRateSupported() {
        return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;
    }
    /**
   * Hide playback rate controls when they're no playback rate options to select
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#loadstart
   */ updateVisibility(event) {
        if (this.playbackRateSupported()) this.removeClass("vjs-hidden");
        else this.addClass("vjs-hidden");
    }
    /**
   * Update button label when rate changed
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#ratechange
   */ updateLabel(event) {
        if (this.playbackRateSupported()) this.labelEl_.textContent = this.player().playbackRate() + "x";
    }
}
/**
 * The text that should display over the `PlaybackRateMenuButton`s controls.
 *
 * Added for localization.
 *
 * @type {string}
 * @protected
 */ $e88cd91ee18355c1$var$PlaybackRateMenuButton.prototype.controlText_ = "Playback Rate";
$e88cd91ee18355c1$var$Component$1.registerComponent("PlaybackRateMenuButton", $e88cd91ee18355c1$var$PlaybackRateMenuButton);
/**
 * @file spacer.js
 */ /**
 * Just an empty spacer element that can be used as an append point for plugins, etc.
 * Also can be used to create space between elements when necessary.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$Spacer extends $e88cd91ee18355c1$var$Component$1 {
    /**
  * Builds the default DOM `className`.
  *
  * @return {string}
  *         The DOM `className` for this object.
  */ buildCSSClass() {
        return `vjs-spacer ${super.buildCSSClass()}`;
    }
    /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl(tag = "div", props = {}, attributes = {}) {
        if (!props.className) props.className = this.buildCSSClass();
        return super.createEl(tag, props, attributes);
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("Spacer", $e88cd91ee18355c1$var$Spacer);
/**
 * @file custom-control-spacer.js
 */ /**
 * Spacer specifically meant to be used as an insertion point for new plugins, etc.
 *
 * @extends Spacer
 */ class $e88cd91ee18355c1$var$CustomControlSpacer extends $e88cd91ee18355c1$var$Spacer {
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */ buildCSSClass() {
        return `vjs-custom-control-spacer ${super.buildCSSClass()}`;
    }
    /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        return super.createEl("div", {
            className: this.buildCSSClass(),
            // No-flex/table-cell mode requires there be some content
            // in the cell to fill the remaining space of the table.
            textContent: "\xa0"
        });
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("CustomControlSpacer", $e88cd91ee18355c1$var$CustomControlSpacer);
/**
 * @file control-bar.js
 */ /**
 * Container of main controls.
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$ControlBar extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        return super.createEl("div", {
            className: "vjs-control-bar",
            dir: "ltr"
        });
    }
}
/**
 * Default options for `ControlBar`
 *
 * @type {Object}
 * @private
 */ $e88cd91ee18355c1$var$ControlBar.prototype.options_ = {
    children: [
        "playToggle",
        "skipBackward",
        "skipForward",
        "volumePanel",
        "currentTimeDisplay",
        "timeDivider",
        "durationDisplay",
        "progressControl",
        "liveDisplay",
        "seekToLive",
        "remainingTimeDisplay",
        "customControlSpacer",
        "playbackRateMenuButton",
        "chaptersButton",
        "descriptionsButton",
        "subsCapsButton",
        "audioTrackButton",
        "pictureInPictureToggle",
        "fullscreenToggle"
    ]
};
$e88cd91ee18355c1$var$Component$1.registerComponent("ControlBar", $e88cd91ee18355c1$var$ControlBar);
/**
 * @file error-display.js
 */ /**
 * A display that indicates an error has occurred. This means that the video
 * is unplayable.
 *
 * @extends ModalDialog
 */ class $e88cd91ee18355c1$var$ErrorDisplay extends $e88cd91ee18355c1$var$ModalDialog {
    /**
   * Creates an instance of this class.
   *
   * @param  { import('./player').default } player
   *         The `Player` that this class should be attached to.
   *
   * @param  {Object} [options]
   *         The key/value store of player options.
   */ constructor(player, options){
        super(player, options);
        this.on(player, "error", (e)=>{
            this.close();
            this.open(e);
        });
    }
    /**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   *
   * @deprecated Since version 5.
   */ buildCSSClass() {
        return `vjs-error-display ${super.buildCSSClass()}`;
    }
    /**
   * Gets the localized error message based on the `Player`s error.
   *
   * @return {string}
   *         The `Player`s error message localized or an empty string.
   */ content() {
        const error = this.player().error();
        return error ? this.localize(error.message) : "";
    }
}
/**
 * The default options for an `ErrorDisplay`.
 *
 * @private
 */ $e88cd91ee18355c1$var$ErrorDisplay.prototype.options_ = Object.assign({}, $e88cd91ee18355c1$var$ModalDialog.prototype.options_, {
    pauseOnOpen: false,
    fillAlways: true,
    temporary: false,
    uncloseable: true
});
$e88cd91ee18355c1$var$Component$1.registerComponent("ErrorDisplay", $e88cd91ee18355c1$var$ErrorDisplay);
/**
 * @file text-track-settings.js
 */ const $e88cd91ee18355c1$var$LOCAL_STORAGE_KEY$1 = "vjs-text-track-settings";
const $e88cd91ee18355c1$var$COLOR_BLACK = [
    "#000",
    "Black"
];
const $e88cd91ee18355c1$var$COLOR_BLUE = [
    "#00F",
    "Blue"
];
const $e88cd91ee18355c1$var$COLOR_CYAN = [
    "#0FF",
    "Cyan"
];
const $e88cd91ee18355c1$var$COLOR_GREEN = [
    "#0F0",
    "Green"
];
const $e88cd91ee18355c1$var$COLOR_MAGENTA = [
    "#F0F",
    "Magenta"
];
const $e88cd91ee18355c1$var$COLOR_RED = [
    "#F00",
    "Red"
];
const $e88cd91ee18355c1$var$COLOR_WHITE = [
    "#FFF",
    "White"
];
const $e88cd91ee18355c1$var$COLOR_YELLOW = [
    "#FF0",
    "Yellow"
];
const $e88cd91ee18355c1$var$OPACITY_OPAQUE = [
    "1",
    "Opaque"
];
const $e88cd91ee18355c1$var$OPACITY_SEMI = [
    "0.5",
    "Semi-Transparent"
];
const $e88cd91ee18355c1$var$OPACITY_TRANS = [
    "0",
    "Transparent"
];
// Configuration for the various <select> elements in the DOM of this component.
//
// Possible keys include:
//
// `default`:
//   The default option index. Only needs to be provided if not zero.
// `parser`:
//   A function which is used to parse the value from the selected option in
//   a customized way.
// `selector`:
//   The selector used to find the associated <select> element.
const $e88cd91ee18355c1$var$selectConfigs = {
    backgroundColor: {
        selector: ".vjs-bg-color > select",
        id: "captions-background-color-%s",
        label: "Color",
        options: [
            $e88cd91ee18355c1$var$COLOR_BLACK,
            $e88cd91ee18355c1$var$COLOR_WHITE,
            $e88cd91ee18355c1$var$COLOR_RED,
            $e88cd91ee18355c1$var$COLOR_GREEN,
            $e88cd91ee18355c1$var$COLOR_BLUE,
            $e88cd91ee18355c1$var$COLOR_YELLOW,
            $e88cd91ee18355c1$var$COLOR_MAGENTA,
            $e88cd91ee18355c1$var$COLOR_CYAN
        ]
    },
    backgroundOpacity: {
        selector: ".vjs-bg-opacity > select",
        id: "captions-background-opacity-%s",
        label: "Opacity",
        options: [
            $e88cd91ee18355c1$var$OPACITY_OPAQUE,
            $e88cd91ee18355c1$var$OPACITY_SEMI,
            $e88cd91ee18355c1$var$OPACITY_TRANS
        ]
    },
    color: {
        selector: ".vjs-text-color > select",
        id: "captions-foreground-color-%s",
        label: "Color",
        options: [
            $e88cd91ee18355c1$var$COLOR_WHITE,
            $e88cd91ee18355c1$var$COLOR_BLACK,
            $e88cd91ee18355c1$var$COLOR_RED,
            $e88cd91ee18355c1$var$COLOR_GREEN,
            $e88cd91ee18355c1$var$COLOR_BLUE,
            $e88cd91ee18355c1$var$COLOR_YELLOW,
            $e88cd91ee18355c1$var$COLOR_MAGENTA,
            $e88cd91ee18355c1$var$COLOR_CYAN
        ]
    },
    edgeStyle: {
        selector: ".vjs-edge-style > select",
        id: "%s",
        label: "Text Edge Style",
        options: [
            [
                "none",
                "None"
            ],
            [
                "raised",
                "Raised"
            ],
            [
                "depressed",
                "Depressed"
            ],
            [
                "uniform",
                "Uniform"
            ],
            [
                "dropshadow",
                "Drop shadow"
            ]
        ]
    },
    fontFamily: {
        selector: ".vjs-font-family > select",
        id: "captions-font-family-%s",
        label: "Font Family",
        options: [
            [
                "proportionalSansSerif",
                "Proportional Sans-Serif"
            ],
            [
                "monospaceSansSerif",
                "Monospace Sans-Serif"
            ],
            [
                "proportionalSerif",
                "Proportional Serif"
            ],
            [
                "monospaceSerif",
                "Monospace Serif"
            ],
            [
                "casual",
                "Casual"
            ],
            [
                "script",
                "Script"
            ],
            [
                "small-caps",
                "Small Caps"
            ]
        ]
    },
    fontPercent: {
        selector: ".vjs-font-percent > select",
        id: "captions-font-size-%s",
        label: "Font Size",
        options: [
            [
                "0.50",
                "50%"
            ],
            [
                "0.75",
                "75%"
            ],
            [
                "1.00",
                "100%"
            ],
            [
                "1.25",
                "125%"
            ],
            [
                "1.50",
                "150%"
            ],
            [
                "1.75",
                "175%"
            ],
            [
                "2.00",
                "200%"
            ],
            [
                "3.00",
                "300%"
            ],
            [
                "4.00",
                "400%"
            ]
        ],
        default: 2,
        parser: (v)=>v === "1.00" ? null : Number(v)
    },
    textOpacity: {
        selector: ".vjs-text-opacity > select",
        id: "captions-foreground-opacity-%s",
        label: "Opacity",
        options: [
            $e88cd91ee18355c1$var$OPACITY_OPAQUE,
            $e88cd91ee18355c1$var$OPACITY_SEMI
        ]
    },
    // Options for this object are defined below.
    windowColor: {
        selector: ".vjs-window-color > select",
        id: "captions-window-color-%s",
        label: "Color"
    },
    // Options for this object are defined below.
    windowOpacity: {
        selector: ".vjs-window-opacity > select",
        id: "captions-window-opacity-%s",
        label: "Opacity",
        options: [
            $e88cd91ee18355c1$var$OPACITY_TRANS,
            $e88cd91ee18355c1$var$OPACITY_SEMI,
            $e88cd91ee18355c1$var$OPACITY_OPAQUE
        ]
    }
};
$e88cd91ee18355c1$var$selectConfigs.windowColor.options = $e88cd91ee18355c1$var$selectConfigs.backgroundColor.options;
/**
 * Get the actual value of an option.
 *
 * @param  {string} value
 *         The value to get
 *
 * @param  {Function} [parser]
 *         Optional function to adjust the value.
 *
 * @return {*}
 *         - Will be `undefined` if no value exists
 *         - Will be `undefined` if the given value is "none".
 *         - Will be the actual value otherwise.
 *
 * @private
 */ function $e88cd91ee18355c1$var$parseOptionValue(value, parser) {
    if (parser) value = parser(value);
    if (value && value !== "none") return value;
}
/**
 * Gets the value of the selected <option> element within a <select> element.
 *
 * @param  {Element} el
 *         the element to look in
 *
 * @param  {Function} [parser]
 *         Optional function to adjust the value.
 *
 * @return {*}
 *         - Will be `undefined` if no value exists
 *         - Will be `undefined` if the given value is "none".
 *         - Will be the actual value otherwise.
 *
 * @private
 */ function $e88cd91ee18355c1$var$getSelectedOptionValue(el, parser) {
    const value = el.options[el.options.selectedIndex].value;
    return $e88cd91ee18355c1$var$parseOptionValue(value, parser);
}
/**
 * Sets the selected <option> element within a <select> element based on a
 * given value.
 *
 * @param {Element} el
 *        The element to look in.
 *
 * @param {string} value
 *        the property to look on.
 *
 * @param {Function} [parser]
 *        Optional function to adjust the value before comparing.
 *
 * @private
 */ function $e88cd91ee18355c1$var$setSelectedOption(el, value, parser) {
    if (!value) return;
    for(let i = 0; i < el.options.length; i++)if ($e88cd91ee18355c1$var$parseOptionValue(el.options[i].value, parser) === value) {
        el.selectedIndex = i;
        break;
    }
}
/**
 * Manipulate Text Tracks settings.
 *
 * @extends ModalDialog
 */ class $e88cd91ee18355c1$var$TextTrackSettings extends $e88cd91ee18355c1$var$ModalDialog {
    /**
   * Creates an instance of this class.
   *
   * @param { import('../player').default } player
   *         The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *         The key/value store of player options.
   */ constructor(player, options){
        options.temporary = false;
        super(player, options);
        this.updateDisplay = this.updateDisplay.bind(this);
        // fill the modal and pretend we have opened it
        this.fill();
        this.hasBeenOpened_ = this.hasBeenFilled_ = true;
        this.endDialog = $e88cd91ee18355c1$var$createEl("p", {
            className: "vjs-control-text",
            textContent: this.localize("End of dialog window.")
        });
        this.el().appendChild(this.endDialog);
        this.setDefaults();
        // Grab `persistTextTrackSettings` from the player options if not passed in child options
        if (options.persistTextTrackSettings === undefined) this.options_.persistTextTrackSettings = this.options_.playerOptions.persistTextTrackSettings;
        this.on(this.$(".vjs-done-button"), "click", ()=>{
            this.saveSettings();
            this.close();
        });
        this.on(this.$(".vjs-default-button"), "click", ()=>{
            this.setDefaults();
            this.updateDisplay();
        });
        $e88cd91ee18355c1$var$each($e88cd91ee18355c1$var$selectConfigs, (config)=>{
            this.on(this.$(config.selector), "change", this.updateDisplay);
        });
        if (this.options_.persistTextTrackSettings) this.restoreSettings();
    }
    dispose() {
        this.endDialog = null;
        super.dispose();
    }
    /**
   * Create a <select> element with configured options.
   *
   * @param {string} key
   *        Configuration key to use during creation.
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */ createElSelect_(key, legendId = "", type = "label") {
        const config = $e88cd91ee18355c1$var$selectConfigs[key];
        const id = config.id.replace("%s", this.id_);
        const selectLabelledbyIds = [
            legendId,
            id
        ].join(" ").trim();
        return [
            `<${type} id="${id}" class="${type === "label" ? "vjs-label" : ""}">`,
            this.localize(config.label),
            `</${type}>`,
            `<select aria-labelledby="${selectLabelledbyIds}">`
        ].concat(config.options.map((o)=>{
            const optionId = id + "-" + o[1].replace(/\W+/g, "");
            return [
                `<option id="${optionId}" value="${o[0]}" `,
                `aria-labelledby="${selectLabelledbyIds} ${optionId}">`,
                this.localize(o[1]),
                "</option>"
            ].join("");
        })).concat("</select>").join("");
    }
    /**
   * Create foreground color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */ createElFgColor_() {
        const legendId = `captions-text-legend-${this.id_}`;
        return [
            '<fieldset class="vjs-fg vjs-track-setting">',
            `<legend id="${legendId}">`,
            this.localize("Text"),
            "</legend>",
            '<span class="vjs-text-color">',
            this.createElSelect_("color", legendId),
            "</span>",
            '<span class="vjs-text-opacity vjs-opacity">',
            this.createElSelect_("textOpacity", legendId),
            "</span>",
            "</fieldset>"
        ].join("");
    }
    /**
   * Create background color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */ createElBgColor_() {
        const legendId = `captions-background-${this.id_}`;
        return [
            '<fieldset class="vjs-bg vjs-track-setting">',
            `<legend id="${legendId}">`,
            this.localize("Text Background"),
            "</legend>",
            '<span class="vjs-bg-color">',
            this.createElSelect_("backgroundColor", legendId),
            "</span>",
            '<span class="vjs-bg-opacity vjs-opacity">',
            this.createElSelect_("backgroundOpacity", legendId),
            "</span>",
            "</fieldset>"
        ].join("");
    }
    /**
   * Create window color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */ createElWinColor_() {
        const legendId = `captions-window-${this.id_}`;
        return [
            '<fieldset class="vjs-window vjs-track-setting">',
            `<legend id="${legendId}">`,
            this.localize("Caption Area Background"),
            "</legend>",
            '<span class="vjs-window-color">',
            this.createElSelect_("windowColor", legendId),
            "</span>",
            '<span class="vjs-window-opacity vjs-opacity">',
            this.createElSelect_("windowOpacity", legendId),
            "</span>",
            "</fieldset>"
        ].join("");
    }
    /**
   * Create color elements for the component
   *
   * @return {Element}
   *         The element that was created
   *
   * @private
   */ createElColors_() {
        return $e88cd91ee18355c1$var$createEl("div", {
            className: "vjs-track-settings-colors",
            innerHTML: [
                this.createElFgColor_(),
                this.createElBgColor_(),
                this.createElWinColor_()
            ].join("")
        });
    }
    /**
   * Create font elements for the component
   *
   * @return {Element}
   *         The element that was created.
   *
   * @private
   */ createElFont_() {
        return $e88cd91ee18355c1$var$createEl("div", {
            className: "vjs-track-settings-font",
            innerHTML: [
                '<fieldset class="vjs-font-percent vjs-track-setting">',
                this.createElSelect_("fontPercent", "", "legend"),
                "</fieldset>",
                '<fieldset class="vjs-edge-style vjs-track-setting">',
                this.createElSelect_("edgeStyle", "", "legend"),
                "</fieldset>",
                '<fieldset class="vjs-font-family vjs-track-setting">',
                this.createElSelect_("fontFamily", "", "legend"),
                "</fieldset>"
            ].join("")
        });
    }
    /**
   * Create controls for the component
   *
   * @return {Element}
   *         The element that was created.
   *
   * @private
   */ createElControls_() {
        const defaultsDescription = this.localize("restore all settings to the default values");
        return $e88cd91ee18355c1$var$createEl("div", {
            className: "vjs-track-settings-controls",
            innerHTML: [
                `<button type="button" class="vjs-default-button" title="${defaultsDescription}">`,
                this.localize("Reset"),
                `<span class="vjs-control-text"> ${defaultsDescription}</span>`,
                "</button>",
                `<button type="button" class="vjs-done-button">${this.localize("Done")}</button>`
            ].join("")
        });
    }
    content() {
        return [
            this.createElColors_(),
            this.createElFont_(),
            this.createElControls_()
        ];
    }
    label() {
        return this.localize("Caption Settings Dialog");
    }
    description() {
        return this.localize("Beginning of dialog window. Escape will cancel and close the window.");
    }
    buildCSSClass() {
        return super.buildCSSClass() + " vjs-text-track-settings";
    }
    /**
   * Gets an object of text track settings (or null).
   *
   * @return {Object}
   *         An object with config values parsed from the DOM or localStorage.
   */ getValues() {
        return $e88cd91ee18355c1$var$reduce($e88cd91ee18355c1$var$selectConfigs, (accum, config, key)=>{
            const value = $e88cd91ee18355c1$var$getSelectedOptionValue(this.$(config.selector), config.parser);
            if (value !== undefined) accum[key] = value;
            return accum;
        }, {});
    }
    /**
   * Sets text track settings from an object of values.
   *
   * @param {Object} values
   *        An object with config values parsed from the DOM or localStorage.
   */ setValues(values) {
        $e88cd91ee18355c1$var$each($e88cd91ee18355c1$var$selectConfigs, (config, key)=>{
            $e88cd91ee18355c1$var$setSelectedOption(this.$(config.selector), values[key], config.parser);
        });
    }
    /**
   * Sets all `<select>` elements to their default values.
   */ setDefaults() {
        $e88cd91ee18355c1$var$each($e88cd91ee18355c1$var$selectConfigs, (config)=>{
            const index = config.hasOwnProperty("default") ? config.default : 0;
            this.$(config.selector).selectedIndex = index;
        });
    }
    /**
   * Restore texttrack settings from localStorage
   */ restoreSettings() {
        let values;
        try {
            values = JSON.parse((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).localStorage.getItem($e88cd91ee18355c1$var$LOCAL_STORAGE_KEY$1));
        } catch (err) {
            $e88cd91ee18355c1$var$log$1.warn(err);
        }
        if (values) this.setValues(values);
    }
    /**
   * Save text track settings to localStorage
   */ saveSettings() {
        if (!this.options_.persistTextTrackSettings) return;
        const values = this.getValues();
        try {
            if (Object.keys(values).length) (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).localStorage.setItem($e88cd91ee18355c1$var$LOCAL_STORAGE_KEY$1, JSON.stringify(values));
            else (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).localStorage.removeItem($e88cd91ee18355c1$var$LOCAL_STORAGE_KEY$1);
        } catch (err) {
            $e88cd91ee18355c1$var$log$1.warn(err);
        }
    }
    /**
   * Update display of text track settings
   */ updateDisplay() {
        const ttDisplay = this.player_.getChild("textTrackDisplay");
        if (ttDisplay) ttDisplay.updateDisplay();
    }
    /**
   * conditionally blur the element and refocus the captions button
   *
   * @private
   */ conditionalBlur_() {
        this.previouslyActiveEl_ = null;
        const cb = this.player_.controlBar;
        const subsCapsBtn = cb && cb.subsCapsButton;
        const ccBtn = cb && cb.captionsButton;
        if (subsCapsBtn) subsCapsBtn.focus();
        else if (ccBtn) ccBtn.focus();
    }
    /**
   * Repopulate dialog with new localizations on languagechange
   */ handleLanguagechange() {
        this.fill();
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("TextTrackSettings", $e88cd91ee18355c1$var$TextTrackSettings);
/**
 * @file resize-manager.js
 */ /**
 * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.
 *
 * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.
 *
 * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.
 * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.
 *
 * @example <caption>How to disable the resize manager</caption>
 * const player = videojs('#vid', {
 *   resizeManager: false
 * });
 *
 * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$ResizeManager extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Create the ResizeManager.
   *
   * @param {Object} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of ResizeManager options.
   *
   * @param {Object} [options.ResizeObserver]
   *        A polyfill for ResizeObserver can be passed in here.
   *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.
   */ constructor(player, options){
        let RESIZE_OBSERVER_AVAILABLE = options.ResizeObserver || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).ResizeObserver;
        // if `null` was passed, we want to disable the ResizeObserver
        if (options.ResizeObserver === null) RESIZE_OBSERVER_AVAILABLE = false;
        // Only create an element when ResizeObserver isn't available
        const options_ = $e88cd91ee18355c1$var$merge$1({
            createEl: !RESIZE_OBSERVER_AVAILABLE,
            reportTouchActivity: false
        }, options);
        super(player, options_);
        this.ResizeObserver = options.ResizeObserver || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).ResizeObserver;
        this.loadListener_ = null;
        this.resizeObserver_ = null;
        this.debouncedHandler_ = $e88cd91ee18355c1$var$debounce(()=>{
            this.resizeHandler();
        }, 100, false, this);
        if (RESIZE_OBSERVER_AVAILABLE) {
            this.resizeObserver_ = new this.ResizeObserver(this.debouncedHandler_);
            this.resizeObserver_.observe(player.el());
        } else {
            this.loadListener_ = ()=>{
                if (!this.el_ || !this.el_.contentWindow) return;
                const debouncedHandler_ = this.debouncedHandler_;
                let unloadListener_ = this.unloadListener_ = function() {
                    $e88cd91ee18355c1$var$off(this, "resize", debouncedHandler_);
                    $e88cd91ee18355c1$var$off(this, "unload", unloadListener_);
                    unloadListener_ = null;
                };
                // safari and edge can unload the iframe before resizemanager dispose
                // we have to dispose of event handlers correctly before that happens
                $e88cd91ee18355c1$var$on(this.el_.contentWindow, "unload", unloadListener_);
                $e88cd91ee18355c1$var$on(this.el_.contentWindow, "resize", debouncedHandler_);
            };
            this.one("load", this.loadListener_);
        }
    }
    createEl() {
        return super.createEl("iframe", {
            className: "vjs-resize-manager",
            tabIndex: -1,
            title: this.localize("No content")
        }, {
            "aria-hidden": "true"
        });
    }
    /**
   * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver
   *
   * @fires Player#playerresize
   */ resizeHandler() {
        /**
     * Called when the player size has changed
     *
     * @event Player#playerresize
     * @type {Event}
     */ // make sure player is still around to trigger
        // prevents this from causing an error after dispose
        if (!this.player_ || !this.player_.trigger) return;
        this.player_.trigger("playerresize");
    }
    dispose() {
        if (this.debouncedHandler_) this.debouncedHandler_.cancel();
        if (this.resizeObserver_) {
            if (this.player_.el()) this.resizeObserver_.unobserve(this.player_.el());
            this.resizeObserver_.disconnect();
        }
        if (this.loadListener_) this.off("load", this.loadListener_);
        if (this.el_ && this.el_.contentWindow && this.unloadListener_) this.unloadListener_.call(this.el_.contentWindow);
        this.ResizeObserver = null;
        this.resizeObserver = null;
        this.debouncedHandler_ = null;
        this.loadListener_ = null;
        super.dispose();
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("ResizeManager", $e88cd91ee18355c1$var$ResizeManager);
const $e88cd91ee18355c1$var$defaults = {
    trackingThreshold: 20,
    liveTolerance: 15
};
/*
  track when we are at the live edge, and other helpers for live playback */ /**
 * A class for checking live current time and determining when the player
 * is at or behind the live edge.
 */ class $e88cd91ee18355c1$var$LiveTracker extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {number} [options.trackingThreshold=20]
   *        Number of seconds of live window (seekableEnd - seekableStart) that
   *        media needs to have before the liveui will be shown.
   *
   * @param {number} [options.liveTolerance=15]
   *        Number of seconds behind live that we have to be
   *        before we will be considered non-live. Note that this will only
   *        be used when playing at the live edge. This allows large seekable end
   *        changes to not effect whether we are live or not.
   */ constructor(player, options){
        // LiveTracker does not need an element
        const options_ = $e88cd91ee18355c1$var$merge$1($e88cd91ee18355c1$var$defaults, options, {
            createEl: false
        });
        super(player, options_);
        this.trackLiveHandler_ = ()=>this.trackLive_();
        this.handlePlay_ = (e)=>this.handlePlay(e);
        this.handleFirstTimeupdate_ = (e)=>this.handleFirstTimeupdate(e);
        this.handleSeeked_ = (e)=>this.handleSeeked(e);
        this.seekToLiveEdge_ = (e)=>this.seekToLiveEdge(e);
        this.reset_();
        this.on(this.player_, "durationchange", (e)=>this.handleDurationchange(e));
        // we should try to toggle tracking on canplay as native playback engines, like Safari
        // may not have the proper values for things like seekableEnd until then
        this.on(this.player_, "canplay", ()=>this.toggleTracking());
    }
    /**
   * all the functionality for tracking when seek end changes
   * and for tracking how far past seek end we should be
   */ trackLive_() {
        const seekable = this.player_.seekable();
        // skip undefined seekable
        if (!seekable || !seekable.length) return;
        const newTime = Number((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).performance.now().toFixed(4));
        const deltaTime = this.lastTime_ === -1 ? 0 : (newTime - this.lastTime_) / 1000;
        this.lastTime_ = newTime;
        this.pastSeekEnd_ = this.pastSeekEnd() + deltaTime;
        const liveCurrentTime = this.liveCurrentTime();
        const currentTime = this.player_.currentTime();
        // we are behind live if any are true
        // 1. the player is paused
        // 2. the user seeked to a location 2 seconds away from live
        // 3. the difference between live and current time is greater
        //    liveTolerance which defaults to 15s
        let isBehind = this.player_.paused() || this.seekedBehindLive_ || Math.abs(liveCurrentTime - currentTime) > this.options_.liveTolerance;
        // we cannot be behind if
        // 1. until we have not seen a timeupdate yet
        // 2. liveCurrentTime is Infinity, which happens on Android and Native Safari
        if (!this.timeupdateSeen_ || liveCurrentTime === Infinity) isBehind = false;
        if (isBehind !== this.behindLiveEdge_) {
            this.behindLiveEdge_ = isBehind;
            this.trigger("liveedgechange");
        }
    }
    /**
   * handle a durationchange event on the player
   * and start/stop tracking accordingly.
   */ handleDurationchange() {
        this.toggleTracking();
    }
    /**
   * start/stop tracking
   */ toggleTracking() {
        if (this.player_.duration() === Infinity && this.liveWindow() >= this.options_.trackingThreshold) {
            if (this.player_.options_.liveui) this.player_.addClass("vjs-liveui");
            this.startTracking();
        } else {
            this.player_.removeClass("vjs-liveui");
            this.stopTracking();
        }
    }
    /**
   * start tracking live playback
   */ startTracking() {
        if (this.isTracking()) return;
        // If we haven't seen a timeupdate, we need to check whether playback
        // began before this component started tracking. This can happen commonly
        // when using autoplay.
        if (!this.timeupdateSeen_) this.timeupdateSeen_ = this.player_.hasStarted();
        this.trackingInterval_ = this.setInterval(this.trackLiveHandler_, $e88cd91ee18355c1$var$UPDATE_REFRESH_INTERVAL);
        this.trackLive_();
        this.on(this.player_, [
            "play",
            "pause"
        ], this.trackLiveHandler_);
        if (!this.timeupdateSeen_) {
            this.one(this.player_, "play", this.handlePlay_);
            this.one(this.player_, "timeupdate", this.handleFirstTimeupdate_);
        } else this.on(this.player_, "seeked", this.handleSeeked_);
    }
    /**
   * handle the first timeupdate on the player if it wasn't already playing
   * when live tracker started tracking.
   */ handleFirstTimeupdate() {
        this.timeupdateSeen_ = true;
        this.on(this.player_, "seeked", this.handleSeeked_);
    }
    /**
   * Keep track of what time a seek starts, and listen for seeked
   * to find where a seek ends.
   */ handleSeeked() {
        const timeDiff = Math.abs(this.liveCurrentTime() - this.player_.currentTime());
        this.seekedBehindLive_ = this.nextSeekedFromUser_ && timeDiff > 2;
        this.nextSeekedFromUser_ = false;
        this.trackLive_();
    }
    /**
   * handle the first play on the player, and make sure that we seek
   * right to the live edge.
   */ handlePlay() {
        this.one(this.player_, "timeupdate", this.seekToLiveEdge_);
    }
    /**
   * Stop tracking, and set all internal variables to
   * their initial value.
   */ reset_() {
        this.lastTime_ = -1;
        this.pastSeekEnd_ = 0;
        this.lastSeekEnd_ = -1;
        this.behindLiveEdge_ = true;
        this.timeupdateSeen_ = false;
        this.seekedBehindLive_ = false;
        this.nextSeekedFromUser_ = false;
        this.clearInterval(this.trackingInterval_);
        this.trackingInterval_ = null;
        this.off(this.player_, [
            "play",
            "pause"
        ], this.trackLiveHandler_);
        this.off(this.player_, "seeked", this.handleSeeked_);
        this.off(this.player_, "play", this.handlePlay_);
        this.off(this.player_, "timeupdate", this.handleFirstTimeupdate_);
        this.off(this.player_, "timeupdate", this.seekToLiveEdge_);
    }
    /**
   * The next seeked event is from the user. Meaning that any seek
   * > 2s behind live will be considered behind live for real and
   * liveTolerance will be ignored.
   */ nextSeekedFromUser() {
        this.nextSeekedFromUser_ = true;
    }
    /**
   * stop tracking live playback
   */ stopTracking() {
        if (!this.isTracking()) return;
        this.reset_();
        this.trigger("liveedgechange");
    }
    /**
   * A helper to get the player seekable end
   * so that we don't have to null check everywhere
   *
   * @return {number}
   *         The furthest seekable end or Infinity.
   */ seekableEnd() {
        const seekable = this.player_.seekable();
        const seekableEnds = [];
        let i = seekable ? seekable.length : 0;
        while(i--)seekableEnds.push(seekable.end(i));
        // grab the furthest seekable end after sorting, or if there are none
        // default to Infinity
        return seekableEnds.length ? seekableEnds.sort()[seekableEnds.length - 1] : Infinity;
    }
    /**
   * A helper to get the player seekable start
   * so that we don't have to null check everywhere
   *
   * @return {number}
   *         The earliest seekable start or 0.
   */ seekableStart() {
        const seekable = this.player_.seekable();
        const seekableStarts = [];
        let i = seekable ? seekable.length : 0;
        while(i--)seekableStarts.push(seekable.start(i));
        // grab the first seekable start after sorting, or if there are none
        // default to 0
        return seekableStarts.length ? seekableStarts.sort()[0] : 0;
    }
    /**
   * Get the live time window aka
   * the amount of time between seekable start and
   * live current time.
   *
   * @return {number}
   *         The amount of seconds that are seekable in
   *         the live video.
   */ liveWindow() {
        const liveCurrentTime = this.liveCurrentTime();
        // if liveCurrenTime is Infinity then we don't have a liveWindow at all
        if (liveCurrentTime === Infinity) return 0;
        return liveCurrentTime - this.seekableStart();
    }
    /**
   * Determines if the player is live, only checks if this component
   * is tracking live playback or not
   *
   * @return {boolean}
   *         Whether liveTracker is tracking
   */ isLive() {
        return this.isTracking();
    }
    /**
   * Determines if currentTime is at the live edge and won't fall behind
   * on each seekableendchange
   *
   * @return {boolean}
   *         Whether playback is at the live edge
   */ atLiveEdge() {
        return !this.behindLiveEdge();
    }
    /**
   * get what we expect the live current time to be
   *
   * @return {number}
   *         The expected live current time
   */ liveCurrentTime() {
        return this.pastSeekEnd() + this.seekableEnd();
    }
    /**
   * The number of seconds that have occurred after seekable end
   * changed. This will be reset to 0 once seekable end changes.
   *
   * @return {number}
   *         Seconds past the current seekable end
   */ pastSeekEnd() {
        const seekableEnd = this.seekableEnd();
        if (this.lastSeekEnd_ !== -1 && seekableEnd !== this.lastSeekEnd_) this.pastSeekEnd_ = 0;
        this.lastSeekEnd_ = seekableEnd;
        return this.pastSeekEnd_;
    }
    /**
   * If we are currently behind the live edge, aka currentTime will be
   * behind on a seekableendchange
   *
   * @return {boolean}
   *         If we are behind the live edge
   */ behindLiveEdge() {
        return this.behindLiveEdge_;
    }
    /**
   * Whether live tracker is currently tracking or not.
   */ isTracking() {
        return typeof this.trackingInterval_ === "number";
    }
    /**
   * Seek to the live edge if we are behind the live edge
   */ seekToLiveEdge() {
        this.seekedBehindLive_ = false;
        if (this.atLiveEdge()) return;
        this.nextSeekedFromUser_ = false;
        this.player_.currentTime(this.liveCurrentTime());
    }
    /**
   * Dispose of liveTracker
   */ dispose() {
        this.stopTracking();
        super.dispose();
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("LiveTracker", $e88cd91ee18355c1$var$LiveTracker);
/**
 * Displays an element over the player which contains an optional title and
 * description for the current content.
 *
 * Much of the code for this component originated in the now obsolete
 * videojs-dock plugin: https://github.com/brightcove/videojs-dock/
 *
 * @extends Component
 */ class $e88cd91ee18355c1$var$TitleBar extends $e88cd91ee18355c1$var$Component$1 {
    constructor(player, options){
        super(player, options);
        this.on("statechanged", (e)=>this.updateDom_());
        this.updateDom_();
    }
    /**
   * Create the `TitleBar`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */ createEl() {
        this.els = {
            title: $e88cd91ee18355c1$var$createEl("div", {
                className: "vjs-title-bar-title",
                id: `vjs-title-bar-title-${$e88cd91ee18355c1$var$newGUID()}`
            }),
            description: $e88cd91ee18355c1$var$createEl("div", {
                className: "vjs-title-bar-description",
                id: `vjs-title-bar-description-${$e88cd91ee18355c1$var$newGUID()}`
            })
        };
        return $e88cd91ee18355c1$var$createEl("div", {
            className: "vjs-title-bar"
        }, {}, $e88cd91ee18355c1$var$values(this.els));
    }
    /**
   * Updates the DOM based on the component's state object.
   */ updateDom_() {
        const tech = this.player_.tech_;
        const techEl = tech && tech.el_;
        const techAriaAttrs = {
            title: "aria-labelledby",
            description: "aria-describedby"
        };
        [
            "title",
            "description"
        ].forEach((k)=>{
            const value = this.state[k];
            const el = this.els[k];
            const techAriaAttr = techAriaAttrs[k];
            $e88cd91ee18355c1$var$emptyEl(el);
            if (value) $e88cd91ee18355c1$var$textContent(el, value);
            // If there is a tech element available, update its ARIA attributes
            // according to whether a title and/or description have been provided.
            if (techEl) {
                techEl.removeAttribute(techAriaAttr);
                if (value) techEl.setAttribute(techAriaAttr, el.id);
            }
        });
        if (this.state.title || this.state.description) this.show();
        else this.hide();
    }
    /**
   * Update the contents of the title bar component with new title and
   * description text.
   *
   * If both title and description are missing, the title bar will be hidden.
   *
   * If either title or description are present, the title bar will be visible.
   *
   * NOTE: Any previously set value will be preserved. To unset a previously
   * set value, you must pass an empty string or null.
   *
   * For example:
   *
   * ```
   * update({title: 'foo', description: 'bar'}) // title: 'foo', description: 'bar'
   * update({description: 'bar2'}) // title: 'foo', description: 'bar2'
   * update({title: ''}) // title: '', description: 'bar2'
   * update({title: 'foo', description: null}) // title: 'foo', description: null
   * ```
   *
   * @param  {Object} [options={}]
   *         An options object. When empty, the title bar will be hidden.
   *
   * @param  {string} [options.title]
   *         A title to display in the title bar.
   *
   * @param  {string} [options.description]
   *         A description to display in the title bar.
   */ update(options) {
        this.setState(options);
    }
    /**
   * Dispose the component.
   */ dispose() {
        const tech = this.player_.tech_;
        const techEl = tech && tech.el_;
        if (techEl) {
            techEl.removeAttribute("aria-labelledby");
            techEl.removeAttribute("aria-describedby");
        }
        super.dispose();
        this.els = null;
    }
}
$e88cd91ee18355c1$var$Component$1.registerComponent("TitleBar", $e88cd91ee18355c1$var$TitleBar);
/**
 * This function is used to fire a sourceset when there is something
 * similar to `mediaEl.load()` being called. It will try to find the source via
 * the `src` attribute and then the `<source>` elements. It will then fire `sourceset`
 * with the source that was found or empty string if we cannot know. If it cannot
 * find a source then `sourceset` will not be fired.
 *
 * @param { import('./html5').default } tech
 *        The tech object that sourceset was setup on
 *
 * @return {boolean}
 *         returns false if the sourceset was not fired and true otherwise.
 */ const $e88cd91ee18355c1$var$sourcesetLoad = (tech)=>{
    const el = tech.el();
    // if `el.src` is set, that source will be loaded.
    if (el.hasAttribute("src")) {
        tech.triggerSourceset(el.src);
        return true;
    }
    /**
   * Since there isn't a src property on the media element, source elements will be used for
   * implementing the source selection algorithm. This happens asynchronously and
   * for most cases were there is more than one source we cannot tell what source will
   * be loaded, without re-implementing the source selection algorithm. At this time we are not
   * going to do that. There are three special cases that we do handle here though:
   *
   * 1. If there are no sources, do not fire `sourceset`.
   * 2. If there is only one `<source>` with a `src` property/attribute that is our `src`
   * 3. If there is more than one `<source>` but all of them have the same `src` url.
   *    That will be our src.
   */ const sources = tech.$$("source");
    const srcUrls = [];
    let src = "";
    // if there are no sources, do not fire sourceset
    if (!sources.length) return false;
    // only count valid/non-duplicate source elements
    for(let i = 0; i < sources.length; i++){
        const url = sources[i].src;
        if (url && srcUrls.indexOf(url) === -1) srcUrls.push(url);
    }
    // there were no valid sources
    if (!srcUrls.length) return false;
    // there is only one valid source element url
    // use that
    if (srcUrls.length === 1) src = srcUrls[0];
    tech.triggerSourceset(src);
    return true;
};
/**
 * our implementation of an `innerHTML` descriptor for browsers
 * that do not have one.
 */ const $e88cd91ee18355c1$var$innerHTMLDescriptorPolyfill = Object.defineProperty({}, "innerHTML", {
    get () {
        return this.cloneNode(true).innerHTML;
    },
    set (v) {
        // make a dummy node to use innerHTML on
        const dummy = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement(this.nodeName.toLowerCase());
        // set innerHTML to the value provided
        dummy.innerHTML = v;
        // make a document fragment to hold the nodes from dummy
        const docFrag = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createDocumentFragment();
        // copy all of the nodes created by the innerHTML on dummy
        // to the document fragment
        while(dummy.childNodes.length)docFrag.appendChild(dummy.childNodes[0]);
        // remove content
        this.innerText = "";
        // now we add all of that html in one by appending the
        // document fragment. This is how innerHTML does it.
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).Element.prototype.appendChild.call(this, docFrag);
        // then return the result that innerHTML's setter would
        return this.innerHTML;
    }
});
/**
 * Get a property descriptor given a list of priorities and the
 * property to get.
 */ const $e88cd91ee18355c1$var$getDescriptor = (priority, prop)=>{
    let descriptor = {};
    for(let i = 0; i < priority.length; i++){
        descriptor = Object.getOwnPropertyDescriptor(priority[i], prop);
        if (descriptor && descriptor.set && descriptor.get) break;
    }
    descriptor.enumerable = true;
    descriptor.configurable = true;
    return descriptor;
};
const $e88cd91ee18355c1$var$getInnerHTMLDescriptor = (tech)=>$e88cd91ee18355c1$var$getDescriptor([
        tech.el(),
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).HTMLMediaElement.prototype,
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).Element.prototype,
        $e88cd91ee18355c1$var$innerHTMLDescriptorPolyfill
    ], "innerHTML");
/**
 * Patches browser internal functions so that we can tell synchronously
 * if a `<source>` was appended to the media element. For some reason this
 * causes a `sourceset` if the the media element is ready and has no source.
 * This happens when:
 * - The page has just loaded and the media element does not have a source.
 * - The media element was emptied of all sources, then `load()` was called.
 *
 * It does this by patching the following functions/properties when they are supported:
 *
 * - `append()` - can be used to add a `<source>` element to the media element
 * - `appendChild()` - can be used to add a `<source>` element to the media element
 * - `insertAdjacentHTML()` -  can be used to add a `<source>` element to the media element
 * - `innerHTML` -  can be used to add a `<source>` element to the media element
 *
 * @param {Html5} tech
 *        The tech object that sourceset is being setup on.
 */ const $e88cd91ee18355c1$var$firstSourceWatch = function(tech) {
    const el = tech.el();
    // make sure firstSourceWatch isn't setup twice.
    if (el.resetSourceWatch_) return;
    const old = {};
    const innerDescriptor = $e88cd91ee18355c1$var$getInnerHTMLDescriptor(tech);
    const appendWrapper = (appendFn)=>(...args)=>{
            const retval = appendFn.apply(el, args);
            $e88cd91ee18355c1$var$sourcesetLoad(tech);
            return retval;
        };
    [
        "append",
        "appendChild",
        "insertAdjacentHTML"
    ].forEach((k)=>{
        if (!el[k]) return;
        // store the old function
        old[k] = el[k];
        // call the old function with a sourceset if a source
        // was loaded
        el[k] = appendWrapper(old[k]);
    });
    Object.defineProperty(el, "innerHTML", $e88cd91ee18355c1$var$merge$1(innerDescriptor, {
        set: appendWrapper(innerDescriptor.set)
    }));
    el.resetSourceWatch_ = ()=>{
        el.resetSourceWatch_ = null;
        Object.keys(old).forEach((k)=>{
            el[k] = old[k];
        });
        Object.defineProperty(el, "innerHTML", innerDescriptor);
    };
    // on the first sourceset, we need to revert our changes
    tech.one("sourceset", el.resetSourceWatch_);
};
/**
 * our implementation of a `src` descriptor for browsers
 * that do not have one
 */ const $e88cd91ee18355c1$var$srcDescriptorPolyfill = Object.defineProperty({}, "src", {
    get () {
        if (this.hasAttribute("src")) return $e88cd91ee18355c1$var$getAbsoluteURL((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).Element.prototype.getAttribute.call(this, "src"));
        return "";
    },
    set (v) {
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).Element.prototype.setAttribute.call(this, "src", v);
        return v;
    }
});
const $e88cd91ee18355c1$var$getSrcDescriptor = (tech)=>$e88cd91ee18355c1$var$getDescriptor([
        tech.el(),
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).HTMLMediaElement.prototype,
        $e88cd91ee18355c1$var$srcDescriptorPolyfill
    ], "src");
/**
 * setup `sourceset` handling on the `Html5` tech. This function
 * patches the following element properties/functions:
 *
 * - `src` - to determine when `src` is set
 * - `setAttribute()` - to determine when `src` is set
 * - `load()` - this re-triggers the source selection algorithm, and can
 *              cause a sourceset.
 *
 * If there is no source when we are adding `sourceset` support or during a `load()`
 * we also patch the functions listed in `firstSourceWatch`.
 *
 * @param {Html5} tech
 *        The tech to patch
 */ const $e88cd91ee18355c1$var$setupSourceset = function(tech) {
    if (!tech.featuresSourceset) return;
    const el = tech.el();
    // make sure sourceset isn't setup twice.
    if (el.resetSourceset_) return;
    const srcDescriptor = $e88cd91ee18355c1$var$getSrcDescriptor(tech);
    const oldSetAttribute = el.setAttribute;
    const oldLoad = el.load;
    Object.defineProperty(el, "src", $e88cd91ee18355c1$var$merge$1(srcDescriptor, {
        set: (v)=>{
            const retval = srcDescriptor.set.call(el, v);
            // we use the getter here to get the actual value set on src
            tech.triggerSourceset(el.src);
            return retval;
        }
    }));
    el.setAttribute = (n, v)=>{
        const retval = oldSetAttribute.call(el, n, v);
        if (/src/i.test(n)) tech.triggerSourceset(el.src);
        return retval;
    };
    el.load = ()=>{
        const retval = oldLoad.call(el);
        // if load was called, but there was no source to fire
        // sourceset on. We have to watch for a source append
        // as that can trigger a `sourceset` when the media element
        // has no source
        if (!$e88cd91ee18355c1$var$sourcesetLoad(tech)) {
            tech.triggerSourceset("");
            $e88cd91ee18355c1$var$firstSourceWatch(tech);
        }
        return retval;
    };
    if (el.currentSrc) tech.triggerSourceset(el.currentSrc);
    else if (!$e88cd91ee18355c1$var$sourcesetLoad(tech)) $e88cd91ee18355c1$var$firstSourceWatch(tech);
    el.resetSourceset_ = ()=>{
        el.resetSourceset_ = null;
        el.load = oldLoad;
        el.setAttribute = oldSetAttribute;
        Object.defineProperty(el, "src", srcDescriptor);
        if (el.resetSourceWatch_) el.resetSourceWatch_();
    };
};
/**
 * @file html5.js
 */ /**
 * HTML5 Media Controller - Wrapper for HTML5 Media API
 *
 * @mixes Tech~SourceHandlerAdditions
 * @extends Tech
 */ class $e88cd91ee18355c1$var$Html5 extends $e88cd91ee18355c1$var$Tech {
    /**
  * Create an instance of this Tech.
  *
  * @param {Object} [options]
  *        The key/value store of player options.
  *
  * @param {Function} [ready]
  *        Callback function to call when the `HTML5` Tech is ready.
  */ constructor(options, ready){
        super(options, ready);
        const source = options.source;
        let crossoriginTracks = false;
        this.featuresVideoFrameCallback = this.featuresVideoFrameCallback && this.el_.tagName === "VIDEO";
        // Set the source if one is provided
        // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)
        // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source
        // anyway so the error gets fired.
        if (source && (this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) this.setSource(source);
        else this.handleLateInit_(this.el_);
        // setup sourceset after late sourceset/init
        if (options.enableSourceset) this.setupSourcesetHandling_();
        this.isScrubbing_ = false;
        if (this.el_.hasChildNodes()) {
            const nodes = this.el_.childNodes;
            let nodesLength = nodes.length;
            const removeNodes = [];
            while(nodesLength--){
                const node = nodes[nodesLength];
                const nodeName = node.nodeName.toLowerCase();
                if (nodeName === "track") {
                    if (!this.featuresNativeTextTracks) // Empty video tag tracks so the built-in player doesn't use them also.
                    // This may not be fast enough to stop HTML5 browsers from reading the tags
                    // so we'll need to turn off any default tracks if we're manually doing
                    // captions and subtitles. videoElement.textTracks
                    removeNodes.push(node);
                    else {
                        // store HTMLTrackElement and TextTrack to remote list
                        this.remoteTextTrackEls().addTrackElement_(node);
                        this.remoteTextTracks().addTrack(node.track);
                        this.textTracks().addTrack(node.track);
                        if (!crossoriginTracks && !this.el_.hasAttribute("crossorigin") && $e88cd91ee18355c1$var$isCrossOrigin(node.src)) crossoriginTracks = true;
                    }
                }
            }
            for(let i = 0; i < removeNodes.length; i++)this.el_.removeChild(removeNodes[i]);
        }
        this.proxyNativeTracks_();
        if (this.featuresNativeTextTracks && crossoriginTracks) $e88cd91ee18355c1$var$log$1.warn("Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\nThis may prevent text tracks from loading.");
        // prevent iOS Safari from disabling metadata text tracks during native playback
        this.restoreMetadataTracksInIOSNativePlayer_();
        // Determine if native controls should be used
        // Our goal should be to get the custom controls on mobile solid everywhere
        // so we can remove this all together. Right now this will block custom
        // controls on touch enabled laptops like the Chrome Pixel
        if (($e88cd91ee18355c1$var$TOUCH_ENABLED || $e88cd91ee18355c1$var$IS_IPHONE) && options.nativeControlsForTouch === true) this.setControls(true);
        // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`
        // into a `fullscreenchange` event
        this.proxyWebkitFullscreen_();
        this.triggerReady();
    }
    /**
   * Dispose of `HTML5` media element and remove all tracks.
   */ dispose() {
        if (this.el_ && this.el_.resetSourceset_) this.el_.resetSourceset_();
        $e88cd91ee18355c1$var$Html5.disposeMediaElement(this.el_);
        this.options_ = null;
        // tech will handle clearing of the emulated track list
        super.dispose();
    }
    /**
   * Modify the media element so that we can detect when
   * the source is changed. Fires `sourceset` just after the source has changed
   */ setupSourcesetHandling_() {
        $e88cd91ee18355c1$var$setupSourceset(this);
    }
    /**
   * When a captions track is enabled in the iOS Safari native player, all other
   * tracks are disabled (including metadata tracks), which nulls all of their
   * associated cue points. This will restore metadata tracks to their pre-fullscreen
   * state in those cases so that cue points are not needlessly lost.
   *
   * @private
   */ restoreMetadataTracksInIOSNativePlayer_() {
        const textTracks = this.textTracks();
        let metadataTracksPreFullscreenState;
        // captures a snapshot of every metadata track's current state
        const takeMetadataTrackSnapshot = ()=>{
            metadataTracksPreFullscreenState = [];
            for(let i = 0; i < textTracks.length; i++){
                const track = textTracks[i];
                if (track.kind === "metadata") metadataTracksPreFullscreenState.push({
                    track: track,
                    storedMode: track.mode
                });
            }
        };
        // snapshot each metadata track's initial state, and update the snapshot
        // each time there is a track 'change' event
        takeMetadataTrackSnapshot();
        textTracks.addEventListener("change", takeMetadataTrackSnapshot);
        this.on("dispose", ()=>textTracks.removeEventListener("change", takeMetadataTrackSnapshot));
        const restoreTrackMode = ()=>{
            for(let i = 0; i < metadataTracksPreFullscreenState.length; i++){
                const storedTrack = metadataTracksPreFullscreenState[i];
                if (storedTrack.track.mode === "disabled" && storedTrack.track.mode !== storedTrack.storedMode) storedTrack.track.mode = storedTrack.storedMode;
            }
            // we only want this handler to be executed on the first 'change' event
            textTracks.removeEventListener("change", restoreTrackMode);
        };
        // when we enter fullscreen playback, stop updating the snapshot and
        // restore all track modes to their pre-fullscreen state
        this.on("webkitbeginfullscreen", ()=>{
            textTracks.removeEventListener("change", takeMetadataTrackSnapshot);
            // remove the listener before adding it just in case it wasn't previously removed
            textTracks.removeEventListener("change", restoreTrackMode);
            textTracks.addEventListener("change", restoreTrackMode);
        });
        // start updating the snapshot again after leaving fullscreen
        this.on("webkitendfullscreen", ()=>{
            // remove the listener before adding it just in case it wasn't previously removed
            textTracks.removeEventListener("change", takeMetadataTrackSnapshot);
            textTracks.addEventListener("change", takeMetadataTrackSnapshot);
            // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback
            textTracks.removeEventListener("change", restoreTrackMode);
        });
    }
    /**
   * Attempt to force override of tracks for the given type
   *
   * @param {string} type - Track type to override, possible values include 'Audio',
   * 'Video', and 'Text'.
   * @param {boolean} override - If set to true native audio/video will be overridden,
   * otherwise native audio/video will potentially be used.
   * @private
   */ overrideNative_(type, override) {
        // If there is no behavioral change don't add/remove listeners
        if (override !== this[`featuresNative${type}Tracks`]) return;
        const lowerCaseType = type.toLowerCase();
        if (this[`${lowerCaseType}TracksListeners_`]) Object.keys(this[`${lowerCaseType}TracksListeners_`]).forEach((eventName)=>{
            const elTracks = this.el()[`${lowerCaseType}Tracks`];
            elTracks.removeEventListener(eventName, this[`${lowerCaseType}TracksListeners_`][eventName]);
        });
        this[`featuresNative${type}Tracks`] = !override;
        this[`${lowerCaseType}TracksListeners_`] = null;
        this.proxyNativeTracksForType_(lowerCaseType);
    }
    /**
   * Attempt to force override of native audio tracks.
   *
   * @param {boolean} override - If set to true native audio will be overridden,
   * otherwise native audio will potentially be used.
   */ overrideNativeAudioTracks(override) {
        this.overrideNative_("Audio", override);
    }
    /**
   * Attempt to force override of native video tracks.
   *
   * @param {boolean} override - If set to true native video will be overridden,
   * otherwise native video will potentially be used.
   */ overrideNativeVideoTracks(override) {
        this.overrideNative_("Video", override);
    }
    /**
   * Proxy native track list events for the given type to our track
   * lists if the browser we are playing in supports that type of track list.
   *
   * @param {string} name - Track type; values include 'audio', 'video', and 'text'
   * @private
   */ proxyNativeTracksForType_(name) {
        const props = $e88cd91ee18355c1$var$NORMAL[name];
        const elTracks = this.el()[props.getterName];
        const techTracks = this[props.getterName]();
        if (!this[`featuresNative${props.capitalName}Tracks`] || !elTracks || !elTracks.addEventListener) return;
        const listeners = {
            change: (e)=>{
                const event = {
                    type: "change",
                    target: techTracks,
                    currentTarget: techTracks,
                    srcElement: techTracks
                };
                techTracks.trigger(event);
                // if we are a text track change event, we should also notify the
                // remote text track list. This can potentially cause a false positive
                // if we were to get a change event on a non-remote track and
                // we triggered the event on the remote text track list which doesn't
                // contain that track. However, best practices mean looping through the
                // list of tracks and searching for the appropriate mode value, so,
                // this shouldn't pose an issue
                if (name === "text") this[$e88cd91ee18355c1$var$REMOTE.remoteText.getterName]().trigger(event);
            },
            addtrack (e) {
                techTracks.addTrack(e.track);
            },
            removetrack (e) {
                techTracks.removeTrack(e.track);
            }
        };
        const removeOldTracks = function() {
            const removeTracks = [];
            for(let i = 0; i < techTracks.length; i++){
                let found = false;
                for(let j = 0; j < elTracks.length; j++)if (elTracks[j] === techTracks[i]) {
                    found = true;
                    break;
                }
                if (!found) removeTracks.push(techTracks[i]);
            }
            while(removeTracks.length)techTracks.removeTrack(removeTracks.shift());
        };
        this[props.getterName + "Listeners_"] = listeners;
        Object.keys(listeners).forEach((eventName)=>{
            const listener = listeners[eventName];
            elTracks.addEventListener(eventName, listener);
            this.on("dispose", (e)=>elTracks.removeEventListener(eventName, listener));
        });
        // Remove (native) tracks that are not used anymore
        this.on("loadstart", removeOldTracks);
        this.on("dispose", (e)=>this.off("loadstart", removeOldTracks));
    }
    /**
   * Proxy all native track list events to our track lists if the browser we are playing
   * in supports that type of track list.
   *
   * @private
   */ proxyNativeTracks_() {
        $e88cd91ee18355c1$var$NORMAL.names.forEach((name)=>{
            this.proxyNativeTracksForType_(name);
        });
    }
    /**
   * Create the `Html5` Tech's DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */ createEl() {
        let el = this.options_.tag;
        // Check if this browser supports moving the element into the box.
        // On the iPhone video will break if you move the element,
        // So we have to create a brand new element.
        // If we ingested the player div, we do not need to move the media element.
        if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {
            // If the original tag is still there, clone and remove it.
            if (el) {
                const clone = el.cloneNode(true);
                if (el.parentNode) el.parentNode.insertBefore(clone, el);
                $e88cd91ee18355c1$var$Html5.disposeMediaElement(el);
                el = clone;
            } else {
                el = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("video");
                // determine if native controls should be used
                const tagAttributes = this.options_.tag && $e88cd91ee18355c1$var$getAttributes(this.options_.tag);
                const attributes = $e88cd91ee18355c1$var$merge$1({}, tagAttributes);
                if (!$e88cd91ee18355c1$var$TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) delete attributes.controls;
                $e88cd91ee18355c1$var$setAttributes(el, Object.assign(attributes, {
                    id: this.options_.techId,
                    class: "vjs-tech"
                }));
            }
            el.playerId = this.options_.playerId;
        }
        if (typeof this.options_.preload !== "undefined") $e88cd91ee18355c1$var$setAttribute(el, "preload", this.options_.preload);
        if (this.options_.disablePictureInPicture !== undefined) el.disablePictureInPicture = this.options_.disablePictureInPicture;
        // Update specific tag settings, in case they were overridden
        // `autoplay` has to be *last* so that `muted` and `playsinline` are present
        // when iOS/Safari or other browsers attempt to autoplay.
        const settingsAttrs = [
            "loop",
            "muted",
            "playsinline",
            "autoplay"
        ];
        for(let i = 0; i < settingsAttrs.length; i++){
            const attr = settingsAttrs[i];
            const value = this.options_[attr];
            if (typeof value !== "undefined") {
                if (value) $e88cd91ee18355c1$var$setAttribute(el, attr, attr);
                else $e88cd91ee18355c1$var$removeAttribute(el, attr);
                el[attr] = value;
            }
        }
        return el;
    }
    /**
   * This will be triggered if the loadstart event has already fired, before videojs was
   * ready. Two known examples of when this can happen are:
   * 1. If we're loading the playback object after it has started loading
   * 2. The media is already playing the (often with autoplay on) then
   *
   * This function will fire another loadstart so that videojs can catchup.
   *
   * @fires Tech#loadstart
   *
   * @return {undefined}
   *         returns nothing.
   */ handleLateInit_(el) {
        if (el.networkState === 0 || el.networkState === 3) // The video element hasn't started loading the source yet
        // or didn't find a source
        return;
        if (el.readyState === 0) {
            // NetworkState is set synchronously BUT loadstart is fired at the
            // end of the current stack, usually before setInterval(fn, 0).
            // So at this point we know loadstart may have already fired or is
            // about to fire, and either way the player hasn't seen it yet.
            // We don't want to fire loadstart prematurely here and cause a
            // double loadstart so we'll wait and see if it happens between now
            // and the next loop, and fire it if not.
            // HOWEVER, we also want to make sure it fires before loadedmetadata
            // which could also happen between now and the next loop, so we'll
            // watch for that also.
            let loadstartFired = false;
            const setLoadstartFired = function() {
                loadstartFired = true;
            };
            this.on("loadstart", setLoadstartFired);
            const triggerLoadstart = function() {
                // We did miss the original loadstart. Make sure the player
                // sees loadstart before loadedmetadata
                if (!loadstartFired) this.trigger("loadstart");
            };
            this.on("loadedmetadata", triggerLoadstart);
            this.ready(function() {
                this.off("loadstart", setLoadstartFired);
                this.off("loadedmetadata", triggerLoadstart);
                if (!loadstartFired) // We did miss the original native loadstart. Fire it now.
                this.trigger("loadstart");
            });
            return;
        }
        // From here on we know that loadstart already fired and we missed it.
        // The other readyState events aren't as much of a problem if we double
        // them, so not going to go to as much trouble as loadstart to prevent
        // that unless we find reason to.
        const eventsToTrigger = [
            "loadstart"
        ];
        // loadedmetadata: newly equal to HAVE_METADATA (1) or greater
        eventsToTrigger.push("loadedmetadata");
        // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater
        if (el.readyState >= 2) eventsToTrigger.push("loadeddata");
        // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater
        if (el.readyState >= 3) eventsToTrigger.push("canplay");
        // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)
        if (el.readyState >= 4) eventsToTrigger.push("canplaythrough");
        // We still need to give the player time to add event listeners
        this.ready(function() {
            eventsToTrigger.forEach(function(type) {
                this.trigger(type);
            }, this);
        });
    }
    /**
   * Set whether we are scrubbing or not.
   * This is used to decide whether we should use `fastSeek` or not.
   * `fastSeek` is used to provide trick play on Safari browsers.
   *
   * @param {boolean} isScrubbing
   *                  - true for we are currently scrubbing
   *                  - false for we are no longer scrubbing
   */ setScrubbing(isScrubbing) {
        this.isScrubbing_ = isScrubbing;
    }
    /**
   * Get whether we are scrubbing or not.
   *
   * @return {boolean} isScrubbing
   *                  - true for we are currently scrubbing
   *                  - false for we are no longer scrubbing
   */ scrubbing() {
        return this.isScrubbing_;
    }
    /**
   * Set current time for the `HTML5` tech.
   *
   * @param {number} seconds
   *        Set the current time of the media to this.
   */ setCurrentTime(seconds) {
        try {
            if (this.isScrubbing_ && this.el_.fastSeek && $e88cd91ee18355c1$var$IS_ANY_SAFARI) this.el_.fastSeek(seconds);
            else this.el_.currentTime = seconds;
        } catch (e) {
            $e88cd91ee18355c1$var$log$1(e, "Video is not ready. (Video.js)");
        // this.warning(VideoJS.warnings.videoNotReady);
        }
    }
    /**
   * Get the current duration of the HTML5 media element.
   *
   * @return {number}
   *         The duration of the media or 0 if there is no duration.
   */ duration() {
        // Android Chrome will report duration as Infinity for VOD HLS until after
        // playback has started, which triggers the live display erroneously.
        // Return NaN if playback has not started and trigger a durationupdate once
        // the duration can be reliably known.
        if (this.el_.duration === Infinity && $e88cd91ee18355c1$var$IS_ANDROID && $e88cd91ee18355c1$var$IS_CHROME && this.el_.currentTime === 0) {
            // Wait for the first `timeupdate` with currentTime > 0 - there may be
            // several with 0
            const checkProgress = ()=>{
                if (this.el_.currentTime > 0) {
                    // Trigger durationchange for genuinely live video
                    if (this.el_.duration === Infinity) this.trigger("durationchange");
                    this.off("timeupdate", checkProgress);
                }
            };
            this.on("timeupdate", checkProgress);
            return NaN;
        }
        return this.el_.duration || NaN;
    }
    /**
   * Get the current width of the HTML5 media element.
   *
   * @return {number}
   *         The width of the HTML5 media element.
   */ width() {
        return this.el_.offsetWidth;
    }
    /**
   * Get the current height of the HTML5 media element.
   *
   * @return {number}
   *         The height of the HTML5 media element.
   */ height() {
        return this.el_.offsetHeight;
    }
    /**
   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into
   * `fullscreenchange` event.
   *
   * @private
   * @fires fullscreenchange
   * @listens webkitendfullscreen
   * @listens webkitbeginfullscreen
   * @listens webkitbeginfullscreen
   */ proxyWebkitFullscreen_() {
        if (!("webkitDisplayingFullscreen" in this.el_)) return;
        const endFn = function() {
            this.trigger("fullscreenchange", {
                isFullscreen: false
            });
            // Safari will sometimes set controls on the videoelement when existing fullscreen.
            if (this.el_.controls && !this.options_.nativeControlsForTouch && this.controls()) this.el_.controls = false;
        };
        const beginFn = function() {
            if ("webkitPresentationMode" in this.el_ && this.el_.webkitPresentationMode !== "picture-in-picture") {
                this.one("webkitendfullscreen", endFn);
                this.trigger("fullscreenchange", {
                    isFullscreen: true,
                    // set a flag in case another tech triggers fullscreenchange
                    nativeIOSFullscreen: true
                });
            }
        };
        this.on("webkitbeginfullscreen", beginFn);
        this.on("dispose", ()=>{
            this.off("webkitbeginfullscreen", beginFn);
            this.off("webkitendfullscreen", endFn);
        });
    }
    /**
   * Check if fullscreen is supported on the video el.
   *
   * @return {boolean}
   *         - True if fullscreen is supported.
   *         - False if fullscreen is not supported.
   */ supportsFullScreen() {
        return typeof this.el_.webkitEnterFullScreen === "function";
    }
    /**
   * Request that the `HTML5` Tech enter fullscreen.
   */ enterFullScreen() {
        const video = this.el_;
        if (video.paused && video.networkState <= video.HAVE_METADATA) {
            // attempt to prime the video element for programmatic access
            // this isn't necessary on the desktop but shouldn't hurt
            $e88cd91ee18355c1$var$silencePromise(this.el_.play());
            // playing and pausing synchronously during the transition to fullscreen
            // can get iOS ~6.1 devices into a play/pause loop
            this.setTimeout(function() {
                video.pause();
                try {
                    video.webkitEnterFullScreen();
                } catch (e) {
                    this.trigger("fullscreenerror", e);
                }
            }, 0);
        } else try {
            video.webkitEnterFullScreen();
        } catch (e) {
            this.trigger("fullscreenerror", e);
        }
    }
    /**
   * Request that the `HTML5` Tech exit fullscreen.
   */ exitFullScreen() {
        if (!this.el_.webkitDisplayingFullscreen) {
            this.trigger("fullscreenerror", new Error("The video is not fullscreen"));
            return;
        }
        this.el_.webkitExitFullScreen();
    }
    /**
   * Create a floating video window always on top of other windows so that users may
   * continue consuming media while they interact with other content sites, or
   * applications on their device.
   *
   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
   *
   * @return {Promise}
   *         A promise with a Picture-in-Picture window.
   */ requestPictureInPicture() {
        return this.el_.requestPictureInPicture();
    }
    /**
   * Native requestVideoFrameCallback if supported by browser/tech, or fallback
   * Don't use rVCF on Safari when DRM is playing, as it doesn't fire
   * Needs to be checked later than the constructor
   * This will be a false positive for clear sources loaded after a Fairplay source
   *
   * @param {function} cb function to call
   * @return {number} id of request
   */ requestVideoFrameCallback(cb) {
        if (this.featuresVideoFrameCallback && !this.el_.webkitKeys) return this.el_.requestVideoFrameCallback(cb);
        return super.requestVideoFrameCallback(cb);
    }
    /**
   * Native or fallback requestVideoFrameCallback
   *
   * @param {number} id request id to cancel
   */ cancelVideoFrameCallback(id) {
        if (this.featuresVideoFrameCallback && !this.el_.webkitKeys) this.el_.cancelVideoFrameCallback(id);
        else super.cancelVideoFrameCallback(id);
    }
    /**
   * A getter/setter for the `Html5` Tech's source object.
   * > Note: Please use {@link Html5#setSource}
   *
   * @param {Tech~SourceObject} [src]
   *        The source object you want to set on the `HTML5` techs element.
   *
   * @return {Tech~SourceObject|undefined}
   *         - The current source object when a source is not passed in.
   *         - undefined when setting
   *
   * @deprecated Since version 5.
   */ src(src) {
        if (src === undefined) return this.el_.src;
        // Setting src through `src` instead of `setSrc` will be deprecated
        this.setSrc(src);
    }
    /**
   * Reset the tech by removing all sources and then calling
   * {@link Html5.resetMediaElement}.
   */ reset() {
        $e88cd91ee18355c1$var$Html5.resetMediaElement(this.el_);
    }
    /**
   * Get the current source on the `HTML5` Tech. Falls back to returning the source from
   * the HTML5 media element.
   *
   * @return {Tech~SourceObject}
   *         The current source object from the HTML5 tech. With a fallback to the
   *         elements source.
   */ currentSrc() {
        if (this.currentSource_) return this.currentSource_.src;
        return this.el_.currentSrc;
    }
    /**
   * Set controls attribute for the HTML5 media Element.
   *
   * @param {string} val
   *        Value to set the controls attribute to
   */ setControls(val) {
        this.el_.controls = !!val;
    }
    /**
   * Create and returns a remote {@link TextTrack} object.
   *
   * @param {string} kind
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
   *
   * @param {string} [label]
   *        Label to identify the text track
   *
   * @param {string} [language]
   *        Two letter language abbreviation
   *
   * @return {TextTrack}
   *         The TextTrack that gets created.
   */ addTextTrack(kind, label, language) {
        if (!this.featuresNativeTextTracks) return super.addTextTrack(kind, label, language);
        return this.el_.addTextTrack(kind, label, language);
    }
    /**
   * Creates either native TextTrack or an emulated TextTrack depending
   * on the value of `featuresNativeTextTracks`
   *
   * @param {Object} options
   *        The object should contain the options to initialize the TextTrack with.
   *
   * @param {string} [options.kind]
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
   *
   * @param {string} [options.label]
   *        Label to identify the text track
   *
   * @param {string} [options.language]
   *        Two letter language abbreviation.
   *
   * @param {boolean} [options.default]
   *        Default this track to on.
   *
   * @param {string} [options.id]
   *        The internal id to assign this track.
   *
   * @param {string} [options.src]
   *        A source url for the track.
   *
   * @return {HTMLTrackElement}
   *         The track element that gets created.
   */ createRemoteTextTrack(options) {
        if (!this.featuresNativeTextTracks) return super.createRemoteTextTrack(options);
        const htmlTrackElement = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("track");
        if (options.kind) htmlTrackElement.kind = options.kind;
        if (options.label) htmlTrackElement.label = options.label;
        if (options.language || options.srclang) htmlTrackElement.srclang = options.language || options.srclang;
        if (options.default) htmlTrackElement.default = options.default;
        if (options.id) htmlTrackElement.id = options.id;
        if (options.src) htmlTrackElement.src = options.src;
        return htmlTrackElement;
    }
    /**
   * Creates a remote text track object and returns an html track element.
   *
   * @param {Object} options The object should contain values for
   * kind, language, label, and src (location of the WebVTT file)
   * @param {boolean} [manualCleanup=false] if set to true, the TextTrack
   * will not be removed from the TextTrackList and HtmlTrackElementList
   * after a source change
   * @return {HTMLTrackElement} An Html Track Element.
   * This can be an emulated {@link HTMLTrackElement} or a native one.
   *
   */ addRemoteTextTrack(options, manualCleanup) {
        const htmlTrackElement = super.addRemoteTextTrack(options, manualCleanup);
        if (this.featuresNativeTextTracks) this.el().appendChild(htmlTrackElement);
        return htmlTrackElement;
    }
    /**
   * Remove remote `TextTrack` from `TextTrackList` object
   *
   * @param {TextTrack} track
   *        `TextTrack` object to remove
   */ removeRemoteTextTrack(track) {
        super.removeRemoteTextTrack(track);
        if (this.featuresNativeTextTracks) {
            const tracks = this.$$("track");
            let i = tracks.length;
            while(i--)if (track === tracks[i] || track === tracks[i].track) this.el().removeChild(tracks[i]);
        }
    }
    /**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object}
   *         An object with supported media playback quality metrics
   */ getVideoPlaybackQuality() {
        if (typeof this.el().getVideoPlaybackQuality === "function") return this.el().getVideoPlaybackQuality();
        const videoPlaybackQuality = {};
        if (typeof this.el().webkitDroppedFrameCount !== "undefined" && typeof this.el().webkitDecodedFrameCount !== "undefined") {
            videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;
            videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;
        }
        if ((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).performance) videoPlaybackQuality.creationTime = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).performance.now();
        return videoPlaybackQuality;
    }
}
/* HTML5 Support Testing ---------------------------------------------------- */ /**
 * Element for testing browser HTML5 media capabilities
 *
 * @type {Element}
 * @constant
 * @private
 */ $e88cd91ee18355c1$var$defineLazyProperty($e88cd91ee18355c1$var$Html5, "TEST_VID", function() {
    if (!$e88cd91ee18355c1$var$isReal()) return;
    const video = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("video");
    const track = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("track");
    track.kind = "captions";
    track.srclang = "en";
    track.label = "English";
    video.appendChild(track);
    return video;
});
/**
 * Check if HTML5 media is supported by this browser/device.
 *
 * @return {boolean}
 *         - True if HTML5 media is supported.
 *         - False if HTML5 media is not supported.
 */ $e88cd91ee18355c1$var$Html5.isSupported = function() {
    // IE with no Media Player is a LIAR! (#984)
    try {
        $e88cd91ee18355c1$var$Html5.TEST_VID.volume = 0.5;
    } catch (e) {
        return false;
    }
    return !!($e88cd91ee18355c1$var$Html5.TEST_VID && $e88cd91ee18355c1$var$Html5.TEST_VID.canPlayType);
};
/**
 * Check if the tech can support the given type
 *
 * @param {string} type
 *        The mimetype to check
 * @return {string} 'probably', 'maybe', or '' (empty string)
 */ $e88cd91ee18355c1$var$Html5.canPlayType = function(type) {
    return $e88cd91ee18355c1$var$Html5.TEST_VID.canPlayType(type);
};
/**
 * Check if the tech can support the given source
 *
 * @param {Object} srcObj
 *        The source object
 * @param {Object} options
 *        The options passed to the tech
 * @return {string} 'probably', 'maybe', or '' (empty string)
 */ $e88cd91ee18355c1$var$Html5.canPlaySource = function(srcObj, options) {
    return $e88cd91ee18355c1$var$Html5.canPlayType(srcObj.type);
};
/**
 * Check if the volume can be changed in this browser/device.
 * Volume cannot be changed in a lot of mobile devices.
 * Specifically, it can't be changed from 1 on iOS.
 *
 * @return {boolean}
 *         - True if volume can be controlled
 *         - False otherwise
 */ $e88cd91ee18355c1$var$Html5.canControlVolume = function() {
    // IE will error if Windows Media Player not installed #3315
    try {
        const volume = $e88cd91ee18355c1$var$Html5.TEST_VID.volume;
        $e88cd91ee18355c1$var$Html5.TEST_VID.volume = volume / 2 + 0.1;
        const canControl = volume !== $e88cd91ee18355c1$var$Html5.TEST_VID.volume;
        // With the introduction of iOS 15, there are cases where the volume is read as
        // changed but reverts back to its original state at the start of the next tick.
        // To determine whether volume can be controlled on iOS,
        // a timeout is set and the volume is checked asynchronously.
        // Since `features` doesn't currently work asynchronously, the value is manually set.
        if (canControl && $e88cd91ee18355c1$var$IS_IOS) {
            (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(()=>{
                if ($e88cd91ee18355c1$var$Html5 && $e88cd91ee18355c1$var$Html5.prototype) $e88cd91ee18355c1$var$Html5.prototype.featuresVolumeControl = volume !== $e88cd91ee18355c1$var$Html5.TEST_VID.volume;
            });
            // default iOS to false, which will be updated in the timeout above.
            return false;
        }
        return canControl;
    } catch (e) {
        return false;
    }
};
/**
 * Check if the volume can be muted in this browser/device.
 * Some devices, e.g. iOS, don't allow changing volume
 * but permits muting/unmuting.
 *
 * @return {boolean}
 *      - True if volume can be muted
 *      - False otherwise
 */ $e88cd91ee18355c1$var$Html5.canMuteVolume = function() {
    try {
        const muted = $e88cd91ee18355c1$var$Html5.TEST_VID.muted;
        // in some versions of iOS muted property doesn't always
        // work, so we want to set both property and attribute
        $e88cd91ee18355c1$var$Html5.TEST_VID.muted = !muted;
        if ($e88cd91ee18355c1$var$Html5.TEST_VID.muted) $e88cd91ee18355c1$var$setAttribute($e88cd91ee18355c1$var$Html5.TEST_VID, "muted", "muted");
        else $e88cd91ee18355c1$var$removeAttribute($e88cd91ee18355c1$var$Html5.TEST_VID, "muted", "muted");
        return muted !== $e88cd91ee18355c1$var$Html5.TEST_VID.muted;
    } catch (e) {
        return false;
    }
};
/**
 * Check if the playback rate can be changed in this browser/device.
 *
 * @return {boolean}
 *         - True if playback rate can be controlled
 *         - False otherwise
 */ $e88cd91ee18355c1$var$Html5.canControlPlaybackRate = function() {
    // Playback rate API is implemented in Android Chrome, but doesn't do anything
    // https://github.com/videojs/video.js/issues/3180
    if ($e88cd91ee18355c1$var$IS_ANDROID && $e88cd91ee18355c1$var$IS_CHROME && $e88cd91ee18355c1$var$CHROME_VERSION < 58) return false;
    // IE will error if Windows Media Player not installed #3315
    try {
        const playbackRate = $e88cd91ee18355c1$var$Html5.TEST_VID.playbackRate;
        $e88cd91ee18355c1$var$Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
        return playbackRate !== $e88cd91ee18355c1$var$Html5.TEST_VID.playbackRate;
    } catch (e) {
        return false;
    }
};
/**
 * Check if we can override a video/audio elements attributes, with
 * Object.defineProperty.
 *
 * @return {boolean}
 *         - True if builtin attributes can be overridden
 *         - False otherwise
 */ $e88cd91ee18355c1$var$Html5.canOverrideAttributes = function() {
    // if we cannot overwrite the src/innerHTML property, there is no support
    // iOS 7 safari for instance cannot do this.
    try {
        const noop = ()=>{};
        Object.defineProperty((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("video"), "src", {
            get: noop,
            set: noop
        });
        Object.defineProperty((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("audio"), "src", {
            get: noop,
            set: noop
        });
        Object.defineProperty((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("video"), "innerHTML", {
            get: noop,
            set: noop
        });
        Object.defineProperty((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("audio"), "innerHTML", {
            get: noop,
            set: noop
        });
    } catch (e) {
        return false;
    }
    return true;
};
/**
 * Check to see if native `TextTrack`s are supported by this browser/device.
 *
 * @return {boolean}
 *         - True if native `TextTrack`s are supported.
 *         - False otherwise
 */ $e88cd91ee18355c1$var$Html5.supportsNativeTextTracks = function() {
    return $e88cd91ee18355c1$var$IS_ANY_SAFARI || $e88cd91ee18355c1$var$IS_IOS && $e88cd91ee18355c1$var$IS_CHROME;
};
/**
 * Check to see if native `VideoTrack`s are supported by this browser/device
 *
 * @return {boolean}
 *        - True if native `VideoTrack`s are supported.
 *        - False otherwise
 */ $e88cd91ee18355c1$var$Html5.supportsNativeVideoTracks = function() {
    return !!($e88cd91ee18355c1$var$Html5.TEST_VID && $e88cd91ee18355c1$var$Html5.TEST_VID.videoTracks);
};
/**
 * Check to see if native `AudioTrack`s are supported by this browser/device
 *
 * @return {boolean}
 *        - True if native `AudioTrack`s are supported.
 *        - False otherwise
 */ $e88cd91ee18355c1$var$Html5.supportsNativeAudioTracks = function() {
    return !!($e88cd91ee18355c1$var$Html5.TEST_VID && $e88cd91ee18355c1$var$Html5.TEST_VID.audioTracks);
};
/**
 * An array of events available on the Html5 tech.
 *
 * @private
 * @type {Array}
 */ $e88cd91ee18355c1$var$Html5.Events = [
    "loadstart",
    "suspend",
    "abort",
    "error",
    "emptied",
    "stalled",
    "loadedmetadata",
    "loadeddata",
    "canplay",
    "canplaythrough",
    "playing",
    "waiting",
    "seeking",
    "seeked",
    "ended",
    "durationchange",
    "timeupdate",
    "progress",
    "play",
    "pause",
    "ratechange",
    "resize",
    "volumechange"
];
/**
 * Boolean indicating whether the `Tech` supports volume control.
 *
 * @type {boolean}
 * @default {@link Html5.canControlVolume}
 */ /**
 * Boolean indicating whether the `Tech` supports muting volume.
 *
 * @type {boolean}
 * @default {@link Html5.canMuteVolume}
 */ /**
 * Boolean indicating whether the `Tech` supports changing the speed at which the media
 * plays. Examples:
 *   - Set player to play 2x (twice) as fast
 *   - Set player to play 0.5x (half) as fast
 *
 * @type {boolean}
 * @default {@link Html5.canControlPlaybackRate}
 */ /**
 * Boolean indicating whether the `Tech` supports the `sourceset` event.
 *
 * @type {boolean}
 * @default
 */ /**
 * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.
 *
 * @type {boolean}
 * @default {@link Html5.supportsNativeTextTracks}
 */ /**
 * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.
 *
 * @type {boolean}
 * @default {@link Html5.supportsNativeVideoTracks}
 */ /**
 * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.
 *
 * @type {boolean}
 * @default {@link Html5.supportsNativeAudioTracks}
 */ [
    [
        "featuresMuteControl",
        "canMuteVolume"
    ],
    [
        "featuresPlaybackRate",
        "canControlPlaybackRate"
    ],
    [
        "featuresSourceset",
        "canOverrideAttributes"
    ],
    [
        "featuresNativeTextTracks",
        "supportsNativeTextTracks"
    ],
    [
        "featuresNativeVideoTracks",
        "supportsNativeVideoTracks"
    ],
    [
        "featuresNativeAudioTracks",
        "supportsNativeAudioTracks"
    ]
].forEach(function([key, fn]) {
    $e88cd91ee18355c1$var$defineLazyProperty($e88cd91ee18355c1$var$Html5.prototype, key, ()=>$e88cd91ee18355c1$var$Html5[fn](), true);
});
$e88cd91ee18355c1$var$Html5.prototype.featuresVolumeControl = $e88cd91ee18355c1$var$Html5.canControlVolume();
/**
 * Boolean indicating whether the `HTML5` tech currently supports the media element
 * moving in the DOM. iOS breaks if you move the media element, so this is set this to
 * false there. Everywhere else this should be true.
 *
 * @type {boolean}
 * @default
 */ $e88cd91ee18355c1$var$Html5.prototype.movingMediaElementInDOM = !$e88cd91ee18355c1$var$IS_IOS;
// TODO: Previous comment: No longer appears to be used. Can probably be removed.
//       Is this true?
/**
 * Boolean indicating whether the `HTML5` tech currently supports automatic media resize
 * when going into fullscreen.
 *
 * @type {boolean}
 * @default
 */ $e88cd91ee18355c1$var$Html5.prototype.featuresFullscreenResize = true;
/**
 * Boolean indicating whether the `HTML5` tech currently supports the progress event.
 * If this is false, manual `progress` events will be triggered instead.
 *
 * @type {boolean}
 * @default
 */ $e88cd91ee18355c1$var$Html5.prototype.featuresProgressEvents = true;
/**
 * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.
 * If this is false, manual `timeupdate` events will be triggered instead.
 *
 * @default
 */ $e88cd91ee18355c1$var$Html5.prototype.featuresTimeupdateEvents = true;
/**
 * Whether the HTML5 el supports `requestVideoFrameCallback`
 *
 * @type {boolean}
 */ $e88cd91ee18355c1$var$Html5.prototype.featuresVideoFrameCallback = !!($e88cd91ee18355c1$var$Html5.TEST_VID && $e88cd91ee18355c1$var$Html5.TEST_VID.requestVideoFrameCallback);
$e88cd91ee18355c1$var$Html5.disposeMediaElement = function(el) {
    if (!el) return;
    if (el.parentNode) el.parentNode.removeChild(el);
    // remove any child track or source nodes to prevent their loading
    while(el.hasChildNodes())el.removeChild(el.firstChild);
    // remove any src reference. not setting `src=''` because that causes a warning
    // in firefox
    el.removeAttribute("src");
    // force the media element to update its loading state by calling load()
    // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)
    if (typeof el.load === "function") // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
    (function() {
        try {
            el.load();
        } catch (e) {
        // not supported
        }
    })();
};
$e88cd91ee18355c1$var$Html5.resetMediaElement = function(el) {
    if (!el) return;
    const sources = el.querySelectorAll("source");
    let i = sources.length;
    while(i--)el.removeChild(sources[i]);
    // remove any src reference.
    // not setting `src=''` because that throws an error
    el.removeAttribute("src");
    if (typeof el.load === "function") // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
    (function() {
        try {
            el.load();
        } catch (e) {
        // satisfy linter
        }
    })();
};
/* Native HTML5 element property wrapping ----------------------------------- */ // Wrap native boolean attributes with getters that check both property and attribute
// The list is as followed:
// muted, defaultMuted, autoplay, controls, loop, playsinline
[
    /**
 * Get the value of `muted` from the media element. `muted` indicates
 * that the volume for the media should be set to silent. This does not actually change
 * the `volume` attribute.
 *
 * @method Html5#muted
 * @return {boolean}
 *         - True if the value of `volume` should be ignored and the audio set to silent.
 *         - False if the value of `volume` should be used.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
 */ "muted",
    /**
 * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates
 * whether the media should start muted or not. Only changes the default state of the
 * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the
 * current state.
 *
 * @method Html5#defaultMuted
 * @return {boolean}
 *         - The value of `defaultMuted` from the media element.
 *         - True indicates that the media should start muted.
 *         - False indicates that the media should not start muted
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
 */ "defaultMuted",
    /**
 * Get the value of `autoplay` from the media element. `autoplay` indicates
 * that the media should start to play as soon as the page is ready.
 *
 * @method Html5#autoplay
 * @return {boolean}
 *         - The value of `autoplay` from the media element.
 *         - True indicates that the media should start as soon as the page loads.
 *         - False indicates that the media should not start as soon as the page loads.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
 */ "autoplay",
    /**
 * Get the value of `controls` from the media element. `controls` indicates
 * whether the native media controls should be shown or hidden.
 *
 * @method Html5#controls
 * @return {boolean}
 *         - The value of `controls` from the media element.
 *         - True indicates that native controls should be showing.
 *         - False indicates that native controls should be hidden.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}
 */ "controls",
    /**
 * Get the value of `loop` from the media element. `loop` indicates
 * that the media should return to the start of the media and continue playing once
 * it reaches the end.
 *
 * @method Html5#loop
 * @return {boolean}
 *         - The value of `loop` from the media element.
 *         - True indicates that playback should seek back to start once
 *           the end of a media is reached.
 *         - False indicates that playback should not loop back to the start when the
 *           end of the media is reached.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
 */ "loop",
    /**
 * Get the value of `playsinline` from the media element. `playsinline` indicates
 * to the browser that non-fullscreen playback is preferred when fullscreen
 * playback is the native default, such as in iOS Safari.
 *
 * @method Html5#playsinline
 * @return {boolean}
 *         - The value of `playsinline` from the media element.
 *         - True indicates that the media should play inline.
 *         - False indicates that the media should not play inline.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
 */ "playsinline"
].forEach(function(prop) {
    $e88cd91ee18355c1$var$Html5.prototype[prop] = function() {
        return this.el_[prop] || this.el_.hasAttribute(prop);
    };
});
// Wrap native boolean attributes with setters that set both property and attribute
// The list is as followed:
// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline
// setControls is special-cased above
[
    /**
 * Set the value of `muted` on the media element. `muted` indicates that the current
 * audio level should be silent.
 *
 * @method Html5#setMuted
 * @param {boolean} muted
 *        - True if the audio should be set to silent
 *        - False otherwise
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
 */ "muted",
    /**
 * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current
 * audio level should be silent, but will only effect the muted level on initial playback..
 *
 * @method Html5.prototype.setDefaultMuted
 * @param {boolean} defaultMuted
 *        - True if the audio should be set to silent
 *        - False otherwise
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
 */ "defaultMuted",
    /**
 * Set the value of `autoplay` on the media element. `autoplay` indicates
 * that the media should start to play as soon as the page is ready.
 *
 * @method Html5#setAutoplay
 * @param {boolean} autoplay
 *         - True indicates that the media should start as soon as the page loads.
 *         - False indicates that the media should not start as soon as the page loads.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
 */ "autoplay",
    /**
 * Set the value of `loop` on the media element. `loop` indicates
 * that the media should return to the start of the media and continue playing once
 * it reaches the end.
 *
 * @method Html5#setLoop
 * @param {boolean} loop
 *         - True indicates that playback should seek back to start once
 *           the end of a media is reached.
 *         - False indicates that playback should not loop back to the start when the
 *           end of the media is reached.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
 */ "loop",
    /**
 * Set the value of `playsinline` from the media element. `playsinline` indicates
 * to the browser that non-fullscreen playback is preferred when fullscreen
 * playback is the native default, such as in iOS Safari.
 *
 * @method Html5#setPlaysinline
 * @param {boolean} playsinline
 *         - True indicates that the media should play inline.
 *         - False indicates that the media should not play inline.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
 */ "playsinline"
].forEach(function(prop) {
    $e88cd91ee18355c1$var$Html5.prototype["set" + $e88cd91ee18355c1$var$toTitleCase$1(prop)] = function(v) {
        this.el_[prop] = v;
        if (v) this.el_.setAttribute(prop, prop);
        else this.el_.removeAttribute(prop);
    };
});
// Wrap native properties with a getter
// The list is as followed
// paused, currentTime, buffered, volume, poster, preload, error, seeking
// seekable, ended, playbackRate, defaultPlaybackRate, disablePictureInPicture
// played, networkState, readyState, videoWidth, videoHeight, crossOrigin
[
    /**
 * Get the value of `paused` from the media element. `paused` indicates whether the media element
 * is currently paused or not.
 *
 * @method Html5#paused
 * @return {boolean}
 *         The value of `paused` from the media element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}
 */ "paused",
    /**
 * Get the value of `currentTime` from the media element. `currentTime` indicates
 * the current second that the media is at in playback.
 *
 * @method Html5#currentTime
 * @return {number}
 *         The value of `currentTime` from the media element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}
 */ "currentTime",
    /**
 * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`
 * object that represents the parts of the media that are already downloaded and
 * available for playback.
 *
 * @method Html5#buffered
 * @return {TimeRange}
 *         The value of `buffered` from the media element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}
 */ "buffered",
    /**
 * Get the value of `volume` from the media element. `volume` indicates
 * the current playback volume of audio for a media. `volume` will be a value from 0
 * (silent) to 1 (loudest and default).
 *
 * @method Html5#volume
 * @return {number}
 *         The value of `volume` from the media element. Value will be between 0-1.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
 */ "volume",
    /**
 * Get the value of `poster` from the media element. `poster` indicates
 * that the url of an image file that can/will be shown when no media data is available.
 *
 * @method Html5#poster
 * @return {string}
 *         The value of `poster` from the media element. Value will be a url to an
 *         image.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}
 */ "poster",
    /**
 * Get the value of `preload` from the media element. `preload` indicates
 * what should download before the media is interacted with. It can have the following
 * values:
 * - none: nothing should be downloaded
 * - metadata: poster and the first few frames of the media may be downloaded to get
 *   media dimensions and other metadata
 * - auto: allow the media and metadata for the media to be downloaded before
 *    interaction
 *
 * @method Html5#preload
 * @return {string}
 *         The value of `preload` from the media element. Will be 'none', 'metadata',
 *         or 'auto'.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
 */ "preload",
    /**
 * Get the value of the `error` from the media element. `error` indicates any
 * MediaError that may have occurred during playback. If error returns null there is no
 * current error.
 *
 * @method Html5#error
 * @return {MediaError|null}
 *         The value of `error` from the media element. Will be `MediaError` if there
 *         is a current error and null otherwise.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}
 */ "error",
    /**
 * Get the value of `seeking` from the media element. `seeking` indicates whether the
 * media is currently seeking to a new position or not.
 *
 * @method Html5#seeking
 * @return {boolean}
 *         - The value of `seeking` from the media element.
 *         - True indicates that the media is currently seeking to a new position.
 *         - False indicates that the media is not seeking to a new position at this time.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}
 */ "seeking",
    /**
 * Get the value of `seekable` from the media element. `seekable` returns a
 * `TimeRange` object indicating ranges of time that can currently be `seeked` to.
 *
 * @method Html5#seekable
 * @return {TimeRange}
 *         The value of `seekable` from the media element. A `TimeRange` object
 *         indicating the current ranges of time that can be seeked to.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}
 */ "seekable",
    /**
 * Get the value of `ended` from the media element. `ended` indicates whether
 * the media has reached the end or not.
 *
 * @method Html5#ended
 * @return {boolean}
 *         - The value of `ended` from the media element.
 *         - True indicates that the media has ended.
 *         - False indicates that the media has not ended.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}
 */ "ended",
    /**
 * Get the value of `playbackRate` from the media element. `playbackRate` indicates
 * the rate at which the media is currently playing back. Examples:
 *   - if playbackRate is set to 2, media will play twice as fast.
 *   - if playbackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5#playbackRate
 * @return {number}
 *         The value of `playbackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
 */ "playbackRate",
    /**
 * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates
 * the rate at which the media is currently playing back. This value will not indicate the current
 * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.
 *
 * Examples:
 *   - if defaultPlaybackRate is set to 2, media will play twice as fast.
 *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5.prototype.defaultPlaybackRate
 * @return {number}
 *         The value of `defaultPlaybackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
 */ "defaultPlaybackRate",
    /**
 * Get the value of 'disablePictureInPicture' from the video element.
 *
 * @method Html5#disablePictureInPicture
 * @return {boolean} value
 *         - The value of `disablePictureInPicture` from the video element.
 *         - True indicates that the video can't be played in Picture-In-Picture mode
 *         - False indicates that the video can be played in Picture-In-Picture mode
 *
 * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}
 */ "disablePictureInPicture",
    /**
 * Get the value of `played` from the media element. `played` returns a `TimeRange`
 * object representing points in the media timeline that have been played.
 *
 * @method Html5#played
 * @return {TimeRange}
 *         The value of `played` from the media element. A `TimeRange` object indicating
 *         the ranges of time that have been played.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}
 */ "played",
    /**
 * Get the value of `networkState` from the media element. `networkState` indicates
 * the current network state. It returns an enumeration from the following list:
 * - 0: NETWORK_EMPTY
 * - 1: NETWORK_IDLE
 * - 2: NETWORK_LOADING
 * - 3: NETWORK_NO_SOURCE
 *
 * @method Html5#networkState
 * @return {number}
 *         The value of `networkState` from the media element. This will be a number
 *         from the list in the description.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}
 */ "networkState",
    /**
 * Get the value of `readyState` from the media element. `readyState` indicates
 * the current state of the media element. It returns an enumeration from the
 * following list:
 * - 0: HAVE_NOTHING
 * - 1: HAVE_METADATA
 * - 2: HAVE_CURRENT_DATA
 * - 3: HAVE_FUTURE_DATA
 * - 4: HAVE_ENOUGH_DATA
 *
 * @method Html5#readyState
 * @return {number}
 *         The value of `readyState` from the media element. This will be a number
 *         from the list in the description.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}
 */ "readyState",
    /**
 * Get the value of `videoWidth` from the video element. `videoWidth` indicates
 * the current width of the video in css pixels.
 *
 * @method Html5#videoWidth
 * @return {number}
 *         The value of `videoWidth` from the video element. This will be a number
 *         in css pixels.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
 */ "videoWidth",
    /**
 * Get the value of `videoHeight` from the video element. `videoHeight` indicates
 * the current height of the video in css pixels.
 *
 * @method Html5#videoHeight
 * @return {number}
 *         The value of `videoHeight` from the video element. This will be a number
 *         in css pixels.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
 */ "videoHeight",
    /**
 * Get the value of `crossOrigin` from the media element. `crossOrigin` indicates
 * to the browser that should sent the cookies along with the requests for the
 * different assets/playlists
 *
 * @method Html5#crossOrigin
 * @return {string}
 *         - anonymous indicates that the media should not sent cookies.
 *         - use-credentials indicates that the media should sent cookies along the requests.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}
 */ "crossOrigin"
].forEach(function(prop) {
    $e88cd91ee18355c1$var$Html5.prototype[prop] = function() {
        return this.el_[prop];
    };
});
// Wrap native properties with a setter in this format:
// set + toTitleCase(name)
// The list is as follows:
// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate,
// setDisablePictureInPicture, setCrossOrigin
[
    /**
 * Set the value of `volume` on the media element. `volume` indicates the current
 * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
 * so on.
 *
 * @method Html5#setVolume
 * @param {number} percentAsDecimal
 *        The volume percent as a decimal. Valid range is from 0-1.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
 */ "volume",
    /**
 * Set the value of `src` on the media element. `src` indicates the current
 * {@link Tech~SourceObject} for the media.
 *
 * @method Html5#setSrc
 * @param {Tech~SourceObject} src
 *        The source object to set as the current source.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}
 */ "src",
    /**
 * Set the value of `poster` on the media element. `poster` is the url to
 * an image file that can/will be shown when no media data is available.
 *
 * @method Html5#setPoster
 * @param {string} poster
 *        The url to an image that should be used as the `poster` for the media
 *        element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}
 */ "poster",
    /**
 * Set the value of `preload` on the media element. `preload` indicates
 * what should download before the media is interacted with. It can have the following
 * values:
 * - none: nothing should be downloaded
 * - metadata: poster and the first few frames of the media may be downloaded to get
 *   media dimensions and other metadata
 * - auto: allow the media and metadata for the media to be downloaded before
 *    interaction
 *
 * @method Html5#setPreload
 * @param {string} preload
 *         The value of `preload` to set on the media element. Must be 'none', 'metadata',
 *         or 'auto'.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
 */ "preload",
    /**
 * Set the value of `playbackRate` on the media element. `playbackRate` indicates
 * the rate at which the media should play back. Examples:
 *   - if playbackRate is set to 2, media will play twice as fast.
 *   - if playbackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5#setPlaybackRate
 * @return {number}
 *         The value of `playbackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
 */ "playbackRate",
    /**
 * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates
 * the rate at which the media should play back upon initial startup. Changing this value
 * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.
 *
 * Example Values:
 *   - if playbackRate is set to 2, media will play twice as fast.
 *   - if playbackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5.prototype.setDefaultPlaybackRate
 * @return {number}
 *         The value of `defaultPlaybackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}
 */ "defaultPlaybackRate",
    /**
 * Prevents the browser from suggesting a Picture-in-Picture context menu
 * or to request Picture-in-Picture automatically in some cases.
 *
 * @method Html5#setDisablePictureInPicture
 * @param {boolean} value
 *         The true value will disable Picture-in-Picture mode.
 *
 * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}
 */ "disablePictureInPicture",
    /**
 * Set the value of `crossOrigin` from the media element. `crossOrigin` indicates
 * to the browser that should sent the cookies along with the requests for the
 * different assets/playlists
 *
 * @method Html5#setCrossOrigin
 * @param {string} crossOrigin
 *         - anonymous indicates that the media should not sent cookies.
 *         - use-credentials indicates that the media should sent cookies along the requests.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}
 */ "crossOrigin"
].forEach(function(prop) {
    $e88cd91ee18355c1$var$Html5.prototype["set" + $e88cd91ee18355c1$var$toTitleCase$1(prop)] = function(v) {
        this.el_[prop] = v;
    };
});
// wrap native functions with a function
// The list is as follows:
// pause, load, play
[
    /**
 * A wrapper around the media elements `pause` function. This will call the `HTML5`
 * media elements `pause` function.
 *
 * @method Html5#pause
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}
 */ "pause",
    /**
 * A wrapper around the media elements `load` function. This will call the `HTML5`s
 * media element `load` function.
 *
 * @method Html5#load
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}
 */ "load",
    /**
 * A wrapper around the media elements `play` function. This will call the `HTML5`s
 * media element `play` function.
 *
 * @method Html5#play
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}
 */ "play"
].forEach(function(prop) {
    $e88cd91ee18355c1$var$Html5.prototype[prop] = function() {
        return this.el_[prop]();
    };
});
$e88cd91ee18355c1$var$Tech.withSourceHandlers($e88cd91ee18355c1$var$Html5);
/**
 * Native source handler for Html5, simply passes the source to the media element.
 *
 * @property {Tech~SourceObject} source
 *        The source object
 *
 * @property {Html5} tech
 *        The instance of the HTML5 tech.
 */ $e88cd91ee18355c1$var$Html5.nativeSourceHandler = {};
/**
 * Check if the media element can play the given mime type.
 *
 * @param {string} type
 *        The mimetype to check
 *
 * @return {string}
 *         'probably', 'maybe', or '' (empty string)
 */ $e88cd91ee18355c1$var$Html5.nativeSourceHandler.canPlayType = function(type) {
    // IE without MediaPlayer throws an error (#519)
    try {
        return $e88cd91ee18355c1$var$Html5.TEST_VID.canPlayType(type);
    } catch (e) {
        return "";
    }
};
/**
 * Check if the media element can handle a source natively.
 *
 * @param {Tech~SourceObject} source
 *         The source object
 *
 * @param {Object} [options]
 *         Options to be passed to the tech.
 *
 * @return {string}
 *         'probably', 'maybe', or '' (empty string).
 */ $e88cd91ee18355c1$var$Html5.nativeSourceHandler.canHandleSource = function(source, options) {
    // If a type was provided we should rely on that
    if (source.type) return $e88cd91ee18355c1$var$Html5.nativeSourceHandler.canPlayType(source.type);
    else if (source.src) {
        const ext = $e88cd91ee18355c1$var$getFileExtension(source.src);
        return $e88cd91ee18355c1$var$Html5.nativeSourceHandler.canPlayType(`video/${ext}`);
    }
    return "";
};
/**
 * Pass the source to the native media element.
 *
 * @param {Tech~SourceObject} source
 *        The source object
 *
 * @param {Html5} tech
 *        The instance of the Html5 tech
 *
 * @param {Object} [options]
 *        The options to pass to the source
 */ $e88cd91ee18355c1$var$Html5.nativeSourceHandler.handleSource = function(source, tech, options) {
    tech.setSrc(source.src);
};
/**
 * A noop for the native dispose function, as cleanup is not needed.
 */ $e88cd91ee18355c1$var$Html5.nativeSourceHandler.dispose = function() {};
// Register the native source handler
$e88cd91ee18355c1$var$Html5.registerSourceHandler($e88cd91ee18355c1$var$Html5.nativeSourceHandler);
$e88cd91ee18355c1$var$Tech.registerTech("Html5", $e88cd91ee18355c1$var$Html5);
/**
 * @file player.js
 */ // The following tech events are simply re-triggered
// on the player when they happen
const $e88cd91ee18355c1$var$TECH_EVENTS_RETRIGGER = [
    /**
 * Fired while the user agent is downloading media data.
 *
 * @event Player#progress
 * @type {Event}
 */ /**
 * Retrigger the `progress` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechProgress_
 * @fires Player#progress
 * @listens Tech#progress
 */ "progress",
    /**
 * Fires when the loading of an audio/video is aborted.
 *
 * @event Player#abort
 * @type {Event}
 */ /**
 * Retrigger the `abort` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechAbort_
 * @fires Player#abort
 * @listens Tech#abort
 */ "abort",
    /**
 * Fires when the browser is intentionally not getting media data.
 *
 * @event Player#suspend
 * @type {Event}
 */ /**
 * Retrigger the `suspend` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechSuspend_
 * @fires Player#suspend
 * @listens Tech#suspend
 */ "suspend",
    /**
 * Fires when the current playlist is empty.
 *
 * @event Player#emptied
 * @type {Event}
 */ /**
 * Retrigger the `emptied` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechEmptied_
 * @fires Player#emptied
 * @listens Tech#emptied
 */ "emptied",
    /**
 * Fires when the browser is trying to get media data, but data is not available.
 *
 * @event Player#stalled
 * @type {Event}
 */ /**
 * Retrigger the `stalled` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechStalled_
 * @fires Player#stalled
 * @listens Tech#stalled
 */ "stalled",
    /**
 * Fires when the browser has loaded meta data for the audio/video.
 *
 * @event Player#loadedmetadata
 * @type {Event}
 */ /**
 * Retrigger the `loadedmetadata` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechLoadedmetadata_
 * @fires Player#loadedmetadata
 * @listens Tech#loadedmetadata
 */ "loadedmetadata",
    /**
 * Fires when the browser has loaded the current frame of the audio/video.
 *
 * @event Player#loadeddata
 * @type {event}
 */ /**
 * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechLoaddeddata_
 * @fires Player#loadeddata
 * @listens Tech#loadeddata
 */ "loadeddata",
    /**
 * Fires when the current playback position has changed.
 *
 * @event Player#timeupdate
 * @type {event}
 */ /**
 * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechTimeUpdate_
 * @fires Player#timeupdate
 * @listens Tech#timeupdate
 */ "timeupdate",
    /**
 * Fires when the video's intrinsic dimensions change
 *
 * @event Player#resize
 * @type {event}
 */ /**
 * Retrigger the `resize` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechResize_
 * @fires Player#resize
 * @listens Tech#resize
 */ "resize",
    /**
 * Fires when the volume has been changed
 *
 * @event Player#volumechange
 * @type {event}
 */ /**
 * Retrigger the `volumechange` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechVolumechange_
 * @fires Player#volumechange
 * @listens Tech#volumechange
 */ "volumechange",
    /**
 * Fires when the text track has been changed
 *
 * @event Player#texttrackchange
 * @type {event}
 */ /**
 * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechTexttrackchange_
 * @fires Player#texttrackchange
 * @listens Tech#texttrackchange
 */ "texttrackchange"
];
// events to queue when playback rate is zero
// this is a hash for the sole purpose of mapping non-camel-cased event names
// to camel-cased function names
const $e88cd91ee18355c1$var$TECH_EVENTS_QUEUE = {
    canplay: "CanPlay",
    canplaythrough: "CanPlayThrough",
    playing: "Playing",
    seeked: "Seeked"
};
const $e88cd91ee18355c1$var$BREAKPOINT_ORDER = [
    "tiny",
    "xsmall",
    "small",
    "medium",
    "large",
    "xlarge",
    "huge"
];
const $e88cd91ee18355c1$var$BREAKPOINT_CLASSES = {};
// grep: vjs-layout-tiny
// grep: vjs-layout-x-small
// grep: vjs-layout-small
// grep: vjs-layout-medium
// grep: vjs-layout-large
// grep: vjs-layout-x-large
// grep: vjs-layout-huge
$e88cd91ee18355c1$var$BREAKPOINT_ORDER.forEach((k)=>{
    const v = k.charAt(0) === "x" ? `x-${k.substring(1)}` : k;
    $e88cd91ee18355c1$var$BREAKPOINT_CLASSES[k] = `vjs-layout-${v}`;
});
const $e88cd91ee18355c1$var$DEFAULT_BREAKPOINTS = {
    tiny: 210,
    xsmall: 320,
    small: 425,
    medium: 768,
    large: 1440,
    xlarge: 2560,
    huge: Infinity
};
/**
 * An instance of the `Player` class is created when any of the Video.js setup methods
 * are used to initialize a video.
 *
 * After an instance has been created it can be accessed globally in three ways:
 * 1. By calling `videojs.getPlayer('example_video_1');`
 * 2. By calling `videojs('example_video_1');` (not recommended)
 * 2. By using it directly via `videojs.players.example_video_1;`
 *
 * @extends Component
 * @global
 */ class $e88cd91ee18355c1$var$Player extends $e88cd91ee18355c1$var$Component$1 {
    /**
   * Create an instance of this class.
   *
   * @param {Element} tag
   *        The original video DOM element used for configuring options.
   *
   * @param {Object} [options]
   *        Object of option names and values.
   *
   * @param {Function} [ready]
   *        Ready callback function.
   */ constructor(tag, options, ready){
        // Make sure tag ID exists
        // also here.. probably better
        tag.id = tag.id || options.id || `vjs_video_${$e88cd91ee18355c1$var$newGUID()}`;
        // Set Options
        // The options argument overrides options set in the video tag
        // which overrides globally set options.
        // This latter part coincides with the load order
        // (tag must exist before Player)
        options = Object.assign($e88cd91ee18355c1$var$Player.getTagSettings(tag), options);
        // Delay the initialization of children because we need to set up
        // player properties first, and can't use `this` before `super()`
        options.initChildren = false;
        // Same with creating the element
        options.createEl = false;
        // don't auto mixin the evented mixin
        options.evented = false;
        // we don't want the player to report touch activity on itself
        // see enableTouchActivity in Component
        options.reportTouchActivity = false;
        // If language is not set, get the closest lang attribute
        if (!options.language) {
            const closest = tag.closest("[lang]");
            if (closest) options.language = closest.getAttribute("lang");
        }
        // Run base component initializing with new options
        super(null, options, ready);
        // Create bound methods for document listeners.
        this.boundDocumentFullscreenChange_ = (e)=>this.documentFullscreenChange_(e);
        this.boundFullWindowOnEscKey_ = (e)=>this.fullWindowOnEscKey(e);
        this.boundUpdateStyleEl_ = (e)=>this.updateStyleEl_(e);
        this.boundApplyInitTime_ = (e)=>this.applyInitTime_(e);
        this.boundUpdateCurrentBreakpoint_ = (e)=>this.updateCurrentBreakpoint_(e);
        this.boundHandleTechClick_ = (e)=>this.handleTechClick_(e);
        this.boundHandleTechDoubleClick_ = (e)=>this.handleTechDoubleClick_(e);
        this.boundHandleTechTouchStart_ = (e)=>this.handleTechTouchStart_(e);
        this.boundHandleTechTouchMove_ = (e)=>this.handleTechTouchMove_(e);
        this.boundHandleTechTouchEnd_ = (e)=>this.handleTechTouchEnd_(e);
        this.boundHandleTechTap_ = (e)=>this.handleTechTap_(e);
        // default isFullscreen_ to false
        this.isFullscreen_ = false;
        // create logger
        this.log = $e88cd91ee18355c1$var$createLogger(this.id_);
        // Hold our own reference to fullscreen api so it can be mocked in tests
        this.fsApi_ = $e88cd91ee18355c1$var$FullscreenApi;
        // Tracks when a tech changes the poster
        this.isPosterFromTech_ = false;
        // Holds callback info that gets queued when playback rate is zero
        // and a seek is happening
        this.queuedCallbacks_ = [];
        // Turn off API access because we're loading a new tech that might load asynchronously
        this.isReady_ = false;
        // Init state hasStarted_
        this.hasStarted_ = false;
        // Init state userActive_
        this.userActive_ = false;
        // Init debugEnabled_
        this.debugEnabled_ = false;
        // Init state audioOnlyMode_
        this.audioOnlyMode_ = false;
        // Init state audioPosterMode_
        this.audioPosterMode_ = false;
        // Init state audioOnlyCache_
        this.audioOnlyCache_ = {
            playerHeight: null,
            hiddenChildren: []
        };
        // if the global option object was accidentally blown away by
        // someone, bail early with an informative error
        if (!this.options_ || !this.options_.techOrder || !this.options_.techOrder.length) throw new Error("No techOrder specified. Did you overwrite videojs.options instead of just changing the properties you want to override?");
        // Store the original tag used to set options
        this.tag = tag;
        // Store the tag attributes used to restore html5 element
        this.tagAttributes = tag && $e88cd91ee18355c1$var$getAttributes(tag);
        // Update current language
        this.language(this.options_.language);
        // Update Supported Languages
        if (options.languages) {
            // Normalise player option languages to lowercase
            const languagesToLower = {};
            Object.getOwnPropertyNames(options.languages).forEach(function(name) {
                languagesToLower[name.toLowerCase()] = options.languages[name];
            });
            this.languages_ = languagesToLower;
        } else this.languages_ = $e88cd91ee18355c1$var$Player.prototype.options_.languages;
        this.resetCache_();
        // Set poster
        /** @type string */ this.poster_ = options.poster || "";
        // Set controls
        /** @type {boolean} */ this.controls_ = !!options.controls;
        // Original tag settings stored in options
        // now remove immediately so native controls don't flash.
        // May be turned back on by HTML5 tech if nativeControlsForTouch is true
        tag.controls = false;
        tag.removeAttribute("controls");
        this.changingSrc_ = false;
        this.playCallbacks_ = [];
        this.playTerminatedQueue_ = [];
        // the attribute overrides the option
        if (tag.hasAttribute("autoplay")) this.autoplay(true);
        else // otherwise use the setter to validate and
        // set the correct value.
        this.autoplay(this.options_.autoplay);
        // check plugins
        if (options.plugins) Object.keys(options.plugins).forEach((name)=>{
            if (typeof this[name] !== "function") throw new Error(`plugin "${name}" does not exist`);
        });
        /*
     * Store the internal state of scrubbing
     *
     * @private
     * @return {Boolean} True if the user is scrubbing
     */ this.scrubbing_ = false;
        this.el_ = this.createEl();
        // Make this an evented object and use `el_` as its event bus.
        $e88cd91ee18355c1$var$evented(this, {
            eventBusKey: "el_"
        });
        // listen to document and player fullscreenchange handlers so we receive those events
        // before a user can receive them so we can update isFullscreen appropriately.
        // make sure that we listen to fullscreenchange events before everything else to make sure that
        // our isFullscreen method is updated properly for internal components as well as external.
        if (this.fsApi_.requestFullscreen) {
            $e88cd91ee18355c1$var$on((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))), this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);
            this.on(this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);
        }
        if (this.fluid_) this.on([
            "playerreset",
            "resize"
        ], this.boundUpdateStyleEl_);
        // We also want to pass the original player options to each component and plugin
        // as well so they don't need to reach back into the player for options later.
        // We also need to do another copy of this.options_ so we don't end up with
        // an infinite loop.
        const playerOptionsCopy = $e88cd91ee18355c1$var$merge$1(this.options_);
        // Load plugins
        if (options.plugins) Object.keys(options.plugins).forEach((name)=>{
            this[name](options.plugins[name]);
        });
        // Enable debug mode to fire debugon event for all plugins.
        if (options.debug) this.debug(true);
        this.options_.playerOptions = playerOptionsCopy;
        this.middleware_ = [];
        this.playbackRates(options.playbackRates);
        if (options.experimentalSvgIcons) {
            // Add SVG Sprite to the DOM
            const parser = new (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).DOMParser();
            const parsedSVG = parser.parseFromString($e88cd91ee18355c1$var$icons, "image/svg+xml");
            const errorNode = parsedSVG.querySelector("parsererror");
            if (errorNode) {
                $e88cd91ee18355c1$var$log$1.warn("Failed to load SVG Icons. Falling back to Font Icons.");
                this.options_.experimentalSvgIcons = null;
            } else {
                const sprite = parsedSVG.documentElement;
                sprite.style.display = "none";
                this.el_.appendChild(sprite);
                this.addClass("vjs-svg-icons-enabled");
            }
        }
        this.initChildren();
        // Set isAudio based on whether or not an audio tag was used
        this.isAudio(tag.nodeName.toLowerCase() === "audio");
        // Update controls className. Can't do this when the controls are initially
        // set because the element doesn't exist yet.
        if (this.controls()) this.addClass("vjs-controls-enabled");
        else this.addClass("vjs-controls-disabled");
        // Set ARIA label and region role depending on player type
        this.el_.setAttribute("role", "region");
        if (this.isAudio()) this.el_.setAttribute("aria-label", this.localize("Audio Player"));
        else this.el_.setAttribute("aria-label", this.localize("Video Player"));
        if (this.isAudio()) this.addClass("vjs-audio");
        // TODO: Make this smarter. Toggle user state between touching/mousing
        // using events, since devices can have both touch and mouse events.
        // TODO: Make this check be performed again when the window switches between monitors
        // (See https://github.com/videojs/video.js/issues/5683)
        if ($e88cd91ee18355c1$var$TOUCH_ENABLED) this.addClass("vjs-touch-enabled");
        // iOS Safari has broken hover handling
        if (!$e88cd91ee18355c1$var$IS_IOS) this.addClass("vjs-workinghover");
        // Make player easily findable by ID
        $e88cd91ee18355c1$var$Player.players[this.id_] = this;
        // Add a major version class to aid css in plugins
        const majorVersion = $e88cd91ee18355c1$var$version$6.split(".")[0];
        this.addClass(`vjs-v${majorVersion}`);
        // When the player is first initialized, trigger activity so components
        // like the control bar show themselves if needed
        this.userActive(true);
        this.reportUserActivity();
        this.one("play", (e)=>this.listenForUserActivity_(e));
        this.on("keydown", (e)=>this.handleKeyDown(e));
        this.on("languagechange", (e)=>this.handleLanguagechange(e));
        this.breakpoints(this.options_.breakpoints);
        this.responsive(this.options_.responsive);
        // Calling both the audio mode methods after the player is fully
        // setup to be able to listen to the events triggered by them
        this.on("ready", ()=>{
            // Calling the audioPosterMode method first so that
            // the audioOnlyMode can take precedence when both options are set to true
            this.audioPosterMode(this.options_.audioPosterMode);
            this.audioOnlyMode(this.options_.audioOnlyMode);
        });
    }
    /**
   * Destroys the video player and does any necessary cleanup.
   *
   * This is especially helpful if you are dynamically adding and removing videos
   * to/from the DOM.
   *
   * @fires Player#dispose
   */ dispose() {
        /**
     * Called when the player is being disposed of.
     *
     * @event Player#dispose
     * @type {Event}
     */ this.trigger("dispose");
        // prevent dispose from being called twice
        this.off("dispose");
        // Make sure all player-specific document listeners are unbound. This is
        $e88cd91ee18355c1$var$off((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))), this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);
        $e88cd91ee18355c1$var$off((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))), "keydown", this.boundFullWindowOnEscKey_);
        if (this.styleEl_ && this.styleEl_.parentNode) {
            this.styleEl_.parentNode.removeChild(this.styleEl_);
            this.styleEl_ = null;
        }
        // Kill reference to this player
        $e88cd91ee18355c1$var$Player.players[this.id_] = null;
        if (this.tag && this.tag.player) this.tag.player = null;
        if (this.el_ && this.el_.player) this.el_.player = null;
        if (this.tech_) {
            this.tech_.dispose();
            this.isPosterFromTech_ = false;
            this.poster_ = "";
        }
        if (this.playerElIngest_) this.playerElIngest_ = null;
        if (this.tag) this.tag = null;
        $e88cd91ee18355c1$var$clearCacheForPlayer(this);
        // remove all event handlers for track lists
        // all tracks and track listeners are removed on
        // tech dispose
        $e88cd91ee18355c1$var$ALL.names.forEach((name)=>{
            const props = $e88cd91ee18355c1$var$ALL[name];
            const list = this[props.getterName]();
            // if it is not a native list
            // we have to manually remove event listeners
            if (list && list.off) list.off();
        });
        // the actual .el_ is removed here, or replaced if
        super.dispose({
            restoreEl: this.options_.restoreEl
        });
    }
    /**
   * Create the `Player`'s DOM element.
   *
   * @return {Element}
   *         The DOM element that gets created.
   */ createEl() {
        let tag = this.tag;
        let el;
        let playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute("data-vjs-player");
        const divEmbed = this.tag.tagName.toLowerCase() === "video-js";
        if (playerElIngest) el = this.el_ = tag.parentNode;
        else if (!divEmbed) el = this.el_ = super.createEl("div");
        // Copy over all the attributes from the tag, including ID and class
        // ID will now reference player box, not the video tag
        const attrs = $e88cd91ee18355c1$var$getAttributes(tag);
        if (divEmbed) {
            el = this.el_ = tag;
            tag = this.tag = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("video");
            while(el.children.length)tag.appendChild(el.firstChild);
            if (!$e88cd91ee18355c1$var$hasClass(el, "video-js")) $e88cd91ee18355c1$var$addClass(el, "video-js");
            el.appendChild(tag);
            playerElIngest = this.playerElIngest_ = el;
            // move properties over from our custom `video-js` element
            // to our new `video` element. This will move things like
            // `src` or `controls` that were set via js before the player
            // was initialized.
            Object.keys(el).forEach((k)=>{
                try {
                    tag[k] = el[k];
                } catch (e) {
                // we got a a property like outerHTML which we can't actually copy, ignore it
                }
            });
        }
        // set tabindex to -1 to remove the video element from the focus order
        tag.setAttribute("tabindex", "-1");
        attrs.tabindex = "-1";
        // Workaround for #4583 on Chrome (on Windows) with JAWS.
        // See https://github.com/FreedomScientific/VFO-standards-support/issues/78
        // Note that we can't detect if JAWS is being used, but this ARIA attribute
        // doesn't change behavior of Chrome if JAWS is not being used
        if ($e88cd91ee18355c1$var$IS_CHROME && $e88cd91ee18355c1$var$IS_WINDOWS) {
            tag.setAttribute("role", "application");
            attrs.role = "application";
        }
        // Remove width/height attrs from tag so CSS can make it 100% width/height
        tag.removeAttribute("width");
        tag.removeAttribute("height");
        if ("width" in attrs) delete attrs.width;
        if ("height" in attrs) delete attrs.height;
        Object.getOwnPropertyNames(attrs).forEach(function(attr) {
            // don't copy over the class attribute to the player element when we're in a div embed
            // the class is already set up properly in the divEmbed case
            // and we want to make sure that the `video-js` class doesn't get lost
            if (!(divEmbed && attr === "class")) el.setAttribute(attr, attrs[attr]);
            if (divEmbed) tag.setAttribute(attr, attrs[attr]);
        });
        // Update tag id/class for use as HTML5 playback tech
        // Might think we should do this after embedding in container so .vjs-tech class
        // doesn't flash 100% width/height, but class only applies with .video-js parent
        tag.playerId = tag.id;
        tag.id += "_html5_api";
        tag.className = "vjs-tech";
        // Make player findable on elements
        tag.player = el.player = this;
        // Default state of video is paused
        this.addClass("vjs-paused");
        // Add a style element in the player that we'll use to set the width/height
        // of the player in a way that's still overridable by CSS, just like the
        // video element
        if ((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).VIDEOJS_NO_DYNAMIC_STYLE !== true) {
            this.styleEl_ = $e88cd91ee18355c1$var$createStyleElement("vjs-styles-dimensions");
            const defaultsStyleEl = $e88cd91ee18355c1$var$$(".vjs-styles-defaults");
            const head = $e88cd91ee18355c1$var$$("head");
            head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);
        }
        this.fill_ = false;
        this.fluid_ = false;
        // Pass in the width/height/aspectRatio options which will update the style el
        this.width(this.options_.width);
        this.height(this.options_.height);
        this.fill(this.options_.fill);
        this.fluid(this.options_.fluid);
        this.aspectRatio(this.options_.aspectRatio);
        // support both crossOrigin and crossorigin to reduce confusion and issues around the name
        this.crossOrigin(this.options_.crossOrigin || this.options_.crossorigin);
        // Hide any links within the video/audio tag,
        // because IE doesn't hide them completely from screen readers.
        const links = tag.getElementsByTagName("a");
        for(let i = 0; i < links.length; i++){
            const linkEl = links.item(i);
            $e88cd91ee18355c1$var$addClass(linkEl, "vjs-hidden");
            linkEl.setAttribute("hidden", "hidden");
        }
        // insertElFirst seems to cause the networkState to flicker from 3 to 2, so
        // keep track of the original for later so we can know if the source originally failed
        tag.initNetworkState_ = tag.networkState;
        // Wrap video tag in div (el/box) container
        if (tag.parentNode && !playerElIngest) tag.parentNode.insertBefore(el, tag);
        // insert the tag as the first child of the player element
        // then manually add it to the children array so that this.addChild
        // will work properly for other components
        //
        // Breaks iPhone, fixed in HTML5 setup.
        $e88cd91ee18355c1$var$prependTo(tag, el);
        this.children_.unshift(tag);
        // Set lang attr on player to ensure CSS :lang() in consistent with player
        // if it's been set to something different to the doc
        this.el_.setAttribute("lang", this.language_);
        this.el_.setAttribute("translate", "no");
        this.el_ = el;
        return el;
    }
    /**
   * Get or set the `Player`'s crossOrigin option. For the HTML5 player, this
   * sets the `crossOrigin` property on the `<video>` tag to control the CORS
   * behavior.
   *
   * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}
   *
   * @param {string|null} [value]
   *        The value to set the `Player`'s crossOrigin to. If an argument is
   *        given, must be one of `'anonymous'` or `'use-credentials'`, or 'null'.
   *
   * @return {string|null|undefined}
   *         - The current crossOrigin value of the `Player` when getting.
   *         - undefined when setting
   */ crossOrigin(value) {
        // `null` can be set to unset a value
        if (typeof value === "undefined") return this.techGet_("crossOrigin");
        if (value !== null && value !== "anonymous" && value !== "use-credentials") {
            $e88cd91ee18355c1$var$log$1.warn(`crossOrigin must be null,  "anonymous" or "use-credentials", given "${value}"`);
            return;
        }
        this.techCall_("setCrossOrigin", value);
        if (this.posterImage) this.posterImage.crossOrigin(value);
        return;
    }
    /**
   * A getter/setter for the `Player`'s width. Returns the player's configured value.
   * To get the current width use `currentWidth()`.
   *
   * @param {number|string} [value]
   *        CSS value to set the `Player`'s width to.
   *
   * @return {number|undefined}
   *         - The current width of the `Player` when getting.
   *         - Nothing when setting
   */ width(value) {
        return this.dimension("width", value);
    }
    /**
   * A getter/setter for the `Player`'s height. Returns the player's configured value.
   * To get the current height use `currentheight()`.
   *
   * @param {number|string} [value]
   *        CSS value to set the `Player`'s height to.
   *
   * @return {number|undefined}
   *         - The current height of the `Player` when getting.
   *         - Nothing when setting
   */ height(value) {
        return this.dimension("height", value);
    }
    /**
   * A getter/setter for the `Player`'s width & height.
   *
   * @param {string} dimension
   *        This string can be:
   *        - 'width'
   *        - 'height'
   *
   * @param {number|string} [value]
   *        Value for dimension specified in the first argument.
   *
   * @return {number}
   *         The dimension arguments value when getting (width/height).
   */ dimension(dimension, value) {
        const privDimension = dimension + "_";
        if (value === undefined) return this[privDimension] || 0;
        if (value === "" || value === "auto") {
            // If an empty string is given, reset the dimension to be automatic
            this[privDimension] = undefined;
            this.updateStyleEl_();
            return;
        }
        const parsedVal = parseFloat(value);
        if (isNaN(parsedVal)) {
            $e88cd91ee18355c1$var$log$1.error(`Improper value "${value}" supplied for for ${dimension}`);
            return;
        }
        this[privDimension] = parsedVal;
        this.updateStyleEl_();
    }
    /**
   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.
   *
   * Turning this on will turn off fill mode.
   *
   * @param {boolean} [bool]
   *        - A value of true adds the class.
   *        - A value of false removes the class.
   *        - No value will be a getter.
   *
   * @return {boolean|undefined}
   *         - The value of fluid when getting.
   *         - `undefined` when setting.
   */ fluid(bool) {
        if (bool === undefined) return !!this.fluid_;
        this.fluid_ = !!bool;
        if ($e88cd91ee18355c1$var$isEvented(this)) this.off([
            "playerreset",
            "resize"
        ], this.boundUpdateStyleEl_);
        if (bool) {
            this.addClass("vjs-fluid");
            this.fill(false);
            $e88cd91ee18355c1$var$addEventedCallback(this, ()=>{
                this.on([
                    "playerreset",
                    "resize"
                ], this.boundUpdateStyleEl_);
            });
        } else this.removeClass("vjs-fluid");
        this.updateStyleEl_();
    }
    /**
   * A getter/setter/toggler for the vjs-fill `className` on the `Player`.
   *
   * Turning this on will turn off fluid mode.
   *
   * @param {boolean} [bool]
   *        - A value of true adds the class.
   *        - A value of false removes the class.
   *        - No value will be a getter.
   *
   * @return {boolean|undefined}
   *         - The value of fluid when getting.
   *         - `undefined` when setting.
   */ fill(bool) {
        if (bool === undefined) return !!this.fill_;
        this.fill_ = !!bool;
        if (bool) {
            this.addClass("vjs-fill");
            this.fluid(false);
        } else this.removeClass("vjs-fill");
    }
    /**
   * Get/Set the aspect ratio
   *
   * @param {string} [ratio]
   *        Aspect ratio for player
   *
   * @return {string|undefined}
   *         returns the current aspect ratio when getting
   */ /**
   * A getter/setter for the `Player`'s aspect ratio.
   *
   * @param {string} [ratio]
   *        The value to set the `Player`'s aspect ratio to.
   *
   * @return {string|undefined}
   *         - The current aspect ratio of the `Player` when getting.
   *         - undefined when setting
   */ aspectRatio(ratio) {
        if (ratio === undefined) return this.aspectRatio_;
        // Check for width:height format
        if (!/^\d+\:\d+$/.test(ratio)) throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");
        this.aspectRatio_ = ratio;
        // We're assuming if you set an aspect ratio you want fluid mode,
        // because in fixed mode you could calculate width and height yourself.
        this.fluid(true);
        this.updateStyleEl_();
    }
    /**
   * Update styles of the `Player` element (height, width and aspect ratio).
   *
   * @private
   * @listens Tech#loadedmetadata
   */ updateStyleEl_() {
        if ((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).VIDEOJS_NO_DYNAMIC_STYLE === true) {
            const width = typeof this.width_ === "number" ? this.width_ : this.options_.width;
            const height = typeof this.height_ === "number" ? this.height_ : this.options_.height;
            const techEl = this.tech_ && this.tech_.el();
            if (techEl) {
                if (width >= 0) techEl.width = width;
                if (height >= 0) techEl.height = height;
            }
            return;
        }
        let width;
        let height;
        let aspectRatio;
        let idClass;
        // The aspect ratio is either used directly or to calculate width and height.
        if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== "auto") // Use any aspectRatio that's been specifically set
        aspectRatio = this.aspectRatio_;
        else if (this.videoWidth() > 0) // Otherwise try to get the aspect ratio from the video metadata
        aspectRatio = this.videoWidth() + ":" + this.videoHeight();
        else // Or use a default. The video element's is 2:1, but 16:9 is more common.
        aspectRatio = "16:9";
        // Get the ratio as a decimal we can use to calculate dimensions
        const ratioParts = aspectRatio.split(":");
        const ratioMultiplier = ratioParts[1] / ratioParts[0];
        if (this.width_ !== undefined) // Use any width that's been specifically set
        width = this.width_;
        else if (this.height_ !== undefined) // Or calculate the width from the aspect ratio if a height has been set
        width = this.height_ / ratioMultiplier;
        else // Or use the video's metadata, or use the video el's default of 300
        width = this.videoWidth() || 300;
        if (this.height_ !== undefined) // Use any height that's been specifically set
        height = this.height_;
        else // Otherwise calculate the height from the ratio and the width
        height = width * ratioMultiplier;
        // Ensure the CSS class is valid by starting with an alpha character
        if (/^[^a-zA-Z]/.test(this.id())) idClass = "dimensions-" + this.id();
        else idClass = this.id() + "-dimensions";
        // Ensure the right class is still on the player for the style element
        this.addClass(idClass);
        $e88cd91ee18355c1$var$setTextContent(this.styleEl_, `
      .${idClass} {
        width: ${width}px;
        height: ${height}px;
      }

      .${idClass}.vjs-fluid:not(.vjs-audio-only-mode) {
        padding-top: ${ratioMultiplier * 100}%;
      }
    `);
    }
    /**
   * Load/Create an instance of playback {@link Tech} including element
   * and API methods. Then append the `Tech` element in `Player` as a child.
   *
   * @param {string} techName
   *        name of the playback technology
   *
   * @param {string} source
   *        video source
   *
   * @private
   */ loadTech_(techName, source) {
        // Pause and remove current playback technology
        if (this.tech_) this.unloadTech_();
        const titleTechName = $e88cd91ee18355c1$var$toTitleCase$1(techName);
        const camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1);
        // get rid of the HTML5 video tag as soon as we are using another tech
        if (titleTechName !== "Html5" && this.tag) {
            $e88cd91ee18355c1$var$Tech.getTech("Html5").disposeMediaElement(this.tag);
            this.tag.player = null;
            this.tag = null;
        }
        this.techName_ = titleTechName;
        // Turn off API access because we're loading a new tech that might load asynchronously
        this.isReady_ = false;
        let autoplay = this.autoplay();
        // if autoplay is a string (or `true` with normalizeAutoplay: true) we pass false to the tech
        // because the player is going to handle autoplay on `loadstart`
        if (typeof this.autoplay() === "string" || this.autoplay() === true && this.options_.normalizeAutoplay) autoplay = false;
        // Grab tech-specific options from player options and add source and parent element to use.
        const techOptions = {
            source: source,
            autoplay: autoplay,
            "nativeControlsForTouch": this.options_.nativeControlsForTouch,
            "playerId": this.id(),
            "techId": `${this.id()}_${camelTechName}_api`,
            "playsinline": this.options_.playsinline,
            "preload": this.options_.preload,
            "loop": this.options_.loop,
            "disablePictureInPicture": this.options_.disablePictureInPicture,
            "muted": this.options_.muted,
            "poster": this.poster(),
            "language": this.language(),
            "playerElIngest": this.playerElIngest_ || false,
            "vtt.js": this.options_["vtt.js"],
            "canOverridePoster": !!this.options_.techCanOverridePoster,
            "enableSourceset": this.options_.enableSourceset
        };
        $e88cd91ee18355c1$var$ALL.names.forEach((name)=>{
            const props = $e88cd91ee18355c1$var$ALL[name];
            techOptions[props.getterName] = this[props.privateName];
        });
        Object.assign(techOptions, this.options_[titleTechName]);
        Object.assign(techOptions, this.options_[camelTechName]);
        Object.assign(techOptions, this.options_[techName.toLowerCase()]);
        if (this.tag) techOptions.tag = this.tag;
        if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) techOptions.startTime = this.cache_.currentTime;
        // Initialize tech instance
        const TechClass = $e88cd91ee18355c1$var$Tech.getTech(techName);
        if (!TechClass) throw new Error(`No Tech named '${titleTechName}' exists! '${titleTechName}' should be registered using videojs.registerTech()'`);
        this.tech_ = new TechClass(techOptions);
        // player.triggerReady is always async, so don't need this to be async
        this.tech_.ready($e88cd91ee18355c1$var$bind_(this, this.handleTechReady_), true);
        $e88cd91ee18355c1$var$textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);
        // Listen to all HTML5-defined events and trigger them on the player
        $e88cd91ee18355c1$var$TECH_EVENTS_RETRIGGER.forEach((event)=>{
            this.on(this.tech_, event, (e)=>this[`handleTech${$e88cd91ee18355c1$var$toTitleCase$1(event)}_`](e));
        });
        Object.keys($e88cd91ee18355c1$var$TECH_EVENTS_QUEUE).forEach((event)=>{
            this.on(this.tech_, event, (eventObj)=>{
                if (this.tech_.playbackRate() === 0 && this.tech_.seeking()) {
                    this.queuedCallbacks_.push({
                        callback: this[`handleTech${$e88cd91ee18355c1$var$TECH_EVENTS_QUEUE[event]}_`].bind(this),
                        event: eventObj
                    });
                    return;
                }
                this[`handleTech${$e88cd91ee18355c1$var$TECH_EVENTS_QUEUE[event]}_`](eventObj);
            });
        });
        this.on(this.tech_, "loadstart", (e)=>this.handleTechLoadStart_(e));
        this.on(this.tech_, "sourceset", (e)=>this.handleTechSourceset_(e));
        this.on(this.tech_, "waiting", (e)=>this.handleTechWaiting_(e));
        this.on(this.tech_, "ended", (e)=>this.handleTechEnded_(e));
        this.on(this.tech_, "seeking", (e)=>this.handleTechSeeking_(e));
        this.on(this.tech_, "play", (e)=>this.handleTechPlay_(e));
        this.on(this.tech_, "pause", (e)=>this.handleTechPause_(e));
        this.on(this.tech_, "durationchange", (e)=>this.handleTechDurationChange_(e));
        this.on(this.tech_, "fullscreenchange", (e, data)=>this.handleTechFullscreenChange_(e, data));
        this.on(this.tech_, "fullscreenerror", (e, err)=>this.handleTechFullscreenError_(e, err));
        this.on(this.tech_, "enterpictureinpicture", (e)=>this.handleTechEnterPictureInPicture_(e));
        this.on(this.tech_, "leavepictureinpicture", (e)=>this.handleTechLeavePictureInPicture_(e));
        this.on(this.tech_, "error", (e)=>this.handleTechError_(e));
        this.on(this.tech_, "posterchange", (e)=>this.handleTechPosterChange_(e));
        this.on(this.tech_, "textdata", (e)=>this.handleTechTextData_(e));
        this.on(this.tech_, "ratechange", (e)=>this.handleTechRateChange_(e));
        this.on(this.tech_, "loadedmetadata", this.boundUpdateStyleEl_);
        this.usingNativeControls(this.techGet_("controls"));
        if (this.controls() && !this.usingNativeControls()) this.addTechControlsListeners_();
        // Add the tech element in the DOM if it was not already there
        // Make sure to not insert the original video element if using Html5
        if (this.tech_.el().parentNode !== this.el() && (titleTechName !== "Html5" || !this.tag)) $e88cd91ee18355c1$var$prependTo(this.tech_.el(), this.el());
        // Get rid of the original video tag reference after the first tech is loaded
        if (this.tag) {
            this.tag.player = null;
            this.tag = null;
        }
    }
    /**
   * Unload and dispose of the current playback {@link Tech}.
   *
   * @private
   */ unloadTech_() {
        // Save the current text tracks so that we can reuse the same text tracks with the next tech
        $e88cd91ee18355c1$var$ALL.names.forEach((name)=>{
            const props = $e88cd91ee18355c1$var$ALL[name];
            this[props.privateName] = this[props.getterName]();
        });
        this.textTracksJson_ = $e88cd91ee18355c1$var$textTrackConverter.textTracksToJson(this.tech_);
        this.isReady_ = false;
        this.tech_.dispose();
        this.tech_ = false;
        if (this.isPosterFromTech_) {
            this.poster_ = "";
            this.trigger("posterchange");
        }
        this.isPosterFromTech_ = false;
    }
    /**
   * Return a reference to the current {@link Tech}.
   * It will print a warning by default about the danger of using the tech directly
   * but any argument that is passed in will silence the warning.
   *
   * @param {*} [safety]
   *        Anything passed in to silence the warning
   *
   * @return {Tech}
   *         The Tech
   */ tech(safety) {
        if (safety === undefined) $e88cd91ee18355c1$var$log$1.warn("Using the tech directly can be dangerous. I hope you know what you're doing.\nSee https://github.com/videojs/video.js/issues/2617 for more info.\n");
        return this.tech_;
    }
    /**
   * Set up click and touch listeners for the playback element
   *
   * - On desktops: a click on the video itself will toggle playback
   * - On mobile devices: a click on the video toggles controls
   *   which is done by toggling the user state between active and
   *   inactive
   * - A tap can signal that a user has become active or has become inactive
   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another
   *   quick tap should hide them again (signaling the user is in an inactive
   *   viewing state)
   * - In addition to this, we still want the user to be considered inactive after
   *   a few seconds of inactivity.
   *
   * > Note: the only part of iOS interaction we can't mimic with this setup
   * is a touch and hold on the video element counting as activity in order to
   * keep the controls showing, but that shouldn't be an issue. A touch and hold
   * on any controls will still keep the user active
   *
   * @private
   */ addTechControlsListeners_() {
        // Make sure to remove all the previous listeners in case we are called multiple times.
        this.removeTechControlsListeners_();
        this.on(this.tech_, "click", this.boundHandleTechClick_);
        this.on(this.tech_, "dblclick", this.boundHandleTechDoubleClick_);
        // If the controls were hidden we don't want that to change without a tap event
        // so we'll check if the controls were already showing before reporting user
        // activity
        this.on(this.tech_, "touchstart", this.boundHandleTechTouchStart_);
        this.on(this.tech_, "touchmove", this.boundHandleTechTouchMove_);
        this.on(this.tech_, "touchend", this.boundHandleTechTouchEnd_);
        // The tap listener needs to come after the touchend listener because the tap
        // listener cancels out any reportedUserActivity when setting userActive(false)
        this.on(this.tech_, "tap", this.boundHandleTechTap_);
    }
    /**
   * Remove the listeners used for click and tap controls. This is needed for
   * toggling to controls disabled, where a tap/touch should do nothing.
   *
   * @private
   */ removeTechControlsListeners_() {
        // We don't want to just use `this.off()` because there might be other needed
        // listeners added by techs that extend this.
        this.off(this.tech_, "tap", this.boundHandleTechTap_);
        this.off(this.tech_, "touchstart", this.boundHandleTechTouchStart_);
        this.off(this.tech_, "touchmove", this.boundHandleTechTouchMove_);
        this.off(this.tech_, "touchend", this.boundHandleTechTouchEnd_);
        this.off(this.tech_, "click", this.boundHandleTechClick_);
        this.off(this.tech_, "dblclick", this.boundHandleTechDoubleClick_);
    }
    /**
   * Player waits for the tech to be ready
   *
   * @private
   */ handleTechReady_() {
        this.triggerReady();
        // Keep the same volume as before
        if (this.cache_.volume) this.techCall_("setVolume", this.cache_.volume);
        // Look if the tech found a higher resolution poster while loading
        this.handleTechPosterChange_();
        // Update the duration if available
        this.handleTechDurationChange_();
    }
    /**
   * Retrigger the `loadstart` event that was triggered by the {@link Tech}.
   *
   * @fires Player#loadstart
   * @listens Tech#loadstart
   * @private
   */ handleTechLoadStart_() {
        // TODO: Update to use `emptied` event instead. See #1277.
        this.removeClass("vjs-ended", "vjs-seeking");
        // reset the error state
        this.error(null);
        // Update the duration
        this.handleTechDurationChange_();
        if (!this.paused()) /**
       * Fired when the user agent begins looking for media data
       *
       * @event Player#loadstart
       * @type {Event}
       */ this.trigger("loadstart");
        else {
            // reset the hasStarted state
            this.hasStarted(false);
            this.trigger("loadstart");
        }
        // autoplay happens after loadstart for the browser,
        // so we mimic that behavior
        this.manualAutoplay_(this.autoplay() === true && this.options_.normalizeAutoplay ? "play" : this.autoplay());
    }
    /**
   * Handle autoplay string values, rather than the typical boolean
   * values that should be handled by the tech. Note that this is not
   * part of any specification. Valid values and what they do can be
   * found on the autoplay getter at Player#autoplay()
   */ manualAutoplay_(type) {
        if (!this.tech_ || typeof type !== "string") return;
        // Save original muted() value, set muted to true, and attempt to play().
        // On promise rejection, restore muted from saved value
        const resolveMuted = ()=>{
            const previouslyMuted = this.muted();
            this.muted(true);
            const restoreMuted = ()=>{
                this.muted(previouslyMuted);
            };
            // restore muted on play terminatation
            this.playTerminatedQueue_.push(restoreMuted);
            const mutedPromise = this.play();
            if (!$e88cd91ee18355c1$var$isPromise(mutedPromise)) return;
            return mutedPromise.catch((err)=>{
                restoreMuted();
                throw new Error(`Rejection at manualAutoplay. Restoring muted value. ${err ? err : ""}`);
            });
        };
        let promise;
        // if muted defaults to true
        // the only thing we can do is call play
        if (type === "any" && !this.muted()) {
            promise = this.play();
            if ($e88cd91ee18355c1$var$isPromise(promise)) promise = promise.catch(resolveMuted);
        } else if (type === "muted" && !this.muted()) promise = resolveMuted();
        else promise = this.play();
        if (!$e88cd91ee18355c1$var$isPromise(promise)) return;
        return promise.then(()=>{
            this.trigger({
                type: "autoplay-success",
                autoplay: type
            });
        }).catch(()=>{
            this.trigger({
                type: "autoplay-failure",
                autoplay: type
            });
        });
    }
    /**
   * Update the internal source caches so that we return the correct source from
   * `src()`, `currentSource()`, and `currentSources()`.
   *
   * > Note: `currentSources` will not be updated if the source that is passed in exists
   *         in the current `currentSources` cache.
   *
   *
   * @param {Tech~SourceObject} srcObj
   *        A string or object source to update our caches to.
   */ updateSourceCaches_(srcObj = "") {
        let src = srcObj;
        let type = "";
        if (typeof src !== "string") {
            src = srcObj.src;
            type = srcObj.type;
        }
        // make sure all the caches are set to default values
        // to prevent null checking
        this.cache_.source = this.cache_.source || {};
        this.cache_.sources = this.cache_.sources || [];
        // try to get the type of the src that was passed in
        if (src && !type) type = $e88cd91ee18355c1$var$findMimetype(this, src);
        // update `currentSource` cache always
        this.cache_.source = $e88cd91ee18355c1$var$merge$1({}, srcObj, {
            src: src,
            type: type
        });
        const matchingSources = this.cache_.sources.filter((s)=>s.src && s.src === src);
        const sourceElSources = [];
        const sourceEls = this.$$("source");
        const matchingSourceEls = [];
        for(let i = 0; i < sourceEls.length; i++){
            const sourceObj = $e88cd91ee18355c1$var$getAttributes(sourceEls[i]);
            sourceElSources.push(sourceObj);
            if (sourceObj.src && sourceObj.src === src) matchingSourceEls.push(sourceObj.src);
        }
        // if we have matching source els but not matching sources
        // the current source cache is not up to date
        if (matchingSourceEls.length && !matchingSources.length) this.cache_.sources = sourceElSources;
        else if (!matchingSources.length) this.cache_.sources = [
            this.cache_.source
        ];
        // update the tech `src` cache
        this.cache_.src = src;
    }
    /**
   * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}
   * causing the media element to reload.
   *
   * It will fire for the initial source and each subsequent source.
   * This event is a custom event from Video.js and is triggered by the {@link Tech}.
   *
   * The event object for this event contains a `src` property that will contain the source
   * that was available when the event was triggered. This is generally only necessary if Video.js
   * is switching techs while the source was being changed.
   *
   * It is also fired when `load` is called on the player (or media element)
   * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}
   * says that the resource selection algorithm needs to be aborted and restarted.
   * In this case, it is very likely that the `src` property will be set to the
   * empty string `""` to indicate we do not know what the source will be but
   * that it is changing.
   *
   * *This event is currently still experimental and may change in minor releases.*
   * __To use this, pass `enableSourceset` option to the player.__
   *
   * @event Player#sourceset
   * @type {Event}
   * @prop {string} src
   *                The source url available when the `sourceset` was triggered.
   *                It will be an empty string if we cannot know what the source is
   *                but know that the source will change.
   */ /**
   * Retrigger the `sourceset` event that was triggered by the {@link Tech}.
   *
   * @fires Player#sourceset
   * @listens Tech#sourceset
   * @private
   */ handleTechSourceset_(event) {
        // only update the source cache when the source
        // was not updated using the player api
        if (!this.changingSrc_) {
            let updateSourceCaches = (src)=>this.updateSourceCaches_(src);
            const playerSrc = this.currentSource().src;
            const eventSrc = event.src;
            // if we have a playerSrc that is not a blob, and a tech src that is a blob
            if (playerSrc && !/^blob:/.test(playerSrc) && /^blob:/.test(eventSrc)) // if both the tech source and the player source were updated we assume
            // something like @videojs/http-streaming did the sourceset and skip updating the source cache.
            {
                if (!this.lastSource_ || this.lastSource_.tech !== eventSrc && this.lastSource_.player !== playerSrc) updateSourceCaches = ()=>{};
            }
            // update the source to the initial source right away
            // in some cases this will be empty string
            updateSourceCaches(eventSrc);
            // if the `sourceset` `src` was an empty string
            // wait for a `loadstart` to update the cache to `currentSrc`.
            // If a sourceset happens before a `loadstart`, we reset the state
            if (!event.src) this.tech_.any([
                "sourceset",
                "loadstart"
            ], (e)=>{
                // if a sourceset happens before a `loadstart` there
                // is nothing to do as this `handleTechSourceset_`
                // will be called again and this will be handled there.
                if (e.type === "sourceset") return;
                const techSrc = this.techGet_("currentSrc");
                this.lastSource_.tech = techSrc;
                this.updateSourceCaches_(techSrc);
            });
        }
        this.lastSource_ = {
            player: this.currentSource().src,
            tech: event.src
        };
        this.trigger({
            src: event.src,
            type: "sourceset"
        });
    }
    /**
   * Add/remove the vjs-has-started class
   *
   *
   * @param {boolean} request
   *        - true: adds the class
   *        - false: remove the class
   *
   * @return {boolean}
   *         the boolean value of hasStarted_
   */ hasStarted(request) {
        if (request === undefined) // act as getter, if we have no request to change
        return this.hasStarted_;
        if (request === this.hasStarted_) return;
        this.hasStarted_ = request;
        if (this.hasStarted_) this.addClass("vjs-has-started");
        else this.removeClass("vjs-has-started");
    }
    /**
   * Fired whenever the media begins or resumes playback
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}
   * @fires Player#play
   * @listens Tech#play
   * @private
   */ handleTechPlay_() {
        this.removeClass("vjs-ended", "vjs-paused");
        this.addClass("vjs-playing");
        // hide the poster when the user hits play
        this.hasStarted(true);
        /**
     * Triggered whenever an {@link Tech#play} event happens. Indicates that
     * playback has started or resumed.
     *
     * @event Player#play
     * @type {Event}
     */ this.trigger("play");
    }
    /**
   * Retrigger the `ratechange` event that was triggered by the {@link Tech}.
   *
   * If there were any events queued while the playback rate was zero, fire
   * those events now.
   *
   * @private
   * @method Player#handleTechRateChange_
   * @fires Player#ratechange
   * @listens Tech#ratechange
   */ handleTechRateChange_() {
        if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {
            this.queuedCallbacks_.forEach((queued)=>queued.callback(queued.event));
            this.queuedCallbacks_ = [];
        }
        this.cache_.lastPlaybackRate = this.tech_.playbackRate();
        /**
     * Fires when the playing speed of the audio/video is changed
     *
     * @event Player#ratechange
     * @type {event}
     */ this.trigger("ratechange");
    }
    /**
   * Retrigger the `waiting` event that was triggered by the {@link Tech}.
   *
   * @fires Player#waiting
   * @listens Tech#waiting
   * @private
   */ handleTechWaiting_() {
        this.addClass("vjs-waiting");
        /**
     * A readyState change on the DOM element has caused playback to stop.
     *
     * @event Player#waiting
     * @type {Event}
     */ this.trigger("waiting");
        // Browsers may emit a timeupdate event after a waiting event. In order to prevent
        // premature removal of the waiting class, wait for the time to change.
        const timeWhenWaiting = this.currentTime();
        const timeUpdateListener = ()=>{
            if (timeWhenWaiting !== this.currentTime()) {
                this.removeClass("vjs-waiting");
                this.off("timeupdate", timeUpdateListener);
            }
        };
        this.on("timeupdate", timeUpdateListener);
    }
    /**
   * Retrigger the `canplay` event that was triggered by the {@link Tech}.
   * > Note: This is not consistent between browsers. See #1351
   *
   * @fires Player#canplay
   * @listens Tech#canplay
   * @private
   */ handleTechCanPlay_() {
        this.removeClass("vjs-waiting");
        /**
     * The media has a readyState of HAVE_FUTURE_DATA or greater.
     *
     * @event Player#canplay
     * @type {Event}
     */ this.trigger("canplay");
    }
    /**
   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.
   *
   * @fires Player#canplaythrough
   * @listens Tech#canplaythrough
   * @private
   */ handleTechCanPlayThrough_() {
        this.removeClass("vjs-waiting");
        /**
     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the
     * entire media file can be played without buffering.
     *
     * @event Player#canplaythrough
     * @type {Event}
     */ this.trigger("canplaythrough");
    }
    /**
   * Retrigger the `playing` event that was triggered by the {@link Tech}.
   *
   * @fires Player#playing
   * @listens Tech#playing
   * @private
   */ handleTechPlaying_() {
        this.removeClass("vjs-waiting");
        /**
     * The media is no longer blocked from playback, and has started playing.
     *
     * @event Player#playing
     * @type {Event}
     */ this.trigger("playing");
    }
    /**
   * Retrigger the `seeking` event that was triggered by the {@link Tech}.
   *
   * @fires Player#seeking
   * @listens Tech#seeking
   * @private
   */ handleTechSeeking_() {
        this.addClass("vjs-seeking");
        /**
     * Fired whenever the player is jumping to a new time
     *
     * @event Player#seeking
     * @type {Event}
     */ this.trigger("seeking");
    }
    /**
   * Retrigger the `seeked` event that was triggered by the {@link Tech}.
   *
   * @fires Player#seeked
   * @listens Tech#seeked
   * @private
   */ handleTechSeeked_() {
        this.removeClass("vjs-seeking", "vjs-ended");
        /**
     * Fired when the player has finished jumping to a new time
     *
     * @event Player#seeked
     * @type {Event}
     */ this.trigger("seeked");
    }
    /**
   * Retrigger the `pause` event that was triggered by the {@link Tech}.
   *
   * @fires Player#pause
   * @listens Tech#pause
   * @private
   */ handleTechPause_() {
        this.removeClass("vjs-playing");
        this.addClass("vjs-paused");
        /**
     * Fired whenever the media has been paused
     *
     * @event Player#pause
     * @type {Event}
     */ this.trigger("pause");
    }
    /**
   * Retrigger the `ended` event that was triggered by the {@link Tech}.
   *
   * @fires Player#ended
   * @listens Tech#ended
   * @private
   */ handleTechEnded_() {
        this.addClass("vjs-ended");
        this.removeClass("vjs-waiting");
        if (this.options_.loop) {
            this.currentTime(0);
            this.play();
        } else if (!this.paused()) this.pause();
        /**
     * Fired when the end of the media resource is reached (currentTime == duration)
     *
     * @event Player#ended
     * @type {Event}
     */ this.trigger("ended");
    }
    /**
   * Fired when the duration of the media resource is first known or changed
   *
   * @listens Tech#durationchange
   * @private
   */ handleTechDurationChange_() {
        this.duration(this.techGet_("duration"));
    }
    /**
   * Handle a click on the media element to play/pause
   *
   * @param {Event} event
   *        the event that caused this function to trigger
   *
   * @listens Tech#click
   * @private
   */ handleTechClick_(event) {
        // When controls are disabled a click should not toggle playback because
        // the click is considered a control
        if (!this.controls_) return;
        if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.click === undefined || this.options_.userActions.click !== false) {
            if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.click === "function") this.options_.userActions.click.call(this, event);
            else if (this.paused()) $e88cd91ee18355c1$var$silencePromise(this.play());
            else this.pause();
        }
    }
    /**
   * Handle a double-click on the media element to enter/exit fullscreen
   *
   * @param {Event} event
   *        the event that caused this function to trigger
   *
   * @listens Tech#dblclick
   * @private
   */ handleTechDoubleClick_(event) {
        if (!this.controls_) return;
        // we do not want to toggle fullscreen state
        // when double-clicking inside a control bar or a modal
        const inAllowedEls = Array.prototype.some.call(this.$$(".vjs-control-bar, .vjs-modal-dialog"), (el)=>el.contains(event.target));
        if (!inAllowedEls) /*
       * options.userActions.doubleClick
       *
       * If `undefined` or `true`, double-click toggles fullscreen if controls are present
       * Set to `false` to disable double-click handling
       * Set to a function to substitute an external double-click handler
       */ {
            if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.doubleClick === undefined || this.options_.userActions.doubleClick !== false) {
                if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.doubleClick === "function") this.options_.userActions.doubleClick.call(this, event);
                else if (this.isFullscreen()) this.exitFullscreen();
                else this.requestFullscreen();
            }
        }
    }
    /**
   * Handle a tap on the media element. It will toggle the user
   * activity state, which hides and shows the controls.
   *
   * @listens Tech#tap
   * @private
   */ handleTechTap_() {
        this.userActive(!this.userActive());
    }
    /**
   * Handle touch to start
   *
   * @listens Tech#touchstart
   * @private
   */ handleTechTouchStart_() {
        this.userWasActive = this.userActive();
    }
    /**
   * Handle touch to move
   *
   * @listens Tech#touchmove
   * @private
   */ handleTechTouchMove_() {
        if (this.userWasActive) this.reportUserActivity();
    }
    /**
   * Handle touch to end
   *
   * @param {Event} event
   *        the touchend event that triggered
   *        this function
   *
   * @listens Tech#touchend
   * @private
   */ handleTechTouchEnd_(event) {
        // Stop the mouse events from also happening
        if (event.cancelable) event.preventDefault();
    }
    /**
   * @private
   */ toggleFullscreenClass_() {
        if (this.isFullscreen()) this.addClass("vjs-fullscreen");
        else this.removeClass("vjs-fullscreen");
    }
    /**
   * when the document fschange event triggers it calls this
   */ documentFullscreenChange_(e) {
        const targetPlayer = e.target.player;
        // if another player was fullscreen
        // do a null check for targetPlayer because older firefox's would put document as e.target
        if (targetPlayer && targetPlayer !== this) return;
        const el = this.el();
        let isFs = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X)))[this.fsApi_.fullscreenElement] === el;
        if (!isFs && el.matches) isFs = el.matches(":" + this.fsApi_.fullscreen);
        this.isFullscreen(isFs);
    }
    /**
   * Handle Tech Fullscreen Change
   *
   * @param {Event} event
   *        the fullscreenchange event that triggered this function
   *
   * @param {Object} data
   *        the data that was sent with the event
   *
   * @private
   * @listens Tech#fullscreenchange
   * @fires Player#fullscreenchange
   */ handleTechFullscreenChange_(event, data) {
        if (data) {
            if (data.nativeIOSFullscreen) {
                this.addClass("vjs-ios-native-fs");
                this.tech_.one("webkitendfullscreen", ()=>{
                    this.removeClass("vjs-ios-native-fs");
                });
            }
            this.isFullscreen(data.isFullscreen);
        }
    }
    handleTechFullscreenError_(event, err) {
        this.trigger("fullscreenerror", err);
    }
    /**
   * @private
   */ togglePictureInPictureClass_() {
        if (this.isInPictureInPicture()) this.addClass("vjs-picture-in-picture");
        else this.removeClass("vjs-picture-in-picture");
    }
    /**
   * Handle Tech Enter Picture-in-Picture.
   *
   * @param {Event} event
   *        the enterpictureinpicture event that triggered this function
   *
   * @private
   * @listens Tech#enterpictureinpicture
   */ handleTechEnterPictureInPicture_(event) {
        this.isInPictureInPicture(true);
    }
    /**
   * Handle Tech Leave Picture-in-Picture.
   *
   * @param {Event} event
   *        the leavepictureinpicture event that triggered this function
   *
   * @private
   * @listens Tech#leavepictureinpicture
   */ handleTechLeavePictureInPicture_(event) {
        this.isInPictureInPicture(false);
    }
    /**
   * Fires when an error occurred during the loading of an audio/video.
   *
   * @private
   * @listens Tech#error
   */ handleTechError_() {
        const error = this.tech_.error();
        if (error) this.error(error);
    }
    /**
   * Retrigger the `textdata` event that was triggered by the {@link Tech}.
   *
   * @fires Player#textdata
   * @listens Tech#textdata
   * @private
   */ handleTechTextData_() {
        let data = null;
        if (arguments.length > 1) data = arguments[1];
        /**
     * Fires when we get a textdata event from tech
     *
     * @event Player#textdata
     * @type {Event}
     */ this.trigger("textdata", data);
    }
    /**
   * Get object for cached values.
   *
   * @return {Object}
   *         get the current object cache
   */ getCache() {
        return this.cache_;
    }
    /**
   * Resets the internal cache object.
   *
   * Using this function outside the player constructor or reset method may
   * have unintended side-effects.
   *
   * @private
   */ resetCache_() {
        this.cache_ = {
            // Right now, the currentTime is not _really_ cached because it is always
            // retrieved from the tech (see: currentTime). However, for completeness,
            // we set it to zero here to ensure that if we do start actually caching
            // it, we reset it along with everything else.
            currentTime: 0,
            initTime: 0,
            inactivityTimeout: this.options_.inactivityTimeout,
            duration: NaN,
            lastVolume: 1,
            lastPlaybackRate: this.defaultPlaybackRate(),
            media: null,
            src: "",
            source: {},
            sources: [],
            playbackRates: [],
            volume: 1
        };
    }
    /**
   * Pass values to the playback tech
   *
   * @param {string} [method]
   *        the method to call
   *
   * @param {Object} [arg]
   *        the argument to pass
   *
   * @private
   */ techCall_(method, arg) {
        // If it's not ready yet, call method when it is
        this.ready(function() {
            if (method in $e88cd91ee18355c1$var$allowedSetters) return $e88cd91ee18355c1$var$set(this.middleware_, this.tech_, method, arg);
            else if (method in $e88cd91ee18355c1$var$allowedMediators) return $e88cd91ee18355c1$var$mediate(this.middleware_, this.tech_, method, arg);
            try {
                if (this.tech_) this.tech_[method](arg);
            } catch (e) {
                $e88cd91ee18355c1$var$log$1(e);
                throw e;
            }
        }, true);
    }
    /**
   * Mediate attempt to call playback tech method
   * and return the value of the method called.
   *
   * @param {string} method
   *        Tech method
   *
   * @return {*}
   *         Value returned by the tech method called, undefined if tech
   *         is not ready or tech method is not present
   *
   * @private
   */ techGet_(method) {
        if (!this.tech_ || !this.tech_.isReady_) return;
        if (method in $e88cd91ee18355c1$var$allowedGetters) return $e88cd91ee18355c1$var$get(this.middleware_, this.tech_, method);
        else if (method in $e88cd91ee18355c1$var$allowedMediators) return $e88cd91ee18355c1$var$mediate(this.middleware_, this.tech_, method);
        // Log error when playback tech object is present but method
        // is undefined or unavailable
        try {
            return this.tech_[method]();
        } catch (e) {
            // When building additional tech libs, an expected method may not be defined yet
            if (this.tech_[method] === undefined) {
                $e88cd91ee18355c1$var$log$1(`Video.js: ${method} method not defined for ${this.techName_} playback technology.`, e);
                throw e;
            }
            // When a method isn't available on the object it throws a TypeError
            if (e.name === "TypeError") {
                $e88cd91ee18355c1$var$log$1(`Video.js: ${method} unavailable on ${this.techName_} playback technology element.`, e);
                this.tech_.isReady_ = false;
                throw e;
            }
            // If error unknown, just log and throw
            $e88cd91ee18355c1$var$log$1(e);
            throw e;
        }
    }
    /**
   * Attempt to begin playback at the first opportunity.
   *
   * @return {Promise|undefined}
   *         Returns a promise if the browser supports Promises (or one
   *         was passed in as an option). This promise will be resolved on
   *         the return value of play. If this is undefined it will fulfill the
   *         promise chain otherwise the promise chain will be fulfilled when
   *         the promise from play is fulfilled.
   */ play() {
        return new Promise((resolve)=>{
            this.play_(resolve);
        });
    }
    /**
   * The actual logic for play, takes a callback that will be resolved on the
   * return value of play. This allows us to resolve to the play promise if there
   * is one on modern browsers.
   *
   * @private
   * @param {Function} [callback]
   *        The callback that should be called when the techs play is actually called
   */ play_(callback = $e88cd91ee18355c1$var$silencePromise) {
        this.playCallbacks_.push(callback);
        const isSrcReady = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc()));
        const isSafariOrIOS = Boolean($e88cd91ee18355c1$var$IS_ANY_SAFARI || $e88cd91ee18355c1$var$IS_IOS);
        // treat calls to play_ somewhat like the `one` event function
        if (this.waitToPlay_) {
            this.off([
                "ready",
                "loadstart"
            ], this.waitToPlay_);
            this.waitToPlay_ = null;
        }
        // if the player/tech is not ready or the src itself is not ready
        // queue up a call to play on `ready` or `loadstart`
        if (!this.isReady_ || !isSrcReady) {
            this.waitToPlay_ = (e)=>{
                this.play_();
            };
            this.one([
                "ready",
                "loadstart"
            ], this.waitToPlay_);
            // if we are in Safari, there is a high chance that loadstart will trigger after the gesture timeperiod
            // in that case, we need to prime the video element by calling load so it'll be ready in time
            if (!isSrcReady && isSafariOrIOS) this.load();
            return;
        }
        // If the player/tech is ready and we have a source, we can attempt playback.
        const val = this.techGet_("play");
        // For native playback, reset the progress bar if we get a play call from a replay.
        const isNativeReplay = isSafariOrIOS && this.hasClass("vjs-ended");
        if (isNativeReplay) this.resetProgressBar_();
        // play was terminated if the returned value is null
        if (val === null) this.runPlayTerminatedQueue_();
        else this.runPlayCallbacks_(val);
    }
    /**
   * These functions will be run when if play is terminated. If play
   * runPlayCallbacks_ is run these function will not be run. This allows us
   * to differentiate between a terminated play and an actual call to play.
   */ runPlayTerminatedQueue_() {
        const queue = this.playTerminatedQueue_.slice(0);
        this.playTerminatedQueue_ = [];
        queue.forEach(function(q) {
            q();
        });
    }
    /**
   * When a callback to play is delayed we have to run these
   * callbacks when play is actually called on the tech. This function
   * runs the callbacks that were delayed and accepts the return value
   * from the tech.
   *
   * @param {undefined|Promise} val
   *        The return value from the tech.
   */ runPlayCallbacks_(val) {
        const callbacks = this.playCallbacks_.slice(0);
        this.playCallbacks_ = [];
        // clear play terminatedQueue since we finished a real play
        this.playTerminatedQueue_ = [];
        callbacks.forEach(function(cb) {
            cb(val);
        });
    }
    /**
   * Pause the video playback
   */ pause() {
        this.techCall_("pause");
    }
    /**
   * Check if the player is paused or has yet to play
   *
   * @return {boolean}
   *         - false: if the media is currently playing
   *         - true: if media is not currently playing
   */ paused() {
        // The initial state of paused should be true (in Safari it's actually false)
        return this.techGet_("paused") === false ? false : true;
    }
    /**
   * Get a TimeRange object representing the current ranges of time that the user
   * has played.
   *
   * @return { import('./utils/time').TimeRange }
   *         A time range object that represents all the increments of time that have
   *         been played.
   */ played() {
        return this.techGet_("played") || $e88cd91ee18355c1$var$createTimeRanges$1(0, 0);
    }
    /**
   * Sets or returns whether or not the user is "scrubbing". Scrubbing is
   * when the user has clicked the progress bar handle and is
   * dragging it along the progress bar.
   *
   * @param {boolean} [isScrubbing]
   *        whether the user is or is not scrubbing
   *
   * @return {boolean|undefined}
   *         - The value of scrubbing when getting
   *         - Nothing when setting
   */ scrubbing(isScrubbing) {
        if (typeof isScrubbing === "undefined") return this.scrubbing_;
        this.scrubbing_ = !!isScrubbing;
        this.techCall_("setScrubbing", this.scrubbing_);
        if (isScrubbing) this.addClass("vjs-scrubbing");
        else this.removeClass("vjs-scrubbing");
    }
    /**
   * Get or set the current time (in seconds)
   *
   * @param {number|string} [seconds]
   *        The time to seek to in seconds
   *
   * @return {number|undefined}
   *         - the current time in seconds when getting
   *         - Nothing when setting
   */ currentTime(seconds) {
        if (seconds === undefined) {
            // cache last currentTime and return. default to 0 seconds
            //
            // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
            // currentTime when scrubbing, but may not provide much performance benefit after all.
            // Should be tested. Also something has to read the actual current time or the cache will
            // never get updated.
            this.cache_.currentTime = this.techGet_("currentTime") || 0;
            return this.cache_.currentTime;
        }
        if (seconds < 0) seconds = 0;
        if (!this.isReady_ || this.changingSrc_ || !this.tech_ || !this.tech_.isReady_) {
            this.cache_.initTime = seconds;
            this.off("canplay", this.boundApplyInitTime_);
            this.one("canplay", this.boundApplyInitTime_);
            return;
        }
        this.techCall_("setCurrentTime", seconds);
        this.cache_.initTime = 0;
        if (isFinite(seconds)) this.cache_.currentTime = Number(seconds);
    }
    /**
   * Apply the value of initTime stored in cache as currentTime.
   *
   * @private
   */ applyInitTime_() {
        this.currentTime(this.cache_.initTime);
    }
    /**
   * Normally gets the length in time of the video in seconds;
   * in all but the rarest use cases an argument will NOT be passed to the method
   *
   * > **NOTE**: The video must have started loading before the duration can be
   * known, and depending on preload behaviour may not be known until the video starts
   * playing.
   *
   * @fires Player#durationchange
   *
   * @param {number} [seconds]
   *        The duration of the video to set in seconds
   *
   * @return {number|undefined}
   *         - The duration of the video in seconds when getting
   *         - Nothing when setting
   */ duration(seconds) {
        if (seconds === undefined) // return NaN if the duration is not known
        return this.cache_.duration !== undefined ? this.cache_.duration : NaN;
        seconds = parseFloat(seconds);
        // Standardize on Infinity for signaling video is live
        if (seconds < 0) seconds = Infinity;
        if (seconds !== this.cache_.duration) {
            // Cache the last set value for optimized scrubbing
            this.cache_.duration = seconds;
            if (seconds === Infinity) this.addClass("vjs-live");
            else this.removeClass("vjs-live");
            if (!isNaN(seconds)) // Do not fire durationchange unless the duration value is known.
            // @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}
            /**
         * @event Player#durationchange
         * @type {Event}
         */ this.trigger("durationchange");
        }
    }
    /**
   * Calculates how much time is left in the video. Not part
   * of the native video API.
   *
   * @return {number}
   *         The time remaining in seconds
   */ remainingTime() {
        return this.duration() - this.currentTime();
    }
    /**
   * A remaining time function that is intended to be used when
   * the time is to be displayed directly to the user.
   *
   * @return {number}
   *         The rounded time remaining in seconds
   */ remainingTimeDisplay() {
        return Math.floor(this.duration()) - Math.floor(this.currentTime());
    }
    //
    // Kind of like an array of portions of the video that have been downloaded.
    /**
   * Get a TimeRange object with an array of the times of the video
   * that have been downloaded. If you just want the percent of the
   * video that's been downloaded, use bufferedPercent.
   *
   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}
   *
   * @return { import('./utils/time').TimeRange }
   *         A mock {@link TimeRanges} object (following HTML spec)
   */ buffered() {
        let buffered = this.techGet_("buffered");
        if (!buffered || !buffered.length) buffered = $e88cd91ee18355c1$var$createTimeRanges$1(0, 0);
        return buffered;
    }
    /**
   * Get the TimeRanges of the media that are currently available
   * for seeking to.
   *
   * @see [Seekable Spec]{@link https://html.spec.whatwg.org/multipage/media.html#dom-media-seekable}
   *
   * @return { import('./utils/time').TimeRange }
   *         A mock {@link TimeRanges} object (following HTML spec)
   */ seekable() {
        let seekable = this.techGet_("seekable");
        if (!seekable || !seekable.length) seekable = $e88cd91ee18355c1$var$createTimeRanges$1(0, 0);
        return seekable;
    }
    /**
   * Returns whether the player is in the "seeking" state.
   *
   * @return {boolean} True if the player is in the seeking state, false if not.
   */ seeking() {
        return this.techGet_("seeking");
    }
    /**
   * Returns whether the player is in the "ended" state.
   *
   * @return {boolean} True if the player is in the ended state, false if not.
   */ ended() {
        return this.techGet_("ended");
    }
    /**
   * Returns the current state of network activity for the element, from
   * the codes in the list below.
   * - NETWORK_EMPTY (numeric value 0)
   *   The element has not yet been initialised. All attributes are in
   *   their initial states.
   * - NETWORK_IDLE (numeric value 1)
   *   The element's resource selection algorithm is active and has
   *   selected a resource, but it is not actually using the network at
   *   this time.
   * - NETWORK_LOADING (numeric value 2)
   *   The user agent is actively trying to download data.
   * - NETWORK_NO_SOURCE (numeric value 3)
   *   The element's resource selection algorithm is active, but it has
   *   not yet found a resource to use.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
   * @return {number} the current network activity state
   */ networkState() {
        return this.techGet_("networkState");
    }
    /**
   * Returns a value that expresses the current state of the element
   * with respect to rendering the current playback position, from the
   * codes in the list below.
   * - HAVE_NOTHING (numeric value 0)
   *   No information regarding the media resource is available.
   * - HAVE_METADATA (numeric value 1)
   *   Enough of the resource has been obtained that the duration of the
   *   resource is available.
   * - HAVE_CURRENT_DATA (numeric value 2)
   *   Data for the immediate current playback position is available.
   * - HAVE_FUTURE_DATA (numeric value 3)
   *   Data for the immediate current playback position is available, as
   *   well as enough data for the user agent to advance the current
   *   playback position in the direction of playback.
   * - HAVE_ENOUGH_DATA (numeric value 4)
   *   The user agent estimates that enough data is available for
   *   playback to proceed uninterrupted.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
   * @return {number} the current playback rendering state
   */ readyState() {
        return this.techGet_("readyState");
    }
    /**
   * Get the percent (as a decimal) of the video that's been downloaded.
   * This method is not a part of the native HTML video API.
   *
   * @return {number}
   *         A decimal between 0 and 1 representing the percent
   *         that is buffered 0 being 0% and 1 being 100%
   */ bufferedPercent() {
        return $e88cd91ee18355c1$var$bufferedPercent(this.buffered(), this.duration());
    }
    /**
   * Get the ending time of the last buffered time range
   * This is used in the progress bar to encapsulate all time ranges.
   *
   * @return {number}
   *         The end of the last buffered time range
   */ bufferedEnd() {
        const buffered = this.buffered();
        const duration = this.duration();
        let end = buffered.end(buffered.length - 1);
        if (end > duration) end = duration;
        return end;
    }
    /**
   * Get or set the current volume of the media
   *
   * @param  {number} [percentAsDecimal]
   *         The new volume as a decimal percent:
   *         - 0 is muted/0%/off
   *         - 1.0 is 100%/full
   *         - 0.5 is half volume or 50%
   *
   * @return {number|undefined}
   *         The current volume as a percent when getting
   */ volume(percentAsDecimal) {
        let vol;
        if (percentAsDecimal !== undefined) {
            // Force value to between 0 and 1
            vol = Math.max(0, Math.min(1, percentAsDecimal));
            this.cache_.volume = vol;
            this.techCall_("setVolume", vol);
            if (vol > 0) this.lastVolume_(vol);
            return;
        }
        // Default to 1 when returning current volume.
        vol = parseFloat(this.techGet_("volume"));
        return isNaN(vol) ? 1 : vol;
    }
    /**
   * Get the current muted state, or turn mute on or off
   *
   * @param {boolean} [muted]
   *        - true to mute
   *        - false to unmute
   *
   * @return {boolean|undefined}
   *         - true if mute is on and getting
   *         - false if mute is off and getting
   *         - nothing if setting
   */ muted(muted) {
        if (muted !== undefined) {
            this.techCall_("setMuted", muted);
            return;
        }
        return this.techGet_("muted") || false;
    }
    /**
   * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted
   * indicates the state of muted on initial playback.
   *
   * ```js
   *   var myPlayer = videojs('some-player-id');
   *
   *   myPlayer.src("http://www.example.com/path/to/video.mp4");
   *
   *   // get, should be false
   *   console.log(myPlayer.defaultMuted());
   *   // set to true
   *   myPlayer.defaultMuted(true);
   *   // get should be true
   *   console.log(myPlayer.defaultMuted());
   * ```
   *
   * @param {boolean} [defaultMuted]
   *        - true to mute
   *        - false to unmute
   *
   * @return {boolean|undefined}
   *         - true if defaultMuted is on and getting
   *         - false if defaultMuted is off and getting
   *         - Nothing when setting
   */ defaultMuted(defaultMuted) {
        if (defaultMuted !== undefined) this.techCall_("setDefaultMuted", defaultMuted);
        return this.techGet_("defaultMuted") || false;
    }
    /**
   * Get the last volume, or set it
   *
   * @param  {number} [percentAsDecimal]
   *         The new last volume as a decimal percent:
   *         - 0 is muted/0%/off
   *         - 1.0 is 100%/full
   *         - 0.5 is half volume or 50%
   *
   * @return {number|undefined}
   *         - The current value of lastVolume as a percent when getting
   *         - Nothing when setting
   *
   * @private
   */ lastVolume_(percentAsDecimal) {
        if (percentAsDecimal !== undefined && percentAsDecimal !== 0) {
            this.cache_.lastVolume = percentAsDecimal;
            return;
        }
        return this.cache_.lastVolume;
    }
    /**
   * Check if current tech can support native fullscreen
   * (e.g. with built in controls like iOS)
   *
   * @return {boolean}
   *         if native fullscreen is supported
   */ supportsFullScreen() {
        return this.techGet_("supportsFullScreen") || false;
    }
    /**
   * Check if the player is in fullscreen mode or tell the player that it
   * is or is not in fullscreen mode.
   *
   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
   * property and instead document.fullscreenElement is used. But isFullscreen is
   * still a valuable property for internal player workings.
   *
   * @param  {boolean} [isFS]
   *         Set the players current fullscreen state
   *
   * @return {boolean|undefined}
   *         - true if fullscreen is on and getting
   *         - false if fullscreen is off and getting
   *         - Nothing when setting
   */ isFullscreen(isFS) {
        if (isFS !== undefined) {
            const oldValue = this.isFullscreen_;
            this.isFullscreen_ = Boolean(isFS);
            // if we changed fullscreen state and we're in prefixed mode, trigger fullscreenchange
            // this is the only place where we trigger fullscreenchange events for older browsers
            // fullWindow mode is treated as a prefixed event and will get a fullscreenchange event as well
            if (this.isFullscreen_ !== oldValue && this.fsApi_.prefixed) /**
           * @event Player#fullscreenchange
           * @type {Event}
           */ this.trigger("fullscreenchange");
            this.toggleFullscreenClass_();
            return;
        }
        return this.isFullscreen_;
    }
    /**
   * Increase the size of the video to full screen
   * In some browsers, full screen is not supported natively, so it enters
   * "full window mode", where the video fills the browser window.
   * In browsers and devices that support native full screen, sometimes the
   * browser's default controls will be shown, and not the Video.js custom skin.
   * This includes most mobile devices (iOS, Android) and older versions of
   * Safari.
   *
   * @param  {Object} [fullscreenOptions]
   *         Override the player fullscreen options
   *
   * @fires Player#fullscreenchange
   */ requestFullscreen(fullscreenOptions) {
        if (this.isInPictureInPicture()) this.exitPictureInPicture();
        const self1 = this;
        return new Promise((resolve, reject)=>{
            function offHandler() {
                self1.off("fullscreenerror", errorHandler);
                self1.off("fullscreenchange", changeHandler);
            }
            function changeHandler() {
                offHandler();
                resolve();
            }
            function errorHandler(e, err) {
                offHandler();
                reject(err);
            }
            self1.one("fullscreenchange", changeHandler);
            self1.one("fullscreenerror", errorHandler);
            const promise = self1.requestFullscreenHelper_(fullscreenOptions);
            if (promise) {
                promise.then(offHandler, offHandler);
                promise.then(resolve, reject);
            }
        });
    }
    requestFullscreenHelper_(fullscreenOptions) {
        let fsOptions;
        // Only pass fullscreen options to requestFullscreen in spec-compliant browsers.
        // Use defaults or player configured option unless passed directly to this method.
        if (!this.fsApi_.prefixed) {
            fsOptions = this.options_.fullscreen && this.options_.fullscreen.options || {};
            if (fullscreenOptions !== undefined) fsOptions = fullscreenOptions;
        }
        // This method works as follows:
        // 1. if a fullscreen api is available, use it
        //   1. call requestFullscreen with potential options
        //   2. if we got a promise from above, use it to update isFullscreen()
        // 2. otherwise, if the tech supports fullscreen, call `enterFullScreen` on it.
        //   This is particularly used for iPhone, older iPads, and non-safari browser on iOS.
        // 3. otherwise, use "fullWindow" mode
        if (this.fsApi_.requestFullscreen) {
            const promise = this.el_[this.fsApi_.requestFullscreen](fsOptions);
            // Even on browsers with promise support this may not return a promise
            if (promise) promise.then(()=>this.isFullscreen(true), ()=>this.isFullscreen(false));
            return promise;
        } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) // we can't take the video.js controls fullscreen but we can go fullscreen
        // with native controls
        this.techCall_("enterFullScreen");
        else // fullscreen isn't supported so we'll just stretch the video element to
        // fill the viewport
        this.enterFullWindow();
    }
    /**
   * Return the video to its normal size after having been in full screen mode
   *
   * @fires Player#fullscreenchange
   */ exitFullscreen() {
        const self1 = this;
        return new Promise((resolve, reject)=>{
            function offHandler() {
                self1.off("fullscreenerror", errorHandler);
                self1.off("fullscreenchange", changeHandler);
            }
            function changeHandler() {
                offHandler();
                resolve();
            }
            function errorHandler(e, err) {
                offHandler();
                reject(err);
            }
            self1.one("fullscreenchange", changeHandler);
            self1.one("fullscreenerror", errorHandler);
            const promise = self1.exitFullscreenHelper_();
            if (promise) {
                promise.then(offHandler, offHandler);
                // map the promise to our resolve/reject methods
                promise.then(resolve, reject);
            }
        });
    }
    exitFullscreenHelper_() {
        if (this.fsApi_.requestFullscreen) {
            const promise = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X)))[this.fsApi_.exitFullscreen]();
            // Even on browsers with promise support this may not return a promise
            if (promise) // we're splitting the promise here, so, we want to catch the
            // potential error so that this chain doesn't have unhandled errors
            $e88cd91ee18355c1$var$silencePromise(promise.then(()=>this.isFullscreen(false)));
            return promise;
        } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) this.techCall_("exitFullScreen");
        else this.exitFullWindow();
    }
    /**
   * When fullscreen isn't supported we can stretch the
   * video container to as wide as the browser will let us.
   *
   * @fires Player#enterFullWindow
   */ enterFullWindow() {
        this.isFullscreen(true);
        this.isFullWindow = true;
        // Storing original doc overflow value to return to when fullscreen is off
        this.docOrigOverflow = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).documentElement.style.overflow;
        // Add listener for esc key to exit fullscreen
        $e88cd91ee18355c1$var$on((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))), "keydown", this.boundFullWindowOnEscKey_);
        // Hide any scroll bars
        (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).documentElement.style.overflow = "hidden";
        // Apply fullscreen styles
        $e88cd91ee18355c1$var$addClass((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).body, "vjs-full-window");
        /**
     * @event Player#enterFullWindow
     * @type {Event}
     */ this.trigger("enterFullWindow");
    }
    /**
   * Check for call to either exit full window or
   * full screen on ESC key
   *
   * @param {string} event
   *        Event to check for key press
   */ fullWindowOnEscKey(event) {
        if ((0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(event, "Esc")) {
            if (this.isFullscreen() === true) {
                if (!this.isFullWindow) this.exitFullscreen();
                else this.exitFullWindow();
            }
        }
    }
    /**
   * Exit full window
   *
   * @fires Player#exitFullWindow
   */ exitFullWindow() {
        this.isFullscreen(false);
        this.isFullWindow = false;
        $e88cd91ee18355c1$var$off((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))), "keydown", this.boundFullWindowOnEscKey_);
        // Unhide scroll bars.
        (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).documentElement.style.overflow = this.docOrigOverflow;
        // Remove fullscreen styles
        $e88cd91ee18355c1$var$removeClass((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).body, "vjs-full-window");
        // Resize the box, controller, and poster to original sizes
        // this.positionAll();
        /**
     * @event Player#exitFullWindow
     * @type {Event}
     */ this.trigger("exitFullWindow");
    }
    /**
   * Get or set disable Picture-in-Picture mode.
   *
   * @param {boolean} [value]
   *                  - true will disable Picture-in-Picture mode
   *                  - false will enable Picture-in-Picture mode
   */ disablePictureInPicture(value) {
        if (value === undefined) return this.techGet_("disablePictureInPicture");
        this.techCall_("setDisablePictureInPicture", value);
        this.options_.disablePictureInPicture = value;
        this.trigger("disablepictureinpicturechanged");
    }
    /**
   * Check if the player is in Picture-in-Picture mode or tell the player that it
   * is or is not in Picture-in-Picture mode.
   *
   * @param  {boolean} [isPiP]
   *         Set the players current Picture-in-Picture state
   *
   * @return {boolean|undefined}
   *         - true if Picture-in-Picture is on and getting
   *         - false if Picture-in-Picture is off and getting
   *         - nothing if setting
   */ isInPictureInPicture(isPiP) {
        if (isPiP !== undefined) {
            this.isInPictureInPicture_ = !!isPiP;
            this.togglePictureInPictureClass_();
            return;
        }
        return !!this.isInPictureInPicture_;
    }
    /**
   * Create a floating video window always on top of other windows so that users may
   * continue consuming media while they interact with other content sites, or
   * applications on their device.
   *
   * This can use document picture-in-picture or element picture in picture
   *
   * Set `enableDocumentPictureInPicture` to `true` to use docPiP on a supported browser
   * Else set `disablePictureInPicture` to `false` to disable elPiP on a supported browser
   *
   *
   * @see [Spec]{@link https://w3c.github.io/picture-in-picture/}
   * @see [Spec]{@link https://wicg.github.io/document-picture-in-picture/}
   *
   * @fires Player#enterpictureinpicture
   *
   * @return {Promise}
   *         A promise with a Picture-in-Picture window.
   */ requestPictureInPicture() {
        if (this.options_.enableDocumentPictureInPicture && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).documentPictureInPicture) {
            const pipContainer = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement(this.el().tagName);
            pipContainer.classList = this.el().classList;
            pipContainer.classList.add("vjs-pip-container");
            if (this.posterImage) pipContainer.appendChild(this.posterImage.el().cloneNode(true));
            if (this.titleBar) pipContainer.appendChild(this.titleBar.el().cloneNode(true));
            pipContainer.appendChild($e88cd91ee18355c1$var$createEl("p", {
                className: "vjs-pip-text"
            }, {}, this.localize("Playing in picture-in-picture")));
            return (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).documentPictureInPicture.requestWindow({
                // The aspect ratio won't be correct, Chrome bug https://crbug.com/1407629
                width: this.videoWidth(),
                height: this.videoHeight()
            }).then((pipWindow)=>{
                $e88cd91ee18355c1$var$copyStyleSheetsToWindow(pipWindow);
                this.el_.parentNode.insertBefore(pipContainer, this.el_);
                pipWindow.document.body.appendChild(this.el_);
                pipWindow.document.body.classList.add("vjs-pip-window");
                this.player_.isInPictureInPicture(true);
                this.player_.trigger("enterpictureinpicture");
                // Listen for the PiP closing event to move the video back.
                pipWindow.addEventListener("pagehide", (event)=>{
                    const pipVideo = event.target.querySelector(".video-js");
                    pipContainer.parentNode.replaceChild(pipVideo, pipContainer);
                    this.player_.isInPictureInPicture(false);
                    this.player_.trigger("leavepictureinpicture");
                });
                return pipWindow;
            });
        }
        if ("pictureInPictureEnabled" in (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))) && this.disablePictureInPicture() === false) /**
       * This event fires when the player enters picture in picture mode
       *
       * @event Player#enterpictureinpicture
       * @type {Event}
       */ return this.techGet_("requestPictureInPicture");
        return Promise.reject("No PiP mode is available");
    }
    /**
   * Exit Picture-in-Picture mode.
   *
   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
   *
   * @fires Player#leavepictureinpicture
   *
   * @return {Promise}
   *         A promise.
   */ exitPictureInPicture() {
        if ((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).documentPictureInPicture && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).documentPictureInPicture.window) {
            // With documentPictureInPicture, Player#leavepictureinpicture is fired in the pagehide handler
            (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).documentPictureInPicture.window.close();
            return Promise.resolve();
        }
        if ("pictureInPictureEnabled" in (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X)))) /**
       * This event fires when the player leaves picture in picture mode
       *
       * @event Player#leavepictureinpicture
       * @type {Event}
       */ return (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).exitPictureInPicture();
    }
    /**
   * Called when this Player has focus and a key gets pressed down, or when
   * any Component of this player receives a key press that it doesn't handle.
   * This allows player-wide hotkeys (either as defined below, or optionally
   * by an external function).
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */ handleKeyDown(event) {
        const { userActions: userActions } = this.options_;
        // Bail out if hotkeys are not configured.
        if (!userActions || !userActions.hotkeys) return;
        // Function that determines whether or not to exclude an element from
        // hotkeys handling.
        const excludeElement = (el)=>{
            const tagName = el.tagName.toLowerCase();
            // The first and easiest test is for `contenteditable` elements.
            if (el.isContentEditable) return true;
            // Inputs matching these types will still trigger hotkey handling as
            // they are not text inputs.
            const allowedInputTypes = [
                "button",
                "checkbox",
                "hidden",
                "radio",
                "reset",
                "submit"
            ];
            if (tagName === "input") return allowedInputTypes.indexOf(el.type) === -1;
            // The final test is by tag name. These tags will be excluded entirely.
            const excludedTags = [
                "textarea"
            ];
            return excludedTags.indexOf(tagName) !== -1;
        };
        // Bail out if the user is focused on an interactive form element.
        if (excludeElement(this.el_.ownerDocument.activeElement)) return;
        if (typeof userActions.hotkeys === "function") userActions.hotkeys.call(this, event);
        else this.handleHotkeys(event);
    }
    /**
   * Called when this Player receives a hotkey keydown event.
   * Supported player-wide hotkeys are:
   *
   *   f          - toggle fullscreen
   *   m          - toggle mute
   *   k or Space - toggle play/pause
   *
   * @param {Event} event
   *        The `keydown` event that caused this function to be called.
   */ handleHotkeys(event) {
        const hotkeys = this.options_.userActions ? this.options_.userActions.hotkeys : {};
        // set fullscreenKey, muteKey, playPauseKey from `hotkeys`, use defaults if not set
        const { fullscreenKey: fullscreenKey = (keydownEvent)=>(0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(keydownEvent, "f"), muteKey: muteKey = (keydownEvent)=>(0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(keydownEvent, "m"), playPauseKey: playPauseKey = (keydownEvent)=>(0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(keydownEvent, "k") || (0, (/*@__PURE__*/$parcel$interopDefault($kplZx))).isEventKey(keydownEvent, "Space") } = hotkeys;
        if (fullscreenKey.call(this, event)) {
            event.preventDefault();
            event.stopPropagation();
            const FSToggle = $e88cd91ee18355c1$var$Component$1.getComponent("FullscreenToggle");
            if ((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X)))[this.fsApi_.fullscreenEnabled] !== false) FSToggle.prototype.handleClick.call(this, event);
        } else if (muteKey.call(this, event)) {
            event.preventDefault();
            event.stopPropagation();
            const MuteToggle = $e88cd91ee18355c1$var$Component$1.getComponent("MuteToggle");
            MuteToggle.prototype.handleClick.call(this, event);
        } else if (playPauseKey.call(this, event)) {
            event.preventDefault();
            event.stopPropagation();
            const PlayToggle = $e88cd91ee18355c1$var$Component$1.getComponent("PlayToggle");
            PlayToggle.prototype.handleClick.call(this, event);
        }
    }
    /**
   * Check whether the player can play a given mimetype
   *
   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype
   *
   * @param {string} type
   *        The mimetype to check
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */ canPlayType(type) {
        let can;
        // Loop through each playback technology in the options order
        for(let i = 0, j = this.options_.techOrder; i < j.length; i++){
            const techName = j[i];
            let tech = $e88cd91ee18355c1$var$Tech.getTech(techName);
            // Support old behavior of techs being registered as components.
            // Remove once that deprecated behavior is removed.
            if (!tech) tech = $e88cd91ee18355c1$var$Component$1.getComponent(techName);
            // Check if the current tech is defined before continuing
            if (!tech) {
                $e88cd91ee18355c1$var$log$1.error(`The "${techName}" tech is undefined. Skipped browser support check for that tech.`);
                continue;
            }
            // Check if the browser supports this technology
            if (tech.isSupported()) {
                can = tech.canPlayType(type);
                if (can) return can;
            }
        }
        return "";
    }
    /**
   * Select source based on tech-order or source-order
   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
   * defaults to tech-order selection
   *
   * @param {Array} sources
   *        The sources for a media asset
   *
   * @return {Object|boolean}
   *         Object of source and tech order or false
   */ selectSource(sources) {
        // Get only the techs specified in `techOrder` that exist and are supported by the
        // current platform
        const techs = this.options_.techOrder.map((techName)=>{
            return [
                techName,
                $e88cd91ee18355c1$var$Tech.getTech(techName)
            ];
        }).filter(([techName, tech])=>{
            // Check if the current tech is defined before continuing
            if (tech) // Check if the browser supports this technology
            return tech.isSupported();
            $e88cd91ee18355c1$var$log$1.error(`The "${techName}" tech is undefined. Skipped browser support check for that tech.`);
            return false;
        });
        // Iterate over each `innerArray` element once per `outerArray` element and execute
        // `tester` with both. If `tester` returns a non-falsy value, exit early and return
        // that value.
        const findFirstPassingTechSourcePair = function(outerArray, innerArray, tester) {
            let found;
            outerArray.some((outerChoice)=>{
                return innerArray.some((innerChoice)=>{
                    found = tester(outerChoice, innerChoice);
                    if (found) return true;
                });
            });
            return found;
        };
        let foundSourceAndTech;
        const flip = (fn)=>(a, b)=>fn(b, a);
        const finder = ([techName, tech], source)=>{
            if (tech.canPlaySource(source, this.options_[techName.toLowerCase()])) return {
                source: source,
                tech: techName
            };
        };
        // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources
        // to select from them based on their priority.
        if (this.options_.sourceOrder) // Source-first ordering
        foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));
        else // Tech-first ordering
        foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);
        return foundSourceAndTech || false;
    }
    /**
   * Executes source setting and getting logic
   *
   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
   *        A SourceObject, an array of SourceObjects, or a string referencing
   *        a URL to a media source. It is _highly recommended_ that an object
   *        or array of objects is used here, so that source selection
   *        algorithms can take the `type` into account.
   *
   *        If not provided, this method acts as a getter.
   * @param {boolean} [isRetry]
   *        Indicates whether this is being called internally as a result of a retry
   *
   * @return {string|undefined}
   *         If the `source` argument is missing, returns the current source
   *         URL. Otherwise, returns nothing/undefined.
   */ handleSrc_(source, isRetry) {
        // getter usage
        if (typeof source === "undefined") return this.cache_.src || "";
        // Reset retry behavior for new source
        if (this.resetRetryOnError_) this.resetRetryOnError_();
        // filter out invalid sources and turn our source into
        // an array of source objects
        const sources = $e88cd91ee18355c1$var$filterSource(source);
        // if a source was passed in then it is invalid because
        // it was filtered to a zero length Array. So we have to
        // show an error
        if (!sources.length) {
            this.setTimeout(function() {
                this.error({
                    code: 4,
                    message: this.options_.notSupportedMessage
                });
            }, 0);
            return;
        }
        // initial sources
        this.changingSrc_ = true;
        // Only update the cached source list if we are not retrying a new source after error,
        // since in that case we want to include the failed source(s) in the cache
        if (!isRetry) this.cache_.sources = sources;
        this.updateSourceCaches_(sources[0]);
        // middlewareSource is the source after it has been changed by middleware
        $e88cd91ee18355c1$var$setSource(this, sources[0], (middlewareSource, mws)=>{
            this.middleware_ = mws;
            // since sourceSet is async we have to update the cache again after we select a source since
            // the source that is selected could be out of order from the cache update above this callback.
            if (!isRetry) this.cache_.sources = sources;
            this.updateSourceCaches_(middlewareSource);
            const err = this.src_(middlewareSource);
            if (err) {
                if (sources.length > 1) return this.handleSrc_(sources.slice(1));
                this.changingSrc_ = false;
                // We need to wrap this in a timeout to give folks a chance to add error event handlers
                this.setTimeout(function() {
                    this.error({
                        code: 4,
                        message: this.options_.notSupportedMessage
                    });
                }, 0);
                // we could not find an appropriate tech, but let's still notify the delegate that this is it
                // this needs a better comment about why this is needed
                this.triggerReady();
                return;
            }
            $e88cd91ee18355c1$var$setTech(mws, this.tech_);
        });
        // Try another available source if this one fails before playback.
        if (sources.length > 1) {
            const retry = ()=>{
                // Remove the error modal
                this.error(null);
                this.handleSrc_(sources.slice(1), true);
            };
            const stopListeningForErrors = ()=>{
                this.off("error", retry);
            };
            this.one("error", retry);
            this.one("playing", stopListeningForErrors);
            this.resetRetryOnError_ = ()=>{
                this.off("error", retry);
                this.off("playing", stopListeningForErrors);
            };
        }
    }
    /**
   * Get or set the video source.
   *
   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
   *        A SourceObject, an array of SourceObjects, or a string referencing
   *        a URL to a media source. It is _highly recommended_ that an object
   *        or array of objects is used here, so that source selection
   *        algorithms can take the `type` into account.
   *
   *        If not provided, this method acts as a getter.
   *
   * @return {string|undefined}
   *         If the `source` argument is missing, returns the current source
   *         URL. Otherwise, returns nothing/undefined.
   */ src(source) {
        return this.handleSrc_(source, false);
    }
    /**
   * Set the source object on the tech, returns a boolean that indicates whether
   * there is a tech that can play the source or not
   *
   * @param {Tech~SourceObject} source
   *        The source object to set on the Tech
   *
   * @return {boolean}
   *         - True if there is no Tech to playback this source
   *         - False otherwise
   *
   * @private
   */ src_(source) {
        const sourceTech = this.selectSource([
            source
        ]);
        if (!sourceTech) return true;
        if (!$e88cd91ee18355c1$var$titleCaseEquals(sourceTech.tech, this.techName_)) {
            this.changingSrc_ = true;
            // load this technology with the chosen source
            this.loadTech_(sourceTech.tech, sourceTech.source);
            this.tech_.ready(()=>{
                this.changingSrc_ = false;
            });
            return false;
        }
        // wait until the tech is ready to set the source
        // and set it synchronously if possible (#2326)
        this.ready(function() {
            // The setSource tech method was added with source handlers
            // so older techs won't support it
            // We need to check the direct prototype for the case where subclasses
            // of the tech do not support source handlers
            if (this.tech_.constructor.prototype.hasOwnProperty("setSource")) this.techCall_("setSource", source);
            else this.techCall_("src", source.src);
            this.changingSrc_ = false;
        }, true);
        return false;
    }
    /**
   * Begin loading the src data.
   */ load() {
        // Workaround to use the load method with the VHS.
        // Does not cover the case when the load method is called directly from the mediaElement.
        if (this.tech_ && this.tech_.vhs) {
            this.src(this.currentSource());
            return;
        }
        this.techCall_("load");
    }
    /**
   * Reset the player. Loads the first tech in the techOrder,
   * removes all the text tracks in the existing `tech`,
   * and calls `reset` on the `tech`.
   */ reset() {
        if (this.paused()) this.doReset_();
        else {
            const playPromise = this.play();
            $e88cd91ee18355c1$var$silencePromise(playPromise.then(()=>this.doReset_()));
        }
    }
    doReset_() {
        if (this.tech_) this.tech_.clearTracks("text");
        this.removeClass("vjs-playing");
        this.addClass("vjs-paused");
        this.resetCache_();
        this.poster("");
        this.loadTech_(this.options_.techOrder[0], null);
        this.techCall_("reset");
        this.resetControlBarUI_();
        this.error(null);
        if (this.titleBar) this.titleBar.update({
            title: undefined,
            description: undefined
        });
        if ($e88cd91ee18355c1$var$isEvented(this)) this.trigger("playerreset");
    }
    /**
   * Reset Control Bar's UI by calling sub-methods that reset
   * all of Control Bar's components
   */ resetControlBarUI_() {
        this.resetProgressBar_();
        this.resetPlaybackRate_();
        this.resetVolumeBar_();
    }
    /**
   * Reset tech's progress so progress bar is reset in the UI
   */ resetProgressBar_() {
        this.currentTime(0);
        const { currentTimeDisplay: currentTimeDisplay, durationDisplay: durationDisplay, progressControl: progressControl, remainingTimeDisplay: remainingTimeDisplay } = this.controlBar || {};
        const { seekBar: seekBar } = progressControl || {};
        if (currentTimeDisplay) currentTimeDisplay.updateContent();
        if (durationDisplay) durationDisplay.updateContent();
        if (remainingTimeDisplay) remainingTimeDisplay.updateContent();
        if (seekBar) {
            seekBar.update();
            if (seekBar.loadProgressBar) seekBar.loadProgressBar.update();
        }
    }
    /**
   * Reset Playback ratio
   */ resetPlaybackRate_() {
        this.playbackRate(this.defaultPlaybackRate());
        this.handleTechRateChange_();
    }
    /**
   * Reset Volume bar
   */ resetVolumeBar_() {
        this.volume(1.0);
        this.trigger("volumechange");
    }
    /**
   * Returns all of the current source objects.
   *
   * @return {Tech~SourceObject[]}
   *         The current source objects
   */ currentSources() {
        const source = this.currentSource();
        const sources = [];
        // assume `{}` or `{ src }`
        if (Object.keys(source).length !== 0) sources.push(source);
        return this.cache_.sources || sources;
    }
    /**
   * Returns the current source object.
   *
   * @return {Tech~SourceObject}
   *         The current source object
   */ currentSource() {
        return this.cache_.source || {};
    }
    /**
   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
   * Can be used in conjunction with `currentType` to assist in rebuilding the current source object.
   *
   * @return {string}
   *         The current source
   */ currentSrc() {
        return this.currentSource() && this.currentSource().src || "";
    }
    /**
   * Get the current source type e.g. video/mp4
   * This can allow you rebuild the current source object so that you could load the same
   * source and tech later
   *
   * @return {string}
   *         The source MIME type
   */ currentType() {
        return this.currentSource() && this.currentSource().type || "";
    }
    /**
   * Get or set the preload attribute
   *
   * @param {'none'|'auto'|'metadata'} [value]
   *        Preload mode to pass to tech
   *
   * @return {string|undefined}
   *         - The preload attribute value when getting
   *         - Nothing when setting
   */ preload(value) {
        if (value !== undefined) {
            this.techCall_("setPreload", value);
            this.options_.preload = value;
            return;
        }
        return this.techGet_("preload");
    }
    /**
   * Get or set the autoplay option. When this is a boolean it will
   * modify the attribute on the tech. When this is a string the attribute on
   * the tech will be removed and `Player` will handle autoplay on loadstarts.
   *
   * @param {boolean|'play'|'muted'|'any'} [value]
   *        - true: autoplay using the browser behavior
   *        - false: do not autoplay
   *        - 'play': call play() on every loadstart
   *        - 'muted': call muted() then play() on every loadstart
   *        - 'any': call play() on every loadstart. if that fails call muted() then play().
   *        - *: values other than those listed here will be set `autoplay` to true
   *
   * @return {boolean|string|undefined}
   *         - The current value of autoplay when getting
   *         - Nothing when setting
   */ autoplay(value) {
        // getter usage
        if (value === undefined) return this.options_.autoplay || false;
        let techAutoplay;
        // if the value is a valid string set it to that, or normalize `true` to 'play', if need be
        if (typeof value === "string" && /(any|play|muted)/.test(value) || value === true && this.options_.normalizeAutoplay) {
            this.options_.autoplay = value;
            this.manualAutoplay_(typeof value === "string" ? value : "play");
            techAutoplay = false;
        // any falsy value sets autoplay to false in the browser,
        // lets do the same
        } else if (!value) this.options_.autoplay = false;
        else this.options_.autoplay = true;
        techAutoplay = typeof techAutoplay === "undefined" ? this.options_.autoplay : techAutoplay;
        // if we don't have a tech then we do not queue up
        // a setAutoplay call on tech ready. We do this because the
        // autoplay option will be passed in the constructor and we
        // do not need to set it twice
        if (this.tech_) this.techCall_("setAutoplay", techAutoplay);
    }
    /**
   * Set or unset the playsinline attribute.
   * Playsinline tells the browser that non-fullscreen playback is preferred.
   *
   * @param {boolean} [value]
   *        - true means that we should try to play inline by default
   *        - false means that we should use the browser's default playback mode,
   *          which in most cases is inline. iOS Safari is a notable exception
   *          and plays fullscreen by default.
   *
   * @return {string|undefined}
   *         - the current value of playsinline
   *         - Nothing when setting
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
   */ playsinline(value) {
        if (value !== undefined) {
            this.techCall_("setPlaysinline", value);
            this.options_.playsinline = value;
        }
        return this.techGet_("playsinline");
    }
    /**
   * Get or set the loop attribute on the video element.
   *
   * @param {boolean} [value]
   *        - true means that we should loop the video
   *        - false means that we should not loop the video
   *
   * @return {boolean|undefined}
   *         - The current value of loop when getting
   *         - Nothing when setting
   */ loop(value) {
        if (value !== undefined) {
            this.techCall_("setLoop", value);
            this.options_.loop = value;
            return;
        }
        return this.techGet_("loop");
    }
    /**
   * Get or set the poster image source url
   *
   * @fires Player#posterchange
   *
   * @param {string} [src]
   *        Poster image source URL
   *
   * @return {string|undefined}
   *         - The current value of poster when getting
   *         - Nothing when setting
   */ poster(src) {
        if (src === undefined) return this.poster_;
        // The correct way to remove a poster is to set as an empty string
        // other falsey values will throw errors
        if (!src) src = "";
        if (src === this.poster_) return;
        // update the internal poster variable
        this.poster_ = src;
        // update the tech's poster
        this.techCall_("setPoster", src);
        this.isPosterFromTech_ = false;
        // alert components that the poster has been set
        /**
     * This event fires when the poster image is changed on the player.
     *
     * @event Player#posterchange
     * @type {Event}
     */ this.trigger("posterchange");
    }
    /**
   * Some techs (e.g. YouTube) can provide a poster source in an
   * asynchronous way. We want the poster component to use this
   * poster source so that it covers up the tech's controls.
   * (YouTube's play button). However we only want to use this
   * source if the player user hasn't set a poster through
   * the normal APIs.
   *
   * @fires Player#posterchange
   * @listens Tech#posterchange
   * @private
   */ handleTechPosterChange_() {
        if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {
            const newPoster = this.tech_.poster() || "";
            if (newPoster !== this.poster_) {
                this.poster_ = newPoster;
                this.isPosterFromTech_ = true;
                // Let components know the poster has changed
                this.trigger("posterchange");
            }
        }
    }
    /**
   * Get or set whether or not the controls are showing.
   *
   * @fires Player#controlsenabled
   *
   * @param {boolean} [bool]
   *        - true to turn controls on
   *        - false to turn controls off
   *
   * @return {boolean|undefined}
   *         - The current value of controls when getting
   *         - Nothing when setting
   */ controls(bool) {
        if (bool === undefined) return !!this.controls_;
        bool = !!bool;
        // Don't trigger a change event unless it actually changed
        if (this.controls_ === bool) return;
        this.controls_ = bool;
        if (this.usingNativeControls()) this.techCall_("setControls", bool);
        if (this.controls_) {
            this.removeClass("vjs-controls-disabled");
            this.addClass("vjs-controls-enabled");
            /**
       * @event Player#controlsenabled
       * @type {Event}
       */ this.trigger("controlsenabled");
            if (!this.usingNativeControls()) this.addTechControlsListeners_();
        } else {
            this.removeClass("vjs-controls-enabled");
            this.addClass("vjs-controls-disabled");
            /**
       * @event Player#controlsdisabled
       * @type {Event}
       */ this.trigger("controlsdisabled");
            if (!this.usingNativeControls()) this.removeTechControlsListeners_();
        }
    }
    /**
   * Toggle native controls on/off. Native controls are the controls built into
   * devices (e.g. default iPhone controls) or other techs
   * (e.g. Vimeo Controls)
   * **This should only be set by the current tech, because only the tech knows
   * if it can support native controls**
   *
   * @fires Player#usingnativecontrols
   * @fires Player#usingcustomcontrols
   *
   * @param {boolean} [bool]
   *        - true to turn native controls on
   *        - false to turn native controls off
   *
   * @return {boolean|undefined}
   *         - The current value of native controls when getting
   *         - Nothing when setting
   */ usingNativeControls(bool) {
        if (bool === undefined) return !!this.usingNativeControls_;
        bool = !!bool;
        // Don't trigger a change event unless it actually changed
        if (this.usingNativeControls_ === bool) return;
        this.usingNativeControls_ = bool;
        if (this.usingNativeControls_) {
            this.addClass("vjs-using-native-controls");
            /**
       * player is using the native device controls
       *
       * @event Player#usingnativecontrols
       * @type {Event}
       */ this.trigger("usingnativecontrols");
        } else {
            this.removeClass("vjs-using-native-controls");
            /**
       * player is using the custom HTML controls
       *
       * @event Player#usingcustomcontrols
       * @type {Event}
       */ this.trigger("usingcustomcontrols");
        }
    }
    /**
   * Set or get the current MediaError
   *
   * @fires Player#error
   *
   * @param  {MediaError|string|number} [err]
   *         A MediaError or a string/number to be turned
   *         into a MediaError
   *
   * @return {MediaError|null|undefined}
   *         - The current MediaError when getting (or null)
   *         - Nothing when setting
   */ error(err) {
        if (err === undefined) return this.error_ || null;
        // allow hooks to modify error object
        $e88cd91ee18355c1$var$hooks("beforeerror").forEach((hookFunction)=>{
            const newErr = hookFunction(this, err);
            if (!($e88cd91ee18355c1$var$isObject(newErr) && !Array.isArray(newErr) || typeof newErr === "string" || typeof newErr === "number" || newErr === null)) {
                this.log.error("please return a value that MediaError expects in beforeerror hooks");
                return;
            }
            err = newErr;
        });
        // Suppress the first error message for no compatible source until
        // user interaction
        if (this.options_.suppressNotSupportedError && err && err.code === 4) {
            const triggerSuppressedError = function() {
                this.error(err);
            };
            this.options_.suppressNotSupportedError = false;
            this.any([
                "click",
                "touchstart"
            ], triggerSuppressedError);
            this.one("loadstart", function() {
                this.off([
                    "click",
                    "touchstart"
                ], triggerSuppressedError);
            });
            return;
        }
        // restoring to default
        if (err === null) {
            this.error_ = null;
            this.removeClass("vjs-error");
            if (this.errorDisplay) this.errorDisplay.close();
            return;
        }
        this.error_ = new $e88cd91ee18355c1$var$MediaError(err);
        // add the vjs-error classname to the player
        this.addClass("vjs-error");
        // log the name of the error type and any message
        // IE11 logs "[object object]" and required you to expand message to see error object
        $e88cd91ee18355c1$var$log$1.error(`(CODE:${this.error_.code} ${$e88cd91ee18355c1$var$MediaError.errorTypes[this.error_.code]})`, this.error_.message, this.error_);
        /**
     * @event Player#error
     * @type {Event}
     */ this.trigger("error");
        // notify hooks of the per player error
        $e88cd91ee18355c1$var$hooks("error").forEach((hookFunction)=>hookFunction(this, this.error_));
        return;
    }
    /**
   * Report user activity
   *
   * @param {Object} event
   *        Event object
   */ reportUserActivity(event) {
        this.userActivity_ = true;
    }
    /**
   * Get/set if user is active
   *
   * @fires Player#useractive
   * @fires Player#userinactive
   *
   * @param {boolean} [bool]
   *        - true if the user is active
   *        - false if the user is inactive
   *
   * @return {boolean|undefined}
   *         - The current value of userActive when getting
   *         - Nothing when setting
   */ userActive(bool) {
        if (bool === undefined) return this.userActive_;
        bool = !!bool;
        if (bool === this.userActive_) return;
        this.userActive_ = bool;
        if (this.userActive_) {
            this.userActivity_ = true;
            this.removeClass("vjs-user-inactive");
            this.addClass("vjs-user-active");
            /**
       * @event Player#useractive
       * @type {Event}
       */ this.trigger("useractive");
            return;
        }
        // Chrome/Safari/IE have bugs where when you change the cursor it can
        // trigger a mousemove event. This causes an issue when you're hiding
        // the cursor when the user is inactive, and a mousemove signals user
        // activity. Making it impossible to go into inactive mode. Specifically
        // this happens in fullscreen when we really need to hide the cursor.
        //
        // When this gets resolved in ALL browsers it can be removed
        // https://code.google.com/p/chromium/issues/detail?id=103041
        if (this.tech_) this.tech_.one("mousemove", function(e) {
            e.stopPropagation();
            e.preventDefault();
        });
        this.userActivity_ = false;
        this.removeClass("vjs-user-active");
        this.addClass("vjs-user-inactive");
        /**
     * @event Player#userinactive
     * @type {Event}
     */ this.trigger("userinactive");
    }
    /**
   * Listen for user activity based on timeout value
   *
   * @private
   */ listenForUserActivity_() {
        let mouseInProgress;
        let lastMoveX;
        let lastMoveY;
        const handleActivity = $e88cd91ee18355c1$var$bind_(this, this.reportUserActivity);
        const handleMouseMove = function(e) {
            // #1068 - Prevent mousemove spamming
            // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
            if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
                lastMoveX = e.screenX;
                lastMoveY = e.screenY;
                handleActivity();
            }
        };
        const handleMouseDown = function() {
            handleActivity();
            // For as long as the they are touching the device or have their mouse down,
            // we consider them active even if they're not moving their finger or mouse.
            // So we want to continue to update that they are active
            this.clearInterval(mouseInProgress);
            // Setting userActivity=true now and setting the interval to the same time
            // as the activityCheck interval (250) should ensure we never miss the
            // next activityCheck
            mouseInProgress = this.setInterval(handleActivity, 250);
        };
        const handleMouseUpAndMouseLeave = function(event) {
            handleActivity();
            // Stop the interval that maintains activity if the mouse/touch is down
            this.clearInterval(mouseInProgress);
        };
        // Any mouse movement will be considered user activity
        this.on("mousedown", handleMouseDown);
        this.on("mousemove", handleMouseMove);
        this.on("mouseup", handleMouseUpAndMouseLeave);
        this.on("mouseleave", handleMouseUpAndMouseLeave);
        const controlBar = this.getChild("controlBar");
        // Fixes bug on Android & iOS where when tapping progressBar (when control bar is displayed)
        // controlBar would no longer be hidden by default timeout.
        if (controlBar && !$e88cd91ee18355c1$var$IS_IOS && !$e88cd91ee18355c1$var$IS_ANDROID) {
            controlBar.on("mouseenter", function(event) {
                if (this.player().options_.inactivityTimeout !== 0) this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout;
                this.player().options_.inactivityTimeout = 0;
            });
            controlBar.on("mouseleave", function(event) {
                this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;
            });
        }
        // Listen for keyboard navigation
        // Shouldn't need to use inProgress interval because of key repeat
        this.on("keydown", handleActivity);
        this.on("keyup", handleActivity);
        // Run an interval every 250 milliseconds instead of stuffing everything into
        // the mousemove/touchmove function itself, to prevent performance degradation.
        // `this.reportUserActivity` simply sets this.userActivity_ to true, which
        // then gets picked up by this loop
        // http://ejohn.org/blog/learning-from-twitter/
        let inactivityTimeout;
        /** @this Player */ const activityCheck = function() {
            // Check to see if mouse/touch activity has happened
            if (!this.userActivity_) return;
            // Reset the activity tracker
            this.userActivity_ = false;
            // If the user state was inactive, set the state to active
            this.userActive(true);
            // Clear any existing inactivity timeout to start the timer over
            this.clearTimeout(inactivityTimeout);
            const timeout = this.options_.inactivityTimeout;
            if (timeout <= 0) return;
            // In <timeout> milliseconds, if no more activity has occurred the
            // user will be considered inactive
            inactivityTimeout = this.setTimeout(function() {
                // Protect against the case where the inactivityTimeout can trigger just
                // before the next user activity is picked up by the activity check loop
                // causing a flicker
                if (!this.userActivity_) this.userActive(false);
            }, timeout);
        };
        this.setInterval(activityCheck, 250);
    }
    /**
   * Gets or sets the current playback rate. A playback rate of
   * 1.0 represents normal speed and 0.5 would indicate half-speed
   * playback, for instance.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
   *
   * @param {number} [rate]
   *       New playback rate to set.
   *
   * @return {number|undefined}
   *         - The current playback rate when getting or 1.0
   *         - Nothing when setting
   */ playbackRate(rate) {
        if (rate !== undefined) {
            // NOTE: this.cache_.lastPlaybackRate is set from the tech handler
            // that is registered above
            this.techCall_("setPlaybackRate", rate);
            return;
        }
        if (this.tech_ && this.tech_.featuresPlaybackRate) return this.cache_.lastPlaybackRate || this.techGet_("playbackRate");
        return 1.0;
    }
    /**
   * Gets or sets the current default playback rate. A default playback rate of
   * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.
   * defaultPlaybackRate will only represent what the initial playbackRate of a video was, not
   * not the current playbackRate.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate
   *
   * @param {number} [rate]
   *       New default playback rate to set.
   *
   * @return {number|undefined}
   *         - The default playback rate when getting or 1.0
   *         - Nothing when setting
   */ defaultPlaybackRate(rate) {
        if (rate !== undefined) return this.techCall_("setDefaultPlaybackRate", rate);
        if (this.tech_ && this.tech_.featuresPlaybackRate) return this.techGet_("defaultPlaybackRate");
        return 1.0;
    }
    /**
   * Gets or sets the audio flag
   *
   * @param {boolean} [bool]
   *        - true signals that this is an audio player
   *        - false signals that this is not an audio player
   *
   * @return {boolean|undefined}
   *         - The current value of isAudio when getting
   *         - Nothing when setting
   */ isAudio(bool) {
        if (bool !== undefined) {
            this.isAudio_ = !!bool;
            return;
        }
        return !!this.isAudio_;
    }
    enableAudioOnlyUI_() {
        // Update styling immediately to show the control bar so we can get its height
        this.addClass("vjs-audio-only-mode");
        const playerChildren = this.children();
        const controlBar = this.getChild("ControlBar");
        const controlBarHeight = controlBar && controlBar.currentHeight();
        // Hide all player components except the control bar. Control bar components
        // needed only for video are hidden with CSS
        playerChildren.forEach((child)=>{
            if (child === controlBar) return;
            if (child.el_ && !child.hasClass("vjs-hidden")) {
                child.hide();
                this.audioOnlyCache_.hiddenChildren.push(child);
            }
        });
        this.audioOnlyCache_.playerHeight = this.currentHeight();
        // Set the player height the same as the control bar
        this.height(controlBarHeight);
        this.trigger("audioonlymodechange");
    }
    disableAudioOnlyUI_() {
        this.removeClass("vjs-audio-only-mode");
        // Show player components that were previously hidden
        this.audioOnlyCache_.hiddenChildren.forEach((child)=>child.show());
        // Reset player height
        this.height(this.audioOnlyCache_.playerHeight);
        this.trigger("audioonlymodechange");
    }
    /**
   * Get the current audioOnlyMode state or set audioOnlyMode to true or false.
   *
   * Setting this to `true` will hide all player components except the control bar,
   * as well as control bar components needed only for video.
   *
   * @param {boolean} [value]
   *         The value to set audioOnlyMode to.
   *
   * @return {Promise|boolean}
   *        A Promise is returned when setting the state, and a boolean when getting
   *        the present state
   */ audioOnlyMode(value) {
        if (typeof value !== "boolean" || value === this.audioOnlyMode_) return this.audioOnlyMode_;
        this.audioOnlyMode_ = value;
        // Enable Audio Only Mode
        if (value) {
            const exitPromises = [];
            // Fullscreen and PiP are not supported in audioOnlyMode, so exit if we need to.
            if (this.isInPictureInPicture()) exitPromises.push(this.exitPictureInPicture());
            if (this.isFullscreen()) exitPromises.push(this.exitFullscreen());
            if (this.audioPosterMode()) exitPromises.push(this.audioPosterMode(false));
            return Promise.all(exitPromises).then(()=>this.enableAudioOnlyUI_());
        }
        // Disable Audio Only Mode
        return Promise.resolve().then(()=>this.disableAudioOnlyUI_());
    }
    enablePosterModeUI_() {
        // Hide the video element and show the poster image to enable posterModeUI
        const tech = this.tech_ && this.tech_;
        tech.hide();
        this.addClass("vjs-audio-poster-mode");
        this.trigger("audiopostermodechange");
    }
    disablePosterModeUI_() {
        // Show the video element and hide the poster image to disable posterModeUI
        const tech = this.tech_ && this.tech_;
        tech.show();
        this.removeClass("vjs-audio-poster-mode");
        this.trigger("audiopostermodechange");
    }
    /**
   * Get the current audioPosterMode state or set audioPosterMode to true or false
   *
   * @param {boolean} [value]
   *         The value to set audioPosterMode to.
   *
   * @return {Promise|boolean}
   *         A Promise is returned when setting the state, and a boolean when getting
   *        the present state
   */ audioPosterMode(value) {
        if (typeof value !== "boolean" || value === this.audioPosterMode_) return this.audioPosterMode_;
        this.audioPosterMode_ = value;
        if (value) {
            if (this.audioOnlyMode()) {
                const audioOnlyModePromise = this.audioOnlyMode(false);
                return audioOnlyModePromise.then(()=>{
                    // enable audio poster mode after audio only mode is disabled
                    this.enablePosterModeUI_();
                });
            }
            return Promise.resolve().then(()=>{
                // enable audio poster mode
                this.enablePosterModeUI_();
            });
        }
        return Promise.resolve().then(()=>{
            // disable audio poster mode
            this.disablePosterModeUI_();
        });
    }
    /**
   * A helper method for adding a {@link TextTrack} to our
   * {@link TextTrackList}.
   *
   * In addition to the W3C settings we allow adding additional info through options.
   *
   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
   *
   * @param {string} [kind]
   *        the kind of TextTrack you are adding
   *
   * @param {string} [label]
   *        the label to give the TextTrack label
   *
   * @param {string} [language]
   *        the language to set on the TextTrack
   *
   * @return {TextTrack|undefined}
   *         the TextTrack that was added or undefined
   *         if there is no tech
   */ addTextTrack(kind, label, language) {
        if (this.tech_) return this.tech_.addTextTrack(kind, label, language);
    }
    /**
   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}.
   *
   * @param {Object} options
   *        Options to pass to {@link HTMLTrackElement} during creation. See
   *        {@link HTMLTrackElement} for object properties that you should use.
   *
   * @param {boolean} [manualCleanup=false] if set to true, the TextTrack will not be removed
   *                                        from the TextTrackList and HtmlTrackElementList
   *                                        after a source change
   *
   * @return { import('./tracks/html-track-element').default }
   *         the HTMLTrackElement that was created and added
   *         to the HtmlTrackElementList and the remote
   *         TextTrackList
   *
   */ addRemoteTextTrack(options, manualCleanup) {
        if (this.tech_) return this.tech_.addRemoteTextTrack(options, manualCleanup);
    }
    /**
   * Remove a remote {@link TextTrack} from the respective
   * {@link TextTrackList} and {@link HtmlTrackElementList}.
   *
   * @param {Object} track
   *        Remote {@link TextTrack} to remove
   *
   * @return {undefined}
   *         does not return anything
   */ removeRemoteTextTrack(obj = {}) {
        let { track: track } = obj;
        if (!track) track = obj;
        // destructure the input into an object with a track argument, defaulting to arguments[0]
        // default the whole argument to an empty object if nothing was passed in
        if (this.tech_) return this.tech_.removeRemoteTextTrack(track);
    }
    /**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object|undefined}
   *         An object with supported media playback quality metrics or undefined if there
   *         is no tech or the tech does not support it.
   */ getVideoPlaybackQuality() {
        return this.techGet_("getVideoPlaybackQuality");
    }
    /**
   * Get video width
   *
   * @return {number}
   *         current video width
   */ videoWidth() {
        return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
    }
    /**
   * Get video height
   *
   * @return {number}
   *         current video height
   */ videoHeight() {
        return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
    }
    /**
   * Set or get the player's language code.
   *
   * Changing the language will trigger
   * [languagechange]{@link Player#event:languagechange}
   * which Components can use to update control text.
   * ClickableComponent will update its control text by default on
   * [languagechange]{@link Player#event:languagechange}.
   *
   * @fires Player#languagechange
   *
   * @param {string} [code]
   *        the language code to set the player to
   *
   * @return {string|undefined}
   *         - The current language code when getting
   *         - Nothing when setting
   */ language(code) {
        if (code === undefined) return this.language_;
        if (this.language_ !== String(code).toLowerCase()) {
            this.language_ = String(code).toLowerCase();
            // during first init, it's possible some things won't be evented
            if ($e88cd91ee18355c1$var$isEvented(this)) /**
        * fires when the player language change
        *
        * @event Player#languagechange
        * @type {Event}
        */ this.trigger("languagechange");
        }
    }
    /**
   * Get the player's language dictionary
   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
   * Languages specified directly in the player options have precedence
   *
   * @return {Array}
   *         An array of of supported languages
   */ languages() {
        return $e88cd91ee18355c1$var$merge$1($e88cd91ee18355c1$var$Player.prototype.options_.languages, this.languages_);
    }
    /**
   * returns a JavaScript object representing the current track
   * information. **DOES not return it as JSON**
   *
   * @return {Object}
   *         Object representing the current of track info
   */ toJSON() {
        const options = $e88cd91ee18355c1$var$merge$1(this.options_);
        const tracks = options.tracks;
        options.tracks = [];
        for(let i = 0; i < tracks.length; i++){
            let track = tracks[i];
            // deep merge tracks and null out player so no circular references
            track = $e88cd91ee18355c1$var$merge$1(track);
            track.player = undefined;
            options.tracks[i] = track;
        }
        return options;
    }
    /**
   * Creates a simple modal dialog (an instance of the {@link ModalDialog}
   * component) that immediately overlays the player with arbitrary
   * content and removes itself when closed.
   *
   * @param {string|Function|Element|Array|null} content
   *        Same as {@link ModalDialog#content}'s param of the same name.
   *        The most straight-forward usage is to provide a string or DOM
   *        element.
   *
   * @param {Object} [options]
   *        Extra options which will be passed on to the {@link ModalDialog}.
   *
   * @return {ModalDialog}
   *         the {@link ModalDialog} that was created
   */ createModal(content, options) {
        options = options || {};
        options.content = content || "";
        const modal = new $e88cd91ee18355c1$var$ModalDialog(this, options);
        this.addChild(modal);
        modal.on("dispose", ()=>{
            this.removeChild(modal);
        });
        modal.open();
        return modal;
    }
    /**
   * Change breakpoint classes when the player resizes.
   *
   * @private
   */ updateCurrentBreakpoint_() {
        if (!this.responsive()) return;
        const currentBreakpoint = this.currentBreakpoint();
        const currentWidth = this.currentWidth();
        for(let i = 0; i < $e88cd91ee18355c1$var$BREAKPOINT_ORDER.length; i++){
            const candidateBreakpoint = $e88cd91ee18355c1$var$BREAKPOINT_ORDER[i];
            const maxWidth = this.breakpoints_[candidateBreakpoint];
            if (currentWidth <= maxWidth) {
                // The current breakpoint did not change, nothing to do.
                if (currentBreakpoint === candidateBreakpoint) return;
                // Only remove a class if there is a current breakpoint.
                if (currentBreakpoint) this.removeClass($e88cd91ee18355c1$var$BREAKPOINT_CLASSES[currentBreakpoint]);
                this.addClass($e88cd91ee18355c1$var$BREAKPOINT_CLASSES[candidateBreakpoint]);
                this.breakpoint_ = candidateBreakpoint;
                break;
            }
        }
    }
    /**
   * Removes the current breakpoint.
   *
   * @private
   */ removeCurrentBreakpoint_() {
        const className = this.currentBreakpointClass();
        this.breakpoint_ = "";
        if (className) this.removeClass(className);
    }
    /**
   * Get or set breakpoints on the player.
   *
   * Calling this method with an object or `true` will remove any previous
   * custom breakpoints and start from the defaults again.
   *
   * @param  {Object|boolean} [breakpoints]
   *         If an object is given, it can be used to provide custom
   *         breakpoints. If `true` is given, will set default breakpoints.
   *         If this argument is not given, will simply return the current
   *         breakpoints.
   *
   * @param  {number} [breakpoints.tiny]
   *         The maximum width for the "vjs-layout-tiny" class.
   *
   * @param  {number} [breakpoints.xsmall]
   *         The maximum width for the "vjs-layout-x-small" class.
   *
   * @param  {number} [breakpoints.small]
   *         The maximum width for the "vjs-layout-small" class.
   *
   * @param  {number} [breakpoints.medium]
   *         The maximum width for the "vjs-layout-medium" class.
   *
   * @param  {number} [breakpoints.large]
   *         The maximum width for the "vjs-layout-large" class.
   *
   * @param  {number} [breakpoints.xlarge]
   *         The maximum width for the "vjs-layout-x-large" class.
   *
   * @param  {number} [breakpoints.huge]
   *         The maximum width for the "vjs-layout-huge" class.
   *
   * @return {Object}
   *         An object mapping breakpoint names to maximum width values.
   */ breakpoints(breakpoints) {
        // Used as a getter.
        if (breakpoints === undefined) return Object.assign(this.breakpoints_);
        this.breakpoint_ = "";
        this.breakpoints_ = Object.assign({}, $e88cd91ee18355c1$var$DEFAULT_BREAKPOINTS, breakpoints);
        // When breakpoint definitions change, we need to update the currently
        // selected breakpoint.
        this.updateCurrentBreakpoint_();
        // Clone the breakpoints before returning.
        return Object.assign(this.breakpoints_);
    }
    /**
   * Get or set a flag indicating whether or not this player should adjust
   * its UI based on its dimensions.
   *
   * @param  {boolean} [value]
   *         Should be `true` if the player should adjust its UI based on its
   *         dimensions; otherwise, should be `false`.
   *
   * @return {boolean|undefined}
   *         Will be `true` if this player should adjust its UI based on its
   *         dimensions; otherwise, will be `false`.
   *         Nothing if setting
   */ responsive(value) {
        // Used as a getter.
        if (value === undefined) return this.responsive_;
        value = Boolean(value);
        const current = this.responsive_;
        // Nothing changed.
        if (value === current) return;
        // The value actually changed, set it.
        this.responsive_ = value;
        // Start listening for breakpoints and set the initial breakpoint if the
        // player is now responsive.
        if (value) {
            this.on("playerresize", this.boundUpdateCurrentBreakpoint_);
            this.updateCurrentBreakpoint_();
        // Stop listening for breakpoints if the player is no longer responsive.
        } else {
            this.off("playerresize", this.boundUpdateCurrentBreakpoint_);
            this.removeCurrentBreakpoint_();
        }
        return value;
    }
    /**
   * Get current breakpoint name, if any.
   *
   * @return {string}
   *         If there is currently a breakpoint set, returns a the key from the
   *         breakpoints object matching it. Otherwise, returns an empty string.
   */ currentBreakpoint() {
        return this.breakpoint_;
    }
    /**
   * Get the current breakpoint class name.
   *
   * @return {string}
   *         The matching class name (e.g. `"vjs-layout-tiny"` or
   *         `"vjs-layout-large"`) for the current breakpoint. Empty string if
   *         there is no current breakpoint.
   */ currentBreakpointClass() {
        return $e88cd91ee18355c1$var$BREAKPOINT_CLASSES[this.breakpoint_] || "";
    }
    /**
   * An object that describes a single piece of media.
   *
   * Properties that are not part of this type description will be retained; so,
   * this can be viewed as a generic metadata storage mechanism as well.
   *
   * @see      {@link https://wicg.github.io/mediasession/#the-mediametadata-interface}
   * @typedef  {Object} Player~MediaObject
   *
   * @property {string} [album]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API.
   *
   * @property {string} [artist]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API.
   *
   * @property {Object[]} [artwork]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API. If not specified, will be populated via the `poster`, if
   *           available.
   *
   * @property {string} [poster]
   *           URL to an image that will display before playback.
   *
   * @property {Tech~SourceObject|Tech~SourceObject[]|string} [src]
   *           A single source object, an array of source objects, or a string
   *           referencing a URL to a media source. It is _highly recommended_
   *           that an object or array of objects is used here, so that source
   *           selection algorithms can take the `type` into account.
   *
   * @property {string} [title]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API.
   *
   * @property {Object[]} [textTracks]
   *           An array of objects to be used to create text tracks, following
   *           the {@link https://www.w3.org/TR/html50/embedded-content-0.html#the-track-element|native track element format}.
   *           For ease of removal, these will be created as "remote" text
   *           tracks and set to automatically clean up on source changes.
   *
   *           These objects may have properties like `src`, `kind`, `label`,
   *           and `language`, see {@link Tech#createRemoteTextTrack}.
   */ /**
   * Populate the player using a {@link Player~MediaObject|MediaObject}.
   *
   * @param  {Player~MediaObject} media
   *         A media object.
   *
   * @param  {Function} ready
   *         A callback to be called when the player is ready.
   */ loadMedia(media, ready) {
        if (!media || typeof media !== "object") return;
        const crossOrigin = this.crossOrigin();
        this.reset();
        // Clone the media object so it cannot be mutated from outside.
        this.cache_.media = $e88cd91ee18355c1$var$merge$1(media);
        const { artist: artist, artwork: artwork, description: description, poster: poster, src: src, textTracks: textTracks, title: title } = this.cache_.media;
        // If `artwork` is not given, create it using `poster`.
        if (!artwork && poster) this.cache_.media.artwork = [
            {
                src: poster,
                type: $e88cd91ee18355c1$var$getMimetype(poster)
            }
        ];
        if (crossOrigin) this.crossOrigin(crossOrigin);
        if (src) this.src(src);
        if (poster) this.poster(poster);
        if (Array.isArray(textTracks)) textTracks.forEach((tt)=>this.addRemoteTextTrack(tt, false));
        if (this.titleBar) this.titleBar.update({
            title: title,
            description: description || artist || ""
        });
        this.ready(ready);
    }
    /**
   * Get a clone of the current {@link Player~MediaObject} for this player.
   *
   * If the `loadMedia` method has not been used, will attempt to return a
   * {@link Player~MediaObject} based on the current state of the player.
   *
   * @return {Player~MediaObject}
   */ getMedia() {
        if (!this.cache_.media) {
            const poster = this.poster();
            const src = this.currentSources();
            const textTracks = Array.prototype.map.call(this.remoteTextTracks(), (tt)=>({
                    kind: tt.kind,
                    label: tt.label,
                    language: tt.language,
                    src: tt.src
                }));
            const media = {
                src: src,
                textTracks: textTracks
            };
            if (poster) {
                media.poster = poster;
                media.artwork = [
                    {
                        src: media.poster,
                        type: $e88cd91ee18355c1$var$getMimetype(media.poster)
                    }
                ];
            }
            return media;
        }
        return $e88cd91ee18355c1$var$merge$1(this.cache_.media);
    }
    /**
   * Gets tag settings
   *
   * @param {Element} tag
   *        The player tag
   *
   * @return {Object}
   *         An object containing all of the settings
   *         for a player tag
   */ static getTagSettings(tag) {
        const baseOptions = {
            sources: [],
            tracks: []
        };
        const tagOptions = $e88cd91ee18355c1$var$getAttributes(tag);
        const dataSetup = tagOptions["data-setup"];
        if ($e88cd91ee18355c1$var$hasClass(tag, "vjs-fill")) tagOptions.fill = true;
        if ($e88cd91ee18355c1$var$hasClass(tag, "vjs-fluid")) tagOptions.fluid = true;
        // Check if data-setup attr exists.
        if (dataSetup !== null) {
            // Parse options JSON
            // If empty string, make it a parsable json object.
            const [err, data] = (0, (/*@__PURE__*/$parcel$interopDefault($be8f37289c893610$exports)))(dataSetup || "{}");
            if (err) $e88cd91ee18355c1$var$log$1.error(err);
            Object.assign(tagOptions, data);
        }
        Object.assign(baseOptions, tagOptions);
        // Get tag children settings
        if (tag.hasChildNodes()) {
            const children = tag.childNodes;
            for(let i = 0, j = children.length; i < j; i++){
                const child = children[i];
                // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
                const childName = child.nodeName.toLowerCase();
                if (childName === "source") baseOptions.sources.push($e88cd91ee18355c1$var$getAttributes(child));
                else if (childName === "track") baseOptions.tracks.push($e88cd91ee18355c1$var$getAttributes(child));
            }
        }
        return baseOptions;
    }
    /**
   * Set debug mode to enable/disable logs at info level.
   *
   * @param {boolean} enabled
   * @fires Player#debugon
   * @fires Player#debugoff
   * @return {boolean|undefined}
   */ debug(enabled) {
        if (enabled === undefined) return this.debugEnabled_;
        if (enabled) {
            this.trigger("debugon");
            this.previousLogLevel_ = this.log.level;
            this.log.level("debug");
            this.debugEnabled_ = true;
        } else {
            this.trigger("debugoff");
            this.log.level(this.previousLogLevel_);
            this.previousLogLevel_ = undefined;
            this.debugEnabled_ = false;
        }
    }
    /**
   * Set or get current playback rates.
   * Takes an array and updates the playback rates menu with the new items.
   * Pass in an empty array to hide the menu.
   * Values other than arrays are ignored.
   *
   * @fires Player#playbackrateschange
   * @param {number[]} newRates
   *                   The new rates that the playback rates menu should update to.
   *                   An empty array will hide the menu
   * @return {number[]} When used as a getter will return the current playback rates
   */ playbackRates(newRates) {
        if (newRates === undefined) return this.cache_.playbackRates;
        // ignore any value that isn't an array
        if (!Array.isArray(newRates)) return;
        // ignore any arrays that don't only contain numbers
        if (!newRates.every((rate)=>typeof rate === "number")) return;
        this.cache_.playbackRates = newRates;
        /**
    * fires when the playback rates in a player are changed
    *
    * @event Player#playbackrateschange
    * @type {Event}
    */ this.trigger("playbackrateschange");
    }
}
/**
 * Get the {@link VideoTrackList}
 *
 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
 *
 * @return {VideoTrackList}
 *         the current video track list
 *
 * @method Player.prototype.videoTracks
 */ /**
 * Get the {@link AudioTrackList}
 *
 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
 *
 * @return {AudioTrackList}
 *         the current audio track list
 *
 * @method Player.prototype.audioTracks
 */ /**
 * Get the {@link TextTrackList}
 *
 * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
 *
 * @return {TextTrackList}
 *         the current text track list
 *
 * @method Player.prototype.textTracks
 */ /**
 * Get the remote {@link TextTrackList}
 *
 * @return {TextTrackList}
 *         The current remote text track list
 *
 * @method Player.prototype.remoteTextTracks
 */ /**
 * Get the remote {@link HtmlTrackElementList} tracks.
 *
 * @return {HtmlTrackElementList}
 *         The current remote text track element list
 *
 * @method Player.prototype.remoteTextTrackEls
 */ $e88cd91ee18355c1$var$ALL.names.forEach(function(name) {
    const props = $e88cd91ee18355c1$var$ALL[name];
    $e88cd91ee18355c1$var$Player.prototype[props.getterName] = function() {
        if (this.tech_) return this.tech_[props.getterName]();
        // if we have not yet loadTech_, we create {video,audio,text}Tracks_
        // these will be passed to the tech during loading
        this[props.privateName] = this[props.privateName] || new props.ListClass();
        return this[props.privateName];
    };
});
/**
 * Get or set the `Player`'s crossorigin option. For the HTML5 player, this
 * sets the `crossOrigin` property on the `<video>` tag to control the CORS
 * behavior.
 *
 * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}
 *
 * @param {string} [value]
 *        The value to set the `Player`'s crossorigin to. If an argument is
 *        given, must be one of `anonymous` or `use-credentials`.
 *
 * @return {string|undefined}
 *         - The current crossorigin value of the `Player` when getting.
 *         - undefined when setting
 */ $e88cd91ee18355c1$var$Player.prototype.crossorigin = $e88cd91ee18355c1$var$Player.prototype.crossOrigin;
/**
 * Global enumeration of players.
 *
 * The keys are the player IDs and the values are either the {@link Player}
 * instance or `null` for disposed players.
 *
 * @type {Object}
 */ $e88cd91ee18355c1$var$Player.players = {};
const $e88cd91ee18355c1$var$navigator = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).navigator;
/*
 * Player instance options, surfaced using options
 * options = Player.prototype.options_
 * Make changes in options, not here.
 *
 * @type {Object}
 * @private
 */ $e88cd91ee18355c1$var$Player.prototype.options_ = {
    // Default order of fallback technology
    techOrder: $e88cd91ee18355c1$var$Tech.defaultTechOrder_,
    html5: {},
    // enable sourceset by default
    enableSourceset: true,
    // default inactivity timeout
    inactivityTimeout: 2000,
    // default playback rates
    playbackRates: [],
    // Add playback rate selection by adding rates
    // 'playbackRates': [0.5, 1, 1.5, 2],
    liveui: false,
    // Included control sets
    children: [
        "mediaLoader",
        "posterImage",
        "titleBar",
        "textTrackDisplay",
        "loadingSpinner",
        "bigPlayButton",
        "liveTracker",
        "controlBar",
        "errorDisplay",
        "textTrackSettings",
        "resizeManager"
    ],
    language: $e88cd91ee18355c1$var$navigator && ($e88cd91ee18355c1$var$navigator.languages && $e88cd91ee18355c1$var$navigator.languages[0] || $e88cd91ee18355c1$var$navigator.userLanguage || $e88cd91ee18355c1$var$navigator.language) || "en",
    // locales and their language translations
    languages: {},
    // Default message to show when a video cannot be played.
    notSupportedMessage: "No compatible source was found for this media.",
    normalizeAutoplay: false,
    fullscreen: {
        options: {
            navigationUI: "hide"
        }
    },
    breakpoints: {},
    responsive: false,
    audioOnlyMode: false,
    audioPosterMode: false,
    // Default smooth seeking to false
    enableSmoothSeeking: false
};
$e88cd91ee18355c1$var$TECH_EVENTS_RETRIGGER.forEach(function(event) {
    $e88cd91ee18355c1$var$Player.prototype[`handleTech${$e88cd91ee18355c1$var$toTitleCase$1(event)}_`] = function() {
        return this.trigger(event);
    };
});
/**
 * Fired when the player has initial duration and dimension information
 *
 * @event Player#loadedmetadata
 * @type {Event}
 */ /**
 * Fired when the player has downloaded data at the current playback position
 *
 * @event Player#loadeddata
 * @type {Event}
 */ /**
 * Fired when the current playback position has changed *
 * During playback this is fired every 15-250 milliseconds, depending on the
 * playback technology in use.
 *
 * @event Player#timeupdate
 * @type {Event}
 */ /**
 * Fired when the volume changes
 *
 * @event Player#volumechange
 * @type {Event}
 */ /**
 * Reports whether or not a player has a plugin available.
 *
 * This does not report whether or not the plugin has ever been initialized
 * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.
 *
 * @method Player#hasPlugin
 * @param  {string}  name
 *         The name of a plugin.
 *
 * @return {boolean}
 *         Whether or not this player has the requested plugin available.
 */ /**
 * Reports whether or not a player is using a plugin by name.
 *
 * For basic plugins, this only reports whether the plugin has _ever_ been
 * initialized on this player.
 *
 * @method Player#usingPlugin
 * @param  {string} name
 *         The name of a plugin.
 *
 * @return {boolean}
 *         Whether or not this player is using the requested plugin.
 */ $e88cd91ee18355c1$var$Component$1.registerComponent("Player", $e88cd91ee18355c1$var$Player);
/**
 * @file plugin.js
 */ /**
 * The base plugin name.
 *
 * @private
 * @constant
 * @type {string}
 */ const $e88cd91ee18355c1$var$BASE_PLUGIN_NAME = "plugin";
/**
 * The key on which a player's active plugins cache is stored.
 *
 * @private
 * @constant
 * @type     {string}
 */ const $e88cd91ee18355c1$var$PLUGIN_CACHE_KEY = "activePlugins_";
/**
 * Stores registered plugins in a private space.
 *
 * @private
 * @type    {Object}
 */ const $e88cd91ee18355c1$var$pluginStorage = {};
/**
 * Reports whether or not a plugin has been registered.
 *
 * @private
 * @param   {string} name
 *          The name of a plugin.
 *
 * @return {boolean}
 *          Whether or not the plugin has been registered.
 */ const $e88cd91ee18355c1$var$pluginExists = (name)=>$e88cd91ee18355c1$var$pluginStorage.hasOwnProperty(name);
/**
 * Get a single registered plugin by name.
 *
 * @private
 * @param   {string} name
 *          The name of a plugin.
 *
 * @return {typeof Plugin|Function|undefined}
 *          The plugin (or undefined).
 */ const $e88cd91ee18355c1$var$getPlugin = (name)=>$e88cd91ee18355c1$var$pluginExists(name) ? $e88cd91ee18355c1$var$pluginStorage[name] : undefined;
/**
 * Marks a plugin as "active" on a player.
 *
 * Also, ensures that the player has an object for tracking active plugins.
 *
 * @private
 * @param   {Player} player
 *          A Video.js player instance.
 *
 * @param   {string} name
 *          The name of a plugin.
 */ const $e88cd91ee18355c1$var$markPluginAsActive = (player, name)=>{
    player[$e88cd91ee18355c1$var$PLUGIN_CACHE_KEY] = player[$e88cd91ee18355c1$var$PLUGIN_CACHE_KEY] || {};
    player[$e88cd91ee18355c1$var$PLUGIN_CACHE_KEY][name] = true;
};
/**
 * Triggers a pair of plugin setup events.
 *
 * @private
 * @param  {Player} player
 *         A Video.js player instance.
 *
 * @param  {PluginEventHash} hash
 *         A plugin event hash.
 *
 * @param  {boolean} [before]
 *         If true, prefixes the event name with "before". In other words,
 *         use this to trigger "beforepluginsetup" instead of "pluginsetup".
 */ const $e88cd91ee18355c1$var$triggerSetupEvent = (player, hash, before)=>{
    const eventName = (before ? "before" : "") + "pluginsetup";
    player.trigger(eventName, hash);
    player.trigger(eventName + ":" + hash.name, hash);
};
/**
 * Takes a basic plugin function and returns a wrapper function which marks
 * on the player that the plugin has been activated.
 *
 * @private
 * @param   {string} name
 *          The name of the plugin.
 *
 * @param   {Function} plugin
 *          The basic plugin.
 *
 * @return {Function}
 *          A wrapper function for the given plugin.
 */ const $e88cd91ee18355c1$var$createBasicPlugin = function(name, plugin) {
    const basicPluginWrapper = function() {
        // We trigger the "beforepluginsetup" and "pluginsetup" events on the player
        // regardless, but we want the hash to be consistent with the hash provided
        // for advanced plugins.
        //
        // The only potentially counter-intuitive thing here is the `instance` in
        // the "pluginsetup" event is the value returned by the `plugin` function.
        $e88cd91ee18355c1$var$triggerSetupEvent(this, {
            name: name,
            plugin: plugin,
            instance: null
        }, true);
        const instance = plugin.apply(this, arguments);
        $e88cd91ee18355c1$var$markPluginAsActive(this, name);
        $e88cd91ee18355c1$var$triggerSetupEvent(this, {
            name: name,
            plugin: plugin,
            instance: instance
        });
        return instance;
    };
    Object.keys(plugin).forEach(function(prop) {
        basicPluginWrapper[prop] = plugin[prop];
    });
    return basicPluginWrapper;
};
/**
 * Takes a plugin sub-class and returns a factory function for generating
 * instances of it.
 *
 * This factory function will replace itself with an instance of the requested
 * sub-class of Plugin.
 *
 * @private
 * @param   {string} name
 *          The name of the plugin.
 *
 * @param   {Plugin} PluginSubClass
 *          The advanced plugin.
 *
 * @return {Function}
 */ const $e88cd91ee18355c1$var$createPluginFactory = (name, PluginSubClass)=>{
    // Add a `name` property to the plugin prototype so that each plugin can
    // refer to itself by name.
    PluginSubClass.prototype.name = name;
    return function(...args) {
        $e88cd91ee18355c1$var$triggerSetupEvent(this, {
            name: name,
            plugin: PluginSubClass,
            instance: null
        }, true);
        const instance = new PluginSubClass(...[
            this,
            ...args
        ]);
        // The plugin is replaced by a function that returns the current instance.
        this[name] = ()=>instance;
        $e88cd91ee18355c1$var$triggerSetupEvent(this, instance.getEventHash());
        return instance;
    };
};
/**
 * Parent class for all advanced plugins.
 *
 * @mixes   module:evented~EventedMixin
 * @mixes   module:stateful~StatefulMixin
 * @fires   Player#beforepluginsetup
 * @fires   Player#beforepluginsetup:$name
 * @fires   Player#pluginsetup
 * @fires   Player#pluginsetup:$name
 * @listens Player#dispose
 * @throws  {Error}
 *          If attempting to instantiate the base {@link Plugin} class
 *          directly instead of via a sub-class.
 */ class $e88cd91ee18355c1$var$Plugin {
    /**
   * Creates an instance of this class.
   *
   * Sub-classes should call `super` to ensure plugins are properly initialized.
   *
   * @param {Player} player
   *        A Video.js player instance.
   */ constructor(player){
        if (this.constructor === $e88cd91ee18355c1$var$Plugin) throw new Error("Plugin must be sub-classed; not directly instantiated.");
        this.player = player;
        if (!this.log) this.log = this.player.log.createLogger(this.name);
        // Make this object evented, but remove the added `trigger` method so we
        // use the prototype version instead.
        $e88cd91ee18355c1$var$evented(this);
        delete this.trigger;
        $e88cd91ee18355c1$var$stateful(this, this.constructor.defaultState);
        $e88cd91ee18355c1$var$markPluginAsActive(player, this.name);
        // Auto-bind the dispose method so we can use it as a listener and unbind
        // it later easily.
        this.dispose = this.dispose.bind(this);
        // If the player is disposed, dispose the plugin.
        player.on("dispose", this.dispose);
    }
    /**
   * Get the version of the plugin that was set on <pluginName>.VERSION
   */ version() {
        return this.constructor.VERSION;
    }
    /**
   * Each event triggered by plugins includes a hash of additional data with
   * conventional properties.
   *
   * This returns that object or mutates an existing hash.
   *
   * @param   {Object} [hash={}]
   *          An object to be used as event an event hash.
   *
   * @return {PluginEventHash}
   *          An event hash object with provided properties mixed-in.
   */ getEventHash(hash = {}) {
        hash.name = this.name;
        hash.plugin = this.constructor;
        hash.instance = this;
        return hash;
    }
    /**
   * Triggers an event on the plugin object and overrides
   * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.
   *
   * @param   {string|Object} event
   *          An event type or an object with a type property.
   *
   * @param   {Object} [hash={}]
   *          Additional data hash to merge with a
   *          {@link PluginEventHash|PluginEventHash}.
   *
   * @return {boolean}
   *          Whether or not default was prevented.
   */ trigger(event, hash = {}) {
        return $e88cd91ee18355c1$var$trigger(this.eventBusEl_, event, this.getEventHash(hash));
    }
    /**
   * Handles "statechanged" events on the plugin. No-op by default, override by
   * subclassing.
   *
   * @abstract
   * @param    {Event} e
   *           An event object provided by a "statechanged" event.
   *
   * @param    {Object} e.changes
   *           An object describing changes that occurred with the "statechanged"
   *           event.
   */ handleStateChanged(e) {}
    /**
   * Disposes a plugin.
   *
   * Subclasses can override this if they want, but for the sake of safety,
   * it's probably best to subscribe the "dispose" event.
   *
   * @fires Plugin#dispose
   */ dispose() {
        const { name: name, player: player } = this;
        /**
     * Signals that a advanced plugin is about to be disposed.
     *
     * @event Plugin#dispose
     * @type  {Event}
     */ this.trigger("dispose");
        this.off();
        player.off("dispose", this.dispose);
        // Eliminate any possible sources of leaking memory by clearing up
        // references between the player and the plugin instance and nulling out
        // the plugin's state and replacing methods with a function that throws.
        player[$e88cd91ee18355c1$var$PLUGIN_CACHE_KEY][name] = false;
        this.player = this.state = null;
        // Finally, replace the plugin name on the player with a new factory
        // function, so that the plugin is ready to be set up again.
        player[name] = $e88cd91ee18355c1$var$createPluginFactory(name, $e88cd91ee18355c1$var$pluginStorage[name]);
    }
    /**
   * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).
   *
   * @param   {string|Function} plugin
   *          If a string, matches the name of a plugin. If a function, will be
   *          tested directly.
   *
   * @return {boolean}
   *          Whether or not a plugin is a basic plugin.
   */ static isBasic(plugin) {
        const p = typeof plugin === "string" ? $e88cd91ee18355c1$var$getPlugin(plugin) : plugin;
        return typeof p === "function" && !$e88cd91ee18355c1$var$Plugin.prototype.isPrototypeOf(p.prototype);
    }
    /**
   * Register a Video.js plugin.
   *
   * @param   {string} name
   *          The name of the plugin to be registered. Must be a string and
   *          must not match an existing plugin or a method on the `Player`
   *          prototype.
   *
   * @param   {typeof Plugin|Function} plugin
   *          A sub-class of `Plugin` or a function for basic plugins.
   *
   * @return {typeof Plugin|Function}
   *          For advanced plugins, a factory function for that plugin. For
   *          basic plugins, a wrapper function that initializes the plugin.
   */ static registerPlugin(name, plugin) {
        if (typeof name !== "string") throw new Error(`Illegal plugin name, "${name}", must be a string, was ${typeof name}.`);
        if ($e88cd91ee18355c1$var$pluginExists(name)) $e88cd91ee18355c1$var$log$1.warn(`A plugin named "${name}" already exists. You may want to avoid re-registering plugins!`);
        else if ($e88cd91ee18355c1$var$Player.prototype.hasOwnProperty(name)) throw new Error(`Illegal plugin name, "${name}", cannot share a name with an existing player method!`);
        if (typeof plugin !== "function") throw new Error(`Illegal plugin for "${name}", must be a function, was ${typeof plugin}.`);
        $e88cd91ee18355c1$var$pluginStorage[name] = plugin;
        // Add a player prototype method for all sub-classed plugins (but not for
        // the base Plugin class).
        if (name !== $e88cd91ee18355c1$var$BASE_PLUGIN_NAME) {
            if ($e88cd91ee18355c1$var$Plugin.isBasic(plugin)) $e88cd91ee18355c1$var$Player.prototype[name] = $e88cd91ee18355c1$var$createBasicPlugin(name, plugin);
            else $e88cd91ee18355c1$var$Player.prototype[name] = $e88cd91ee18355c1$var$createPluginFactory(name, plugin);
        }
        return plugin;
    }
    /**
   * De-register a Video.js plugin.
   *
   * @param  {string} name
   *         The name of the plugin to be de-registered. Must be a string that
   *         matches an existing plugin.
   *
   * @throws {Error}
   *         If an attempt is made to de-register the base plugin.
   */ static deregisterPlugin(name) {
        if (name === $e88cd91ee18355c1$var$BASE_PLUGIN_NAME) throw new Error("Cannot de-register base plugin.");
        if ($e88cd91ee18355c1$var$pluginExists(name)) {
            delete $e88cd91ee18355c1$var$pluginStorage[name];
            delete $e88cd91ee18355c1$var$Player.prototype[name];
        }
    }
    /**
   * Gets an object containing multiple Video.js plugins.
   *
   * @param   {Array} [names]
   *          If provided, should be an array of plugin names. Defaults to _all_
   *          plugin names.
   *
   * @return {Object|undefined}
   *          An object containing plugin(s) associated with their name(s) or
   *          `undefined` if no matching plugins exist).
   */ static getPlugins(names = Object.keys($e88cd91ee18355c1$var$pluginStorage)) {
        let result;
        names.forEach((name)=>{
            const plugin = $e88cd91ee18355c1$var$getPlugin(name);
            if (plugin) {
                result = result || {};
                result[name] = plugin;
            }
        });
        return result;
    }
    /**
   * Gets a plugin's version, if available
   *
   * @param   {string} name
   *          The name of a plugin.
   *
   * @return {string}
   *          The plugin's version or an empty string.
   */ static getPluginVersion(name) {
        const plugin = $e88cd91ee18355c1$var$getPlugin(name);
        return plugin && plugin.VERSION || "";
    }
}
/**
 * Gets a plugin by name if it exists.
 *
 * @static
 * @method   getPlugin
 * @memberOf Plugin
 * @param    {string} name
 *           The name of a plugin.
 *
 * @returns  {typeof Plugin|Function|undefined}
 *           The plugin (or `undefined`).
 */ $e88cd91ee18355c1$var$Plugin.getPlugin = $e88cd91ee18355c1$var$getPlugin;
/**
 * The name of the base plugin class as it is registered.
 *
 * @type {string}
 */ $e88cd91ee18355c1$var$Plugin.BASE_PLUGIN_NAME = $e88cd91ee18355c1$var$BASE_PLUGIN_NAME;
$e88cd91ee18355c1$var$Plugin.registerPlugin($e88cd91ee18355c1$var$BASE_PLUGIN_NAME, $e88cd91ee18355c1$var$Plugin);
/**
 * Documented in player.js
 *
 * @ignore
 */ $e88cd91ee18355c1$var$Player.prototype.usingPlugin = function(name) {
    return !!this[$e88cd91ee18355c1$var$PLUGIN_CACHE_KEY] && this[$e88cd91ee18355c1$var$PLUGIN_CACHE_KEY][name] === true;
};
/**
 * Documented in player.js
 *
 * @ignore
 */ $e88cd91ee18355c1$var$Player.prototype.hasPlugin = function(name) {
    return !!$e88cd91ee18355c1$var$pluginExists(name);
};
/**
 * Signals that a plugin is about to be set up on a player.
 *
 * @event    Player#beforepluginsetup
 * @type     {PluginEventHash}
 */ /**
 * Signals that a plugin is about to be set up on a player - by name. The name
 * is the name of the plugin.
 *
 * @event    Player#beforepluginsetup:$name
 * @type     {PluginEventHash}
 */ /**
 * Signals that a plugin has just been set up on a player.
 *
 * @event    Player#pluginsetup
 * @type     {PluginEventHash}
 */ /**
 * Signals that a plugin has just been set up on a player - by name. The name
 * is the name of the plugin.
 *
 * @event    Player#pluginsetup:$name
 * @type     {PluginEventHash}
 */ /**
 * @typedef  {Object} PluginEventHash
 *
 * @property {string} instance
 *           For basic plugins, the return value of the plugin function. For
 *           advanced plugins, the plugin instance on which the event is fired.
 *
 * @property {string} name
 *           The name of the plugin.
 *
 * @property {string} plugin
 *           For basic plugins, the plugin function. For advanced plugins, the
 *           plugin class/constructor.
 */ /**
 * @file deprecate.js
 * @module deprecate
 */ /**
 * Decorate a function with a deprecation message the first time it is called.
 *
 * @param  {string}   message
 *         A deprecation message to log the first time the returned function
 *         is called.
 *
 * @param  {Function} fn
 *         The function to be deprecated.
 *
 * @return {Function}
 *         A wrapper function that will log a deprecation warning the first
 *         time it is called. The return value will be the return value of
 *         the wrapped function.
 */ function $e88cd91ee18355c1$var$deprecate(message, fn) {
    let warned = false;
    return function(...args) {
        if (!warned) $e88cd91ee18355c1$var$log$1.warn(message);
        warned = true;
        return fn.apply(this, args);
    };
}
/**
 * Internal function used to mark a function as deprecated in the next major
 * version with consistent messaging.
 *
 * @param  {number}   major   The major version where it will be removed
 * @param  {string}   oldName The old function name
 * @param  {string}   newName The new function name
 * @param  {Function} fn      The function to deprecate
 * @return {Function}         The decorated function
 */ function $e88cd91ee18355c1$var$deprecateForMajor(major, oldName, newName, fn) {
    return $e88cd91ee18355c1$var$deprecate(`${oldName} is deprecated and will be removed in ${major}.0; please use ${newName} instead.`, fn);
}
/**
 * @file video.js
 * @module videojs
 */ /**
 * Normalize an `id` value by trimming off a leading `#`
 *
 * @private
 * @param   {string} id
 *          A string, maybe with a leading `#`.
 *
 * @return {string}
 *          The string, without any leading `#`.
 */ const $e88cd91ee18355c1$var$normalizeId = (id)=>id.indexOf("#") === 0 ? id.slice(1) : id;
/**
 * A callback that is called when a component is ready. Does not have any
 * parameters and any callback value will be ignored. See: {@link Component~ReadyCallback}
 *
 * @callback ReadyCallback
 */ /**
 * The `videojs()` function doubles as the main function for users to create a
 * {@link Player} instance as well as the main library namespace.
 *
 * It can also be used as a getter for a pre-existing {@link Player} instance.
 * However, we _strongly_ recommend using `videojs.getPlayer()` for this
 * purpose because it avoids any potential for unintended initialization.
 *
 * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)
 * of our JSDoc template, we cannot properly document this as both a function
 * and a namespace, so its function signature is documented here.
 *
 * #### Arguments
 * ##### id
 * string|Element, **required**
 *
 * Video element or video element ID.
 *
 * ##### options
 * Object, optional
 *
 * Options object for providing settings.
 * See: [Options Guide](https://docs.videojs.com/tutorial-options.html).
 *
 * ##### ready
 * {@link Component~ReadyCallback}, optional
 *
 * A function to be called when the {@link Player} and {@link Tech} are ready.
 *
 * #### Return Value
 *
 * The `videojs()` function returns a {@link Player} instance.
 *
 * @namespace
 *
 * @borrows AudioTrack as AudioTrack
 * @borrows Component.getComponent as getComponent
 * @borrows module:events.on as on
 * @borrows module:events.one as one
 * @borrows module:events.off as off
 * @borrows module:events.trigger as trigger
 * @borrows EventTarget as EventTarget
 * @borrows module:middleware.use as use
 * @borrows Player.players as players
 * @borrows Plugin.registerPlugin as registerPlugin
 * @borrows Plugin.deregisterPlugin as deregisterPlugin
 * @borrows Plugin.getPlugins as getPlugins
 * @borrows Plugin.getPlugin as getPlugin
 * @borrows Plugin.getPluginVersion as getPluginVersion
 * @borrows Tech.getTech as getTech
 * @borrows Tech.registerTech as registerTech
 * @borrows TextTrack as TextTrack
 * @borrows VideoTrack as VideoTrack
 *
 * @param  {string|Element} id
 *         Video element or video element ID.
 *
 * @param  {Object} [options]
 *         Options object for providing settings.
 *         See: [Options Guide](https://docs.videojs.com/tutorial-options.html).
 *
 * @param  {ReadyCallback} [ready]
 *         A function to be called when the {@link Player} and {@link Tech} are
 *         ready.
 *
 * @return {Player}
 *         The `videojs()` function returns a {@link Player|Player} instance.
 */ function $e88cd91ee18355c1$export$2e2bcd8739ae039(id, options, ready) {
    let player = $e88cd91ee18355c1$export$2e2bcd8739ae039.getPlayer(id);
    if (player) {
        if (options) $e88cd91ee18355c1$var$log$1.warn(`Player "${id}" is already initialised. Options will not be applied.`);
        if (ready) player.ready(ready);
        return player;
    }
    const el = typeof id === "string" ? $e88cd91ee18355c1$var$$("#" + $e88cd91ee18355c1$var$normalizeId(id)) : id;
    if (!$e88cd91ee18355c1$var$isEl(el)) throw new TypeError("The element or ID supplied is not valid. (videojs)");
    // document.body.contains(el) will only check if el is contained within that one document.
    // This causes problems for elements in iframes.
    // Instead, use the element's ownerDocument instead of the global document.
    // This will make sure that the element is indeed in the dom of that document.
    // Additionally, check that the document in question has a default view.
    // If the document is no longer attached to the dom, the defaultView of the document will be null.
    // If element is inside Shadow DOM (e.g. is part of a Custom element), ownerDocument.body
    // always returns false. Instead, use the Shadow DOM root.
    const inShadowDom = "getRootNode" in el ? el.getRootNode() instanceof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).ShadowRoot : false;
    const rootNode = inShadowDom ? el.getRootNode() : el.ownerDocument.body;
    if (!el.ownerDocument.defaultView || !rootNode.contains(el)) $e88cd91ee18355c1$var$log$1.warn("The element supplied is not included in the DOM");
    options = options || {};
    // Store a copy of the el before modification, if it is to be restored in destroy()
    // If div ingest, store the parent div
    if (options.restoreEl === true) options.restoreEl = (el.parentNode && el.parentNode.hasAttribute("data-vjs-player") ? el.parentNode : el).cloneNode(true);
    $e88cd91ee18355c1$var$hooks("beforesetup").forEach((hookFunction)=>{
        const opts = hookFunction(el, $e88cd91ee18355c1$var$merge$1(options));
        if (!$e88cd91ee18355c1$var$isObject(opts) || Array.isArray(opts)) {
            $e88cd91ee18355c1$var$log$1.error("please return an object in beforesetup hooks");
            return;
        }
        options = $e88cd91ee18355c1$var$merge$1(options, opts);
    });
    // We get the current "Player" component here in case an integration has
    // replaced it with a custom player.
    const PlayerComponent = $e88cd91ee18355c1$var$Component$1.getComponent("Player");
    player = new PlayerComponent(el, options, ready);
    $e88cd91ee18355c1$var$hooks("setup").forEach((hookFunction)=>hookFunction(player));
    return player;
}
$e88cd91ee18355c1$export$2e2bcd8739ae039.hooks_ = $e88cd91ee18355c1$var$hooks_;
$e88cd91ee18355c1$export$2e2bcd8739ae039.hooks = $e88cd91ee18355c1$var$hooks;
$e88cd91ee18355c1$export$2e2bcd8739ae039.hook = $e88cd91ee18355c1$var$hook;
$e88cd91ee18355c1$export$2e2bcd8739ae039.hookOnce = $e88cd91ee18355c1$var$hookOnce;
$e88cd91ee18355c1$export$2e2bcd8739ae039.removeHook = $e88cd91ee18355c1$var$removeHook;
// Add default styles
if ((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).VIDEOJS_NO_DYNAMIC_STYLE !== true && $e88cd91ee18355c1$var$isReal()) {
    let style = $e88cd91ee18355c1$var$$(".vjs-styles-defaults");
    if (!style) {
        style = $e88cd91ee18355c1$var$createStyleElement("vjs-styles-defaults");
        const head = $e88cd91ee18355c1$var$$("head");
        if (head) head.insertBefore(style, head.firstChild);
        $e88cd91ee18355c1$var$setTextContent(style, `
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid:not(.vjs-audio-only-mode) {
        padding-top: 56.25%
      }
    `);
    }
}
// Run Auto-load players
// You have to wait at least once in case this script is loaded after your
// video in the DOM (weird behavior only with minified version)
$e88cd91ee18355c1$var$autoSetupTimeout(1, $e88cd91ee18355c1$export$2e2bcd8739ae039);
/**
 * Current Video.js version. Follows [semantic versioning](https://semver.org/).
 *
 * @type {string}
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.VERSION = $e88cd91ee18355c1$var$version$6;
/**
 * The global options object. These are the settings that take effect
 * if no overrides are specified when the player is created.
 *
 * @type {Object}
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.options = $e88cd91ee18355c1$var$Player.prototype.options_;
/**
 * Get an object with the currently created players, keyed by player ID
 *
 * @return {Object}
 *         The created players
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.getPlayers = ()=>$e88cd91ee18355c1$var$Player.players;
/**
 * Get a single player based on an ID or DOM element.
 *
 * This is useful if you want to check if an element or ID has an associated
 * Video.js player, but not create one if it doesn't.
 *
 * @param   {string|Element} id
 *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -
 *          or a string matching the `id` of such an element.
 *
 * @return {Player|undefined}
 *          A player instance or `undefined` if there is no player instance
 *          matching the argument.
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.getPlayer = (id)=>{
    const players = $e88cd91ee18355c1$var$Player.players;
    let tag;
    if (typeof id === "string") {
        const nId = $e88cd91ee18355c1$var$normalizeId(id);
        const player = players[nId];
        if (player) return player;
        tag = $e88cd91ee18355c1$var$$("#" + nId);
    } else tag = id;
    if ($e88cd91ee18355c1$var$isEl(tag)) {
        const { player: player, playerId: playerId } = tag;
        // Element may have a `player` property referring to an already created
        // player instance. If so, return that.
        if (player || players[playerId]) return player || players[playerId];
    }
};
/**
 * Returns an array of all current players.
 *
 * @return {Array}
 *         An array of all players. The array will be in the order that
 *         `Object.keys` provides, which could potentially vary between
 *         JavaScript engines.
 *
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.getAllPlayers = ()=>// Disposed players leave a key with a `null` value, so we need to make sure
    // we filter those out.
    Object.keys($e88cd91ee18355c1$var$Player.players).map((k)=>$e88cd91ee18355c1$var$Player.players[k]).filter(Boolean);
$e88cd91ee18355c1$export$2e2bcd8739ae039.players = $e88cd91ee18355c1$var$Player.players;
$e88cd91ee18355c1$export$2e2bcd8739ae039.getComponent = $e88cd91ee18355c1$var$Component$1.getComponent;
/**
 * Register a component so it can referred to by name. Used when adding to other
 * components, either through addChild `component.addChild('myComponent')` or through
 * default children options  `{ children: ['myComponent'] }`.
 *
 * > NOTE: You could also just initialize the component before adding.
 * `component.addChild(new MyComponent());`
 *
 * @param {string} name
 *        The class name of the component
 *
 * @param {typeof Component} comp
 *        The component class
 *
 * @return {typeof Component}
 *         The newly registered component
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.registerComponent = (name, comp)=>{
    if ($e88cd91ee18355c1$var$Tech.isTech(comp)) $e88cd91ee18355c1$var$log$1.warn(`The ${name} tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)`);
    return $e88cd91ee18355c1$var$Component$1.registerComponent.call($e88cd91ee18355c1$var$Component$1, name, comp);
};
$e88cd91ee18355c1$export$2e2bcd8739ae039.getTech = $e88cd91ee18355c1$var$Tech.getTech;
$e88cd91ee18355c1$export$2e2bcd8739ae039.registerTech = $e88cd91ee18355c1$var$Tech.registerTech;
$e88cd91ee18355c1$export$2e2bcd8739ae039.use = $e88cd91ee18355c1$var$use;
/**
 * An object that can be returned by a middleware to signify
 * that the middleware is being terminated.
 *
 * @type {object}
 * @property {object} middleware.TERMINATOR
 */ Object.defineProperty($e88cd91ee18355c1$export$2e2bcd8739ae039, "middleware", {
    value: {},
    writeable: false,
    enumerable: true
});
Object.defineProperty($e88cd91ee18355c1$export$2e2bcd8739ae039.middleware, "TERMINATOR", {
    value: $e88cd91ee18355c1$var$TERMINATOR,
    writeable: false,
    enumerable: true
});
/**
 * A reference to the {@link module:browser|browser utility module} as an object.
 *
 * @type {Object}
 * @see  {@link module:browser|browser}
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.browser = $e88cd91ee18355c1$var$browser;
/**
 * A reference to the {@link module:obj|obj utility module} as an object.
 *
 * @type {Object}
 * @see  {@link module:obj|obj}
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.obj = $e88cd91ee18355c1$var$Obj;
/**
 * Deprecated reference to the {@link module:obj.merge|merge function}
 *
 * @type {Function}
 * @see {@link module:obj.merge|merge}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.obj.merge instead.
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.mergeOptions = $e88cd91ee18355c1$var$deprecateForMajor(9, "videojs.mergeOptions", "videojs.obj.merge", $e88cd91ee18355c1$var$merge$1);
/**
 * Deprecated reference to the {@link module:obj.defineLazyProperty|defineLazyProperty function}
 *
 * @type {Function}
 * @see {@link module:obj.defineLazyProperty|defineLazyProperty}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.obj.defineLazyProperty instead.
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.defineLazyProperty = $e88cd91ee18355c1$var$deprecateForMajor(9, "videojs.defineLazyProperty", "videojs.obj.defineLazyProperty", $e88cd91ee18355c1$var$defineLazyProperty);
/**
 * Deprecated reference to the {@link module:fn.bind_|fn.bind_ function}
 *
 * @type {Function}
 * @see {@link module:fn.bind_|fn.bind_}
 * @deprecated Deprecated and will be removed in 9.0. Please use native Function.prototype.bind instead.
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.bind = $e88cd91ee18355c1$var$deprecateForMajor(9, "videojs.bind", "native Function.prototype.bind", $e88cd91ee18355c1$var$bind_);
$e88cd91ee18355c1$export$2e2bcd8739ae039.registerPlugin = $e88cd91ee18355c1$var$Plugin.registerPlugin;
$e88cd91ee18355c1$export$2e2bcd8739ae039.deregisterPlugin = $e88cd91ee18355c1$var$Plugin.deregisterPlugin;
/**
 * Deprecated method to register a plugin with Video.js
 *
 * @deprecated Deprecated and will be removed in 9.0. Use videojs.registerPlugin() instead.
 *
 * @param {string} name
 *        The plugin name
*
 * @param {typeof Plugin|Function} plugin
 *         The plugin sub-class or function
 *
 * @return {typeof Plugin|Function}
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.plugin = (name, plugin)=>{
    $e88cd91ee18355c1$var$log$1.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead");
    return $e88cd91ee18355c1$var$Plugin.registerPlugin(name, plugin);
};
$e88cd91ee18355c1$export$2e2bcd8739ae039.getPlugins = $e88cd91ee18355c1$var$Plugin.getPlugins;
$e88cd91ee18355c1$export$2e2bcd8739ae039.getPlugin = $e88cd91ee18355c1$var$Plugin.getPlugin;
$e88cd91ee18355c1$export$2e2bcd8739ae039.getPluginVersion = $e88cd91ee18355c1$var$Plugin.getPluginVersion;
/**
 * Adding languages so that they're available to all players.
 * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`
 *
 * @param {string} code
 *        The language code or dictionary property
 *
 * @param {Object} data
 *        The data values to be translated
 *
 * @return {Object}
 *         The resulting language dictionary object
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.addLanguage = function(code, data) {
    code = ("" + code).toLowerCase();
    $e88cd91ee18355c1$export$2e2bcd8739ae039.options.languages = $e88cd91ee18355c1$var$merge$1($e88cd91ee18355c1$export$2e2bcd8739ae039.options.languages, {
        [code]: data
    });
    return $e88cd91ee18355c1$export$2e2bcd8739ae039.options.languages[code];
};
/**
 * A reference to the {@link module:log|log utility module} as an object.
 *
 * @type {Function}
 * @see  {@link module:log|log}
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.log = $e88cd91ee18355c1$var$log$1;
$e88cd91ee18355c1$export$2e2bcd8739ae039.createLogger = $e88cd91ee18355c1$var$createLogger;
/**
 * A reference to the {@link module:time|time utility module} as an object.
 *
 * @type {Object}
 * @see {@link module:time|time}
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.time = $e88cd91ee18355c1$var$Time;
/**
 * Deprecated reference to the {@link module:time.createTimeRanges|createTimeRanges function}
 *
 * @type {Function}
 * @see {@link module:time.createTimeRanges|createTimeRanges}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.createTimeRanges instead.
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.createTimeRange = $e88cd91ee18355c1$var$deprecateForMajor(9, "videojs.createTimeRange", "videojs.time.createTimeRanges", $e88cd91ee18355c1$var$createTimeRanges$1);
/**
 * Deprecated reference to the {@link module:time.createTimeRanges|createTimeRanges function}
 *
 * @type {Function}
 * @see {@link module:time.createTimeRanges|createTimeRanges}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.createTimeRanges instead.
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.createTimeRanges = $e88cd91ee18355c1$var$deprecateForMajor(9, "videojs.createTimeRanges", "videojs.time.createTimeRanges", $e88cd91ee18355c1$var$createTimeRanges$1);
/**
 * Deprecated reference to the {@link module:time.formatTime|formatTime function}
 *
 * @type {Function}
 * @see {@link module:time.formatTime|formatTime}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.format instead.
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.formatTime = $e88cd91ee18355c1$var$deprecateForMajor(9, "videojs.formatTime", "videojs.time.formatTime", $e88cd91ee18355c1$var$formatTime);
/**
 * Deprecated reference to the {@link module:time.setFormatTime|setFormatTime function}
 *
 * @type {Function}
 * @see {@link module:time.setFormatTime|setFormatTime}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.setFormat instead.
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.setFormatTime = $e88cd91ee18355c1$var$deprecateForMajor(9, "videojs.setFormatTime", "videojs.time.setFormatTime", $e88cd91ee18355c1$var$setFormatTime);
/**
 * Deprecated reference to the {@link module:time.resetFormatTime|resetFormatTime function}
 *
 * @type {Function}
 * @see {@link module:time.resetFormatTime|resetFormatTime}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.resetFormat instead.
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.resetFormatTime = $e88cd91ee18355c1$var$deprecateForMajor(9, "videojs.resetFormatTime", "videojs.time.resetFormatTime", $e88cd91ee18355c1$var$resetFormatTime);
/**
 * Deprecated reference to the {@link module:url.parseUrl|Url.parseUrl function}
 *
 * @type {Function}
 * @see {@link module:url.parseUrl|parseUrl}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.url.parseUrl instead.
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.parseUrl = $e88cd91ee18355c1$var$deprecateForMajor(9, "videojs.parseUrl", "videojs.url.parseUrl", $e88cd91ee18355c1$var$parseUrl);
/**
 * Deprecated reference to the {@link module:url.isCrossOrigin|Url.isCrossOrigin function}
 *
 * @type {Function}
 * @see {@link module:url.isCrossOrigin|isCrossOrigin}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.url.isCrossOrigin instead.
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.isCrossOrigin = $e88cd91ee18355c1$var$deprecateForMajor(9, "videojs.isCrossOrigin", "videojs.url.isCrossOrigin", $e88cd91ee18355c1$var$isCrossOrigin);
$e88cd91ee18355c1$export$2e2bcd8739ae039.EventTarget = $e88cd91ee18355c1$var$EventTarget$2;
$e88cd91ee18355c1$export$2e2bcd8739ae039.any = $e88cd91ee18355c1$var$any;
$e88cd91ee18355c1$export$2e2bcd8739ae039.on = $e88cd91ee18355c1$var$on;
$e88cd91ee18355c1$export$2e2bcd8739ae039.one = $e88cd91ee18355c1$var$one;
$e88cd91ee18355c1$export$2e2bcd8739ae039.off = $e88cd91ee18355c1$var$off;
$e88cd91ee18355c1$export$2e2bcd8739ae039.trigger = $e88cd91ee18355c1$var$trigger;
/**
 * A cross-browser XMLHttpRequest wrapper.
 *
 * @function
 * @param    {Object} options
 *           Settings for the request.
 *
 * @return   {XMLHttpRequest|XDomainRequest}
 *           The request object.
 *
 * @see      https://github.com/Raynos/xhr
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.xhr = (0, (/*@__PURE__*/$parcel$interopDefault($cd8ca4e7fb39bc63$exports)));
$e88cd91ee18355c1$export$2e2bcd8739ae039.TextTrack = $e88cd91ee18355c1$var$TextTrack;
$e88cd91ee18355c1$export$2e2bcd8739ae039.AudioTrack = $e88cd91ee18355c1$var$AudioTrack;
$e88cd91ee18355c1$export$2e2bcd8739ae039.VideoTrack = $e88cd91ee18355c1$var$VideoTrack;
[
    "isEl",
    "isTextNode",
    "createEl",
    "hasClass",
    "addClass",
    "removeClass",
    "toggleClass",
    "setAttributes",
    "getAttributes",
    "emptyEl",
    "appendContent",
    "insertContent"
].forEach((k)=>{
    $e88cd91ee18355c1$export$2e2bcd8739ae039[k] = function() {
        $e88cd91ee18355c1$var$log$1.warn(`videojs.${k}() is deprecated; use videojs.dom.${k}() instead`);
        return $e88cd91ee18355c1$var$Dom[k].apply(null, arguments);
    };
});
$e88cd91ee18355c1$export$2e2bcd8739ae039.computedStyle = $e88cd91ee18355c1$var$deprecateForMajor(9, "videojs.computedStyle", "videojs.dom.computedStyle", $e88cd91ee18355c1$var$computedStyle);
/**
 * A reference to the {@link module:dom|DOM utility module} as an object.
 *
 * @type {Object}
 * @see {@link module:dom|dom}
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.dom = $e88cd91ee18355c1$var$Dom;
/**
 * A reference to the {@link module:fn|fn utility module} as an object.
 *
 * @type {Object}
 * @see {@link module:fn|fn}
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.fn = $e88cd91ee18355c1$var$Fn;
/**
 * A reference to the {@link module:num|num utility module} as an object.
 *
 * @type {Object}
 * @see {@link module:num|num}
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.num = $e88cd91ee18355c1$var$Num;
/**
 * A reference to the {@link module:str|str utility module} as an object.
 *
 * @type {Object}
 * @see {@link module:str|str}
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.str = $e88cd91ee18355c1$var$Str;
/**
 * A reference to the {@link module:url|URL utility module} as an object.
 *
 * @type {Object}
 * @see {@link module:url|url}
 */ $e88cd91ee18355c1$export$2e2bcd8739ae039.url = $e88cd91ee18355c1$var$Url;
/*! @name videojs-contrib-quality-levels @version 4.0.0 @license Apache-2.0 */ /**
 * A single QualityLevel.
 *
 * interface QualityLevel {
 *   readonly attribute DOMString id;
 *            attribute DOMString label;
 *   readonly attribute long width;
 *   readonly attribute long height;
 *   readonly attribute long bitrate;
 *            attribute boolean enabled;
 * };
 *
 * @class QualityLevel
 */ class $e88cd91ee18355c1$var$QualityLevel {
    /**
   * Creates a QualityLevel
   *
   * @param {Representation|Object} representation The representation of the quality level
   * @param {string}   representation.id        Unique id of the QualityLevel
   * @param {number=}  representation.width     Resolution width of the QualityLevel
   * @param {number=}  representation.height    Resolution height of the QualityLevel
   * @param {number}   representation.bandwidth Bitrate of the QualityLevel
   * @param {number=}  representation.frameRate Frame-rate of the QualityLevel
   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel
   */ constructor(representation){
        let level = this; // eslint-disable-line
        level.id = representation.id;
        level.label = level.id;
        level.width = representation.width;
        level.height = representation.height;
        level.bitrate = representation.bandwidth;
        level.frameRate = representation.frameRate;
        level.enabled_ = representation.enabled;
        Object.defineProperty(level, "enabled", {
            /**
       * Get whether the QualityLevel is enabled.
       *
       * @return {boolean} True if the QualityLevel is enabled.
       */ get () {
                return level.enabled_();
            },
            /**
       * Enable or disable the QualityLevel.
       *
       * @param {boolean} enable true to enable QualityLevel, false to disable.
       */ set (enable) {
                level.enabled_(enable);
            }
        });
        return level;
    }
}
/**
 * A list of QualityLevels.
 *
 * interface QualityLevelList : EventTarget {
 *   getter QualityLevel (unsigned long index);
 *   readonly attribute unsigned long length;
 *   readonly attribute long selectedIndex;
 *
 *   void addQualityLevel(QualityLevel qualityLevel)
 *   void removeQualityLevel(QualityLevel remove)
 *   QualityLevel? getQualityLevelById(DOMString id);
 *
 *   attribute EventHandler onchange;
 *   attribute EventHandler onaddqualitylevel;
 *   attribute EventHandler onremovequalitylevel;
 * };
 *
 * @extends videojs.EventTarget
 * @class QualityLevelList
 */ class $e88cd91ee18355c1$var$QualityLevelList extends $e88cd91ee18355c1$export$2e2bcd8739ae039.EventTarget {
    /**
   * Creates a QualityLevelList.
   */ constructor(){
        super();
        let list = this; // eslint-disable-line
        list.levels_ = [];
        list.selectedIndex_ = -1;
        /**
     * Get the index of the currently selected QualityLevel.
     *
     * @returns {number} The index of the selected QualityLevel. -1 if none selected.
     * @readonly
     */ Object.defineProperty(list, "selectedIndex", {
            get () {
                return list.selectedIndex_;
            }
        });
        /**
     * Get the length of the list of QualityLevels.
     *
     * @returns {number} The length of the list.
     * @readonly
     */ Object.defineProperty(list, "length", {
            get () {
                return list.levels_.length;
            }
        });
        list[Symbol.iterator] = ()=>list.levels_.values();
        return list;
    }
    /**
   * Adds a quality level to the list.
   *
   * @param {Representation|Object} representation The representation of the quality level
   * @param {string}   representation.id        Unique id of the QualityLevel
   * @param {number=}  representation.width     Resolution width of the QualityLevel
   * @param {number=}  representation.height    Resolution height of the QualityLevel
   * @param {number}   representation.bandwidth Bitrate of the QualityLevel
   * @param {number=}  representation.frameRate Frame-rate of the QualityLevel
   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel
   * @return {QualityLevel} the QualityLevel added to the list
   * @method addQualityLevel
   */ addQualityLevel(representation) {
        let qualityLevel = this.getQualityLevelById(representation.id); // Do not add duplicate quality levels
        if (qualityLevel) return qualityLevel;
        const index = this.levels_.length;
        qualityLevel = new $e88cd91ee18355c1$var$QualityLevel(representation);
        if (!("" + index in this)) Object.defineProperty(this, index, {
            get () {
                return this.levels_[index];
            }
        });
        this.levels_.push(qualityLevel);
        this.trigger({
            qualityLevel: qualityLevel,
            type: "addqualitylevel"
        });
        return qualityLevel;
    }
    /**
   * Removes a quality level from the list.
   *
   * @param {QualityLevel} qualityLevel The QualityLevel to remove from the list.
   * @return {QualityLevel|null} the QualityLevel removed or null if nothing removed
   * @method removeQualityLevel
   */ removeQualityLevel(qualityLevel) {
        let removed = null;
        for(let i = 0, l = this.length; i < l; i++)if (this[i] === qualityLevel) {
            removed = this.levels_.splice(i, 1)[0];
            if (this.selectedIndex_ === i) this.selectedIndex_ = -1;
            else if (this.selectedIndex_ > i) this.selectedIndex_--;
            break;
        }
        if (removed) this.trigger({
            qualityLevel: qualityLevel,
            type: "removequalitylevel"
        });
        return removed;
    }
    /**
   * Searches for a QualityLevel with the given id.
   *
   * @param {string} id The id of the QualityLevel to find.
   * @return {QualityLevel|null} The QualityLevel with id, or null if not found.
   * @method getQualityLevelById
   */ getQualityLevelById(id) {
        for(let i = 0, l = this.length; i < l; i++){
            const level = this[i];
            if (level.id === id) return level;
        }
        return null;
    }
    /**
   * Resets the list of QualityLevels to empty
   *
   * @method dispose
   */ dispose() {
        this.selectedIndex_ = -1;
        this.levels_.length = 0;
    }
}
/**
 * change - The selected QualityLevel has changed.
 * addqualitylevel - A QualityLevel has been added to the QualityLevelList.
 * removequalitylevel - A QualityLevel has been removed from the QualityLevelList.
 */ $e88cd91ee18355c1$var$QualityLevelList.prototype.allowedEvents_ = {
    change: "change",
    addqualitylevel: "addqualitylevel",
    removequalitylevel: "removequalitylevel"
}; // emulate attribute EventHandler support to allow for feature detection
for(const event in $e88cd91ee18355c1$var$QualityLevelList.prototype.allowedEvents_)$e88cd91ee18355c1$var$QualityLevelList.prototype["on" + event] = null;
var $e88cd91ee18355c1$var$version$5 = "4.0.0";
/**
 * Initialization function for the qualityLevels plugin. Sets up the QualityLevelList and
 * event handlers.
 *
 * @param {Player} player Player object.
 * @param {Object} options Plugin options object.
 * @return {QualityLevelList} a list of QualityLevels
 */ const $e88cd91ee18355c1$var$initPlugin$1 = function(player, options) {
    const originalPluginFn = player.qualityLevels;
    const qualityLevelList = new $e88cd91ee18355c1$var$QualityLevelList();
    const disposeHandler = function() {
        qualityLevelList.dispose();
        player.qualityLevels = originalPluginFn;
        player.off("dispose", disposeHandler);
    };
    player.on("dispose", disposeHandler);
    player.qualityLevels = ()=>qualityLevelList;
    player.qualityLevels.VERSION = $e88cd91ee18355c1$var$version$5;
    return qualityLevelList;
};
/**
 * A video.js plugin.
 *
 * In the plugin function, the value of `this` is a video.js `Player`
 * instance. You cannot rely on the player being in a "ready" state here,
 * depending on how the plugin is invoked. This may or may not be important
 * to you; if not, remove the wait for "ready"!
 *
 * @param {Object} options Plugin options object
 * @return {QualityLevelList} a list of QualityLevels
 */ const $e88cd91ee18355c1$var$qualityLevels = function(options) {
    return $e88cd91ee18355c1$var$initPlugin$1(this, $e88cd91ee18355c1$export$2e2bcd8739ae039.obj.merge({}, options));
}; // Register the plugin with video.js.
$e88cd91ee18355c1$export$2e2bcd8739ae039.registerPlugin("qualityLevels", $e88cd91ee18355c1$var$qualityLevels); // Include the version number.
$e88cd91ee18355c1$var$qualityLevels.VERSION = $e88cd91ee18355c1$var$version$5;
/*! @name @videojs/http-streaming @version 3.9.1 @license Apache-2.0 */ /**
 * @file resolve-url.js - Handling how URLs are resolved and manipulated
 */ const $e88cd91ee18355c1$var$resolveUrl = (0, $41be8b0ac22a951d$export$2e2bcd8739ae039);
/**
 * If the xhr request was redirected, return the responseURL, otherwise,
 * return the original url.
 *
 * @api private
 *
 * @param  {string} url - an url being requested
 * @param  {XMLHttpRequest} req - xhr request result
 *
 * @return {string}
 */ const $e88cd91ee18355c1$var$resolveManifestRedirect = (url, req)=>{
    // To understand how the responseURL below is set and generated:
    // - https://fetch.spec.whatwg.org/#concept-response-url
    // - https://fetch.spec.whatwg.org/#atomic-http-redirect-handling
    if (req && req.responseURL && url !== req.responseURL) return req.responseURL;
    return url;
};
const $e88cd91ee18355c1$var$logger = (source)=>{
    if ($e88cd91ee18355c1$export$2e2bcd8739ae039.log.debug) return $e88cd91ee18355c1$export$2e2bcd8739ae039.log.debug.bind($e88cd91ee18355c1$export$2e2bcd8739ae039, "VHS:", `${source} >`);
    return function() {};
};
/**
 * Provides a compatibility layer between Video.js 7 and 8 API changes for VHS.
 */ /**
 * Delegates to videojs.obj.merge (Video.js 8) or
 * videojs.mergeOptions (Video.js 7).
 */ function $e88cd91ee18355c1$var$merge(...args) {
    const context = $e88cd91ee18355c1$export$2e2bcd8739ae039.obj || $e88cd91ee18355c1$export$2e2bcd8739ae039;
    const fn = context.merge || context.mergeOptions;
    return fn.apply(context, args);
}
/**
 * Delegates to videojs.time.createTimeRanges (Video.js 8) or
 * videojs.createTimeRanges (Video.js 7).
 */ function $e88cd91ee18355c1$var$createTimeRanges(...args) {
    const context = $e88cd91ee18355c1$export$2e2bcd8739ae039.time || $e88cd91ee18355c1$export$2e2bcd8739ae039;
    const fn = context.createTimeRanges || context.createTimeRanges;
    return fn.apply(context, args);
}
/**
 * ranges
 *
 * Utilities for working with TimeRanges.
 *
 */ const $e88cd91ee18355c1$var$TIME_FUDGE_FACTOR = 1 / 30; // Comparisons between time values such as current time and the end of the buffered range
// can be misleading because of precision differences or when the current media has poorly
// aligned audio and video, which can cause values to be slightly off from what you would
// expect. This value is what we consider to be safe to use in such comparisons to account
// for these scenarios.
const $e88cd91ee18355c1$var$SAFE_TIME_DELTA = $e88cd91ee18355c1$var$TIME_FUDGE_FACTOR * 3;
const $e88cd91ee18355c1$var$filterRanges = function(timeRanges, predicate) {
    const results = [];
    let i;
    if (timeRanges && timeRanges.length) {
        // Search for ranges that match the predicate
        for(i = 0; i < timeRanges.length; i++)if (predicate(timeRanges.start(i), timeRanges.end(i))) results.push([
            timeRanges.start(i),
            timeRanges.end(i)
        ]);
    }
    return $e88cd91ee18355c1$var$createTimeRanges(results);
};
/**
 * Attempts to find the buffered TimeRange that contains the specified
 * time.
 *
 * @param {TimeRanges} buffered - the TimeRanges object to query
 * @param {number} time  - the time to filter on.
 * @return {TimeRanges} a new TimeRanges object
 */ const $e88cd91ee18355c1$var$findRange = function(buffered, time) {
    return $e88cd91ee18355c1$var$filterRanges(buffered, function(start, end) {
        return start - $e88cd91ee18355c1$var$SAFE_TIME_DELTA <= time && end + $e88cd91ee18355c1$var$SAFE_TIME_DELTA >= time;
    });
};
/**
 * Returns the TimeRanges that begin later than the specified time.
 *
 * @param {TimeRanges} timeRanges - the TimeRanges object to query
 * @param {number} time - the time to filter on.
 * @return {TimeRanges} a new TimeRanges object.
 */ const $e88cd91ee18355c1$var$findNextRange = function(timeRanges, time) {
    return $e88cd91ee18355c1$var$filterRanges(timeRanges, function(start) {
        return start - $e88cd91ee18355c1$var$TIME_FUDGE_FACTOR >= time;
    });
};
/**
 * Returns gaps within a list of TimeRanges
 *
 * @param {TimeRanges} buffered - the TimeRanges object
 * @return {TimeRanges} a TimeRanges object of gaps
 */ const $e88cd91ee18355c1$var$findGaps = function(buffered) {
    if (buffered.length < 2) return $e88cd91ee18355c1$var$createTimeRanges();
    const ranges = [];
    for(let i = 1; i < buffered.length; i++){
        const start = buffered.end(i - 1);
        const end = buffered.start(i);
        ranges.push([
            start,
            end
        ]);
    }
    return $e88cd91ee18355c1$var$createTimeRanges(ranges);
};
/**
 * Calculate the intersection of two TimeRanges
 *
 * @param {TimeRanges} bufferA
 * @param {TimeRanges} bufferB
 * @return {TimeRanges} The interesection of `bufferA` with `bufferB`
 */ const $e88cd91ee18355c1$var$bufferIntersection = function(bufferA, bufferB) {
    let start = null;
    let end = null;
    let arity = 0;
    const extents = [];
    const ranges = [];
    if (!bufferA || !bufferA.length || !bufferB || !bufferB.length) return $e88cd91ee18355c1$var$createTimeRanges();
     // Handle the case where we have both buffers and create an
    // intersection of the two
    let count = bufferA.length; // A) Gather up all start and end times
    while(count--){
        extents.push({
            time: bufferA.start(count),
            type: "start"
        });
        extents.push({
            time: bufferA.end(count),
            type: "end"
        });
    }
    count = bufferB.length;
    while(count--){
        extents.push({
            time: bufferB.start(count),
            type: "start"
        });
        extents.push({
            time: bufferB.end(count),
            type: "end"
        });
    } // B) Sort them by time
    extents.sort(function(a, b) {
        return a.time - b.time;
    }); // C) Go along one by one incrementing arity for start and decrementing
    //    arity for ends
    for(count = 0; count < extents.length; count++){
        if (extents[count].type === "start") {
            arity++; // D) If arity is ever incremented to 2 we are entering an
            //    overlapping range
            if (arity === 2) start = extents[count].time;
        } else if (extents[count].type === "end") {
            arity--; // E) If arity is ever decremented to 1 we leaving an
            //    overlapping range
            if (arity === 1) end = extents[count].time;
        } // F) Record overlapping ranges
        if (start !== null && end !== null) {
            ranges.push([
                start,
                end
            ]);
            start = null;
            end = null;
        }
    }
    return $e88cd91ee18355c1$var$createTimeRanges(ranges);
};
/**
 * Gets a human readable string for a TimeRange
 *
 * @param {TimeRange} range
 * @return {string} a human readable string
 */ const $e88cd91ee18355c1$var$printableRange = (range)=>{
    const strArr = [];
    if (!range || !range.length) return "";
    for(let i = 0; i < range.length; i++)strArr.push(range.start(i) + " => " + range.end(i));
    return strArr.join(", ");
};
/**
 * Calculates the amount of time left in seconds until the player hits the end of the
 * buffer and causes a rebuffer
 *
 * @param {TimeRange} buffered
 *        The state of the buffer
 * @param {Numnber} currentTime
 *        The current time of the player
 * @param {number} playbackRate
 *        The current playback rate of the player. Defaults to 1.
 * @return {number}
 *         Time until the player has to start rebuffering in seconds.
 * @function timeUntilRebuffer
 */ const $e88cd91ee18355c1$var$timeUntilRebuffer = function(buffered, currentTime, playbackRate = 1) {
    const bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;
    return (bufferedEnd - currentTime) / playbackRate;
};
/**
 * Converts a TimeRanges object into an array representation
 *
 * @param {TimeRanges} timeRanges
 * @return {Array}
 */ const $e88cd91ee18355c1$var$timeRangesToArray = (timeRanges)=>{
    const timeRangesList = [];
    for(let i = 0; i < timeRanges.length; i++)timeRangesList.push({
        start: timeRanges.start(i),
        end: timeRanges.end(i)
    });
    return timeRangesList;
};
/**
 * Determines if two time range objects are different.
 *
 * @param {TimeRange} a
 *        the first time range object to check
 *
 * @param {TimeRange} b
 *        the second time range object to check
 *
 * @return {Boolean}
 *         Whether the time range objects differ
 */ const $e88cd91ee18355c1$var$isRangeDifferent = function(a, b) {
    // same object
    if (a === b) return false;
     // one or the other is undefined
    if (!a && b || !b && a) return true;
     // length is different
    if (a.length !== b.length) return true;
     // see if any start/end pair is different
    for(let i = 0; i < a.length; i++){
        if (a.start(i) !== b.start(i) || a.end(i) !== b.end(i)) return true;
    } // if the length and every pair is the same
    // this is the same time range
    return false;
};
const $e88cd91ee18355c1$var$lastBufferedEnd = function(a) {
    if (!a || !a.length || !a.end) return;
    return a.end(a.length - 1);
};
/**
 * A utility function to add up the amount of time in a timeRange
 * after a specified startTime.
 * ie:[[0, 10], [20, 40], [50, 60]] with a startTime 0
 *     would return 40 as there are 40s seconds after 0 in the timeRange
 *
 * @param {TimeRange} range
 *        The range to check against
 * @param {number} startTime
 *        The time in the time range that you should start counting from
 *
 * @return {number}
 *          The number of seconds in the buffer passed the specified time.
 */ const $e88cd91ee18355c1$var$timeAheadOf = function(range, startTime) {
    let time = 0;
    if (!range || !range.length) return time;
    for(let i = 0; i < range.length; i++){
        const start = range.start(i);
        const end = range.end(i); // startTime is after this range entirely
        if (startTime > end) continue;
         // startTime is within this range
        if (startTime > start && startTime <= end) {
            time += end - startTime;
            continue;
        } // startTime is before this range.
        time += end - start;
    }
    return time;
};
/**
 * @file playlist.js
 *
 * Playlist related utilities.
 */ /**
 * Get the duration of a segment, with special cases for
 * llhls segments that do not have a duration yet.
 *
 * @param {Object} playlist
 *        the playlist that the segment belongs to.
 * @param {Object} segment
 *        the segment to get a duration for.
 *
 * @return {number}
 *          the segment duration
 */ const $e88cd91ee18355c1$var$segmentDurationWithParts = (playlist, segment)=>{
    // if this isn't a preload segment
    // then we will have a segment duration that is accurate.
    if (!segment.preload) return segment.duration;
     // otherwise we have to add up parts and preload hints
    // to get an up to date duration.
    let result = 0;
    (segment.parts || []).forEach(function(p) {
        result += p.duration;
    }); // for preload hints we have to use partTargetDuration
    // as they won't even have a duration yet.
    (segment.preloadHints || []).forEach(function(p) {
        if (p.type === "PART") result += playlist.partTargetDuration;
    });
    return result;
};
/**
 * A function to get a combined list of parts and segments with durations
 * and indexes.
 *
 * @param {Playlist} playlist the playlist to get the list for.
 *
 * @return {Array} The part/segment list.
 */ const $e88cd91ee18355c1$var$getPartsAndSegments = (playlist)=>(playlist.segments || []).reduce((acc, segment, si)=>{
        if (segment.parts) segment.parts.forEach(function(part, pi) {
            acc.push({
                duration: part.duration,
                segmentIndex: si,
                partIndex: pi,
                part: part,
                segment: segment
            });
        });
        else acc.push({
            duration: segment.duration,
            segmentIndex: si,
            partIndex: null,
            segment: segment,
            part: null
        });
        return acc;
    }, []);
const $e88cd91ee18355c1$var$getLastParts = (media)=>{
    const lastSegment = media.segments && media.segments.length && media.segments[media.segments.length - 1];
    return lastSegment && lastSegment.parts || [];
};
const $e88cd91ee18355c1$var$getKnownPartCount = ({ preloadSegment: preloadSegment })=>{
    if (!preloadSegment) return;
    const { parts: parts, preloadHints: preloadHints } = preloadSegment;
    let partCount = (preloadHints || []).reduce((count, hint)=>count + (hint.type === "PART" ? 1 : 0), 0);
    partCount += parts && parts.length ? parts.length : 0;
    return partCount;
};
/**
 * Get the number of seconds to delay from the end of a
 * live playlist.
 *
 * @param {Playlist} main the main playlist
 * @param {Playlist} media the media playlist
 * @return {number} the hold back in seconds.
 */ const $e88cd91ee18355c1$var$liveEdgeDelay = (main, media)=>{
    if (media.endList) return 0;
     // dash suggestedPresentationDelay trumps everything
    if (main && main.suggestedPresentationDelay) return main.suggestedPresentationDelay;
    const hasParts = $e88cd91ee18355c1$var$getLastParts(media).length > 0; // look for "part" delays from ll-hls first
    if (hasParts && media.serverControl && media.serverControl.partHoldBack) return media.serverControl.partHoldBack;
    else if (hasParts && media.partTargetDuration) return media.partTargetDuration * 3; // finally look for full segment delays
    else if (media.serverControl && media.serverControl.holdBack) return media.serverControl.holdBack;
    else if (media.targetDuration) return media.targetDuration * 3;
    return 0;
};
/**
 * walk backward until we find a duration we can use
 * or return a failure
 *
 * @param {Playlist} playlist the playlist to walk through
 * @param {Number} endSequence the mediaSequence to stop walking on
 */ const $e88cd91ee18355c1$var$backwardDuration = function(playlist, endSequence) {
    let result = 0;
    let i = endSequence - playlist.mediaSequence; // if a start time is available for segment immediately following
    // the interval, use it
    let segment = playlist.segments[i]; // Walk backward until we find the latest segment with timeline
    // information that is earlier than endSequence
    if (segment) {
        if (typeof segment.start !== "undefined") return {
            result: segment.start,
            precise: true
        };
        if (typeof segment.end !== "undefined") return {
            result: segment.end - segment.duration,
            precise: true
        };
    }
    while(i--){
        segment = playlist.segments[i];
        if (typeof segment.end !== "undefined") return {
            result: result + segment.end,
            precise: true
        };
        result += $e88cd91ee18355c1$var$segmentDurationWithParts(playlist, segment);
        if (typeof segment.start !== "undefined") return {
            result: result + segment.start,
            precise: true
        };
    }
    return {
        result: result,
        precise: false
    };
};
/**
 * walk forward until we find a duration we can use
 * or return a failure
 *
 * @param {Playlist} playlist the playlist to walk through
 * @param {number} endSequence the mediaSequence to stop walking on
 */ const $e88cd91ee18355c1$var$forwardDuration = function(playlist, endSequence) {
    let result = 0;
    let segment;
    let i = endSequence - playlist.mediaSequence; // Walk forward until we find the earliest segment with timeline
    // information
    for(; i < playlist.segments.length; i++){
        segment = playlist.segments[i];
        if (typeof segment.start !== "undefined") return {
            result: segment.start - result,
            precise: true
        };
        result += $e88cd91ee18355c1$var$segmentDurationWithParts(playlist, segment);
        if (typeof segment.end !== "undefined") return {
            result: segment.end - result,
            precise: true
        };
    } // indicate we didn't find a useful duration estimate
    return {
        result: -1,
        precise: false
    };
};
/**
  * Calculate the media duration from the segments associated with a
  * playlist. The duration of a subinterval of the available segments
  * may be calculated by specifying an end index.
  *
  * @param {Object} playlist a media playlist object
  * @param {number=} endSequence an exclusive upper boundary
  * for the playlist.  Defaults to playlist length.
  * @param {number} expired the amount of time that has dropped
  * off the front of the playlist in a live scenario
  * @return {number} the duration between the first available segment
  * and end index.
  */ const $e88cd91ee18355c1$var$intervalDuration = function(playlist, endSequence, expired) {
    if (typeof endSequence === "undefined") endSequence = playlist.mediaSequence + playlist.segments.length;
    if (endSequence < playlist.mediaSequence) return 0;
     // do a backward walk to estimate the duration
    const backward = $e88cd91ee18355c1$var$backwardDuration(playlist, endSequence);
    if (backward.precise) // if we were able to base our duration estimate on timing
    // information provided directly from the Media Source, return
    // it
    return backward.result;
     // walk forward to see if a precise duration estimate can be made
    // that way
    const forward = $e88cd91ee18355c1$var$forwardDuration(playlist, endSequence);
    if (forward.precise) // we found a segment that has been buffered and so it's
    // position is known precisely
    return forward.result;
     // return the less-precise, playlist-based duration estimate
    return backward.result + expired;
};
/**
  * Calculates the duration of a playlist. If a start and end index
  * are specified, the duration will be for the subset of the media
  * timeline between those two indices. The total duration for live
  * playlists is always Infinity.
  *
  * @param {Object} playlist a media playlist object
  * @param {number=} endSequence an exclusive upper
  * boundary for the playlist. Defaults to the playlist media
  * sequence number plus its length.
  * @param {number=} expired the amount of time that has
  * dropped off the front of the playlist in a live scenario
  * @return {number} the duration between the start index and end
  * index.
  */ const $e88cd91ee18355c1$var$duration = function(playlist, endSequence, expired) {
    if (!playlist) return 0;
    if (typeof expired !== "number") expired = 0;
     // if a slice of the total duration is not requested, use
    // playlist-level duration indicators when they're present
    if (typeof endSequence === "undefined") {
        // if present, use the duration specified in the playlist
        if (playlist.totalDuration) return playlist.totalDuration;
         // duration should be Infinity for live playlists
        if (!playlist.endList) return (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).Infinity;
    } // calculate the total duration based on the segment durations
    return $e88cd91ee18355c1$var$intervalDuration(playlist, endSequence, expired);
};
/**
  * Calculate the time between two indexes in the current playlist
  * neight the start- nor the end-index need to be within the current
  * playlist in which case, the targetDuration of the playlist is used
  * to approximate the durations of the segments
  *
  * @param {Array} options.durationList list to iterate over for durations.
  * @param {number} options.defaultDuration duration to use for elements before or after the durationList
  * @param {number} options.startIndex partsAndSegments index to start
  * @param {number} options.endIndex partsAndSegments index to end.
  * @return {number} the number of seconds between startIndex and endIndex
  */ const $e88cd91ee18355c1$var$sumDurations = function({ defaultDuration: defaultDuration, durationList: durationList, startIndex: startIndex, endIndex: endIndex }) {
    let durations = 0;
    if (startIndex > endIndex) [startIndex, endIndex] = [
        endIndex,
        startIndex
    ];
    if (startIndex < 0) {
        for(let i = startIndex; i < Math.min(0, endIndex); i++)durations += defaultDuration;
        startIndex = 0;
    }
    for(let i = startIndex; i < endIndex; i++)durations += durationList[i].duration;
    return durations;
};
/**
 * Calculates the playlist end time
 *
 * @param {Object} playlist a media playlist object
 * @param {number=} expired the amount of time that has
 *                  dropped off the front of the playlist in a live scenario
 * @param {boolean|false} useSafeLiveEnd a boolean value indicating whether or not the
 *                        playlist end calculation should consider the safe live end
 *                        (truncate the playlist end by three segments). This is normally
 *                        used for calculating the end of the playlist's seekable range.
 *                        This takes into account the value of liveEdgePadding.
 *                        Setting liveEdgePadding to 0 is equivalent to setting this to false.
 * @param {number} liveEdgePadding a number indicating how far from the end of the playlist we should be in seconds.
 *                 If this is provided, it is used in the safe live end calculation.
 *                 Setting useSafeLiveEnd=false or liveEdgePadding=0 are equivalent.
 *                 Corresponds to suggestedPresentationDelay in DASH manifests.
 * @return {number} the end time of playlist
 * @function playlistEnd
 */ const $e88cd91ee18355c1$var$playlistEnd = function(playlist, expired, useSafeLiveEnd, liveEdgePadding) {
    if (!playlist || !playlist.segments) return null;
    if (playlist.endList) return $e88cd91ee18355c1$var$duration(playlist);
    if (expired === null) return null;
    expired = expired || 0;
    let lastSegmentEndTime = $e88cd91ee18355c1$var$intervalDuration(playlist, playlist.mediaSequence + playlist.segments.length, expired);
    if (useSafeLiveEnd) {
        liveEdgePadding = typeof liveEdgePadding === "number" ? liveEdgePadding : $e88cd91ee18355c1$var$liveEdgeDelay(null, playlist);
        lastSegmentEndTime -= liveEdgePadding;
    } // don't return a time less than zero
    return Math.max(0, lastSegmentEndTime);
};
/**
  * Calculates the interval of time that is currently seekable in a
  * playlist. The returned time ranges are relative to the earliest
  * moment in the specified playlist that is still available. A full
  * seekable implementation for live streams would need to offset
  * these values by the duration of content that has expired from the
  * stream.
  *
  * @param {Object} playlist a media playlist object
  * dropped off the front of the playlist in a live scenario
  * @param {number=} expired the amount of time that has
  * dropped off the front of the playlist in a live scenario
  * @param {number} liveEdgePadding how far from the end of the playlist we should be in seconds.
  *        Corresponds to suggestedPresentationDelay in DASH manifests.
  * @return {TimeRanges} the periods of time that are valid targets
  * for seeking
  */ const $e88cd91ee18355c1$var$seekable = function(playlist, expired, liveEdgePadding) {
    const useSafeLiveEnd = true;
    const seekableStart = expired || 0;
    let seekableEnd = $e88cd91ee18355c1$var$playlistEnd(playlist, expired, useSafeLiveEnd, liveEdgePadding);
    if (seekableEnd === null) return $e88cd91ee18355c1$var$createTimeRanges();
     // Clamp seekable end since it can not be less than the seekable start
    if (seekableEnd < seekableStart) seekableEnd = seekableStart;
    return $e88cd91ee18355c1$var$createTimeRanges(seekableStart, seekableEnd);
};
/**
 * Determine the index and estimated starting time of the segment that
 * contains a specified playback position in a media playlist.
 *
 * @param {Object} options.playlist the media playlist to query
 * @param {number} options.currentTime The number of seconds since the earliest
 * possible position to determine the containing segment for
 * @param {number} options.startTime the time when the segment/part starts
 * @param {number} options.startingSegmentIndex the segment index to start looking at.
 * @param {number?} [options.startingPartIndex] the part index to look at within the segment.
 *
 * @return {Object} an object with partIndex, segmentIndex, and startTime.
 */ const $e88cd91ee18355c1$var$getMediaInfoForTime = function({ playlist: playlist, currentTime: currentTime, startingSegmentIndex: startingSegmentIndex, startingPartIndex: startingPartIndex, startTime: startTime, exactManifestTimings: exactManifestTimings }) {
    let time = currentTime - startTime;
    const partsAndSegments = $e88cd91ee18355c1$var$getPartsAndSegments(playlist);
    let startIndex = 0;
    for(let i = 0; i < partsAndSegments.length; i++){
        const partAndSegment = partsAndSegments[i];
        if (startingSegmentIndex !== partAndSegment.segmentIndex) continue;
         // skip this if part index does not match.
        if (typeof startingPartIndex === "number" && typeof partAndSegment.partIndex === "number" && startingPartIndex !== partAndSegment.partIndex) continue;
        startIndex = i;
        break;
    }
    if (time < 0) {
        // Walk backward from startIndex in the playlist, adding durations
        // until we find a segment that contains `time` and return it
        if (startIndex > 0) for(let i = startIndex - 1; i >= 0; i--){
            const partAndSegment = partsAndSegments[i];
            time += partAndSegment.duration;
            if (exactManifestTimings) {
                if (time < 0) continue;
            } else if (time + $e88cd91ee18355c1$var$TIME_FUDGE_FACTOR <= 0) continue;
            return {
                partIndex: partAndSegment.partIndex,
                segmentIndex: partAndSegment.segmentIndex,
                startTime: startTime - $e88cd91ee18355c1$var$sumDurations({
                    defaultDuration: playlist.targetDuration,
                    durationList: partsAndSegments,
                    startIndex: startIndex,
                    endIndex: i
                })
            };
        }
         // We were unable to find a good segment within the playlist
        // so select the first segment
        return {
            partIndex: partsAndSegments[0] && partsAndSegments[0].partIndex || null,
            segmentIndex: partsAndSegments[0] && partsAndSegments[0].segmentIndex || 0,
            startTime: currentTime
        };
    } // When startIndex is negative, we first walk forward to first segment
    // adding target durations. If we "run out of time" before getting to
    // the first segment, return the first segment
    if (startIndex < 0) {
        for(let i = startIndex; i < 0; i++){
            time -= playlist.targetDuration;
            if (time < 0) return {
                partIndex: partsAndSegments[0] && partsAndSegments[0].partIndex || null,
                segmentIndex: partsAndSegments[0] && partsAndSegments[0].segmentIndex || 0,
                startTime: currentTime
            };
        }
        startIndex = 0;
    } // Walk forward from startIndex in the playlist, subtracting durations
    // until we find a segment that contains `time` and return it
    for(let i = startIndex; i < partsAndSegments.length; i++){
        const partAndSegment = partsAndSegments[i];
        time -= partAndSegment.duration;
        const canUseFudgeFactor = partAndSegment.duration > $e88cd91ee18355c1$var$TIME_FUDGE_FACTOR;
        const isExactlyAtTheEnd = time === 0;
        const isExtremelyCloseToTheEnd = canUseFudgeFactor && time + $e88cd91ee18355c1$var$TIME_FUDGE_FACTOR >= 0;
        if (isExactlyAtTheEnd || isExtremelyCloseToTheEnd) {
            // 1) We are exactly at the end of the current segment.
            // 2) We are extremely close to the end of the current segment (The difference is less than  1 / 30).
            //    We may encounter this situation when
            //    we don't have exact match between segment duration info in the manifest and the actual duration of the segment
            //    For example:
            //    We appended 3 segments 10 seconds each, meaning we should have 30 sec buffered,
            //    but we the actual buffered is 29.99999
            //
            // In both cases:
            // if we passed current time -> it means that we already played current segment
            // if we passed buffered.end -> it means that this segment is already loaded and buffered
            // we should select the next segment if we have one:
            if (i !== partsAndSegments.length - 1) continue;
        }
        if (exactManifestTimings) {
            if (time > 0) continue;
        } else if (time - $e88cd91ee18355c1$var$TIME_FUDGE_FACTOR >= 0) continue;
        return {
            partIndex: partAndSegment.partIndex,
            segmentIndex: partAndSegment.segmentIndex,
            startTime: startTime + $e88cd91ee18355c1$var$sumDurations({
                defaultDuration: playlist.targetDuration,
                durationList: partsAndSegments,
                startIndex: startIndex,
                endIndex: i
            })
        };
    } // We are out of possible candidates so load the last one...
    return {
        segmentIndex: partsAndSegments[partsAndSegments.length - 1].segmentIndex,
        partIndex: partsAndSegments[partsAndSegments.length - 1].partIndex,
        startTime: currentTime
    };
};
/**
 * Check whether the playlist is excluded or not.
 *
 * @param {Object} playlist the media playlist object
 * @return {boolean} whether the playlist is excluded or not
 * @function isExcluded
 */ const $e88cd91ee18355c1$var$isExcluded = function(playlist) {
    return playlist.excludeUntil && playlist.excludeUntil > Date.now();
};
/**
 * Check whether the playlist is compatible with current playback configuration or has
 * been excluded permanently for being incompatible.
 *
 * @param {Object} playlist the media playlist object
 * @return {boolean} whether the playlist is incompatible or not
 * @function isIncompatible
 */ const $e88cd91ee18355c1$var$isIncompatible = function(playlist) {
    return playlist.excludeUntil && playlist.excludeUntil === Infinity;
};
/**
 * Check whether the playlist is enabled or not.
 *
 * @param {Object} playlist the media playlist object
 * @return {boolean} whether the playlist is enabled or not
 * @function isEnabled
 */ const $e88cd91ee18355c1$var$isEnabled = function(playlist) {
    const excluded = $e88cd91ee18355c1$var$isExcluded(playlist);
    return !playlist.disabled && !excluded;
};
/**
 * Check whether the playlist has been manually disabled through the representations api.
 *
 * @param {Object} playlist the media playlist object
 * @return {boolean} whether the playlist is disabled manually or not
 * @function isDisabled
 */ const $e88cd91ee18355c1$var$isDisabled = function(playlist) {
    return playlist.disabled;
};
/**
 * Returns whether the current playlist is an AES encrypted HLS stream
 *
 * @return {boolean} true if it's an AES encrypted HLS stream
 */ const $e88cd91ee18355c1$var$isAes = function(media) {
    for(let i = 0; i < media.segments.length; i++){
        if (media.segments[i].key) return true;
    }
    return false;
};
/**
 * Checks if the playlist has a value for the specified attribute
 *
 * @param {string} attr
 *        Attribute to check for
 * @param {Object} playlist
 *        The media playlist object
 * @return {boolean}
 *         Whether the playlist contains a value for the attribute or not
 * @function hasAttribute
 */ const $e88cd91ee18355c1$var$hasAttribute = function(attr, playlist) {
    return playlist.attributes && playlist.attributes[attr];
};
/**
 * Estimates the time required to complete a segment download from the specified playlist
 *
 * @param {number} segmentDuration
 *        Duration of requested segment
 * @param {number} bandwidth
 *        Current measured bandwidth of the player
 * @param {Object} playlist
 *        The media playlist object
 * @param {number=} bytesReceived
 *        Number of bytes already received for the request. Defaults to 0
 * @return {number|NaN}
 *         The estimated time to request the segment. NaN if bandwidth information for
 *         the given playlist is unavailable
 * @function estimateSegmentRequestTime
 */ const $e88cd91ee18355c1$var$estimateSegmentRequestTime = function(segmentDuration, bandwidth, playlist, bytesReceived = 0) {
    if (!$e88cd91ee18355c1$var$hasAttribute("BANDWIDTH", playlist)) return NaN;
    const size = segmentDuration * playlist.attributes.BANDWIDTH;
    return (size - bytesReceived * 8) / bandwidth;
};
/*
 * Returns whether the current playlist is the lowest rendition
 *
 * @return {Boolean} true if on lowest rendition
 */ const $e88cd91ee18355c1$var$isLowestEnabledRendition = (main, media)=>{
    if (main.playlists.length === 1) return true;
    const currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;
    return main.playlists.filter((playlist)=>{
        if (!$e88cd91ee18355c1$var$isEnabled(playlist)) return false;
        return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;
    }).length === 0;
};
const $e88cd91ee18355c1$var$playlistMatch = (a, b)=>{
    // both playlits are null
    // or only one playlist is non-null
    // no match
    if (!a && !b || !a && b || a && !b) return false;
     // playlist objects are the same, match
    if (a === b) return true;
     // first try to use id as it should be the most
    // accurate
    if (a.id && b.id && a.id === b.id) return true;
     // next try to use reslovedUri as it should be the
    // second most accurate.
    if (a.resolvedUri && b.resolvedUri && a.resolvedUri === b.resolvedUri) return true;
     // finally try to use uri as it should be accurate
    // but might miss a few cases for relative uris
    if (a.uri && b.uri && a.uri === b.uri) return true;
    return false;
};
const $e88cd91ee18355c1$var$someAudioVariant = function(main, callback) {
    const AUDIO = main && main.mediaGroups && main.mediaGroups.AUDIO || {};
    let found = false;
    for(const groupName in AUDIO){
        for(const label in AUDIO[groupName]){
            found = callback(AUDIO[groupName][label]);
            if (found) break;
        }
        if (found) break;
    }
    return !!found;
};
const $e88cd91ee18355c1$var$isAudioOnly = (main)=>{
    // we are audio only if we have no main playlists but do
    // have media group playlists.
    if (!main || !main.playlists || !main.playlists.length) {
        // without audio variants or playlists this
        // is not an audio only main.
        const found = $e88cd91ee18355c1$var$someAudioVariant(main, (variant)=>variant.playlists && variant.playlists.length || variant.uri);
        return found;
    } // if every playlist has only an audio codec it is audio only
    for(let i = 0; i < main.playlists.length; i++){
        const playlist = main.playlists[i];
        const CODECS = playlist.attributes && playlist.attributes.CODECS; // all codecs are audio, this is an audio playlist.
        if (CODECS && CODECS.split(",").every((c)=>(0, $823f1f5df1bbf628$export$c642d74e895e3217)(c))) continue;
         // playlist is in an audio group it is audio only
        const found = $e88cd91ee18355c1$var$someAudioVariant(main, (variant)=>$e88cd91ee18355c1$var$playlistMatch(playlist, variant));
        if (found) continue;
         // if we make it here this playlist isn't audio and we
        // are not audio only
        return false;
    } // if we make it past every playlist without returning, then
    // this is an audio only playlist.
    return true;
}; // exports
var $e88cd91ee18355c1$var$Playlist = {
    liveEdgeDelay: $e88cd91ee18355c1$var$liveEdgeDelay,
    duration: $e88cd91ee18355c1$var$duration,
    seekable: $e88cd91ee18355c1$var$seekable,
    getMediaInfoForTime: $e88cd91ee18355c1$var$getMediaInfoForTime,
    isEnabled: $e88cd91ee18355c1$var$isEnabled,
    isDisabled: $e88cd91ee18355c1$var$isDisabled,
    isExcluded: $e88cd91ee18355c1$var$isExcluded,
    isIncompatible: $e88cd91ee18355c1$var$isIncompatible,
    playlistEnd: $e88cd91ee18355c1$var$playlistEnd,
    isAes: $e88cd91ee18355c1$var$isAes,
    hasAttribute: $e88cd91ee18355c1$var$hasAttribute,
    estimateSegmentRequestTime: $e88cd91ee18355c1$var$estimateSegmentRequestTime,
    isLowestEnabledRendition: $e88cd91ee18355c1$var$isLowestEnabledRendition,
    isAudioOnly: $e88cd91ee18355c1$var$isAudioOnly,
    playlistMatch: $e88cd91ee18355c1$var$playlistMatch,
    segmentDurationWithParts: $e88cd91ee18355c1$var$segmentDurationWithParts
};
const { log: $e88cd91ee18355c1$var$log } = $e88cd91ee18355c1$export$2e2bcd8739ae039;
const $e88cd91ee18355c1$var$createPlaylistID = (index, uri)=>{
    return `${index}-${uri}`;
}; // default function for creating a group id
const $e88cd91ee18355c1$var$groupID = (type, group, label)=>{
    return `placeholder-uri-${type}-${group}-${label}`;
};
/**
 * Parses a given m3u8 playlist
 *
 * @param {Function} [onwarn]
 *        a function to call when the parser triggers a warning event.
 * @param {Function} [oninfo]
 *        a function to call when the parser triggers an info event.
 * @param {string} manifestString
 *        The downloaded manifest string
 * @param {Object[]} [customTagParsers]
 *        An array of custom tag parsers for the m3u8-parser instance
 * @param {Object[]} [customTagMappers]
 *        An array of custom tag mappers for the m3u8-parser instance
 * @param {boolean} [llhls]
 *        Whether to keep ll-hls features in the manifest after parsing.
 * @return {Object}
 *         The manifest object
 */ const $e88cd91ee18355c1$var$parseManifest = ({ onwarn: onwarn, oninfo: oninfo, manifestString: manifestString, customTagParsers: customTagParsers = [], customTagMappers: customTagMappers = [], llhls: llhls })=>{
    const parser = new (0, $c4d97af6644a7726$export$7acfa6ed01010e37)();
    if (onwarn) parser.on("warn", onwarn);
    if (oninfo) parser.on("info", oninfo);
    customTagParsers.forEach((customParser)=>parser.addParser(customParser));
    customTagMappers.forEach((mapper)=>parser.addTagMapper(mapper));
    parser.push(manifestString);
    parser.end();
    const manifest = parser.manifest; // remove llhls features from the parsed manifest
    // if we don't want llhls support.
    if (!llhls) {
        [
            "preloadSegment",
            "skip",
            "serverControl",
            "renditionReports",
            "partInf",
            "partTargetDuration"
        ].forEach(function(k) {
            if (manifest.hasOwnProperty(k)) delete manifest[k];
        });
        if (manifest.segments) manifest.segments.forEach(function(segment) {
            [
                "parts",
                "preloadHints"
            ].forEach(function(k) {
                if (segment.hasOwnProperty(k)) delete segment[k];
            });
        });
    }
    if (!manifest.targetDuration) {
        let targetDuration = 10;
        if (manifest.segments && manifest.segments.length) targetDuration = manifest.segments.reduce((acc, s)=>Math.max(acc, s.duration), 0);
        if (onwarn) onwarn({
            message: `manifest has no targetDuration defaulting to ${targetDuration}`
        });
        manifest.targetDuration = targetDuration;
    }
    const parts = $e88cd91ee18355c1$var$getLastParts(manifest);
    if (parts.length && !manifest.partTargetDuration) {
        const partTargetDuration = parts.reduce((acc, p)=>Math.max(acc, p.duration), 0);
        if (onwarn) {
            onwarn({
                message: `manifest has no partTargetDuration defaulting to ${partTargetDuration}`
            });
            $e88cd91ee18355c1$var$log.error("LL-HLS manifest has parts but lacks required #EXT-X-PART-INF:PART-TARGET value. See https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-09#section-4.4.3.7. Playback is not guaranteed.");
        }
        manifest.partTargetDuration = partTargetDuration;
    }
    return manifest;
};
/**
 * Loops through all supported media groups in main and calls the provided
 * callback for each group
 *
 * @param {Object} main
 *        The parsed main manifest object
 * @param {Function} callback
 *        Callback to call for each media group
 */ const $e88cd91ee18355c1$var$forEachMediaGroup = (main, callback)=>{
    if (!main.mediaGroups) return;
    [
        "AUDIO",
        "SUBTITLES"
    ].forEach((mediaType)=>{
        if (!main.mediaGroups[mediaType]) return;
        for(const groupKey in main.mediaGroups[mediaType])for(const labelKey in main.mediaGroups[mediaType][groupKey]){
            const mediaProperties = main.mediaGroups[mediaType][groupKey][labelKey];
            callback(mediaProperties, mediaType, groupKey, labelKey);
        }
    });
};
/**
 * Adds properties and attributes to the playlist to keep consistent functionality for
 * playlists throughout VHS.
 *
 * @param {Object} config
 *        Arguments object
 * @param {Object} config.playlist
 *        The media playlist
 * @param {string} [config.uri]
 *        The uri to the media playlist (if media playlist is not from within a main
 *        playlist)
 * @param {string} id
 *        ID to use for the playlist
 */ const $e88cd91ee18355c1$var$setupMediaPlaylist = ({ playlist: playlist, uri: uri, id: id })=>{
    playlist.id = id;
    playlist.playlistErrors_ = 0;
    if (uri) // For media playlists, m3u8-parser does not have access to a URI, as HLS media
    // playlists do not contain their own source URI, but one is needed for consistency in
    // VHS.
    playlist.uri = uri;
     // For HLS main playlists, even though certain attributes MUST be defined, the
    // stream may still be played without them.
    // For HLS media playlists, m3u8-parser does not attach an attributes object to the
    // manifest.
    //
    // To avoid undefined reference errors through the project, and make the code easier
    // to write/read, add an empty attributes object for these cases.
    playlist.attributes = playlist.attributes || {};
};
/**
 * Adds ID, resolvedUri, and attributes properties to each playlist of the main, where
 * necessary. In addition, creates playlist IDs for each playlist and adds playlist ID to
 * playlist references to the playlists array.
 *
 * @param {Object} main
 *        The main playlist
 */ const $e88cd91ee18355c1$var$setupMediaPlaylists = (main)=>{
    let i = main.playlists.length;
    while(i--){
        const playlist = main.playlists[i];
        $e88cd91ee18355c1$var$setupMediaPlaylist({
            playlist: playlist,
            id: $e88cd91ee18355c1$var$createPlaylistID(i, playlist.uri)
        });
        playlist.resolvedUri = $e88cd91ee18355c1$var$resolveUrl(main.uri, playlist.uri);
        main.playlists[playlist.id] = playlist; // URI reference added for backwards compatibility
        main.playlists[playlist.uri] = playlist; // Although the spec states an #EXT-X-STREAM-INF tag MUST have a BANDWIDTH attribute,
        // the stream can be played without it. Although an attributes property may have been
        // added to the playlist to prevent undefined references, issue a warning to fix the
        // manifest.
        if (!playlist.attributes.BANDWIDTH) $e88cd91ee18355c1$var$log.warn("Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.");
    }
};
/**
 * Adds resolvedUri properties to each media group.
 *
 * @param {Object} main
 *        The main playlist
 */ const $e88cd91ee18355c1$var$resolveMediaGroupUris = (main)=>{
    $e88cd91ee18355c1$var$forEachMediaGroup(main, (properties)=>{
        if (properties.uri) properties.resolvedUri = $e88cd91ee18355c1$var$resolveUrl(main.uri, properties.uri);
    });
};
/**
 * Creates a main playlist wrapper to insert a sole media playlist into.
 *
 * @param {Object} media
 *        Media playlist
 * @param {string} uri
 *        The media URI
 *
 * @return {Object}
 *         main playlist
 */ const $e88cd91ee18355c1$var$mainForMedia = (media, uri)=>{
    const id = $e88cd91ee18355c1$var$createPlaylistID(0, uri);
    const main = {
        mediaGroups: {
            "AUDIO": {},
            "VIDEO": {},
            "CLOSED-CAPTIONS": {},
            "SUBTITLES": {}
        },
        uri: (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).location.href,
        resolvedUri: (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).location.href,
        playlists: [
            {
                uri: uri,
                id: id,
                resolvedUri: uri,
                // m3u8-parser does not attach an attributes property to media playlists so make
                // sure that the property is attached to avoid undefined reference errors
                attributes: {}
            }
        ]
    }; // set up ID reference
    main.playlists[id] = main.playlists[0]; // URI reference added for backwards compatibility
    main.playlists[uri] = main.playlists[0];
    return main;
};
/**
 * Does an in-place update of the main manifest to add updated playlist URI references
 * as well as other properties needed by VHS that aren't included by the parser.
 *
 * @param {Object} main
 *        main manifest object
 * @param {string} uri
 *        The source URI
 * @param {function} createGroupID
 *        A function to determine how to create the groupID for mediaGroups
 */ const $e88cd91ee18355c1$var$addPropertiesToMain = (main, uri, createGroupID = $e88cd91ee18355c1$var$groupID)=>{
    main.uri = uri;
    for(let i = 0; i < main.playlists.length; i++)if (!main.playlists[i].uri) {
        // Set up phony URIs for the playlists since playlists are referenced by their URIs
        // throughout VHS, but some formats (e.g., DASH) don't have external URIs
        // TODO: consider adding dummy URIs in mpd-parser
        const phonyUri = `placeholder-uri-${i}`;
        main.playlists[i].uri = phonyUri;
    }
    const audioOnlyMain = $e88cd91ee18355c1$var$isAudioOnly(main);
    $e88cd91ee18355c1$var$forEachMediaGroup(main, (properties, mediaType, groupKey, labelKey)=>{
        // add a playlist array under properties
        if (!properties.playlists || !properties.playlists.length) {
            // If the manifest is audio only and this media group does not have a uri, check
            // if the media group is located in the main list of playlists. If it is, don't add
            // placeholder properties as it shouldn't be considered an alternate audio track.
            if (audioOnlyMain && mediaType === "AUDIO" && !properties.uri) for(let i = 0; i < main.playlists.length; i++){
                const p = main.playlists[i];
                if (p.attributes && p.attributes.AUDIO && p.attributes.AUDIO === groupKey) return;
            }
            properties.playlists = [
                (0, (/*@__PURE__*/$parcel$interopDefault($a41f6c2ef6e36772$exports)))({}, properties)
            ];
        }
        properties.playlists.forEach(function(p, i) {
            const groupId = createGroupID(mediaType, groupKey, labelKey, p);
            const id = $e88cd91ee18355c1$var$createPlaylistID(i, groupId);
            if (p.uri) p.resolvedUri = p.resolvedUri || $e88cd91ee18355c1$var$resolveUrl(main.uri, p.uri);
            else {
                // DEPRECATED, this has been added to prevent a breaking change.
                // previously we only ever had a single media group playlist, so
                // we mark the first playlist uri without prepending the index as we used to
                // ideally we would do all of the playlists the same way.
                p.uri = i === 0 ? groupId : id; // don't resolve a placeholder uri to an absolute url, just use
                // the placeholder again
                p.resolvedUri = p.uri;
            }
            p.id = p.id || id; // add an empty attributes object, all playlists are
            // expected to have this.
            p.attributes = p.attributes || {}; // setup ID and URI references (URI for backwards compatibility)
            main.playlists[p.id] = p;
            main.playlists[p.uri] = p;
        });
    });
    $e88cd91ee18355c1$var$setupMediaPlaylists(main);
    $e88cd91ee18355c1$var$resolveMediaGroupUris(main);
};
class $e88cd91ee18355c1$var$DateRangesStorage {
    constructor(){
        this.offset_ = null;
        this.pendingDateRanges_ = new Map();
        this.processedDateRanges_ = new Map();
    }
    setOffset(segments = []) {
        // already set
        if (this.offset_ !== null) return;
         // no segment to process
        if (!segments.length) return;
        const [firstSegment] = segments; // no program date time
        if (firstSegment.programDateTime === undefined) return;
         // Set offset as ProgramDateTime for the very first segment of the very first playlist load:
        this.offset_ = firstSegment.programDateTime / 1000;
    }
    setPendingDateRanges(dateRanges = []) {
        if (!dateRanges.length) return;
        const [dateRange] = dateRanges;
        const startTime = dateRange.startDate.getTime();
        this.trimProcessedDateRanges_(startTime);
        this.pendingDateRanges_ = dateRanges.reduce((map, pendingDateRange)=>{
            map.set(pendingDateRange.id, pendingDateRange);
            return map;
        }, new Map());
    }
    processDateRange(dateRange) {
        this.pendingDateRanges_.delete(dateRange.id);
        this.processedDateRanges_.set(dateRange.id, dateRange);
    }
    getDateRangesToProcess() {
        if (this.offset_ === null) return [];
        const dateRangeClasses = {};
        const dateRangesToProcess = [];
        this.pendingDateRanges_.forEach((dateRange, id)=>{
            if (this.processedDateRanges_.has(id)) return;
            dateRange.startTime = dateRange.startDate.getTime() / 1000 - this.offset_;
            dateRange.processDateRange = ()=>this.processDateRange(dateRange);
            dateRangesToProcess.push(dateRange);
            if (!dateRange.class) return;
            if (dateRangeClasses[dateRange.class]) {
                const length = dateRangeClasses[dateRange.class].push(dateRange);
                dateRange.classListIndex = length - 1;
            } else {
                dateRangeClasses[dateRange.class] = [
                    dateRange
                ];
                dateRange.classListIndex = 0;
            }
        });
        for (const dateRange of dateRangesToProcess){
            const classList = dateRangeClasses[dateRange.class] || [];
            if (dateRange.endDate) dateRange.endTime = dateRange.endDate.getTime() / 1000 - this.offset_;
            else if (dateRange.endOnNext && classList[dateRange.classListIndex + 1]) dateRange.endTime = classList[dateRange.classListIndex + 1].startTime;
            else if (dateRange.duration) dateRange.endTime = dateRange.startTime + dateRange.duration;
            else if (dateRange.plannedDuration) dateRange.endTime = dateRange.startTime + dateRange.plannedDuration;
            else dateRange.endTime = dateRange.startTime;
        }
        return dateRangesToProcess;
    }
    trimProcessedDateRanges_(startTime) {
        const copy = new Map(this.processedDateRanges_);
        copy.forEach((dateRange, id)=>{
            if (dateRange.startDate.getTime() < startTime) this.processedDateRanges_.delete(id);
        });
    }
}
const { EventTarget: $e88cd91ee18355c1$var$EventTarget$1 } = $e88cd91ee18355c1$export$2e2bcd8739ae039;
const $e88cd91ee18355c1$var$addLLHLSQueryDirectives = (uri, media)=>{
    if (media.endList || !media.serverControl) return uri;
    const parameters = {};
    if (media.serverControl.canBlockReload) {
        const { preloadSegment: preloadSegment } = media; // next msn is a zero based value, length is not.
        let nextMSN = media.mediaSequence + media.segments.length; // If preload segment has parts then it is likely
        // that we are going to request a part of that preload segment.
        // the logic below is used to determine that.
        if (preloadSegment) {
            const parts = preloadSegment.parts || []; // _HLS_part is a zero based index
            const nextPart = $e88cd91ee18355c1$var$getKnownPartCount(media) - 1; // if nextPart is > -1 and not equal to just the
            // length of parts, then we know we had part preload hints
            // and we need to add the _HLS_part= query
            if (nextPart > -1 && nextPart !== parts.length - 1) // add existing parts to our preload hints
            // eslint-disable-next-line
            parameters._HLS_part = nextPart;
             // this if statement makes sure that we request the msn
            // of the preload segment if:
            // 1. the preload segment had parts (and was not yet a full segment)
            //    but was added to our segments array
            // 2. the preload segment had preload hints for parts that are not in
            //    the manifest yet.
            // in all other cases we want the segment after the preload segment
            // which will be given by using media.segments.length because it is 1 based
            // rather than 0 based.
            if (nextPart > -1 || parts.length) nextMSN--;
        } // add _HLS_msn= in front of any _HLS_part query
        // eslint-disable-next-line
        parameters._HLS_msn = nextMSN;
    }
    if (media.serverControl && media.serverControl.canSkipUntil) // add _HLS_skip= infront of all other queries.
    // eslint-disable-next-line
    parameters._HLS_skip = media.serverControl.canSkipDateranges ? "v2" : "YES";
    if (Object.keys(parameters).length) {
        const parsedUri = new (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).URL(uri);
        [
            "_HLS_skip",
            "_HLS_msn",
            "_HLS_part"
        ].forEach(function(name) {
            if (!parameters.hasOwnProperty(name)) return;
            parsedUri.searchParams.set(name, parameters[name]);
        });
        uri = parsedUri.toString();
    }
    return uri;
};
/**
 * Returns a new segment object with properties and
 * the parts array merged.
 *
 * @param {Object} a the old segment
 * @param {Object} b the new segment
 *
 * @return {Object} the merged segment
 */ const $e88cd91ee18355c1$var$updateSegment = (a, b)=>{
    if (!a) return b;
    const result = $e88cd91ee18355c1$var$merge(a, b); // if only the old segment has preload hints
    // and the new one does not, remove preload hints.
    if (a.preloadHints && !b.preloadHints) delete result.preloadHints;
     // if only the old segment has parts
    // then the parts are no longer valid
    if (a.parts && !b.parts) delete result.parts; // if both segments have parts
    else if (a.parts && b.parts) {
        for(let i = 0; i < b.parts.length; i++)if (a.parts && a.parts[i]) result.parts[i] = $e88cd91ee18355c1$var$merge(a.parts[i], b.parts[i]);
    } // set skipped to false for segments that have
    // have had information merged from the old segment.
    if (!a.skipped && b.skipped) result.skipped = false;
     // set preload to false for segments that have
    // had information added in the new segment.
    if (a.preload && !b.preload) result.preload = false;
    return result;
};
/**
 * Returns a new array of segments that is the result of merging
 * properties from an older list of segments onto an updated
 * list. No properties on the updated playlist will be ovewritten.
 *
 * @param {Array} original the outdated list of segments
 * @param {Array} update the updated list of segments
 * @param {number=} offset the index of the first update
 * segment in the original segment list. For non-live playlists,
 * this should always be zero and does not need to be
 * specified. For live playlists, it should be the difference
 * between the media sequence numbers in the original and updated
 * playlists.
 * @return {Array} a list of merged segment objects
 */ const $e88cd91ee18355c1$var$updateSegments = (original, update, offset)=>{
    const oldSegments = original.slice();
    const newSegments = update.slice();
    offset = offset || 0;
    const result = [];
    let currentMap;
    for(let newIndex = 0; newIndex < newSegments.length; newIndex++){
        const oldSegment = oldSegments[newIndex + offset];
        const newSegment = newSegments[newIndex];
        if (oldSegment) {
            currentMap = oldSegment.map || currentMap;
            result.push($e88cd91ee18355c1$var$updateSegment(oldSegment, newSegment));
        } else {
            // carry over map to new segment if it is missing
            if (currentMap && !newSegment.map) newSegment.map = currentMap;
            result.push(newSegment);
        }
    }
    return result;
};
const $e88cd91ee18355c1$var$resolveSegmentUris = (segment, baseUri)=>{
    // preloadSegment will not have a uri at all
    // as the segment isn't actually in the manifest yet, only parts
    if (!segment.resolvedUri && segment.uri) segment.resolvedUri = $e88cd91ee18355c1$var$resolveUrl(baseUri, segment.uri);
    if (segment.key && !segment.key.resolvedUri) segment.key.resolvedUri = $e88cd91ee18355c1$var$resolveUrl(baseUri, segment.key.uri);
    if (segment.map && !segment.map.resolvedUri) segment.map.resolvedUri = $e88cd91ee18355c1$var$resolveUrl(baseUri, segment.map.uri);
    if (segment.map && segment.map.key && !segment.map.key.resolvedUri) segment.map.key.resolvedUri = $e88cd91ee18355c1$var$resolveUrl(baseUri, segment.map.key.uri);
    if (segment.parts && segment.parts.length) segment.parts.forEach((p)=>{
        if (p.resolvedUri) return;
        p.resolvedUri = $e88cd91ee18355c1$var$resolveUrl(baseUri, p.uri);
    });
    if (segment.preloadHints && segment.preloadHints.length) segment.preloadHints.forEach((p)=>{
        if (p.resolvedUri) return;
        p.resolvedUri = $e88cd91ee18355c1$var$resolveUrl(baseUri, p.uri);
    });
};
const $e88cd91ee18355c1$var$getAllSegments = function(media) {
    const segments = media.segments || [];
    const preloadSegment = media.preloadSegment; // a preloadSegment with only preloadHints is not currently
    // a usable segment, only include a preloadSegment that has
    // parts.
    if (preloadSegment && preloadSegment.parts && preloadSegment.parts.length) {
        // if preloadHints has a MAP that means that the
        // init segment is going to change. We cannot use any of the parts
        // from this preload segment.
        if (preloadSegment.preloadHints) for(let i = 0; i < preloadSegment.preloadHints.length; i++){
            if (preloadSegment.preloadHints[i].type === "MAP") return segments;
        }
         // set the duration for our preload segment to target duration.
        preloadSegment.duration = media.targetDuration;
        preloadSegment.preload = true;
        segments.push(preloadSegment);
    }
    return segments;
}; // consider the playlist unchanged if the playlist object is the same or
// the number of segments is equal, the media sequence number is unchanged,
// and this playlist hasn't become the end of the playlist
const $e88cd91ee18355c1$var$isPlaylistUnchanged = (a, b)=>a === b || a.segments && b.segments && a.segments.length === b.segments.length && a.endList === b.endList && a.mediaSequence === b.mediaSequence && a.preloadSegment === b.preloadSegment;
/**
  * Returns a new main playlist that is the result of merging an
  * updated media playlist into the original version. If the
  * updated media playlist does not match any of the playlist
  * entries in the original main playlist, null is returned.
  *
  * @param {Object} main a parsed main M3U8 object
  * @param {Object} media a parsed media M3U8 object
  * @return {Object} a new object that represents the original
  * main playlist with the updated media playlist merged in, or
  * null if the merge produced no change.
  */ const $e88cd91ee18355c1$var$updateMain$1 = (main, newMedia, unchangedCheck = $e88cd91ee18355c1$var$isPlaylistUnchanged)=>{
    const result = $e88cd91ee18355c1$var$merge(main, {});
    const oldMedia = result.playlists[newMedia.id];
    if (!oldMedia) return null;
    if (unchangedCheck(oldMedia, newMedia)) return null;
    newMedia.segments = $e88cd91ee18355c1$var$getAllSegments(newMedia);
    const mergedPlaylist = $e88cd91ee18355c1$var$merge(oldMedia, newMedia); // always use the new media's preload segment
    if (mergedPlaylist.preloadSegment && !newMedia.preloadSegment) delete mergedPlaylist.preloadSegment;
     // if the update could overlap existing segment information, merge the two segment lists
    if (oldMedia.segments) {
        if (newMedia.skip) {
            newMedia.segments = newMedia.segments || []; // add back in objects for skipped segments, so that we merge
            // old properties into the new segments
            for(let i = 0; i < newMedia.skip.skippedSegments; i++)newMedia.segments.unshift({
                skipped: true
            });
        }
        mergedPlaylist.segments = $e88cd91ee18355c1$var$updateSegments(oldMedia.segments, newMedia.segments, newMedia.mediaSequence - oldMedia.mediaSequence);
    } // resolve any segment URIs to prevent us from having to do it later
    mergedPlaylist.segments.forEach((segment)=>{
        $e88cd91ee18355c1$var$resolveSegmentUris(segment, mergedPlaylist.resolvedUri);
    }); // TODO Right now in the playlists array there are two references to each playlist, one
    // that is referenced by index, and one by URI. The index reference may no longer be
    // necessary.
    for(let i = 0; i < result.playlists.length; i++)if (result.playlists[i].id === newMedia.id) result.playlists[i] = mergedPlaylist;
    result.playlists[newMedia.id] = mergedPlaylist; // URI reference added for backwards compatibility
    result.playlists[newMedia.uri] = mergedPlaylist; // update media group playlist references.
    $e88cd91ee18355c1$var$forEachMediaGroup(main, (properties, mediaType, groupKey, labelKey)=>{
        if (!properties.playlists) return;
        for(let i = 0; i < properties.playlists.length; i++)if (newMedia.id === properties.playlists[i].id) properties.playlists[i] = mergedPlaylist;
    });
    return result;
};
/**
 * Calculates the time to wait before refreshing a live playlist
 *
 * @param {Object} media
 *        The current media
 * @param {boolean} update
 *        True if there were any updates from the last refresh, false otherwise
 * @return {number}
 *         The time in ms to wait before refreshing the live playlist
 */ const $e88cd91ee18355c1$var$refreshDelay = (media, update)=>{
    const segments = media.segments || [];
    const lastSegment = segments[segments.length - 1];
    const lastPart = lastSegment && lastSegment.parts && lastSegment.parts[lastSegment.parts.length - 1];
    const lastDuration = lastPart && lastPart.duration || lastSegment && lastSegment.duration;
    if (update && lastDuration) return lastDuration * 1000;
     // if the playlist is unchanged since the last reload or last segment duration
    // cannot be determined, try again after half the target duration
    return (media.partTargetDuration || media.targetDuration || 10) * 500;
};
/**
 * Load a playlist from a remote location
 *
 * @class PlaylistLoader
 * @extends Stream
 * @param {string|Object} src url or object of manifest
 * @param {boolean} withCredentials the withCredentials xhr option
 * @class
 */ class $e88cd91ee18355c1$var$PlaylistLoader extends $e88cd91ee18355c1$var$EventTarget$1 {
    constructor(src, vhs, options = {}){
        super();
        if (!src) throw new Error("A non-empty playlist URL or object is required");
        this.logger_ = $e88cd91ee18355c1$var$logger("PlaylistLoader");
        const { withCredentials: withCredentials = false } = options;
        this.src = src;
        this.vhs_ = vhs;
        this.withCredentials = withCredentials;
        this.addDateRangesToTextTrack_ = options.addDateRangesToTextTrack;
        const vhsOptions = vhs.options_;
        this.customTagParsers = vhsOptions && vhsOptions.customTagParsers || [];
        this.customTagMappers = vhsOptions && vhsOptions.customTagMappers || [];
        this.llhls = vhsOptions && vhsOptions.llhls;
        this.dateRangesStorage_ = new $e88cd91ee18355c1$var$DateRangesStorage(); // initialize the loader state
        this.state = "HAVE_NOTHING"; // live playlist staleness timeout
        this.handleMediaupdatetimeout_ = this.handleMediaupdatetimeout_.bind(this);
        this.on("mediaupdatetimeout", this.handleMediaupdatetimeout_);
        this.on("loadedplaylist", this.handleLoadedPlaylist_.bind(this));
    }
    handleLoadedPlaylist_() {
        const mediaPlaylist = this.media();
        if (!mediaPlaylist) return;
        this.dateRangesStorage_.setOffset(mediaPlaylist.segments);
        this.dateRangesStorage_.setPendingDateRanges(mediaPlaylist.dateRanges);
        const availableDateRanges = this.dateRangesStorage_.getDateRangesToProcess();
        if (!availableDateRanges.length || !this.addDateRangesToTextTrack_) return;
        this.addDateRangesToTextTrack_(availableDateRanges);
    }
    handleMediaupdatetimeout_() {
        if (this.state !== "HAVE_METADATA") // only refresh the media playlist if no other activity is going on
        return;
        const media = this.media();
        let uri = $e88cd91ee18355c1$var$resolveUrl(this.main.uri, media.uri);
        if (this.llhls) uri = $e88cd91ee18355c1$var$addLLHLSQueryDirectives(uri, media);
        this.state = "HAVE_CURRENT_METADATA";
        this.request = this.vhs_.xhr({
            uri: uri,
            withCredentials: this.withCredentials
        }, (error, req)=>{
            // disposed
            if (!this.request) return;
            if (error) return this.playlistRequestError(this.request, this.media(), "HAVE_METADATA");
            this.haveMetadata({
                playlistString: this.request.responseText,
                url: this.media().uri,
                id: this.media().id
            });
        });
    }
    playlistRequestError(xhr, playlist, startingState) {
        const { uri: uri, id: id } = playlist; // any in-flight request is now finished
        this.request = null;
        if (startingState) this.state = startingState;
        this.error = {
            playlist: this.main.playlists[id],
            status: xhr.status,
            message: `HLS playlist request error at URL: ${uri}.`,
            responseText: xhr.responseText,
            code: xhr.status >= 500 ? 4 : 2
        };
        this.trigger("error");
    }
    parseManifest_({ url: url, manifestString: manifestString }) {
        return $e88cd91ee18355c1$var$parseManifest({
            onwarn: ({ message: message })=>this.logger_(`m3u8-parser warn for ${url}: ${message}`),
            oninfo: ({ message: message })=>this.logger_(`m3u8-parser info for ${url}: ${message}`),
            manifestString: manifestString,
            customTagParsers: this.customTagParsers,
            customTagMappers: this.customTagMappers,
            llhls: this.llhls
        });
    }
    /**
   * Update the playlist loader's state in response to a new or updated playlist.
   *
   * @param {string} [playlistString]
   *        Playlist string (if playlistObject is not provided)
   * @param {Object} [playlistObject]
   *        Playlist object (if playlistString is not provided)
   * @param {string} url
   *        URL of playlist
   * @param {string} id
   *        ID to use for playlist
   */ haveMetadata({ playlistString: playlistString, playlistObject: playlistObject, url: url, id: id }) {
        // any in-flight request is now finished
        this.request = null;
        this.state = "HAVE_METADATA";
        const playlist = playlistObject || this.parseManifest_({
            url: url,
            manifestString: playlistString
        });
        playlist.lastRequest = Date.now();
        $e88cd91ee18355c1$var$setupMediaPlaylist({
            playlist: playlist,
            uri: url,
            id: id
        }); // merge this playlist into the main manifest
        const update = $e88cd91ee18355c1$var$updateMain$1(this.main, playlist);
        this.targetDuration = playlist.partTargetDuration || playlist.targetDuration;
        this.pendingMedia_ = null;
        if (update) {
            this.main = update;
            this.media_ = this.main.playlists[id];
        } else this.trigger("playlistunchanged");
        this.updateMediaUpdateTimeout_($e88cd91ee18355c1$var$refreshDelay(this.media(), !!update));
        this.trigger("loadedplaylist");
    }
    /**
    * Abort any outstanding work and clean up.
    */ dispose() {
        this.trigger("dispose");
        this.stopRequest();
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.mediaUpdateTimeout);
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.finalRenditionTimeout);
        this.dateRangesStorage_ = new $e88cd91ee18355c1$var$DateRangesStorage();
        this.off();
    }
    stopRequest() {
        if (this.request) {
            const oldRequest = this.request;
            this.request = null;
            oldRequest.onreadystatechange = null;
            oldRequest.abort();
        }
    }
    /**
    * When called without any arguments, returns the currently
    * active media playlist. When called with a single argument,
    * triggers the playlist loader to asynchronously switch to the
    * specified media playlist. Calling this method while the
    * loader is in the HAVE_NOTHING causes an error to be emitted
    * but otherwise has no effect.
    *
    * @param {Object=} playlist the parsed media playlist
    * object to switch to
    * @param {boolean=} shouldDelay whether we should delay the request by half target duration
    *
    * @return {Playlist} the current loaded media
    */ media(playlist, shouldDelay) {
        // getter
        if (!playlist) return this.media_;
         // setter
        if (this.state === "HAVE_NOTHING") throw new Error("Cannot switch media playlist from " + this.state);
         // find the playlist object if the target playlist has been
        // specified by URI
        if (typeof playlist === "string") {
            if (!this.main.playlists[playlist]) throw new Error("Unknown playlist URI: " + playlist);
            playlist = this.main.playlists[playlist];
        }
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.finalRenditionTimeout);
        if (shouldDelay) {
            const delay = (playlist.partTargetDuration || playlist.targetDuration) / 2 * 1000 || 5000;
            this.finalRenditionTimeout = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(this.media.bind(this, playlist, false), delay);
            return;
        }
        const startingState = this.state;
        const mediaChange = !this.media_ || playlist.id !== this.media_.id;
        const mainPlaylistRef = this.main.playlists[playlist.id]; // switch to fully loaded playlists immediately
        if (mainPlaylistRef && mainPlaylistRef.endList || // handle the case of a playlist object (e.g., if using vhs-json with a resolved
        // media playlist or, for the case of demuxed audio, a resolved audio media group)
        playlist.endList && playlist.segments.length) {
            // abort outstanding playlist requests
            if (this.request) {
                this.request.onreadystatechange = null;
                this.request.abort();
                this.request = null;
            }
            this.state = "HAVE_METADATA";
            this.media_ = playlist; // trigger media change if the active media has been updated
            if (mediaChange) {
                this.trigger("mediachanging");
                if (startingState === "HAVE_MAIN_MANIFEST") // The initial playlist was a main manifest, and the first media selected was
                // also provided (in the form of a resolved playlist object) as part of the
                // source object (rather than just a URL). Therefore, since the media playlist
                // doesn't need to be requested, loadedmetadata won't trigger as part of the
                // normal flow, and needs an explicit trigger here.
                this.trigger("loadedmetadata");
                else this.trigger("mediachange");
            }
            return;
        } // We update/set the timeout here so that live playlists
        // that are not a media change will "start" the loader as expected.
        // We expect that this function will start the media update timeout
        // cycle again. This also prevents a playlist switch failure from
        // causing us to stall during live.
        this.updateMediaUpdateTimeout_($e88cd91ee18355c1$var$refreshDelay(playlist, true)); // switching to the active playlist is a no-op
        if (!mediaChange) return;
        this.state = "SWITCHING_MEDIA"; // there is already an outstanding playlist request
        if (this.request) {
            if (playlist.resolvedUri === this.request.url) // requesting to switch to the same playlist multiple times
            // has no effect after the first
            return;
            this.request.onreadystatechange = null;
            this.request.abort();
            this.request = null;
        } // request the new playlist
        if (this.media_) this.trigger("mediachanging");
        this.pendingMedia_ = playlist;
        this.request = this.vhs_.xhr({
            uri: playlist.resolvedUri,
            withCredentials: this.withCredentials
        }, (error, req)=>{
            // disposed
            if (!this.request) return;
            playlist.lastRequest = Date.now();
            playlist.resolvedUri = $e88cd91ee18355c1$var$resolveManifestRedirect(playlist.resolvedUri, req);
            if (error) return this.playlistRequestError(this.request, playlist, startingState);
            this.haveMetadata({
                playlistString: req.responseText,
                url: playlist.uri,
                id: playlist.id
            }); // fire loadedmetadata the first time a media playlist is loaded
            if (startingState === "HAVE_MAIN_MANIFEST") this.trigger("loadedmetadata");
            else this.trigger("mediachange");
        });
    }
    /**
   * pause loading of the playlist
   */ pause() {
        if (this.mediaUpdateTimeout) {
            (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.mediaUpdateTimeout);
            this.mediaUpdateTimeout = null;
        }
        this.stopRequest();
        if (this.state === "HAVE_NOTHING") // If we pause the loader before any data has been retrieved, its as if we never
        // started, so reset to an unstarted state.
        this.started = false;
         // Need to restore state now that no activity is happening
        if (this.state === "SWITCHING_MEDIA") {
            // if the loader was in the process of switching media, it should either return to
            // HAVE_MAIN_MANIFEST or HAVE_METADATA depending on if the loader has loaded a media
            // playlist yet. This is determined by the existence of loader.media_
            if (this.media_) this.state = "HAVE_METADATA";
            else this.state = "HAVE_MAIN_MANIFEST";
        } else if (this.state === "HAVE_CURRENT_METADATA") this.state = "HAVE_METADATA";
    }
    /**
   * start loading of the playlist
   */ load(shouldDelay) {
        if (this.mediaUpdateTimeout) {
            (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.mediaUpdateTimeout);
            this.mediaUpdateTimeout = null;
        }
        const media = this.media();
        if (shouldDelay) {
            const delay = media ? (media.partTargetDuration || media.targetDuration) / 2 * 1000 : 5000;
            this.mediaUpdateTimeout = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(()=>{
                this.mediaUpdateTimeout = null;
                this.load();
            }, delay);
            return;
        }
        if (!this.started) {
            this.start();
            return;
        }
        if (media && !media.endList) this.trigger("mediaupdatetimeout");
        else this.trigger("loadedplaylist");
    }
    updateMediaUpdateTimeout_(delay) {
        if (this.mediaUpdateTimeout) {
            (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.mediaUpdateTimeout);
            this.mediaUpdateTimeout = null;
        } // we only have use mediaupdatetimeout for live playlists.
        if (!this.media() || this.media().endList) return;
        this.mediaUpdateTimeout = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(()=>{
            this.mediaUpdateTimeout = null;
            this.trigger("mediaupdatetimeout");
            this.updateMediaUpdateTimeout_(delay);
        }, delay);
    }
    /**
   * start loading of the playlist
   */ start() {
        this.started = true;
        if (typeof this.src === "object") {
            // in the case of an entirely constructed manifest object (meaning there's no actual
            // manifest on a server), default the uri to the page's href
            if (!this.src.uri) this.src.uri = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).location.href;
             // resolvedUri is added on internally after the initial request. Since there's no
            // request for pre-resolved manifests, add on resolvedUri here.
            this.src.resolvedUri = this.src.uri; // Since a manifest object was passed in as the source (instead of a URL), the first
            // request can be skipped (since the top level of the manifest, at a minimum, is
            // already available as a parsed manifest object). However, if the manifest object
            // represents a main playlist, some media playlists may need to be resolved before
            // the starting segment list is available. Therefore, go directly to setup of the
            // initial playlist, and let the normal flow continue from there.
            //
            // Note that the call to setup is asynchronous, as other sections of VHS may assume
            // that the first request is asynchronous.
            setTimeout(()=>{
                this.setupInitialPlaylist(this.src);
            }, 0);
            return;
        } // request the specified URL
        this.request = this.vhs_.xhr({
            uri: this.src,
            withCredentials: this.withCredentials
        }, (error, req)=>{
            // disposed
            if (!this.request) return;
             // clear the loader's request reference
            this.request = null;
            if (error) {
                this.error = {
                    status: req.status,
                    message: `HLS playlist request error at URL: ${this.src}.`,
                    responseText: req.responseText,
                    // MEDIA_ERR_NETWORK
                    code: 2
                };
                if (this.state === "HAVE_NOTHING") this.started = false;
                return this.trigger("error");
            }
            this.src = $e88cd91ee18355c1$var$resolveManifestRedirect(this.src, req);
            const manifest = this.parseManifest_({
                manifestString: req.responseText,
                url: this.src
            });
            this.setupInitialPlaylist(manifest);
        });
    }
    srcUri() {
        return typeof this.src === "string" ? this.src : this.src.uri;
    }
    /**
   * Given a manifest object that's either a main or media playlist, trigger the proper
   * events and set the state of the playlist loader.
   *
   * If the manifest object represents a main playlist, `loadedplaylist` will be
   * triggered to allow listeners to select a playlist. If none is selected, the loader
   * will default to the first one in the playlists array.
   *
   * If the manifest object represents a media playlist, `loadedplaylist` will be
   * triggered followed by `loadedmetadata`, as the only available playlist is loaded.
   *
   * In the case of a media playlist, a main playlist object wrapper with one playlist
   * will be created so that all logic can handle playlists in the same fashion (as an
   * assumed manifest object schema).
   *
   * @param {Object} manifest
   *        The parsed manifest object
   */ setupInitialPlaylist(manifest) {
        this.state = "HAVE_MAIN_MANIFEST";
        if (manifest.playlists) {
            this.main = manifest;
            $e88cd91ee18355c1$var$addPropertiesToMain(this.main, this.srcUri()); // If the initial main playlist has playlists wtih segments already resolved,
            // then resolve URIs in advance, as they are usually done after a playlist request,
            // which may not happen if the playlist is resolved.
            manifest.playlists.forEach((playlist)=>{
                playlist.segments = $e88cd91ee18355c1$var$getAllSegments(playlist);
                playlist.segments.forEach((segment)=>{
                    $e88cd91ee18355c1$var$resolveSegmentUris(segment, playlist.resolvedUri);
                });
            });
            this.trigger("loadedplaylist");
            if (!this.request) // no media playlist was specifically selected so start
            // from the first listed one
            this.media(this.main.playlists[0]);
            return;
        } // In order to support media playlists passed in as vhs-json, the case where the uri
        // is not provided as part of the manifest should be considered, and an appropriate
        // default used.
        const uri = this.srcUri() || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).location.href;
        this.main = $e88cd91ee18355c1$var$mainForMedia(manifest, uri);
        this.haveMetadata({
            playlistObject: manifest,
            url: uri,
            id: this.main.playlists[0].id
        });
        this.trigger("loadedmetadata");
    }
    /**
   * Updates or deletes a preexisting pathway clone.
   * Ensures that all playlists related to the old pathway clone are
   * either updated or deleted.
   *
   * @param {Object} clone On update, the pathway clone object for the newly updated pathway clone.
   *        On delete, the old pathway clone object to be deleted.
   * @param {boolean} isUpdate True if the pathway is to be updated,
   *        false if it is meant to be deleted.
   */ updateOrDeleteClone(clone, isUpdate) {
        const main = this.main;
        const pathway = clone.ID;
        let i = main.playlists.length; // Iterate backwards through the playlist so we can remove playlists if necessary.
        while(i--){
            const p = main.playlists[i];
            if (p.attributes["PATHWAY-ID"] === pathway) {
                const oldPlaylistUri = p.resolvedUri;
                const oldPlaylistId = p.id; // update the indexed playlist and add new playlists by ID and URI
                if (isUpdate) {
                    const newPlaylistUri = this.createCloneURI_(p.resolvedUri, clone);
                    const newPlaylistId = $e88cd91ee18355c1$var$createPlaylistID(pathway, newPlaylistUri);
                    const attributes = this.createCloneAttributes_(pathway, p.attributes);
                    const updatedPlaylist = this.createClonePlaylist_(p, newPlaylistId, clone, attributes);
                    main.playlists[i] = updatedPlaylist;
                    main.playlists[newPlaylistId] = updatedPlaylist;
                    main.playlists[newPlaylistUri] = updatedPlaylist;
                } else // Remove the indexed playlist.
                main.playlists.splice(i, 1);
                 // Remove playlists by the old ID and URI.
                delete main.playlists[oldPlaylistId];
                delete main.playlists[oldPlaylistUri];
            }
        }
        this.updateOrDeleteCloneMedia(clone, isUpdate);
    }
    /**
   * Updates or deletes media data based on the pathway clone object.
   * Due to the complexity of the media groups and playlists, in all cases
   * we remove all of the old media groups and playlists.
   * On updates, we then create new media groups and playlists based on the
   * new pathway clone object.
   *
   * @param {Object} clone The pathway clone object for the newly updated pathway clone.
   * @param {boolean} isUpdate True if the pathway is to be updated,
   *        false if it is meant to be deleted.
   */ updateOrDeleteCloneMedia(clone, isUpdate) {
        const main = this.main;
        const id = clone.ID;
        [
            "AUDIO",
            "SUBTITLES",
            "CLOSED-CAPTIONS"
        ].forEach((mediaType)=>{
            if (!main.mediaGroups[mediaType] || !main.mediaGroups[mediaType][id]) return;
            for(const groupKey in main.mediaGroups[mediaType])// Remove all media playlists for the media group for this pathway clone.
            if (groupKey === id) {
                for(const labelKey in main.mediaGroups[mediaType][groupKey]){
                    const oldMedia = main.mediaGroups[mediaType][groupKey][labelKey];
                    oldMedia.playlists.forEach((p, i)=>{
                        const oldMediaPlaylist = main.playlists[p.id];
                        const oldPlaylistId = oldMediaPlaylist.id;
                        const oldPlaylistUri = oldMediaPlaylist.resolvedUri;
                        delete main.playlists[oldPlaylistId];
                        delete main.playlists[oldPlaylistUri];
                    });
                } // Delete the old media group.
                delete main.mediaGroups[mediaType][groupKey];
            }
        }); // Create the new media groups and playlists if there is an update.
        if (isUpdate) this.createClonedMediaGroups_(clone);
    }
    /**
   * Given a pathway clone object, clones all necessary playlists.
   *
   * @param {Object} clone The pathway clone object.
   * @param {Object} basePlaylist The original playlist to clone from.
   */ addClonePathway(clone, basePlaylist = {}) {
        const main = this.main;
        const index = main.playlists.length;
        const uri = this.createCloneURI_(basePlaylist.resolvedUri, clone);
        const playlistId = $e88cd91ee18355c1$var$createPlaylistID(clone.ID, uri);
        const attributes = this.createCloneAttributes_(clone.ID, basePlaylist.attributes);
        const playlist = this.createClonePlaylist_(basePlaylist, playlistId, clone, attributes);
        main.playlists[index] = playlist; // add playlist by ID and URI
        main.playlists[playlistId] = playlist;
        main.playlists[uri] = playlist;
        this.createClonedMediaGroups_(clone);
    }
    /**
   * Given a pathway clone object we create clones of all media.
   * In this function, all necessary information and updated playlists
   * are added to the `mediaGroup` object.
   * Playlists are also added to the `playlists` array so the media groups
   * will be properly linked.
   *
   * @param {Object} clone The pathway clone object.
   */ createClonedMediaGroups_(clone) {
        const id = clone.ID;
        const baseID = clone["BASE-ID"];
        const main = this.main;
        [
            "AUDIO",
            "SUBTITLES",
            "CLOSED-CAPTIONS"
        ].forEach((mediaType)=>{
            // If the media type doesn't exist, or there is already a clone, skip
            // to the next media type.
            if (!main.mediaGroups[mediaType] || main.mediaGroups[mediaType][id]) return;
            for(const groupKey in main.mediaGroups[mediaType]){
                if (groupKey === baseID) // Create the group.
                main.mediaGroups[mediaType][id] = {};
                else continue;
                for(const labelKey in main.mediaGroups[mediaType][groupKey]){
                    const oldMedia = main.mediaGroups[mediaType][groupKey][labelKey];
                    main.mediaGroups[mediaType][id][labelKey] = (0, (/*@__PURE__*/$parcel$interopDefault($a41f6c2ef6e36772$exports)))({}, oldMedia);
                    const newMedia = main.mediaGroups[mediaType][id][labelKey]; // update URIs on the media
                    const newUri = this.createCloneURI_(oldMedia.resolvedUri, clone);
                    newMedia.resolvedUri = newUri;
                    newMedia.uri = newUri; // Reset playlists in the new media group.
                    newMedia.playlists = []; // Create new playlists in the newly cloned media group.
                    oldMedia.playlists.forEach((p, i)=>{
                        const oldMediaPlaylist = main.playlists[p.id];
                        const group = $e88cd91ee18355c1$var$groupID(mediaType, id, labelKey);
                        const newPlaylistID = $e88cd91ee18355c1$var$createPlaylistID(id, group); // Check to see if it already exists
                        if (oldMediaPlaylist && !main.playlists[newPlaylistID]) {
                            const newMediaPlaylist = this.createClonePlaylist_(oldMediaPlaylist, newPlaylistID, clone);
                            const newPlaylistUri = newMediaPlaylist.resolvedUri;
                            main.playlists[newPlaylistID] = newMediaPlaylist;
                            main.playlists[newPlaylistUri] = newMediaPlaylist;
                        }
                        newMedia.playlists[i] = this.createClonePlaylist_(p, newPlaylistID, clone);
                    });
                }
            }
        });
    }
    /**
   * Using the original playlist to be cloned, and the pathway clone object
   * information, we create a new playlist.
   *
   * @param {Object} basePlaylist  The original playlist to be cloned from.
   * @param {string} id The desired id of the newly cloned playlist.
   * @param {Object} clone The pathway clone object.
   * @param {Object} attributes An optional object to populate the `attributes` property in the playlist.
   *
   * @return {Object} The combined cloned playlist.
   */ createClonePlaylist_(basePlaylist, id, clone, attributes) {
        const uri = this.createCloneURI_(basePlaylist.resolvedUri, clone);
        const newProps = {
            resolvedUri: uri,
            uri: uri,
            id: id
        }; // Remove all segments from previous playlist in the clone.
        if (basePlaylist.segments) newProps.segments = [];
        if (attributes) newProps.attributes = attributes;
        return $e88cd91ee18355c1$var$merge(basePlaylist, newProps);
    }
    /**
   * Generates an updated URI for a cloned pathway based on the original
   * pathway's URI and the paramaters from the pathway clone object in the
   * content steering server response.
   *
   * @param {string} baseUri URI to be updated in the cloned pathway.
   * @param {Object} clone The pathway clone object.
   *
   * @return {string} The updated URI for the cloned pathway.
   */ createCloneURI_(baseURI, clone) {
        const uri = new URL(baseURI);
        uri.hostname = clone["URI-REPLACEMENT"].HOST;
        const params = clone["URI-REPLACEMENT"].PARAMS; // Add params to the cloned URL.
        for (const key of Object.keys(params))uri.searchParams.set(key, params[key]);
        return uri.href;
    }
    /**
   * Helper function to create the attributes needed for the new clone.
   * This mainly adds the necessary media attributes.
   *
   * @param {string} id The pathway clone object ID.
   * @param {Object} oldAttributes The old attributes to compare to.
   * @return {Object} The new attributes to add to the playlist.
   */ createCloneAttributes_(id, oldAttributes) {
        const attributes = {
            ["PATHWAY-ID"]: id
        };
        [
            "AUDIO",
            "SUBTITLES",
            "CLOSED-CAPTIONS"
        ].forEach((mediaType)=>{
            if (oldAttributes[mediaType]) attributes[mediaType] = id;
        });
        return attributes;
    }
    /**
   * Returns the key ID set from a playlist
   *
   * @param {playlist} playlist to fetch the key ID set from.
   * @return a Set of 32 digit hex strings that represent the unique keyIds for that playlist.
   */ getKeyIdSet(playlist) {
        if (playlist.contentProtection) {
            const keyIds = new Set();
            for(const keysystem in playlist.contentProtection){
                const keyId = playlist.contentProtection[keysystem].attributes.keyId;
                if (keyId) keyIds.add(keyId.toLowerCase());
            }
            return keyIds;
        }
    }
}
/**
 * @file xhr.js
 */ const { xhr: $e88cd91ee18355c1$var$videojsXHR } = $e88cd91ee18355c1$export$2e2bcd8739ae039;
const $e88cd91ee18355c1$var$callbackWrapper = function(request, error, response, callback) {
    const reqResponse = request.responseType === "arraybuffer" ? request.response : request.responseText;
    if (!error && reqResponse) {
        request.responseTime = Date.now();
        request.roundTripTime = request.responseTime - request.requestTime;
        request.bytesReceived = reqResponse.byteLength || reqResponse.length;
        if (!request.bandwidth) request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8000);
    }
    if (response.headers) request.responseHeaders = response.headers;
     // videojs.xhr now uses a specific code on the error
    // object to signal that a request has timed out instead
    // of setting a boolean on the request object
    if (error && error.code === "ETIMEDOUT") request.timedout = true;
     // videojs.xhr no longer considers status codes outside of 200 and 0
    // (for file uris) to be errors, but the old XHR did, so emulate that
    // behavior. Status 206 may be used in response to byterange requests.
    if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) error = new Error("XHR Failed with a response of: " + (request && (reqResponse || request.responseText)));
    callback(error, request);
};
/**
 * Iterates over the request hooks Set and calls them in order
 *
 * @param {Set} hooks the hook Set to iterate over
 * @param {Object} options the request options to pass to the xhr wrapper
 * @return the callback hook function return value, the modified or new options Object.
 */ const $e88cd91ee18355c1$var$callAllRequestHooks = (requestSet, options)=>{
    if (!requestSet || !requestSet.size) return;
    let newOptions = options;
    requestSet.forEach((requestCallback)=>{
        newOptions = requestCallback(newOptions);
    });
    return newOptions;
};
/**
 * Iterates over the response hooks Set and calls them in order.
 *
 * @param {Set} hooks the hook Set to iterate over
 * @param {Object} request the xhr request object
 * @param {Object} error the xhr error object
 * @param {Object} response the xhr response object
 */ const $e88cd91ee18355c1$var$callAllResponseHooks = (responseSet, request, error, response)=>{
    if (!responseSet || !responseSet.size) return;
    responseSet.forEach((responseCallback)=>{
        responseCallback(request, error, response);
    });
};
const $e88cd91ee18355c1$var$xhrFactory = function() {
    const xhr = function XhrFunction(options, callback) {
        // Add a default timeout
        options = $e88cd91ee18355c1$var$merge({
            timeout: 45e3
        }, options); // Allow an optional user-specified function to modify the option
        // object before we construct the xhr request
        // TODO: Remove beforeRequest in the next major release.
        const beforeRequest = XhrFunction.beforeRequest || $e88cd91ee18355c1$export$2e2bcd8739ae039.Vhs.xhr.beforeRequest; // onRequest and onResponse hooks as a Set, at either the player or global level.
        // TODO: new Set added here for beforeRequest alias. Remove this when beforeRequest is removed.
        const _requestCallbackSet = XhrFunction._requestCallbackSet || $e88cd91ee18355c1$export$2e2bcd8739ae039.Vhs.xhr._requestCallbackSet || new Set();
        const _responseCallbackSet = XhrFunction._responseCallbackSet || $e88cd91ee18355c1$export$2e2bcd8739ae039.Vhs.xhr._responseCallbackSet;
        if (beforeRequest && typeof beforeRequest === "function") {
            $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn("beforeRequest is deprecated, use onRequest instead.");
            _requestCallbackSet.add(beforeRequest);
        } // Use the standard videojs.xhr() method unless `videojs.Vhs.xhr` has been overriden
        // TODO: switch back to videojs.Vhs.xhr.name === 'XhrFunction' when we drop IE11
        const xhrMethod = $e88cd91ee18355c1$export$2e2bcd8739ae039.Vhs.xhr.original === true ? $e88cd91ee18355c1$var$videojsXHR : $e88cd91ee18355c1$export$2e2bcd8739ae039.Vhs.xhr; // call all registered onRequest hooks, assign new options.
        const beforeRequestOptions = $e88cd91ee18355c1$var$callAllRequestHooks(_requestCallbackSet, options); // Remove the beforeRequest function from the hooks set so stale beforeRequest functions are not called.
        _requestCallbackSet.delete(beforeRequest); // xhrMethod will call XMLHttpRequest.open and XMLHttpRequest.send
        const request = xhrMethod(beforeRequestOptions || options, function(error, response) {
            // call all registered onResponse hooks
            $e88cd91ee18355c1$var$callAllResponseHooks(_responseCallbackSet, request, error, response);
            return $e88cd91ee18355c1$var$callbackWrapper(request, error, response, callback);
        });
        const originalAbort = request.abort;
        request.abort = function() {
            request.aborted = true;
            return originalAbort.apply(request, arguments);
        };
        request.uri = options.uri;
        request.requestTime = Date.now();
        return request;
    };
    xhr.original = true;
    return xhr;
};
/**
 * Turns segment byterange into a string suitable for use in
 * HTTP Range requests
 *
 * @param {Object} byterange - an object with two values defining the start and end
 *                             of a byte-range
 */ const $e88cd91ee18355c1$var$byterangeStr = function(byterange) {
    // `byterangeEnd` is one less than `offset + length` because the HTTP range
    // header uses inclusive ranges
    let byterangeEnd;
    const byterangeStart = byterange.offset;
    if (typeof byterange.offset === "bigint" || typeof byterange.length === "bigint") byterangeEnd = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(byterange.offset) + (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(byterange.length) - (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(1);
    else byterangeEnd = byterange.offset + byterange.length - 1;
    return "bytes=" + byterangeStart + "-" + byterangeEnd;
};
/**
 * Defines headers for use in the xhr request for a particular segment.
 *
 * @param {Object} segment - a simplified copy of the segmentInfo object
 *                           from SegmentLoader
 */ const $e88cd91ee18355c1$var$segmentXhrHeaders = function(segment) {
    const headers = {};
    if (segment.byterange) headers.Range = $e88cd91ee18355c1$var$byterangeStr(segment.byterange);
    return headers;
};
/**
 * @file bin-utils.js
 */ /**
 * convert a TimeRange to text
 *
 * @param {TimeRange} range the timerange to use for conversion
 * @param {number} i the iterator on the range to convert
 * @return {string} the range in string format
 */ const $e88cd91ee18355c1$var$textRange = function(range, i) {
    return range.start(i) + "-" + range.end(i);
};
/**
 * format a number as hex string
 *
 * @param {number} e The number
 * @param {number} i the iterator
 * @return {string} the hex formatted number as a string
 */ const $e88cd91ee18355c1$var$formatHexString = function(e, i) {
    const value = e.toString(16);
    return "00".substring(0, 2 - value.length) + value + (i % 2 ? " " : "");
};
const $e88cd91ee18355c1$var$formatAsciiString = function(e) {
    if (e >= 0x20 && e < 0x7e) return String.fromCharCode(e);
    return ".";
};
/**
 * Creates an object for sending to a web worker modifying properties that are TypedArrays
 * into a new object with seperated properties for the buffer, byteOffset, and byteLength.
 *
 * @param {Object} message
 *        Object of properties and values to send to the web worker
 * @return {Object}
 *         Modified message with TypedArray values expanded
 * @function createTransferableMessage
 */ const $e88cd91ee18355c1$var$createTransferableMessage = function(message) {
    const transferable = {};
    Object.keys(message).forEach((key)=>{
        const value = message[key];
        if ((0, $d7439dbe74fc424d$export$ef047080f6507ccc)(value)) transferable[key] = {
            bytes: value.buffer,
            byteOffset: value.byteOffset,
            byteLength: value.byteLength
        };
        else transferable[key] = value;
    });
    return transferable;
};
/**
 * Returns a unique string identifier for a media initialization
 * segment.
 *
 * @param {Object} initSegment
 *        the init segment object.
 *
 * @return {string} the generated init segment id
 */ const $e88cd91ee18355c1$var$initSegmentId = function(initSegment) {
    const byterange = initSegment.byterange || {
        length: Infinity,
        offset: 0
    };
    return [
        byterange.length,
        byterange.offset,
        initSegment.resolvedUri
    ].join(",");
};
/**
 * Returns a unique string identifier for a media segment key.
 *
 * @param {Object} key the encryption key
 * @return {string} the unique id for the media segment key.
 */ const $e88cd91ee18355c1$var$segmentKeyId = function(key) {
    return key.resolvedUri;
};
/**
 * utils to help dump binary data to the console
 *
 * @param {Array|TypedArray} data
 *        data to dump to a string
 *
 * @return {string} the data as a hex string.
 */ const $e88cd91ee18355c1$var$hexDump = (data)=>{
    const bytes = Array.prototype.slice.call(data);
    const step = 16;
    let result = "";
    let hex;
    let ascii;
    for(let j = 0; j < bytes.length / step; j++){
        hex = bytes.slice(j * step, j * step + step).map($e88cd91ee18355c1$var$formatHexString).join("");
        ascii = bytes.slice(j * step, j * step + step).map($e88cd91ee18355c1$var$formatAsciiString).join("");
        result += hex + " " + ascii + "\n";
    }
    return result;
};
const $e88cd91ee18355c1$var$tagDump = ({ bytes: bytes })=>$e88cd91ee18355c1$var$hexDump(bytes);
const $e88cd91ee18355c1$var$textRanges = (ranges)=>{
    let result = "";
    let i;
    for(i = 0; i < ranges.length; i++)result += $e88cd91ee18355c1$var$textRange(ranges, i) + " ";
    return result;
};
var $e88cd91ee18355c1$var$utils = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    createTransferableMessage: $e88cd91ee18355c1$var$createTransferableMessage,
    initSegmentId: $e88cd91ee18355c1$var$initSegmentId,
    segmentKeyId: $e88cd91ee18355c1$var$segmentKeyId,
    hexDump: $e88cd91ee18355c1$var$hexDump,
    tagDump: $e88cd91ee18355c1$var$tagDump,
    textRanges: $e88cd91ee18355c1$var$textRanges
});
// TODO handle fmp4 case where the timing info is accurate and doesn't involve transmux
// 25% was arbitrarily chosen, and may need to be refined over time.
const $e88cd91ee18355c1$var$SEGMENT_END_FUDGE_PERCENT = 0.25;
/**
 * Converts a player time (any time that can be gotten/set from player.currentTime(),
 * e.g., any time within player.seekable().start(0) to player.seekable().end(0)) to a
 * program time (any time referencing the real world (e.g., EXT-X-PROGRAM-DATE-TIME)).
 *
 * The containing segment is required as the EXT-X-PROGRAM-DATE-TIME serves as an "anchor
 * point" (a point where we have a mapping from program time to player time, with player
 * time being the post transmux start of the segment).
 *
 * For more details, see [this doc](../../docs/program-time-from-player-time.md).
 *
 * @param {number} playerTime the player time
 * @param {Object} segment the segment which contains the player time
 * @return {Date} program time
 */ const $e88cd91ee18355c1$var$playerTimeToProgramTime = (playerTime, segment)=>{
    if (!segment.dateTimeObject) // Can't convert without an "anchor point" for the program time (i.e., a time that can
    // be used to map the start of a segment with a real world time).
    return null;
    const transmuxerPrependedSeconds = segment.videoTimingInfo.transmuxerPrependedSeconds;
    const transmuxedStart = segment.videoTimingInfo.transmuxedPresentationStart; // get the start of the content from before old content is prepended
    const startOfSegment = transmuxedStart + transmuxerPrependedSeconds;
    const offsetFromSegmentStart = playerTime - startOfSegment;
    return new Date(segment.dateTimeObject.getTime() + offsetFromSegmentStart * 1000);
};
const $e88cd91ee18355c1$var$originalSegmentVideoDuration = (videoTimingInfo)=>{
    return videoTimingInfo.transmuxedPresentationEnd - videoTimingInfo.transmuxedPresentationStart - videoTimingInfo.transmuxerPrependedSeconds;
};
/**
 * Finds a segment that contains the time requested given as an ISO-8601 string. The
 * returned segment might be an estimate or an accurate match.
 *
 * @param {string} programTime The ISO-8601 programTime to find a match for
 * @param {Object} playlist A playlist object to search within
 */ const $e88cd91ee18355c1$var$findSegmentForProgramTime = (programTime, playlist)=>{
    // Assumptions:
    //  - verifyProgramDateTimeTags has already been run
    //  - live streams have been started
    let dateTimeObject;
    try {
        dateTimeObject = new Date(programTime);
    } catch (e) {
        return null;
    }
    if (!playlist || !playlist.segments || playlist.segments.length === 0) return null;
    let segment = playlist.segments[0];
    if (dateTimeObject < new Date(segment.dateTimeObject)) // Requested time is before stream start.
    return null;
    for(let i = 0; i < playlist.segments.length - 1; i++){
        segment = playlist.segments[i];
        const nextSegmentStart = new Date(playlist.segments[i + 1].dateTimeObject);
        if (dateTimeObject < nextSegmentStart) break;
    }
    const lastSegment = playlist.segments[playlist.segments.length - 1];
    const lastSegmentStart = lastSegment.dateTimeObject;
    const lastSegmentDuration = lastSegment.videoTimingInfo ? $e88cd91ee18355c1$var$originalSegmentVideoDuration(lastSegment.videoTimingInfo) : lastSegment.duration + lastSegment.duration * $e88cd91ee18355c1$var$SEGMENT_END_FUDGE_PERCENT;
    const lastSegmentEnd = new Date(lastSegmentStart.getTime() + lastSegmentDuration * 1000);
    if (dateTimeObject > lastSegmentEnd) // Beyond the end of the stream, or our best guess of the end of the stream.
    return null;
    if (dateTimeObject > new Date(lastSegmentStart)) segment = lastSegment;
    return {
        segment: segment,
        estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : $e88cd91ee18355c1$var$Playlist.duration(playlist, playlist.mediaSequence + playlist.segments.indexOf(segment)),
        // Although, given that all segments have accurate date time objects, the segment
        // selected should be accurate, unless the video has been transmuxed at some point
        // (determined by the presence of the videoTimingInfo object), the segment's "player
        // time" (the start time in the player) can't be considered accurate.
        type: segment.videoTimingInfo ? "accurate" : "estimate"
    };
};
/**
 * Finds a segment that contains the given player time(in seconds).
 *
 * @param {number} time The player time to find a match for
 * @param {Object} playlist A playlist object to search within
 */ const $e88cd91ee18355c1$var$findSegmentForPlayerTime = (time, playlist)=>{
    // Assumptions:
    // - there will always be a segment.duration
    // - we can start from zero
    // - segments are in time order
    if (!playlist || !playlist.segments || playlist.segments.length === 0) return null;
    let segmentEnd = 0;
    let segment;
    for(let i = 0; i < playlist.segments.length; i++){
        segment = playlist.segments[i]; // videoTimingInfo is set after the segment is downloaded and transmuxed, and
        // should contain the most accurate values we have for the segment's player times.
        //
        // Use the accurate transmuxedPresentationEnd value if it is available, otherwise fall
        // back to an estimate based on the manifest derived (inaccurate) segment.duration, to
        // calculate an end value.
        segmentEnd = segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationEnd : segmentEnd + segment.duration;
        if (time <= segmentEnd) break;
    }
    const lastSegment = playlist.segments[playlist.segments.length - 1];
    if (lastSegment.videoTimingInfo && lastSegment.videoTimingInfo.transmuxedPresentationEnd < time) // The time requested is beyond the stream end.
    return null;
    if (time > segmentEnd) {
        // The time is within or beyond the last segment.
        //
        // Check to see if the time is beyond a reasonable guess of the end of the stream.
        if (time > segmentEnd + lastSegment.duration * $e88cd91ee18355c1$var$SEGMENT_END_FUDGE_PERCENT) // Technically, because the duration value is only an estimate, the time may still
        // exist in the last segment, however, there isn't enough information to make even
        // a reasonable estimate.
        return null;
        segment = lastSegment;
    }
    return {
        segment: segment,
        estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : segmentEnd - segment.duration,
        // Because videoTimingInfo is only set after transmux, it is the only way to get
        // accurate timing values.
        type: segment.videoTimingInfo ? "accurate" : "estimate"
    };
};
/**
 * Gives the offset of the comparisonTimestamp from the programTime timestamp in seconds.
 * If the offset returned is positive, the programTime occurs after the
 * comparisonTimestamp.
 * If the offset is negative, the programTime occurs before the comparisonTimestamp.
 *
 * @param {string} comparisonTimeStamp An ISO-8601 timestamp to compare against
 * @param {string} programTime The programTime as an ISO-8601 string
 * @return {number} offset
 */ const $e88cd91ee18355c1$var$getOffsetFromTimestamp = (comparisonTimeStamp, programTime)=>{
    let segmentDateTime;
    let programDateTime;
    try {
        segmentDateTime = new Date(comparisonTimeStamp);
        programDateTime = new Date(programTime);
    } catch (e) {}
    const segmentTimeEpoch = segmentDateTime.getTime();
    const programTimeEpoch = programDateTime.getTime();
    return (programTimeEpoch - segmentTimeEpoch) / 1000;
};
/**
 * Checks that all segments in this playlist have programDateTime tags.
 *
 * @param {Object} playlist A playlist object
 */ const $e88cd91ee18355c1$var$verifyProgramDateTimeTags = (playlist)=>{
    if (!playlist.segments || playlist.segments.length === 0) return false;
    for(let i = 0; i < playlist.segments.length; i++){
        const segment = playlist.segments[i];
        if (!segment.dateTimeObject) return false;
    }
    return true;
};
/**
 * Returns the programTime of the media given a playlist and a playerTime.
 * The playlist must have programDateTime tags for a programDateTime tag to be returned.
 * If the segments containing the time requested have not been buffered yet, an estimate
 * may be returned to the callback.
 *
 * @param {Object} args
 * @param {Object} args.playlist A playlist object to search within
 * @param {number} time A playerTime in seconds
 * @param {Function} callback(err, programTime)
 * @return {string} err.message A detailed error message
 * @return {Object} programTime
 * @return {number} programTime.mediaSeconds The streamTime in seconds
 * @return {string} programTime.programDateTime The programTime as an ISO-8601 String
 */ const $e88cd91ee18355c1$var$getProgramTime = ({ playlist: playlist, time: time, callback: callback })=>{
    if (!callback) throw new Error("getProgramTime: callback must be provided");
    if (!playlist || time === undefined) return callback({
        message: "getProgramTime: playlist and time must be provided"
    });
    const matchedSegment = $e88cd91ee18355c1$var$findSegmentForPlayerTime(time, playlist);
    if (!matchedSegment) return callback({
        message: "valid programTime was not found"
    });
    if (matchedSegment.type === "estimate") return callback({
        message: "Accurate programTime could not be determined. Please seek to e.seekTime and try again",
        seekTime: matchedSegment.estimatedStart
    });
    const programTimeObject = {
        mediaSeconds: time
    };
    const programTime = $e88cd91ee18355c1$var$playerTimeToProgramTime(time, matchedSegment.segment);
    if (programTime) programTimeObject.programDateTime = programTime.toISOString();
    return callback(null, programTimeObject);
};
/**
 * Seeks in the player to a time that matches the given programTime ISO-8601 string.
 *
 * @param {Object} args
 * @param {string} args.programTime A programTime to seek to as an ISO-8601 String
 * @param {Object} args.playlist A playlist to look within
 * @param {number} args.retryCount The number of times to try for an accurate seek. Default is 2.
 * @param {Function} args.seekTo A method to perform a seek
 * @param {boolean} args.pauseAfterSeek Whether to end in a paused state after seeking. Default is true.
 * @param {Object} args.tech The tech to seek on
 * @param {Function} args.callback(err, newTime) A callback to return the new time to
 * @return {string} err.message A detailed error message
 * @return {number} newTime The exact time that was seeked to in seconds
 */ const $e88cd91ee18355c1$var$seekToProgramTime = ({ programTime: programTime, playlist: playlist, retryCount: retryCount = 2, seekTo: seekTo, pauseAfterSeek: pauseAfterSeek = true, tech: tech, callback: callback })=>{
    if (!callback) throw new Error("seekToProgramTime: callback must be provided");
    if (typeof programTime === "undefined" || !playlist || !seekTo) return callback({
        message: "seekToProgramTime: programTime, seekTo and playlist must be provided"
    });
    if (!playlist.endList && !tech.hasStarted_) return callback({
        message: "player must be playing a live stream to start buffering"
    });
    if (!$e88cd91ee18355c1$var$verifyProgramDateTimeTags(playlist)) return callback({
        message: "programDateTime tags must be provided in the manifest " + playlist.resolvedUri
    });
    const matchedSegment = $e88cd91ee18355c1$var$findSegmentForProgramTime(programTime, playlist); // no match
    if (!matchedSegment) return callback({
        message: `${programTime} was not found in the stream`
    });
    const segment = matchedSegment.segment;
    const mediaOffset = $e88cd91ee18355c1$var$getOffsetFromTimestamp(segment.dateTimeObject, programTime);
    if (matchedSegment.type === "estimate") {
        // we've run out of retries
        if (retryCount === 0) return callback({
            message: `${programTime} is not buffered yet. Try again`
        });
        seekTo(matchedSegment.estimatedStart + mediaOffset);
        tech.one("seeked", ()=>{
            $e88cd91ee18355c1$var$seekToProgramTime({
                programTime: programTime,
                playlist: playlist,
                retryCount: retryCount - 1,
                seekTo: seekTo,
                pauseAfterSeek: pauseAfterSeek,
                tech: tech,
                callback: callback
            });
        });
        return;
    } // Since the segment.start value is determined from the buffered end or ending time
    // of the prior segment, the seekToTime doesn't need to account for any transmuxer
    // modifications.
    const seekToTime = segment.start + mediaOffset;
    const seekedCallback = ()=>{
        return callback(null, tech.currentTime());
    }; // listen for seeked event
    tech.one("seeked", seekedCallback); // pause before seeking as video.js will restore this state
    if (pauseAfterSeek) tech.pause();
    seekTo(seekToTime);
};
// which will only happen if the request is complete.
const $e88cd91ee18355c1$var$callbackOnCompleted = (request, cb)=>{
    if (request.readyState === 4) return cb();
    return;
};
const $e88cd91ee18355c1$var$containerRequest = (uri, xhr, cb)=>{
    let bytes = [];
    let id3Offset;
    let finished = false;
    const endRequestAndCallback = function(err, req, type, _bytes) {
        req.abort();
        finished = true;
        return cb(err, req, type, _bytes);
    };
    const progressListener = function(error, request) {
        if (finished) return;
        if (error) return endRequestAndCallback(error, request, "", bytes);
         // grap the new part of content that was just downloaded
        const newPart = request.responseText.substring(bytes && bytes.byteLength || 0, request.responseText.length); // add that onto bytes
        bytes = (0, $d7439dbe74fc424d$export$229a3d5e59c9dd55)(bytes, (0, $d7439dbe74fc424d$export$c8dd6bc66a63753c)(newPart, true));
        id3Offset = id3Offset || (0, $b18510d8baadc4f7$export$56b6cacf09ec1126)(bytes); // we need at least 10 bytes to determine a type
        // or we need at least two bytes after an id3Offset
        if (bytes.length < 10 || id3Offset && bytes.length < id3Offset + 2) return $e88cd91ee18355c1$var$callbackOnCompleted(request, ()=>endRequestAndCallback(error, request, "", bytes));
        const type = (0, $4595dd0b95b78e8a$export$894319e75ed840c3)(bytes); // if this looks like a ts segment but we don't have enough data
        // to see the second sync byte, wait until we have enough data
        // before declaring it ts
        if (type === "ts" && bytes.length < 188) return $e88cd91ee18355c1$var$callbackOnCompleted(request, ()=>endRequestAndCallback(error, request, "", bytes));
         // this may be an unsynced ts segment
        // wait for 376 bytes before detecting no container
        if (!type && bytes.length < 376) return $e88cd91ee18355c1$var$callbackOnCompleted(request, ()=>endRequestAndCallback(error, request, "", bytes));
        return endRequestAndCallback(null, request, type, bytes);
    };
    const options = {
        uri: uri,
        beforeSend (request) {
            // this forces the browser to pass the bytes to us unprocessed
            request.overrideMimeType("text/plain; charset=x-user-defined");
            request.addEventListener("progress", function({ total: total, loaded: loaded }) {
                return $e88cd91ee18355c1$var$callbackWrapper(request, null, {
                    statusCode: request.status
                }, progressListener);
            });
        }
    };
    const request = xhr(options, function(error, response) {
        return $e88cd91ee18355c1$var$callbackWrapper(request, error, response, progressListener);
    });
    return request;
};
const { EventTarget: $e88cd91ee18355c1$var$EventTarget } = $e88cd91ee18355c1$export$2e2bcd8739ae039;
const $e88cd91ee18355c1$var$dashPlaylistUnchanged = function(a, b) {
    if (!$e88cd91ee18355c1$var$isPlaylistUnchanged(a, b)) return false;
     // for dash the above check will often return true in scenarios where
    // the playlist actually has changed because mediaSequence isn't a
    // dash thing, and we often set it to 1. So if the playlists have the same amount
    // of segments we return true.
    // So for dash we need to make sure that the underlying segments are different.
    // if sidx changed then the playlists are different.
    if (a.sidx && b.sidx && (a.sidx.offset !== b.sidx.offset || a.sidx.length !== b.sidx.length)) return false;
    else if (!a.sidx && b.sidx || a.sidx && !b.sidx) return false;
     // one or the other does not have segments
    // there was a change.
    if (a.segments && !b.segments || !a.segments && b.segments) return false;
     // neither has segments nothing changed
    if (!a.segments && !b.segments) return true;
     // check segments themselves
    for(let i = 0; i < a.segments.length; i++){
        const aSegment = a.segments[i];
        const bSegment = b.segments[i]; // if uris are different between segments there was a change
        if (aSegment.uri !== bSegment.uri) return false;
         // neither segment has a byterange, there will be no byterange change.
        if (!aSegment.byterange && !bSegment.byterange) continue;
        const aByterange = aSegment.byterange;
        const bByterange = bSegment.byterange; // if byterange only exists on one of the segments, there was a change.
        if (aByterange && !bByterange || !aByterange && bByterange) return false;
         // if both segments have byterange with different offsets, there was a change.
        if (aByterange.offset !== bByterange.offset || aByterange.length !== bByterange.length) return false;
    } // if everything was the same with segments, this is the same playlist.
    return true;
};
/**
 * Use the representation IDs from the mpd object to create groupIDs, the NAME is set to mandatory representation
 * ID in the parser. This allows for continuous playout across periods with the same representation IDs
 * (continuous periods as defined in DASH-IF 3.2.12). This is assumed in the mpd-parser as well. If we want to support
 * periods without continuous playback this function may need modification as well as the parser.
 */ const $e88cd91ee18355c1$var$dashGroupId = (type, group, label, playlist)=>{
    // If the manifest somehow does not have an ID (non-dash compliant), use the label.
    const playlistId = playlist.attributes.NAME || label;
    return `placeholder-uri-${type}-${group}-${playlistId}`;
};
/**
 * Parses the main XML string and updates playlist URI references.
 *
 * @param {Object} config
 *        Object of arguments
 * @param {string} config.mainXml
 *        The mpd XML
 * @param {string} config.srcUrl
 *        The mpd URL
 * @param {Date} config.clientOffset
 *         A time difference between server and client
 * @param {Object} config.sidxMapping
 *        SIDX mappings for moof/mdat URIs and byte ranges
 * @return {Object}
 *         The parsed mpd manifest object
 */ const $e88cd91ee18355c1$var$parseMainXml = ({ mainXml: mainXml, srcUrl: srcUrl, clientOffset: clientOffset, sidxMapping: sidxMapping, previousManifest: previousManifest })=>{
    const manifest = (0, $1cc1e170a1678a78$export$98e6a39c04603d36)(mainXml, {
        manifestUri: srcUrl,
        clientOffset: clientOffset,
        sidxMapping: sidxMapping,
        previousManifest: previousManifest
    });
    $e88cd91ee18355c1$var$addPropertiesToMain(manifest, srcUrl, $e88cd91ee18355c1$var$dashGroupId);
    return manifest;
};
/**
 * Removes any mediaGroup labels that no longer exist in the newMain
 *
 * @param {Object} update
 *         The previous mpd object being updated
 * @param {Object} newMain
 *         The new mpd object
 */ const $e88cd91ee18355c1$var$removeOldMediaGroupLabels = (update, newMain)=>{
    $e88cd91ee18355c1$var$forEachMediaGroup(update, (properties, type, group, label)=>{
        if (!(label in newMain.mediaGroups[type][group])) delete update.mediaGroups[type][group][label];
    });
};
/**
 * Returns a new main manifest that is the result of merging an updated main manifest
 * into the original version.
 *
 * @param {Object} oldMain
 *        The old parsed mpd object
 * @param {Object} newMain
 *        The updated parsed mpd object
 * @return {Object}
 *         A new object representing the original main manifest with the updated media
 *         playlists merged in
 */ const $e88cd91ee18355c1$var$updateMain = (oldMain, newMain, sidxMapping)=>{
    let noChanges = true;
    let update = $e88cd91ee18355c1$var$merge(oldMain, {
        // These are top level properties that can be updated
        duration: newMain.duration,
        minimumUpdatePeriod: newMain.minimumUpdatePeriod,
        timelineStarts: newMain.timelineStarts
    }); // First update the playlists in playlist list
    for(let i = 0; i < newMain.playlists.length; i++){
        const playlist = newMain.playlists[i];
        if (playlist.sidx) {
            const sidxKey = (0, $1cc1e170a1678a78$export$2d92360466eb0b01)(playlist.sidx); // add sidx segments to the playlist if we have all the sidx info already
            if (sidxMapping && sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx) (0, $1cc1e170a1678a78$export$2243d5aa7d4f4800)(playlist, sidxMapping[sidxKey].sidx, playlist.sidx.resolvedUri);
        }
        const playlistUpdate = $e88cd91ee18355c1$var$updateMain$1(update, playlist, $e88cd91ee18355c1$var$dashPlaylistUnchanged);
        if (playlistUpdate) {
            update = playlistUpdate;
            noChanges = false;
        }
    } // Then update media group playlists
    $e88cd91ee18355c1$var$forEachMediaGroup(newMain, (properties, type, group, label)=>{
        if (properties.playlists && properties.playlists.length) {
            const id = properties.playlists[0].id;
            const playlistUpdate = $e88cd91ee18355c1$var$updateMain$1(update, properties.playlists[0], $e88cd91ee18355c1$var$dashPlaylistUnchanged);
            if (playlistUpdate) {
                update = playlistUpdate; // add new mediaGroup label if it doesn't exist and assign the new mediaGroup.
                if (!(label in update.mediaGroups[type][group])) update.mediaGroups[type][group][label] = properties;
                 // update the playlist reference within media groups
                update.mediaGroups[type][group][label].playlists[0] = update.playlists[id];
                noChanges = false;
            }
        }
    }); // remove mediaGroup labels and references that no longer exist in the newMain
    $e88cd91ee18355c1$var$removeOldMediaGroupLabels(update, newMain);
    if (newMain.minimumUpdatePeriod !== oldMain.minimumUpdatePeriod) noChanges = false;
    if (noChanges) return null;
    return update;
}; // SIDX should be equivalent if the URI and byteranges of the SIDX match.
// If the SIDXs have maps, the two maps should match,
// both `a` and `b` missing SIDXs is considered matching.
// If `a` or `b` but not both have a map, they aren't matching.
const $e88cd91ee18355c1$var$equivalentSidx = (a, b)=>{
    const neitherMap = Boolean(!a.map && !b.map);
    const equivalentMap = neitherMap || Boolean(a.map && b.map && a.map.byterange.offset === b.map.byterange.offset && a.map.byterange.length === b.map.byterange.length);
    return equivalentMap && a.uri === b.uri && a.byterange.offset === b.byterange.offset && a.byterange.length === b.byterange.length;
}; // exported for testing
const $e88cd91ee18355c1$var$compareSidxEntry = (playlists, oldSidxMapping)=>{
    const newSidxMapping = {};
    for(const id in playlists){
        const playlist = playlists[id];
        const currentSidxInfo = playlist.sidx;
        if (currentSidxInfo) {
            const key = (0, $1cc1e170a1678a78$export$2d92360466eb0b01)(currentSidxInfo);
            if (!oldSidxMapping[key]) break;
            const savedSidxInfo = oldSidxMapping[key].sidxInfo;
            if ($e88cd91ee18355c1$var$equivalentSidx(savedSidxInfo, currentSidxInfo)) newSidxMapping[key] = oldSidxMapping[key];
        }
    }
    return newSidxMapping;
};
/**
 *  A function that filters out changed items as they need to be requested separately.
 *
 *  The method is exported for testing
 *
 *  @param {Object} main the parsed mpd XML returned via mpd-parser
 *  @param {Object} oldSidxMapping the SIDX to compare against
 */ const $e88cd91ee18355c1$var$filterChangedSidxMappings = (main, oldSidxMapping)=>{
    const videoSidx = $e88cd91ee18355c1$var$compareSidxEntry(main.playlists, oldSidxMapping);
    let mediaGroupSidx = videoSidx;
    $e88cd91ee18355c1$var$forEachMediaGroup(main, (properties, mediaType, groupKey, labelKey)=>{
        if (properties.playlists && properties.playlists.length) {
            const playlists = properties.playlists;
            mediaGroupSidx = $e88cd91ee18355c1$var$merge(mediaGroupSidx, $e88cd91ee18355c1$var$compareSidxEntry(playlists, oldSidxMapping));
        }
    });
    return mediaGroupSidx;
};
class $e88cd91ee18355c1$var$DashPlaylistLoader extends $e88cd91ee18355c1$var$EventTarget {
    // DashPlaylistLoader must accept either a src url or a playlist because subsequent
    // playlist loader setups from media groups will expect to be able to pass a playlist
    // (since there aren't external URLs to media playlists with DASH)
    constructor(srcUrlOrPlaylist, vhs, options = {}, mainPlaylistLoader){
        super();
        this.mainPlaylistLoader_ = mainPlaylistLoader || this;
        if (!mainPlaylistLoader) this.isMain_ = true;
        const { withCredentials: withCredentials = false } = options;
        this.vhs_ = vhs;
        this.withCredentials = withCredentials;
        this.addMetadataToTextTrack = options.addMetadataToTextTrack;
        if (!srcUrlOrPlaylist) throw new Error("A non-empty playlist URL or object is required");
         // event naming?
        this.on("minimumUpdatePeriod", ()=>{
            this.refreshXml_();
        }); // live playlist staleness timeout
        this.on("mediaupdatetimeout", ()=>{
            this.refreshMedia_(this.media().id);
        });
        this.state = "HAVE_NOTHING";
        this.loadedPlaylists_ = {};
        this.logger_ = $e88cd91ee18355c1$var$logger("DashPlaylistLoader"); // initialize the loader state
        // The mainPlaylistLoader will be created with a string
        if (this.isMain_) {
            this.mainPlaylistLoader_.srcUrl = srcUrlOrPlaylist; // TODO: reset sidxMapping between period changes
            // once multi-period is refactored
            this.mainPlaylistLoader_.sidxMapping_ = {};
        } else this.childPlaylist_ = srcUrlOrPlaylist;
    }
    requestErrored_(err, request, startingState) {
        // disposed
        if (!this.request) return true;
         // pending request is cleared
        this.request = null;
        if (err) {
            // use the provided error object or create one
            // based on the request/response
            this.error = typeof err === "object" && !(err instanceof Error) ? err : {
                status: request.status,
                message: "DASH request error at URL: " + request.uri,
                response: request.response,
                // MEDIA_ERR_NETWORK
                code: 2
            };
            if (startingState) this.state = startingState;
            this.trigger("error");
            return true;
        }
    }
    /**
   * Verify that the container of the sidx segment can be parsed
   * and if it can, get and parse that segment.
   */ addSidxSegments_(playlist, startingState, cb) {
        const sidxKey = playlist.sidx && (0, $1cc1e170a1678a78$export$2d92360466eb0b01)(playlist.sidx); // playlist lacks sidx or sidx segments were added to this playlist already.
        if (!playlist.sidx || !sidxKey || this.mainPlaylistLoader_.sidxMapping_[sidxKey]) {
            // keep this function async
            this.mediaRequest_ = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(()=>cb(false), 0);
            return;
        } // resolve the segment URL relative to the playlist
        const uri = $e88cd91ee18355c1$var$resolveManifestRedirect(playlist.sidx.resolvedUri);
        const fin = (err, request)=>{
            if (this.requestErrored_(err, request, startingState)) return;
            const sidxMapping = this.mainPlaylistLoader_.sidxMapping_;
            let sidx;
            try {
                sidx = (0, (/*@__PURE__*/$parcel$interopDefault($8b61edb11213d8b6$exports)))((0, $d7439dbe74fc424d$export$63c3de442720649)(request.response).subarray(8));
            } catch (e) {
                // sidx parsing failed.
                this.requestErrored_(e, request, startingState);
                return;
            }
            sidxMapping[sidxKey] = {
                sidxInfo: playlist.sidx,
                sidx: sidx
            };
            (0, $1cc1e170a1678a78$export$2243d5aa7d4f4800)(playlist, sidx, playlist.sidx.resolvedUri);
            return cb(true);
        };
        this.request = $e88cd91ee18355c1$var$containerRequest(uri, this.vhs_.xhr, (err, request, container, bytes)=>{
            if (err) return fin(err, request);
            if (!container || container !== "mp4") return fin({
                status: request.status,
                message: `Unsupported ${container || "unknown"} container type for sidx segment at URL: ${uri}`,
                // response is just bytes in this case
                // but we really don't want to return that.
                response: "",
                playlist: playlist,
                internal: true,
                playlistExclusionDuration: Infinity,
                // MEDIA_ERR_NETWORK
                code: 2
            }, request);
             // if we already downloaded the sidx bytes in the container request, use them
            const { offset: offset, length: length } = playlist.sidx.byterange;
            if (bytes.length >= length + offset) return fin(err, {
                response: bytes.subarray(offset, offset + length),
                status: request.status,
                uri: request.uri
            });
             // otherwise request sidx bytes
            this.request = this.vhs_.xhr({
                uri: uri,
                responseType: "arraybuffer",
                headers: $e88cd91ee18355c1$var$segmentXhrHeaders({
                    byterange: playlist.sidx.byterange
                })
            }, fin);
        });
    }
    dispose() {
        this.trigger("dispose");
        this.stopRequest();
        this.loadedPlaylists_ = {};
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.minimumUpdatePeriodTimeout_);
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.mediaRequest_);
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.mediaUpdateTimeout);
        this.mediaUpdateTimeout = null;
        this.mediaRequest_ = null;
        this.minimumUpdatePeriodTimeout_ = null;
        if (this.mainPlaylistLoader_.createMupOnMedia_) {
            this.off("loadedmetadata", this.mainPlaylistLoader_.createMupOnMedia_);
            this.mainPlaylistLoader_.createMupOnMedia_ = null;
        }
        this.off();
    }
    hasPendingRequest() {
        return this.request || this.mediaRequest_;
    }
    stopRequest() {
        if (this.request) {
            const oldRequest = this.request;
            this.request = null;
            oldRequest.onreadystatechange = null;
            oldRequest.abort();
        }
    }
    media(playlist) {
        // getter
        if (!playlist) return this.media_;
         // setter
        if (this.state === "HAVE_NOTHING") throw new Error("Cannot switch media playlist from " + this.state);
        const startingState = this.state; // find the playlist object if the target playlist has been specified by URI
        if (typeof playlist === "string") {
            if (!this.mainPlaylistLoader_.main.playlists[playlist]) throw new Error("Unknown playlist URI: " + playlist);
            playlist = this.mainPlaylistLoader_.main.playlists[playlist];
        }
        const mediaChange = !this.media_ || playlist.id !== this.media_.id; // switch to previously loaded playlists immediately
        if (mediaChange && this.loadedPlaylists_[playlist.id] && this.loadedPlaylists_[playlist.id].endList) {
            this.state = "HAVE_METADATA";
            this.media_ = playlist; // trigger media change if the active media has been updated
            if (mediaChange) {
                this.trigger("mediachanging");
                this.trigger("mediachange");
            }
            return;
        } // switching to the active playlist is a no-op
        if (!mediaChange) return;
         // switching from an already loaded playlist
        if (this.media_) this.trigger("mediachanging");
        this.addSidxSegments_(playlist, startingState, (sidxChanged)=>{
            // everything is ready just continue to haveMetadata
            this.haveMetadata({
                startingState: startingState,
                playlist: playlist
            });
        });
    }
    haveMetadata({ startingState: startingState, playlist: playlist }) {
        this.state = "HAVE_METADATA";
        this.loadedPlaylists_[playlist.id] = playlist;
        this.mediaRequest_ = null; // This will trigger loadedplaylist
        this.refreshMedia_(playlist.id); // fire loadedmetadata the first time a media playlist is loaded
        // to resolve setup of media groups
        if (startingState === "HAVE_MAIN_MANIFEST") this.trigger("loadedmetadata");
        else // trigger media change if the active media has been updated
        this.trigger("mediachange");
    }
    pause() {
        if (this.mainPlaylistLoader_.createMupOnMedia_) {
            this.off("loadedmetadata", this.mainPlaylistLoader_.createMupOnMedia_);
            this.mainPlaylistLoader_.createMupOnMedia_ = null;
        }
        this.stopRequest();
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.mediaUpdateTimeout);
        this.mediaUpdateTimeout = null;
        if (this.isMain_) {
            (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.mainPlaylistLoader_.minimumUpdatePeriodTimeout_);
            this.mainPlaylistLoader_.minimumUpdatePeriodTimeout_ = null;
        }
        if (this.state === "HAVE_NOTHING") // If we pause the loader before any data has been retrieved, its as if we never
        // started, so reset to an unstarted state.
        this.started = false;
    }
    load(isFinalRendition) {
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.mediaUpdateTimeout);
        this.mediaUpdateTimeout = null;
        const media = this.media();
        if (isFinalRendition) {
            const delay = media ? media.targetDuration / 2 * 1000 : 5000;
            this.mediaUpdateTimeout = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(()=>this.load(), delay);
            return;
        } // because the playlists are internal to the manifest, load should either load the
        // main manifest, or do nothing but trigger an event
        if (!this.started) {
            this.start();
            return;
        }
        if (media && !media.endList) {
            // Check to see if this is the main loader and the MUP was cleared (this happens
            // when the loader was paused). `media` should be set at this point since one is always
            // set during `start()`.
            if (this.isMain_ && !this.minimumUpdatePeriodTimeout_) {
                // Trigger minimumUpdatePeriod to refresh the main manifest
                this.trigger("minimumUpdatePeriod"); // Since there was no prior minimumUpdatePeriodTimeout it should be recreated
                this.updateMinimumUpdatePeriodTimeout_();
            }
            this.trigger("mediaupdatetimeout");
        } else this.trigger("loadedplaylist");
    }
    start() {
        this.started = true; // We don't need to request the main manifest again
        // Call this asynchronously to match the xhr request behavior below
        if (!this.isMain_) {
            this.mediaRequest_ = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(()=>this.haveMain_(), 0);
            return;
        }
        this.requestMain_((req, mainChanged)=>{
            this.haveMain_();
            if (!this.hasPendingRequest() && !this.media_) this.media(this.mainPlaylistLoader_.main.playlists[0]);
        });
    }
    requestMain_(cb) {
        this.request = this.vhs_.xhr({
            uri: this.mainPlaylistLoader_.srcUrl,
            withCredentials: this.withCredentials
        }, (error, req)=>{
            if (this.requestErrored_(error, req)) {
                if (this.state === "HAVE_NOTHING") this.started = false;
                return;
            }
            const mainChanged = req.responseText !== this.mainPlaylistLoader_.mainXml_;
            this.mainPlaylistLoader_.mainXml_ = req.responseText;
            if (req.responseHeaders && req.responseHeaders.date) this.mainLoaded_ = Date.parse(req.responseHeaders.date);
            else this.mainLoaded_ = Date.now();
            this.mainPlaylistLoader_.srcUrl = $e88cd91ee18355c1$var$resolveManifestRedirect(this.mainPlaylistLoader_.srcUrl, req);
            if (mainChanged) {
                this.handleMain_();
                this.syncClientServerClock_(()=>{
                    return cb(req, mainChanged);
                });
                return;
            }
            return cb(req, mainChanged);
        });
    }
    /**
   * Parses the main xml for UTCTiming node to sync the client clock to the server
   * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.
   *
   * @param {Function} done
   *        Function to call when clock sync has completed
   */ syncClientServerClock_(done) {
        const utcTiming = (0, $1cc1e170a1678a78$export$734c7278b5d0068c)(this.mainPlaylistLoader_.mainXml_); // No UTCTiming element found in the mpd. Use Date header from mpd request as the
        // server clock
        if (utcTiming === null) {
            this.mainPlaylistLoader_.clientOffset_ = this.mainLoaded_ - Date.now();
            return done();
        }
        if (utcTiming.method === "DIRECT") {
            this.mainPlaylistLoader_.clientOffset_ = utcTiming.value - Date.now();
            return done();
        }
        this.request = this.vhs_.xhr({
            uri: $e88cd91ee18355c1$var$resolveUrl(this.mainPlaylistLoader_.srcUrl, utcTiming.value),
            method: utcTiming.method,
            withCredentials: this.withCredentials
        }, (error, req)=>{
            // disposed
            if (!this.request) return;
            if (error) {
                // sync request failed, fall back to using date header from mpd
                // TODO: log warning
                this.mainPlaylistLoader_.clientOffset_ = this.mainLoaded_ - Date.now();
                return done();
            }
            let serverTime;
            if (utcTiming.method === "HEAD") {
                if (!req.responseHeaders || !req.responseHeaders.date) // expected date header not preset, fall back to using date header from mpd
                // TODO: log warning
                serverTime = this.mainLoaded_;
                else serverTime = Date.parse(req.responseHeaders.date);
            } else serverTime = Date.parse(req.responseText);
            this.mainPlaylistLoader_.clientOffset_ = serverTime - Date.now();
            done();
        });
    }
    haveMain_() {
        this.state = "HAVE_MAIN_MANIFEST";
        if (this.isMain_) // We have the main playlist at this point, so
        // trigger this to allow PlaylistController
        // to make an initial playlist selection
        this.trigger("loadedplaylist");
        else if (!this.media_) // no media playlist was specifically selected so select
        // the one the child playlist loader was created with
        this.media(this.childPlaylist_);
    }
    handleMain_() {
        // clear media request
        this.mediaRequest_ = null;
        const oldMain = this.mainPlaylistLoader_.main;
        let newMain = $e88cd91ee18355c1$var$parseMainXml({
            mainXml: this.mainPlaylistLoader_.mainXml_,
            srcUrl: this.mainPlaylistLoader_.srcUrl,
            clientOffset: this.mainPlaylistLoader_.clientOffset_,
            sidxMapping: this.mainPlaylistLoader_.sidxMapping_,
            previousManifest: oldMain
        }); // if we have an old main to compare the new main against
        if (oldMain) newMain = $e88cd91ee18355c1$var$updateMain(oldMain, newMain, this.mainPlaylistLoader_.sidxMapping_);
         // only update main if we have a new main
        this.mainPlaylistLoader_.main = newMain ? newMain : oldMain;
        const location = this.mainPlaylistLoader_.main.locations && this.mainPlaylistLoader_.main.locations[0];
        if (location && location !== this.mainPlaylistLoader_.srcUrl) this.mainPlaylistLoader_.srcUrl = location;
        if (!oldMain || newMain && newMain.minimumUpdatePeriod !== oldMain.minimumUpdatePeriod) this.updateMinimumUpdatePeriodTimeout_();
        this.addEventStreamToMetadataTrack_(newMain);
        return Boolean(newMain);
    }
    updateMinimumUpdatePeriodTimeout_() {
        const mpl = this.mainPlaylistLoader_; // cancel any pending creation of mup on media
        // a new one will be added if needed.
        if (mpl.createMupOnMedia_) {
            mpl.off("loadedmetadata", mpl.createMupOnMedia_);
            mpl.createMupOnMedia_ = null;
        } // clear any pending timeouts
        if (mpl.minimumUpdatePeriodTimeout_) {
            (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(mpl.minimumUpdatePeriodTimeout_);
            mpl.minimumUpdatePeriodTimeout_ = null;
        }
        let mup = mpl.main && mpl.main.minimumUpdatePeriod; // If the minimumUpdatePeriod has a value of 0, that indicates that the current
        // MPD has no future validity, so a new one will need to be acquired when new
        // media segments are to be made available. Thus, we use the target duration
        // in this case
        if (mup === 0) {
            if (mpl.media()) mup = mpl.media().targetDuration * 1000;
            else {
                mpl.createMupOnMedia_ = mpl.updateMinimumUpdatePeriodTimeout_;
                mpl.one("loadedmetadata", mpl.createMupOnMedia_);
            }
        } // if minimumUpdatePeriod is invalid or <= zero, which
        // can happen when a live video becomes VOD. skip timeout
        // creation.
        if (typeof mup !== "number" || mup <= 0) {
            if (mup < 0) this.logger_(`found invalid minimumUpdatePeriod of ${mup}, not setting a timeout`);
            return;
        }
        this.createMUPTimeout_(mup);
    }
    createMUPTimeout_(mup) {
        const mpl = this.mainPlaylistLoader_;
        mpl.minimumUpdatePeriodTimeout_ = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(()=>{
            mpl.minimumUpdatePeriodTimeout_ = null;
            mpl.trigger("minimumUpdatePeriod");
            mpl.createMUPTimeout_(mup);
        }, mup);
    }
    /**
   * Sends request to refresh the main xml and updates the parsed main manifest
   */ refreshXml_() {
        this.requestMain_((req, mainChanged)=>{
            if (!mainChanged) return;
            if (this.media_) this.media_ = this.mainPlaylistLoader_.main.playlists[this.media_.id];
             // This will filter out updated sidx info from the mapping
            this.mainPlaylistLoader_.sidxMapping_ = $e88cd91ee18355c1$var$filterChangedSidxMappings(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.sidxMapping_);
            this.addSidxSegments_(this.media(), this.state, (sidxChanged)=>{
                // TODO: do we need to reload the current playlist?
                this.refreshMedia_(this.media().id);
            });
        });
    }
    /**
   * Refreshes the media playlist by re-parsing the main xml and updating playlist
   * references. If this is an alternate loader, the updated parsed manifest is retrieved
   * from the main loader.
   */ refreshMedia_(mediaID) {
        if (!mediaID) throw new Error("refreshMedia_ must take a media id");
         // for main we have to reparse the main xml
        // to re-create segments based on current timing values
        // which may change media. We only skip updating the main manifest
        // if this is the first time this.media_ is being set.
        // as main was just parsed in that case.
        if (this.media_ && this.isMain_) this.handleMain_();
        const playlists = this.mainPlaylistLoader_.main.playlists;
        const mediaChanged = !this.media_ || this.media_ !== playlists[mediaID];
        if (mediaChanged) this.media_ = playlists[mediaID];
        else this.trigger("playlistunchanged");
        if (!this.mediaUpdateTimeout) {
            const createMediaUpdateTimeout = ()=>{
                if (this.media().endList) return;
                this.mediaUpdateTimeout = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(()=>{
                    this.trigger("mediaupdatetimeout");
                    createMediaUpdateTimeout();
                }, $e88cd91ee18355c1$var$refreshDelay(this.media(), Boolean(mediaChanged)));
            };
            createMediaUpdateTimeout();
        }
        this.trigger("loadedplaylist");
    }
    /**
   * Takes eventstream data from a parsed DASH manifest and adds it to the metadata text track.
   *
   * @param {manifest} newMain the newly parsed manifest
   */ addEventStreamToMetadataTrack_(newMain) {
        // Only add new event stream metadata if we have a new manifest.
        if (newMain && this.mainPlaylistLoader_.main.eventStream) {
            // convert EventStream to ID3-like data.
            const metadataArray = this.mainPlaylistLoader_.main.eventStream.map((eventStreamNode)=>{
                return {
                    cueTime: eventStreamNode.start,
                    frames: [
                        {
                            data: eventStreamNode.messageData
                        }
                    ]
                };
            });
            this.addMetadataToTextTrack("EventStream", metadataArray, this.mainPlaylistLoader_.main.duration);
        }
    }
    /**
   * Returns the key ID set from a playlist
   *
   * @param {playlist} playlist to fetch the key ID set from.
   * @return a Set of 32 digit hex strings that represent the unique keyIds for that playlist.
   */ getKeyIdSet(playlist) {
        if (playlist.contentProtection) {
            const keyIds = new Set();
            for(const keysystem in playlist.contentProtection){
                const defaultKID = playlist.contentProtection[keysystem].attributes["cenc:default_KID"];
                if (defaultKID) // DASH keyIds are separated by dashes.
                keyIds.add(defaultKID.replace(/-/g, "").toLowerCase());
            }
            return keyIds;
        }
    }
}
var $e88cd91ee18355c1$var$Config = {
    GOAL_BUFFER_LENGTH: 30,
    MAX_GOAL_BUFFER_LENGTH: 60,
    BACK_BUFFER_LENGTH: 30,
    GOAL_BUFFER_LENGTH_RATE: 1,
    // 0.5 MB/s
    INITIAL_BANDWIDTH: 4194304,
    // A fudge factor to apply to advertised playlist bitrates to account for
    // temporary flucations in client bandwidth
    BANDWIDTH_VARIANCE: 1.2,
    // How much of the buffer must be filled before we consider upswitching
    BUFFER_LOW_WATER_LINE: 0,
    MAX_BUFFER_LOW_WATER_LINE: 30,
    // TODO: Remove this when experimentalBufferBasedABR is removed
    EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE: 16,
    BUFFER_LOW_WATER_LINE_RATE: 1,
    // If the buffer is greater than the high water line, we won't switch down
    BUFFER_HIGH_WATER_LINE: 30
};
const $e88cd91ee18355c1$var$stringToArrayBuffer = (string)=>{
    const view = new Uint8Array(new ArrayBuffer(string.length));
    for(let i = 0; i < string.length; i++)view[i] = string.charCodeAt(i);
    return view.buffer;
};
/* global Blob, BlobBuilder, Worker */ // unify worker interface
const $e88cd91ee18355c1$var$browserWorkerPolyFill = function(workerObj) {
    // node only supports on/off
    workerObj.on = workerObj.addEventListener;
    workerObj.off = workerObj.removeEventListener;
    return workerObj;
};
const $e88cd91ee18355c1$var$createObjectURL = function(str) {
    try {
        return URL.createObjectURL(new Blob([
            str
        ], {
            type: "application/javascript"
        }));
    } catch (e) {
        const blob = new BlobBuilder();
        blob.append(str);
        return URL.createObjectURL(blob.getBlob());
    }
};
const $e88cd91ee18355c1$var$factory = function(code) {
    return function() {
        const objectUrl = $e88cd91ee18355c1$var$createObjectURL(code);
        const worker = $e88cd91ee18355c1$var$browserWorkerPolyFill(new Worker(objectUrl));
        worker.objURL = objectUrl;
        const terminate = worker.terminate;
        worker.on = worker.addEventListener;
        worker.off = worker.removeEventListener;
        worker.terminate = function() {
            URL.revokeObjectURL(objectUrl);
            return terminate.call(this);
        };
        return worker;
    };
};
const $e88cd91ee18355c1$var$transform = function(code) {
    return `var browserWorkerPolyFill = ${$e88cd91ee18355c1$var$browserWorkerPolyFill.toString()};\n` + "browserWorkerPolyFill(self);\n" + code;
};
const $e88cd91ee18355c1$var$getWorkerString = function(fn) {
    return fn.toString().replace(/^function.+?{/, "").slice(0, -1);
};
/* rollup-plugin-worker-factory start for worker!/home/runner/work/http-streaming/http-streaming/src/transmuxer-worker.js */ const $e88cd91ee18355c1$var$workerCode$1 = $e88cd91ee18355c1$var$transform($e88cd91ee18355c1$var$getWorkerString(function() {
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof $parcel$global !== "undefined" ? $parcel$global : typeof self !== "undefined" ? self : {};
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * A lightweight readable stream implemention that handles event dispatching.
   * Objects that inherit from streams should call init in their constructors.
   */ var Stream$8 = function() {
        this.init = function() {
            var listeners = {};
            /**
       * Add a listener for a specified event type.
       * @param type {string} the event name
       * @param listener {function} the callback to be invoked when an event of
       * the specified type occurs
       */ this.on = function(type, listener) {
                if (!listeners[type]) listeners[type] = [];
                listeners[type] = listeners[type].concat(listener);
            };
            /**
       * Remove a listener for a specified event type.
       * @param type {string} the event name
       * @param listener {function} a function previously registered for this
       * type of event through `on`
       */ this.off = function(type, listener) {
                var index;
                if (!listeners[type]) return false;
                index = listeners[type].indexOf(listener);
                listeners[type] = listeners[type].slice();
                listeners[type].splice(index, 1);
                return index > -1;
            };
            /**
       * Trigger an event of the specified type on this stream. Any additional
       * arguments to this function are passed as parameters to event listeners.
       * @param type {string} the event name
       */ this.trigger = function(type) {
                var callbacks, i, length, args;
                callbacks = listeners[type];
                if (!callbacks) return;
                 // Slicing the arguments on every invocation of this method
                // can add a significant amount of overhead. Avoid the
                // intermediate object creation for the common case of a
                // single callback argument
                if (arguments.length === 2) {
                    length = callbacks.length;
                    for(i = 0; i < length; ++i)callbacks[i].call(this, arguments[1]);
                } else {
                    args = [];
                    i = arguments.length;
                    for(i = 1; i < arguments.length; ++i)args.push(arguments[i]);
                    length = callbacks.length;
                    for(i = 0; i < length; ++i)callbacks[i].apply(this, args);
                }
            };
            /**
       * Destroys the stream and cleans up.
       */ this.dispose = function() {
                listeners = {};
            };
        };
    };
    /**
   * Forwards all `data` events on this stream to the destination stream. The
   * destination stream should provide a method `push` to receive the data
   * events as they arrive.
   * @param destination {stream} the stream that will receive all `data` events
   * @param autoFlush {boolean} if false, we will not call `flush` on the destination
   *                            when the current stream emits a 'done' event
   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
   */ Stream$8.prototype.pipe = function(destination) {
        this.on("data", function(data) {
            destination.push(data);
        });
        this.on("done", function(flushSource) {
            destination.flush(flushSource);
        });
        this.on("partialdone", function(flushSource) {
            destination.partialFlush(flushSource);
        });
        this.on("endedtimeline", function(flushSource) {
            destination.endTimeline(flushSource);
        });
        this.on("reset", function(flushSource) {
            destination.reset(flushSource);
        });
        return destination;
    }; // Default stream functions that are expected to be overridden to perform
    // actual work. These are provided by the prototype as a sort of no-op
    // implementation so that we don't have to check for their existence in the
    // `pipe` function above.
    Stream$8.prototype.push = function(data) {
        this.trigger("data", data);
    };
    Stream$8.prototype.flush = function(flushSource) {
        this.trigger("done", flushSource);
    };
    Stream$8.prototype.partialFlush = function(flushSource) {
        this.trigger("partialdone", flushSource);
    };
    Stream$8.prototype.endTimeline = function(flushSource) {
        this.trigger("endedtimeline", flushSource);
    };
    Stream$8.prototype.reset = function(flushSource) {
        this.trigger("reset", flushSource);
    };
    var stream = Stream$8;
    var MAX_UINT32$1 = Math.pow(2, 32);
    var getUint64$3 = function(uint8) {
        var dv = new DataView(uint8.buffer, uint8.byteOffset, uint8.byteLength);
        var value;
        if (dv.getBigUint64) {
            value = dv.getBigUint64(0);
            if (value < Number.MAX_SAFE_INTEGER) return Number(value);
            return value;
        }
        return dv.getUint32(0) * MAX_UINT32$1 + dv.getUint32(4);
    };
    var numbers = {
        getUint64: getUint64$3,
        MAX_UINT32: MAX_UINT32$1
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * Functions that generate fragmented MP4s suitable for use with Media
   * Source Extensions.
   */ var MAX_UINT32 = numbers.MAX_UINT32;
    var box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun$1, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR, AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS; // pre-calculate constants
    (function() {
        var i;
        types = {
            avc1: [],
            // codingname
            avcC: [],
            btrt: [],
            dinf: [],
            dref: [],
            esds: [],
            ftyp: [],
            hdlr: [],
            mdat: [],
            mdhd: [],
            mdia: [],
            mfhd: [],
            minf: [],
            moof: [],
            moov: [],
            mp4a: [],
            // codingname
            mvex: [],
            mvhd: [],
            pasp: [],
            sdtp: [],
            smhd: [],
            stbl: [],
            stco: [],
            stsc: [],
            stsd: [],
            stsz: [],
            stts: [],
            styp: [],
            tfdt: [],
            tfhd: [],
            traf: [],
            trak: [],
            trun: [],
            trex: [],
            tkhd: [],
            vmhd: []
        }; // In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we
        // don't throw an error
        if (typeof Uint8Array === "undefined") return;
        for(i in types)if (types.hasOwnProperty(i)) types[i] = [
            i.charCodeAt(0),
            i.charCodeAt(1),
            i.charCodeAt(2),
            i.charCodeAt(3)
        ];
        MAJOR_BRAND = new Uint8Array([
            "i".charCodeAt(0),
            "s".charCodeAt(0),
            "o".charCodeAt(0),
            "m".charCodeAt(0)
        ]);
        AVC1_BRAND = new Uint8Array([
            "a".charCodeAt(0),
            "v".charCodeAt(0),
            "c".charCodeAt(0),
            "1".charCodeAt(0)
        ]);
        MINOR_VERSION = new Uint8Array([
            0,
            0,
            0,
            1
        ]);
        VIDEO_HDLR = new Uint8Array([
            0x00,
            // version 0
            0x00,
            0x00,
            0x00,
            // flags
            0x00,
            0x00,
            0x00,
            0x00,
            // pre_defined
            0x76,
            0x69,
            0x64,
            0x65,
            // handler_type: 'vide'
            0x00,
            0x00,
            0x00,
            0x00,
            // reserved
            0x00,
            0x00,
            0x00,
            0x00,
            // reserved
            0x00,
            0x00,
            0x00,
            0x00,
            // reserved
            0x56,
            0x69,
            0x64,
            0x65,
            0x6f,
            0x48,
            0x61,
            0x6e,
            0x64,
            0x6c,
            0x65,
            0x72,
            0x00 // name: 'VideoHandler'
        ]);
        AUDIO_HDLR = new Uint8Array([
            0x00,
            // version 0
            0x00,
            0x00,
            0x00,
            // flags
            0x00,
            0x00,
            0x00,
            0x00,
            // pre_defined
            0x73,
            0x6f,
            0x75,
            0x6e,
            // handler_type: 'soun'
            0x00,
            0x00,
            0x00,
            0x00,
            // reserved
            0x00,
            0x00,
            0x00,
            0x00,
            // reserved
            0x00,
            0x00,
            0x00,
            0x00,
            // reserved
            0x53,
            0x6f,
            0x75,
            0x6e,
            0x64,
            0x48,
            0x61,
            0x6e,
            0x64,
            0x6c,
            0x65,
            0x72,
            0x00 // name: 'SoundHandler'
        ]);
        HDLR_TYPES = {
            video: VIDEO_HDLR,
            audio: AUDIO_HDLR
        };
        DREF = new Uint8Array([
            0x00,
            // version 0
            0x00,
            0x00,
            0x00,
            // flags
            0x00,
            0x00,
            0x00,
            0x01,
            // entry_count
            0x00,
            0x00,
            0x00,
            0x0c,
            // entry_size
            0x75,
            0x72,
            0x6c,
            0x20,
            // 'url' type
            0x00,
            // version 0
            0x00,
            0x00,
            0x01 // entry_flags
        ]);
        SMHD = new Uint8Array([
            0x00,
            // version
            0x00,
            0x00,
            0x00,
            // flags
            0x00,
            0x00,
            // balance, 0 means centered
            0x00,
            0x00 // reserved
        ]);
        STCO = new Uint8Array([
            0x00,
            // version
            0x00,
            0x00,
            0x00,
            // flags
            0x00,
            0x00,
            0x00,
            0x00 // entry_count
        ]);
        STSC = STCO;
        STSZ = new Uint8Array([
            0x00,
            // version
            0x00,
            0x00,
            0x00,
            // flags
            0x00,
            0x00,
            0x00,
            0x00,
            // sample_size
            0x00,
            0x00,
            0x00,
            0x00 // sample_count
        ]);
        STTS = STCO;
        VMHD = new Uint8Array([
            0x00,
            // version
            0x00,
            0x00,
            0x01,
            // flags
            0x00,
            0x00,
            // graphicsmode
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00 // opcolor
        ]);
    })();
    box = function(type) {
        var payload = [], size = 0, i, result, view;
        for(i = 1; i < arguments.length; i++)payload.push(arguments[i]);
        i = payload.length; // calculate the total size we need to allocate
        while(i--)size += payload[i].byteLength;
        result = new Uint8Array(size + 8);
        view = new DataView(result.buffer, result.byteOffset, result.byteLength);
        view.setUint32(0, result.byteLength);
        result.set(type, 4); // copy the payload into the result
        for(i = 0, size = 8; i < payload.length; i++){
            result.set(payload[i], size);
            size += payload[i].byteLength;
        }
        return result;
    };
    dinf = function() {
        return box(types.dinf, box(types.dref, DREF));
    };
    esds = function(track) {
        return box(types.esds, new Uint8Array([
            0x00,
            // version
            0x00,
            0x00,
            0x00,
            // flags
            // ES_Descriptor
            0x03,
            // tag, ES_DescrTag
            0x19,
            // length
            0x00,
            0x00,
            // ES_ID
            0x00,
            // streamDependenceFlag, URL_flag, reserved, streamPriority
            // DecoderConfigDescriptor
            0x04,
            // tag, DecoderConfigDescrTag
            0x11,
            // length
            0x40,
            // object type
            0x15,
            // streamType
            0x00,
            0x06,
            0x00,
            // bufferSizeDB
            0x00,
            0x00,
            0xda,
            0xc0,
            // maxBitrate
            0x00,
            0x00,
            0xda,
            0xc0,
            // avgBitrate
            // DecoderSpecificInfo
            0x05,
            // tag, DecoderSpecificInfoTag
            0x02,
            // length
            // ISO/IEC 14496-3, AudioSpecificConfig
            // for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35
            track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1,
            track.samplingfrequencyindex << 7 | track.channelcount << 3,
            0x06,
            0x01,
            0x02 // GASpecificConfig
        ]));
    };
    ftyp = function() {
        return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);
    };
    hdlr = function(type) {
        return box(types.hdlr, HDLR_TYPES[type]);
    };
    mdat = function(data) {
        return box(types.mdat, data);
    };
    mdhd = function(track) {
        var result = new Uint8Array([
            0x00,
            // version 0
            0x00,
            0x00,
            0x00,
            // flags
            0x00,
            0x00,
            0x00,
            0x02,
            // creation_time
            0x00,
            0x00,
            0x00,
            0x03,
            // modification_time
            0x00,
            0x01,
            0x5f,
            0x90,
            // timescale, 90,000 "ticks" per second
            track.duration >>> 24 & 0xFF,
            track.duration >>> 16 & 0xFF,
            track.duration >>> 8 & 0xFF,
            track.duration & 0xFF,
            // duration
            0x55,
            0xc4,
            // 'und' language (undetermined)
            0x00,
            0x00
        ]); // Use the sample rate from the track metadata, when it is
        // defined. The sample rate can be parsed out of an ADTS header, for
        // instance.
        if (track.samplerate) {
            result[12] = track.samplerate >>> 24 & 0xFF;
            result[13] = track.samplerate >>> 16 & 0xFF;
            result[14] = track.samplerate >>> 8 & 0xFF;
            result[15] = track.samplerate & 0xFF;
        }
        return box(types.mdhd, result);
    };
    mdia = function(track) {
        return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));
    };
    mfhd = function(sequenceNumber) {
        return box(types.mfhd, new Uint8Array([
            0x00,
            0x00,
            0x00,
            0x00,
            // flags
            (sequenceNumber & 0xFF000000) >> 24,
            (sequenceNumber & 0xFF0000) >> 16,
            (sequenceNumber & 0xFF00) >> 8,
            sequenceNumber & 0xFF // sequence_number
        ]));
    };
    minf = function(track) {
        return box(types.minf, track.type === "video" ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));
    };
    moof = function(sequenceNumber, tracks) {
        var trackFragments = [], i = tracks.length; // build traf boxes for each track fragment
        while(i--)trackFragments[i] = traf(tracks[i]);
        return box.apply(null, [
            types.moof,
            mfhd(sequenceNumber)
        ].concat(trackFragments));
    };
    /**
   * Returns a movie box.
   * @param tracks {array} the tracks associated with this movie
   * @see ISO/IEC 14496-12:2012(E), section 8.2.1
   */ moov = function(tracks) {
        var i = tracks.length, boxes = [];
        while(i--)boxes[i] = trak(tracks[i]);
        return box.apply(null, [
            types.moov,
            mvhd(0xffffffff)
        ].concat(boxes).concat(mvex(tracks)));
    };
    mvex = function(tracks) {
        var i = tracks.length, boxes = [];
        while(i--)boxes[i] = trex(tracks[i]);
        return box.apply(null, [
            types.mvex
        ].concat(boxes));
    };
    mvhd = function(duration) {
        var bytes = new Uint8Array([
            0x00,
            // version 0
            0x00,
            0x00,
            0x00,
            // flags
            0x00,
            0x00,
            0x00,
            0x01,
            // creation_time
            0x00,
            0x00,
            0x00,
            0x02,
            // modification_time
            0x00,
            0x01,
            0x5f,
            0x90,
            // timescale, 90,000 "ticks" per second
            (duration & 0xFF000000) >> 24,
            (duration & 0xFF0000) >> 16,
            (duration & 0xFF00) >> 8,
            duration & 0xFF,
            // duration
            0x00,
            0x01,
            0x00,
            0x00,
            // 1.0 rate
            0x01,
            0x00,
            // 1.0 volume
            0x00,
            0x00,
            // reserved
            0x00,
            0x00,
            0x00,
            0x00,
            // reserved
            0x00,
            0x00,
            0x00,
            0x00,
            // reserved
            0x00,
            0x01,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x01,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x40,
            0x00,
            0x00,
            0x00,
            // transformation: unity matrix
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            // pre_defined
            0xff,
            0xff,
            0xff,
            0xff // next_track_ID
        ]);
        return box(types.mvhd, bytes);
    };
    sdtp = function(track) {
        var samples = track.samples || [], bytes = new Uint8Array(4 + samples.length), flags, i; // leave the full box header (4 bytes) all zero
        // write the sample table
        for(i = 0; i < samples.length; i++){
            flags = samples[i].flags;
            bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;
        }
        return box(types.sdtp, bytes);
    };
    stbl = function(track) {
        return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));
    };
    (function() {
        var videoSample, audioSample;
        stsd = function(track) {
            return box(types.stsd, new Uint8Array([
                0x00,
                // version 0
                0x00,
                0x00,
                0x00,
                // flags
                0x00,
                0x00,
                0x00,
                0x01
            ]), track.type === "video" ? videoSample(track) : audioSample(track));
        };
        videoSample = function(track) {
            var sps = track.sps || [], pps = track.pps || [], sequenceParameterSets = [], pictureParameterSets = [], i, avc1Box; // assemble the SPSs
            for(i = 0; i < sps.length; i++){
                sequenceParameterSets.push((sps[i].byteLength & 0xFF00) >>> 8);
                sequenceParameterSets.push(sps[i].byteLength & 0xFF); // sequenceParameterSetLength
                sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i])); // SPS
            } // assemble the PPSs
            for(i = 0; i < pps.length; i++){
                pictureParameterSets.push((pps[i].byteLength & 0xFF00) >>> 8);
                pictureParameterSets.push(pps[i].byteLength & 0xFF);
                pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));
            }
            avc1Box = [
                types.avc1,
                new Uint8Array([
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    // reserved
                    0x00,
                    0x01,
                    // data_reference_index
                    0x00,
                    0x00,
                    // pre_defined
                    0x00,
                    0x00,
                    // reserved
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    // pre_defined
                    (track.width & 0xff00) >> 8,
                    track.width & 0xff,
                    // width
                    (track.height & 0xff00) >> 8,
                    track.height & 0xff,
                    // height
                    0x00,
                    0x48,
                    0x00,
                    0x00,
                    // horizresolution
                    0x00,
                    0x48,
                    0x00,
                    0x00,
                    // vertresolution
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    // reserved
                    0x00,
                    0x01,
                    // frame_count
                    0x13,
                    0x76,
                    0x69,
                    0x64,
                    0x65,
                    0x6f,
                    0x6a,
                    0x73,
                    0x2d,
                    0x63,
                    0x6f,
                    0x6e,
                    0x74,
                    0x72,
                    0x69,
                    0x62,
                    0x2d,
                    0x68,
                    0x6c,
                    0x73,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    0x00,
                    // compressorname
                    0x00,
                    0x18,
                    // depth = 24
                    0x11,
                    0x11 // pre_defined = -1
                ]),
                box(types.avcC, new Uint8Array([
                    0x01,
                    // configurationVersion
                    track.profileIdc,
                    // AVCProfileIndication
                    track.profileCompatibility,
                    // profile_compatibility
                    track.levelIdc,
                    // AVCLevelIndication
                    0xff // lengthSizeMinusOne, hard-coded to 4 bytes
                ].concat([
                    sps.length
                ], // numOfSequenceParameterSets
                sequenceParameterSets, // "SPS"
                [
                    pps.length
                ], // numOfPictureParameterSets
                pictureParameterSets // "PPS"
                ))),
                box(types.btrt, new Uint8Array([
                    0x00,
                    0x1c,
                    0x9c,
                    0x80,
                    // bufferSizeDB
                    0x00,
                    0x2d,
                    0xc6,
                    0xc0,
                    // maxBitrate
                    0x00,
                    0x2d,
                    0xc6,
                    0xc0 // avgBitrate
                ]))
            ];
            if (track.sarRatio) {
                var hSpacing = track.sarRatio[0], vSpacing = track.sarRatio[1];
                avc1Box.push(box(types.pasp, new Uint8Array([
                    (hSpacing & 0xFF000000) >> 24,
                    (hSpacing & 0xFF0000) >> 16,
                    (hSpacing & 0xFF00) >> 8,
                    hSpacing & 0xFF,
                    (vSpacing & 0xFF000000) >> 24,
                    (vSpacing & 0xFF0000) >> 16,
                    (vSpacing & 0xFF00) >> 8,
                    vSpacing & 0xFF
                ])));
            }
            return box.apply(null, avc1Box);
        };
        audioSample = function(track) {
            return box(types.mp4a, new Uint8Array([
                // SampleEntry, ISO/IEC 14496-12
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                0x00,
                // reserved
                0x00,
                0x01,
                // data_reference_index
                // AudioSampleEntry, ISO/IEC 14496-12
                0x00,
                0x00,
                0x00,
                0x00,
                // reserved
                0x00,
                0x00,
                0x00,
                0x00,
                // reserved
                (track.channelcount & 0xff00) >> 8,
                track.channelcount & 0xff,
                // channelcount
                (track.samplesize & 0xff00) >> 8,
                track.samplesize & 0xff,
                // samplesize
                0x00,
                0x00,
                // pre_defined
                0x00,
                0x00,
                // reserved
                (track.samplerate & 0xff00) >> 8,
                track.samplerate & 0xff,
                0x00,
                0x00 // samplerate, 16.16
            ]), esds(track));
        };
    })();
    tkhd = function(track) {
        var result = new Uint8Array([
            0x00,
            // version 0
            0x00,
            0x00,
            0x07,
            // flags
            0x00,
            0x00,
            0x00,
            0x00,
            // creation_time
            0x00,
            0x00,
            0x00,
            0x00,
            // modification_time
            (track.id & 0xFF000000) >> 24,
            (track.id & 0xFF0000) >> 16,
            (track.id & 0xFF00) >> 8,
            track.id & 0xFF,
            // track_ID
            0x00,
            0x00,
            0x00,
            0x00,
            // reserved
            (track.duration & 0xFF000000) >> 24,
            (track.duration & 0xFF0000) >> 16,
            (track.duration & 0xFF00) >> 8,
            track.duration & 0xFF,
            // duration
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            // reserved
            0x00,
            0x00,
            // layer
            0x00,
            0x00,
            // alternate_group
            0x01,
            0x00,
            // non-audio track volume
            0x00,
            0x00,
            // reserved
            0x00,
            0x01,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x01,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x40,
            0x00,
            0x00,
            0x00,
            // transformation: unity matrix
            (track.width & 0xFF00) >> 8,
            track.width & 0xFF,
            0x00,
            0x00,
            // width
            (track.height & 0xFF00) >> 8,
            track.height & 0xFF,
            0x00,
            0x00 // height
        ]);
        return box(types.tkhd, result);
    };
    /**
   * Generate a track fragment (traf) box. A traf box collects metadata
   * about tracks in a movie fragment (moof) box.
   */ traf = function(track) {
        var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, dataOffset, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;
        trackFragmentHeader = box(types.tfhd, new Uint8Array([
            0x00,
            // version 0
            0x00,
            0x00,
            0x3a,
            // flags
            (track.id & 0xFF000000) >> 24,
            (track.id & 0xFF0000) >> 16,
            (track.id & 0xFF00) >> 8,
            track.id & 0xFF,
            // track_ID
            0x00,
            0x00,
            0x00,
            0x01,
            // sample_description_index
            0x00,
            0x00,
            0x00,
            0x00,
            // default_sample_duration
            0x00,
            0x00,
            0x00,
            0x00,
            // default_sample_size
            0x00,
            0x00,
            0x00,
            0x00 // default_sample_flags
        ]));
        upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / MAX_UINT32);
        lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % MAX_UINT32);
        trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([
            0x01,
            // version 1
            0x00,
            0x00,
            0x00,
            // flags
            // baseMediaDecodeTime
            upperWordBaseMediaDecodeTime >>> 24 & 0xFF,
            upperWordBaseMediaDecodeTime >>> 16 & 0xFF,
            upperWordBaseMediaDecodeTime >>> 8 & 0xFF,
            upperWordBaseMediaDecodeTime & 0xFF,
            lowerWordBaseMediaDecodeTime >>> 24 & 0xFF,
            lowerWordBaseMediaDecodeTime >>> 16 & 0xFF,
            lowerWordBaseMediaDecodeTime >>> 8 & 0xFF,
            lowerWordBaseMediaDecodeTime & 0xFF
        ])); // the data offset specifies the number of bytes from the start of
        // the containing moof to the first payload byte of the associated
        // mdat
        dataOffset = 92; // mdat header
        // audio tracks require less metadata
        if (track.type === "audio") {
            trackFragmentRun = trun$1(track, dataOffset);
            return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun);
        } // video tracks should contain an independent and disposable samples
        // box (sdtp)
        // generate one and adjust offsets to match
        sampleDependencyTable = sdtp(track);
        trackFragmentRun = trun$1(track, sampleDependencyTable.length + dataOffset);
        return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable);
    };
    /**
   * Generate a track box.
   * @param track {object} a track definition
   * @return {Uint8Array} the track box
   */ trak = function(track) {
        track.duration = track.duration || 0xffffffff;
        return box(types.trak, tkhd(track), mdia(track));
    };
    trex = function(track) {
        var result = new Uint8Array([
            0x00,
            // version 0
            0x00,
            0x00,
            0x00,
            // flags
            (track.id & 0xFF000000) >> 24,
            (track.id & 0xFF0000) >> 16,
            (track.id & 0xFF00) >> 8,
            track.id & 0xFF,
            // track_ID
            0x00,
            0x00,
            0x00,
            0x01,
            // default_sample_description_index
            0x00,
            0x00,
            0x00,
            0x00,
            // default_sample_duration
            0x00,
            0x00,
            0x00,
            0x00,
            // default_sample_size
            0x00,
            0x01,
            0x00,
            0x01 // default_sample_flags
        ]); // the last two bytes of default_sample_flags is the sample
        // degradation priority, a hint about the importance of this sample
        // relative to others. Lower the degradation priority for all sample
        // types other than video.
        if (track.type !== "video") result[result.length - 1] = 0x00;
        return box(types.trex, result);
    };
    (function() {
        var audioTrun, videoTrun, trunHeader; // This method assumes all samples are uniform. That is, if a
        // duration is present for the first sample, it will be present for
        // all subsequent samples.
        // see ISO/IEC 14496-12:2012, Section 8.8.8.1
        trunHeader = function(samples, offset) {
            var durationPresent = 0, sizePresent = 0, flagsPresent = 0, compositionTimeOffset = 0; // trun flag constants
            if (samples.length) {
                if (samples[0].duration !== undefined) durationPresent = 0x1;
                if (samples[0].size !== undefined) sizePresent = 0x2;
                if (samples[0].flags !== undefined) flagsPresent = 0x4;
                if (samples[0].compositionTimeOffset !== undefined) compositionTimeOffset = 0x8;
            }
            return [
                0x00,
                // version 0
                0x00,
                durationPresent | sizePresent | flagsPresent | compositionTimeOffset,
                0x01,
                // flags
                (samples.length & 0xFF000000) >>> 24,
                (samples.length & 0xFF0000) >>> 16,
                (samples.length & 0xFF00) >>> 8,
                samples.length & 0xFF,
                // sample_count
                (offset & 0xFF000000) >>> 24,
                (offset & 0xFF0000) >>> 16,
                (offset & 0xFF00) >>> 8,
                offset & 0xFF // data_offset
            ];
        };
        videoTrun = function(track, offset) {
            var bytesOffest, bytes, header, samples, sample, i;
            samples = track.samples || [];
            offset += 20 + 16 * samples.length;
            header = trunHeader(samples, offset);
            bytes = new Uint8Array(header.length + samples.length * 16);
            bytes.set(header);
            bytesOffest = header.length;
            for(i = 0; i < samples.length; i++){
                sample = samples[i];
                bytes[bytesOffest++] = (sample.duration & 0xFF000000) >>> 24;
                bytes[bytesOffest++] = (sample.duration & 0xFF0000) >>> 16;
                bytes[bytesOffest++] = (sample.duration & 0xFF00) >>> 8;
                bytes[bytesOffest++] = sample.duration & 0xFF; // sample_duration
                bytes[bytesOffest++] = (sample.size & 0xFF000000) >>> 24;
                bytes[bytesOffest++] = (sample.size & 0xFF0000) >>> 16;
                bytes[bytesOffest++] = (sample.size & 0xFF00) >>> 8;
                bytes[bytesOffest++] = sample.size & 0xFF; // sample_size
                bytes[bytesOffest++] = sample.flags.isLeading << 2 | sample.flags.dependsOn;
                bytes[bytesOffest++] = sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample;
                bytes[bytesOffest++] = sample.flags.degradationPriority & 61440;
                bytes[bytesOffest++] = sample.flags.degradationPriority & 0x0F; // sample_flags
                bytes[bytesOffest++] = (sample.compositionTimeOffset & 0xFF000000) >>> 24;
                bytes[bytesOffest++] = (sample.compositionTimeOffset & 0xFF0000) >>> 16;
                bytes[bytesOffest++] = (sample.compositionTimeOffset & 0xFF00) >>> 8;
                bytes[bytesOffest++] = sample.compositionTimeOffset & 0xFF; // sample_composition_time_offset
            }
            return box(types.trun, bytes);
        };
        audioTrun = function(track, offset) {
            var bytes, bytesOffest, header, samples, sample, i;
            samples = track.samples || [];
            offset += 20 + 8 * samples.length;
            header = trunHeader(samples, offset);
            bytes = new Uint8Array(header.length + samples.length * 8);
            bytes.set(header);
            bytesOffest = header.length;
            for(i = 0; i < samples.length; i++){
                sample = samples[i];
                bytes[bytesOffest++] = (sample.duration & 0xFF000000) >>> 24;
                bytes[bytesOffest++] = (sample.duration & 0xFF0000) >>> 16;
                bytes[bytesOffest++] = (sample.duration & 0xFF00) >>> 8;
                bytes[bytesOffest++] = sample.duration & 0xFF; // sample_duration
                bytes[bytesOffest++] = (sample.size & 0xFF000000) >>> 24;
                bytes[bytesOffest++] = (sample.size & 0xFF0000) >>> 16;
                bytes[bytesOffest++] = (sample.size & 0xFF00) >>> 8;
                bytes[bytesOffest++] = sample.size & 0xFF; // sample_size
            }
            return box(types.trun, bytes);
        };
        trun$1 = function(track, offset) {
            if (track.type === "audio") return audioTrun(track, offset);
            return videoTrun(track, offset);
        };
    })();
    var mp4Generator = {
        ftyp: ftyp,
        mdat: mdat,
        moof: moof,
        moov: moov,
        initSegment: function(tracks) {
            var fileType = ftyp(), movie = moov(tracks), result;
            result = new Uint8Array(fileType.byteLength + movie.byteLength);
            result.set(fileType);
            result.set(movie, fileType.byteLength);
            return result;
        }
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   */ // composed of the nal units that make up that frame
    // Also keep track of cummulative data about the frame from the nal units such
    // as the frame duration, starting pts, etc.
    var groupNalsIntoFrames = function(nalUnits) {
        var i, currentNal, currentFrame = [], frames = []; // TODO added for LHLS, make sure this is OK
        frames.byteLength = 0;
        frames.nalCount = 0;
        frames.duration = 0;
        currentFrame.byteLength = 0;
        for(i = 0; i < nalUnits.length; i++){
            currentNal = nalUnits[i]; // Split on 'aud'-type nal units
            if (currentNal.nalUnitType === "access_unit_delimiter_rbsp") {
                // Since the very first nal unit is expected to be an AUD
                // only push to the frames array when currentFrame is not empty
                if (currentFrame.length) {
                    currentFrame.duration = currentNal.dts - currentFrame.dts; // TODO added for LHLS, make sure this is OK
                    frames.byteLength += currentFrame.byteLength;
                    frames.nalCount += currentFrame.length;
                    frames.duration += currentFrame.duration;
                    frames.push(currentFrame);
                }
                currentFrame = [
                    currentNal
                ];
                currentFrame.byteLength = currentNal.data.byteLength;
                currentFrame.pts = currentNal.pts;
                currentFrame.dts = currentNal.dts;
            } else {
                // Specifically flag key frames for ease of use later
                if (currentNal.nalUnitType === "slice_layer_without_partitioning_rbsp_idr") currentFrame.keyFrame = true;
                currentFrame.duration = currentNal.dts - currentFrame.dts;
                currentFrame.byteLength += currentNal.data.byteLength;
                currentFrame.push(currentNal);
            }
        } // For the last frame, use the duration of the previous frame if we
        // have nothing better to go on
        if (frames.length && (!currentFrame.duration || currentFrame.duration <= 0)) currentFrame.duration = frames[frames.length - 1].duration;
         // Push the final frame
        // TODO added for LHLS, make sure this is OK
        frames.byteLength += currentFrame.byteLength;
        frames.nalCount += currentFrame.length;
        frames.duration += currentFrame.duration;
        frames.push(currentFrame);
        return frames;
    }; // Convert an array of frames into an array of Gop with each Gop being composed
    // of the frames that make up that Gop
    // Also keep track of cummulative data about the Gop from the frames such as the
    // Gop duration, starting pts, etc.
    var groupFramesIntoGops = function(frames) {
        var i, currentFrame, currentGop = [], gops = []; // We must pre-set some of the values on the Gop since we
        // keep running totals of these values
        currentGop.byteLength = 0;
        currentGop.nalCount = 0;
        currentGop.duration = 0;
        currentGop.pts = frames[0].pts;
        currentGop.dts = frames[0].dts; // store some metadata about all the Gops
        gops.byteLength = 0;
        gops.nalCount = 0;
        gops.duration = 0;
        gops.pts = frames[0].pts;
        gops.dts = frames[0].dts;
        for(i = 0; i < frames.length; i++){
            currentFrame = frames[i];
            if (currentFrame.keyFrame) {
                // Since the very first frame is expected to be an keyframe
                // only push to the gops array when currentGop is not empty
                if (currentGop.length) {
                    gops.push(currentGop);
                    gops.byteLength += currentGop.byteLength;
                    gops.nalCount += currentGop.nalCount;
                    gops.duration += currentGop.duration;
                }
                currentGop = [
                    currentFrame
                ];
                currentGop.nalCount = currentFrame.length;
                currentGop.byteLength = currentFrame.byteLength;
                currentGop.pts = currentFrame.pts;
                currentGop.dts = currentFrame.dts;
                currentGop.duration = currentFrame.duration;
            } else {
                currentGop.duration += currentFrame.duration;
                currentGop.nalCount += currentFrame.length;
                currentGop.byteLength += currentFrame.byteLength;
                currentGop.push(currentFrame);
            }
        }
        if (gops.length && currentGop.duration <= 0) currentGop.duration = gops[gops.length - 1].duration;
        gops.byteLength += currentGop.byteLength;
        gops.nalCount += currentGop.nalCount;
        gops.duration += currentGop.duration; // push the final Gop
        gops.push(currentGop);
        return gops;
    };
    /*
   * Search for the first keyframe in the GOPs and throw away all frames
   * until that keyframe. Then extend the duration of the pulled keyframe
   * and pull the PTS and DTS of the keyframe so that it covers the time
   * range of the frames that were disposed.
   *
   * @param {Array} gops video GOPs
   * @returns {Array} modified video GOPs
   */ var extendFirstKeyFrame = function(gops) {
        var currentGop;
        if (!gops[0][0].keyFrame && gops.length > 1) {
            // Remove the first GOP
            currentGop = gops.shift();
            gops.byteLength -= currentGop.byteLength;
            gops.nalCount -= currentGop.nalCount; // Extend the first frame of what is now the
            // first gop to cover the time period of the
            // frames we just removed
            gops[0][0].dts = currentGop.dts;
            gops[0][0].pts = currentGop.pts;
            gops[0][0].duration += currentGop.duration;
        }
        return gops;
    };
    /**
   * Default sample object
   * see ISO/IEC 14496-12:2012, section 8.6.4.3
   */ var createDefaultSample = function() {
        return {
            size: 0,
            flags: {
                isLeading: 0,
                dependsOn: 1,
                isDependedOn: 0,
                hasRedundancy: 0,
                degradationPriority: 0,
                isNonSyncSample: 1
            }
        };
    };
    /*
   * Collates information from a video frame into an object for eventual
   * entry into an MP4 sample table.
   *
   * @param {Object} frame the video frame
   * @param {Number} dataOffset the byte offset to position the sample
   * @return {Object} object containing sample table info for a frame
   */ var sampleForFrame = function(frame, dataOffset) {
        var sample = createDefaultSample();
        sample.dataOffset = dataOffset;
        sample.compositionTimeOffset = frame.pts - frame.dts;
        sample.duration = frame.duration;
        sample.size = 4 * frame.length; // Space for nal unit size
        sample.size += frame.byteLength;
        if (frame.keyFrame) {
            sample.flags.dependsOn = 2;
            sample.flags.isNonSyncSample = 0;
        }
        return sample;
    }; // generate the track's sample table from an array of gops
    var generateSampleTable$1 = function(gops, baseDataOffset) {
        var h, i, sample, currentGop, currentFrame, dataOffset = baseDataOffset || 0, samples = [];
        for(h = 0; h < gops.length; h++){
            currentGop = gops[h];
            for(i = 0; i < currentGop.length; i++){
                currentFrame = currentGop[i];
                sample = sampleForFrame(currentFrame, dataOffset);
                dataOffset += sample.size;
                samples.push(sample);
            }
        }
        return samples;
    }; // generate the track's raw mdat data from an array of gops
    var concatenateNalData = function(gops) {
        var h, i, j, currentGop, currentFrame, currentNal, dataOffset = 0, nalsByteLength = gops.byteLength, numberOfNals = gops.nalCount, totalByteLength = nalsByteLength + 4 * numberOfNals, data = new Uint8Array(totalByteLength), view = new DataView(data.buffer); // For each Gop..
        for(h = 0; h < gops.length; h++){
            currentGop = gops[h]; // For each Frame..
            for(i = 0; i < currentGop.length; i++){
                currentFrame = currentGop[i]; // For each NAL..
                for(j = 0; j < currentFrame.length; j++){
                    currentNal = currentFrame[j];
                    view.setUint32(dataOffset, currentNal.data.byteLength);
                    dataOffset += 4;
                    data.set(currentNal.data, dataOffset);
                    dataOffset += currentNal.data.byteLength;
                }
            }
        }
        return data;
    }; // generate the track's sample table from a frame
    var generateSampleTableForFrame = function(frame, baseDataOffset) {
        var sample, dataOffset = baseDataOffset || 0, samples = [];
        sample = sampleForFrame(frame, dataOffset);
        samples.push(sample);
        return samples;
    }; // generate the track's raw mdat data from a frame
    var concatenateNalDataForFrame = function(frame) {
        var i, currentNal, dataOffset = 0, nalsByteLength = frame.byteLength, numberOfNals = frame.length, totalByteLength = nalsByteLength + 4 * numberOfNals, data = new Uint8Array(totalByteLength), view = new DataView(data.buffer); // For each NAL..
        for(i = 0; i < frame.length; i++){
            currentNal = frame[i];
            view.setUint32(dataOffset, currentNal.data.byteLength);
            dataOffset += 4;
            data.set(currentNal.data, dataOffset);
            dataOffset += currentNal.data.byteLength;
        }
        return data;
    };
    var frameUtils$1 = {
        groupNalsIntoFrames: groupNalsIntoFrames,
        groupFramesIntoGops: groupFramesIntoGops,
        extendFirstKeyFrame: extendFirstKeyFrame,
        generateSampleTable: generateSampleTable$1,
        concatenateNalData: concatenateNalData,
        generateSampleTableForFrame: generateSampleTableForFrame,
        concatenateNalDataForFrame: concatenateNalDataForFrame
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   */ var highPrefix = [
        33,
        16,
        5,
        32,
        164,
        27
    ];
    var lowPrefix = [
        33,
        65,
        108,
        84,
        1,
        2,
        4,
        8,
        168,
        2,
        4,
        8,
        17,
        191,
        252
    ];
    var zeroFill = function(count) {
        var a = [];
        while(count--)a.push(0);
        return a;
    };
    var makeTable = function(metaTable) {
        return Object.keys(metaTable).reduce(function(obj, key) {
            obj[key] = new Uint8Array(metaTable[key].reduce(function(arr, part) {
                return arr.concat(part);
            }, []));
            return obj;
        }, {});
    };
    var silence;
    var silence_1 = function() {
        if (!silence) {
            // Frames-of-silence to use for filling in missing AAC frames
            var coneOfSilence = {
                96000: [
                    highPrefix,
                    [
                        227,
                        64
                    ],
                    zeroFill(154),
                    [
                        56
                    ]
                ],
                88200: [
                    highPrefix,
                    [
                        231
                    ],
                    zeroFill(170),
                    [
                        56
                    ]
                ],
                64000: [
                    highPrefix,
                    [
                        248,
                        192
                    ],
                    zeroFill(240),
                    [
                        56
                    ]
                ],
                48000: [
                    highPrefix,
                    [
                        255,
                        192
                    ],
                    zeroFill(268),
                    [
                        55,
                        148,
                        128
                    ],
                    zeroFill(54),
                    [
                        112
                    ]
                ],
                44100: [
                    highPrefix,
                    [
                        255,
                        192
                    ],
                    zeroFill(268),
                    [
                        55,
                        163,
                        128
                    ],
                    zeroFill(84),
                    [
                        112
                    ]
                ],
                32000: [
                    highPrefix,
                    [
                        255,
                        192
                    ],
                    zeroFill(268),
                    [
                        55,
                        234
                    ],
                    zeroFill(226),
                    [
                        112
                    ]
                ],
                24000: [
                    highPrefix,
                    [
                        255,
                        192
                    ],
                    zeroFill(268),
                    [
                        55,
                        255,
                        128
                    ],
                    zeroFill(268),
                    [
                        111,
                        112
                    ],
                    zeroFill(126),
                    [
                        224
                    ]
                ],
                16000: [
                    highPrefix,
                    [
                        255,
                        192
                    ],
                    zeroFill(268),
                    [
                        55,
                        255,
                        128
                    ],
                    zeroFill(268),
                    [
                        111,
                        255
                    ],
                    zeroFill(269),
                    [
                        223,
                        108
                    ],
                    zeroFill(195),
                    [
                        1,
                        192
                    ]
                ],
                12000: [
                    lowPrefix,
                    zeroFill(268),
                    [
                        3,
                        127,
                        248
                    ],
                    zeroFill(268),
                    [
                        6,
                        255,
                        240
                    ],
                    zeroFill(268),
                    [
                        13,
                        255,
                        224
                    ],
                    zeroFill(268),
                    [
                        27,
                        253,
                        128
                    ],
                    zeroFill(259),
                    [
                        56
                    ]
                ],
                11025: [
                    lowPrefix,
                    zeroFill(268),
                    [
                        3,
                        127,
                        248
                    ],
                    zeroFill(268),
                    [
                        6,
                        255,
                        240
                    ],
                    zeroFill(268),
                    [
                        13,
                        255,
                        224
                    ],
                    zeroFill(268),
                    [
                        27,
                        255,
                        192
                    ],
                    zeroFill(268),
                    [
                        55,
                        175,
                        128
                    ],
                    zeroFill(108),
                    [
                        112
                    ]
                ],
                8000: [
                    lowPrefix,
                    zeroFill(268),
                    [
                        3,
                        121,
                        16
                    ],
                    zeroFill(47),
                    [
                        7
                    ]
                ]
            };
            silence = makeTable(coneOfSilence);
        }
        return silence;
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   */ var ONE_SECOND_IN_TS$4 = 90000, // 90kHz clock
    secondsToVideoTs, secondsToAudioTs, videoTsToSeconds, audioTsToSeconds, audioTsToVideoTs, videoTsToAudioTs, metadataTsToSeconds;
    secondsToVideoTs = function(seconds) {
        return seconds * ONE_SECOND_IN_TS$4;
    };
    secondsToAudioTs = function(seconds, sampleRate) {
        return seconds * sampleRate;
    };
    videoTsToSeconds = function(timestamp) {
        return timestamp / ONE_SECOND_IN_TS$4;
    };
    audioTsToSeconds = function(timestamp, sampleRate) {
        return timestamp / sampleRate;
    };
    audioTsToVideoTs = function(timestamp, sampleRate) {
        return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));
    };
    videoTsToAudioTs = function(timestamp, sampleRate) {
        return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);
    };
    /**
   * Adjust ID3 tag or caption timing information by the timeline pts values
   * (if keepOriginalTimestamps is false) and convert to seconds
   */ metadataTsToSeconds = function(timestamp, timelineStartPts, keepOriginalTimestamps) {
        return videoTsToSeconds(keepOriginalTimestamps ? timestamp : timestamp - timelineStartPts);
    };
    var clock$2 = {
        ONE_SECOND_IN_TS: ONE_SECOND_IN_TS$4,
        secondsToVideoTs: secondsToVideoTs,
        secondsToAudioTs: secondsToAudioTs,
        videoTsToSeconds: videoTsToSeconds,
        audioTsToSeconds: audioTsToSeconds,
        audioTsToVideoTs: audioTsToVideoTs,
        videoTsToAudioTs: videoTsToAudioTs,
        metadataTsToSeconds: metadataTsToSeconds
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   */ var coneOfSilence = silence_1;
    var clock$1 = clock$2;
    /**
   * Sum the `byteLength` properties of the data in each AAC frame
   */ var sumFrameByteLengths = function(array) {
        var i, currentObj, sum = 0; // sum the byteLength's all each nal unit in the frame
        for(i = 0; i < array.length; i++){
            currentObj = array[i];
            sum += currentObj.data.byteLength;
        }
        return sum;
    }; // Possibly pad (prefix) the audio track with silence if appending this track
    // would lead to the introduction of a gap in the audio buffer
    var prefixWithSilence = function(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime) {
        var baseMediaDecodeTimeTs, frameDuration = 0, audioGapDuration = 0, audioFillFrameCount = 0, audioFillDuration = 0, silentFrame, i, firstFrame;
        if (!frames.length) return;
        baseMediaDecodeTimeTs = clock$1.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate); // determine frame clock duration based on sample rate, round up to avoid overfills
        frameDuration = Math.ceil(clock$1.ONE_SECOND_IN_TS / (track.samplerate / 1024));
        if (audioAppendStartTs && videoBaseMediaDecodeTime) {
            // insert the shortest possible amount (audio gap or audio to video gap)
            audioGapDuration = baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime); // number of full frames in the audio gap
            audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);
            audioFillDuration = audioFillFrameCount * frameDuration;
        } // don't attempt to fill gaps smaller than a single frame or larger
        // than a half second
        if (audioFillFrameCount < 1 || audioFillDuration > clock$1.ONE_SECOND_IN_TS / 2) return;
        silentFrame = coneOfSilence()[track.samplerate];
        if (!silentFrame) // we don't have a silent frame pregenerated for the sample rate, so use a frame
        // from the content instead
        silentFrame = frames[0].data;
        for(i = 0; i < audioFillFrameCount; i++){
            firstFrame = frames[0];
            frames.splice(0, 0, {
                data: silentFrame,
                dts: firstFrame.dts - frameDuration,
                pts: firstFrame.pts - frameDuration
            });
        }
        track.baseMediaDecodeTime -= Math.floor(clock$1.videoTsToAudioTs(audioFillDuration, track.samplerate));
        return audioFillDuration;
    }; // If the audio segment extends before the earliest allowed dts
    // value, remove AAC frames until starts at or after the earliest
    // allowed DTS so that we don't end up with a negative baseMedia-
    // DecodeTime for the audio track
    var trimAdtsFramesByEarliestDts = function(adtsFrames, track, earliestAllowedDts) {
        if (track.minSegmentDts >= earliestAllowedDts) return adtsFrames;
         // We will need to recalculate the earliest segment Dts
        track.minSegmentDts = Infinity;
        return adtsFrames.filter(function(currentFrame) {
            // If this is an allowed frame, keep it and record it's Dts
            if (currentFrame.dts >= earliestAllowedDts) {
                track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);
                track.minSegmentPts = track.minSegmentDts;
                return true;
            } // Otherwise, discard it
            return false;
        });
    }; // generate the track's raw mdat data from an array of frames
    var generateSampleTable = function(frames) {
        var i, currentFrame, samples = [];
        for(i = 0; i < frames.length; i++){
            currentFrame = frames[i];
            samples.push({
                size: currentFrame.data.byteLength,
                duration: 1024 // For AAC audio, all samples contain 1024 samples
            });
        }
        return samples;
    }; // generate the track's sample table from an array of frames
    var concatenateFrameData = function(frames) {
        var i, currentFrame, dataOffset = 0, data = new Uint8Array(sumFrameByteLengths(frames));
        for(i = 0; i < frames.length; i++){
            currentFrame = frames[i];
            data.set(currentFrame.data, dataOffset);
            dataOffset += currentFrame.data.byteLength;
        }
        return data;
    };
    var audioFrameUtils$1 = {
        prefixWithSilence: prefixWithSilence,
        trimAdtsFramesByEarliestDts: trimAdtsFramesByEarliestDts,
        generateSampleTable: generateSampleTable,
        concatenateFrameData: concatenateFrameData
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   */ var ONE_SECOND_IN_TS$3 = clock$2.ONE_SECOND_IN_TS;
    /**
   * Store information about the start and end of the track and the
   * duration for each frame/sample we process in order to calculate
   * the baseMediaDecodeTime
   */ var collectDtsInfo = function(track, data) {
        if (typeof data.pts === "number") {
            if (track.timelineStartInfo.pts === undefined) track.timelineStartInfo.pts = data.pts;
            if (track.minSegmentPts === undefined) track.minSegmentPts = data.pts;
            else track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);
            if (track.maxSegmentPts === undefined) track.maxSegmentPts = data.pts;
            else track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);
        }
        if (typeof data.dts === "number") {
            if (track.timelineStartInfo.dts === undefined) track.timelineStartInfo.dts = data.dts;
            if (track.minSegmentDts === undefined) track.minSegmentDts = data.dts;
            else track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);
            if (track.maxSegmentDts === undefined) track.maxSegmentDts = data.dts;
            else track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);
        }
    };
    /**
   * Clear values used to calculate the baseMediaDecodeTime between
   * tracks
   */ var clearDtsInfo = function(track) {
        delete track.minSegmentDts;
        delete track.maxSegmentDts;
        delete track.minSegmentPts;
        delete track.maxSegmentPts;
    };
    /**
   * Calculate the track's baseMediaDecodeTime based on the earliest
   * DTS the transmuxer has ever seen and the minimum DTS for the
   * current track
   * @param track {object} track metadata configuration
   * @param keepOriginalTimestamps {boolean} If true, keep the timestamps
   *        in the source; false to adjust the first segment to start at 0.
   */ var calculateTrackBaseMediaDecodeTime = function(track, keepOriginalTimestamps) {
        var baseMediaDecodeTime, scale, minSegmentDts = track.minSegmentDts; // Optionally adjust the time so the first segment starts at zero.
        if (!keepOriginalTimestamps) minSegmentDts -= track.timelineStartInfo.dts;
         // track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where
        // we want the start of the first segment to be placed
        baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime; // Add to that the distance this segment is from the very first
        baseMediaDecodeTime += minSegmentDts; // baseMediaDecodeTime must not become negative
        baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);
        if (track.type === "audio") {
            // Audio has a different clock equal to the sampling_rate so we need to
            // scale the PTS values into the clock rate of the track
            scale = track.samplerate / ONE_SECOND_IN_TS$3;
            baseMediaDecodeTime *= scale;
            baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);
        }
        return baseMediaDecodeTime;
    };
    var trackDecodeInfo$1 = {
        clearDtsInfo: clearDtsInfo,
        calculateTrackBaseMediaDecodeTime: calculateTrackBaseMediaDecodeTime,
        collectDtsInfo: collectDtsInfo
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * Reads in-band caption information from a video elementary
   * stream. Captions must follow the CEA-708 standard for injection
   * into an MPEG-2 transport streams.
   * @see https://en.wikipedia.org/wiki/CEA-708
   * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf
   */ // payload type field to indicate how they are to be
    // interpreted. CEAS-708 caption content is always transmitted with
    // payload type 0x04.
    var USER_DATA_REGISTERED_ITU_T_T35 = 4, RBSP_TRAILING_BITS = 128;
    /**
    * Parse a supplemental enhancement information (SEI) NAL unit.
    * Stops parsing once a message of type ITU T T35 has been found.
    *
    * @param bytes {Uint8Array} the bytes of a SEI NAL unit
    * @return {object} the parsed SEI payload
    * @see Rec. ITU-T H.264, 7.3.2.3.1
    */ var parseSei = function(bytes) {
        var i = 0, result = {
            payloadType: -1,
            payloadSize: 0
        }, payloadType = 0, payloadSize = 0; // go through the sei_rbsp parsing each each individual sei_message
        while(i < bytes.byteLength){
            // stop once we have hit the end of the sei_rbsp
            if (bytes[i] === RBSP_TRAILING_BITS) break;
             // Parse payload type
            while(bytes[i] === 0xFF){
                payloadType += 255;
                i++;
            }
            payloadType += bytes[i++]; // Parse payload size
            while(bytes[i] === 0xFF){
                payloadSize += 255;
                i++;
            }
            payloadSize += bytes[i++]; // this sei_message is a 608/708 caption so save it and break
            // there can only ever be one caption message in a frame's sei
            if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {
                var userIdentifier = String.fromCharCode(bytes[i + 3], bytes[i + 4], bytes[i + 5], bytes[i + 6]);
                if (userIdentifier === "GA94") {
                    result.payloadType = payloadType;
                    result.payloadSize = payloadSize;
                    result.payload = bytes.subarray(i, i + payloadSize);
                    break;
                } else result.payload = void 0;
            } // skip the payload and parse the next message
            i += payloadSize;
            payloadType = 0;
            payloadSize = 0;
        }
        return result;
    }; // see ANSI/SCTE 128-1 (2013), section 8.1
    var parseUserData = function(sei) {
        // itu_t_t35_contry_code must be 181 (United States) for
        // captions
        if (sei.payload[0] !== 181) return null;
         // itu_t_t35_provider_code should be 49 (ATSC) for captions
        if ((sei.payload[1] << 8 | sei.payload[2]) !== 49) return null;
         // the user_identifier should be "GA94" to indicate ATSC1 data
        if (String.fromCharCode(sei.payload[3], sei.payload[4], sei.payload[5], sei.payload[6]) !== "GA94") return null;
         // finally, user_data_type_code should be 0x03 for caption data
        if (sei.payload[7] !== 0x03) return null;
         // return the user_data_type_structure and strip the trailing
        // marker bits
        return sei.payload.subarray(8, sei.payload.length - 1);
    }; // see CEA-708-D, section 4.4
    var parseCaptionPackets = function(pts, userData) {
        var results = [], i, count, offset, data; // if this is just filler, return immediately
        if (!(userData[0] & 0x40)) return results;
         // parse out the cc_data_1 and cc_data_2 fields
        count = userData[0] & 0x1f;
        for(i = 0; i < count; i++){
            offset = i * 3;
            data = {
                type: userData[offset + 2] & 0x03,
                pts: pts
            }; // capture cc data when cc_valid is 1
            if (userData[offset + 2] & 0x04) {
                data.ccData = userData[offset + 3] << 8 | userData[offset + 4];
                results.push(data);
            }
        }
        return results;
    };
    var discardEmulationPreventionBytes$1 = function(data) {
        var length = data.byteLength, emulationPreventionBytesPositions = [], i = 1, newLength, newData; // Find all `Emulation Prevention Bytes`
        while(i < length - 2)if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {
            emulationPreventionBytesPositions.push(i + 2);
            i += 2;
        } else i++;
         // If no Emulation Prevention Bytes were found just return the original
        // array
        if (emulationPreventionBytesPositions.length === 0) return data;
         // Create a new array to hold the NAL unit data
        newLength = length - emulationPreventionBytesPositions.length;
        newData = new Uint8Array(newLength);
        var sourceIndex = 0;
        for(i = 0; i < newLength; sourceIndex++, i++){
            if (sourceIndex === emulationPreventionBytesPositions[0]) {
                // Skip this byte
                sourceIndex++; // Remove this position index
                emulationPreventionBytesPositions.shift();
            }
            newData[i] = data[sourceIndex];
        }
        return newData;
    }; // exports
    var captionPacketParser = {
        parseSei: parseSei,
        parseUserData: parseUserData,
        parseCaptionPackets: parseCaptionPackets,
        discardEmulationPreventionBytes: discardEmulationPreventionBytes$1,
        USER_DATA_REGISTERED_ITU_T_T35: USER_DATA_REGISTERED_ITU_T_T35
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * Reads in-band caption information from a video elementary
   * stream. Captions must follow the CEA-708 standard for injection
   * into an MPEG-2 transport streams.
   * @see https://en.wikipedia.org/wiki/CEA-708
   * @see https://www.gpo.gov/fdsys/pkg/CFR-2007-title47-vol1/pdf/CFR-2007-title47-vol1-sec15-119.pdf
   */ // Link To Transport
    // -----------------
    var Stream$7 = stream;
    var cea708Parser = captionPacketParser;
    var CaptionStream$2 = function(options) {
        options = options || {};
        CaptionStream$2.prototype.init.call(this); // parse708captions flag, default to true
        this.parse708captions_ = typeof options.parse708captions === "boolean" ? options.parse708captions : true;
        this.captionPackets_ = [];
        this.ccStreams_ = [
            new Cea608Stream(0, 0),
            // eslint-disable-line no-use-before-define
            new Cea608Stream(0, 1),
            // eslint-disable-line no-use-before-define
            new Cea608Stream(1, 0),
            // eslint-disable-line no-use-before-define
            new Cea608Stream(1, 1) // eslint-disable-line no-use-before-define
        ];
        if (this.parse708captions_) this.cc708Stream_ = new Cea708Stream({
            captionServices: options.captionServices
        }); // eslint-disable-line no-use-before-define
        this.reset(); // forward data and done events from CCs to this CaptionStream
        this.ccStreams_.forEach(function(cc) {
            cc.on("data", this.trigger.bind(this, "data"));
            cc.on("partialdone", this.trigger.bind(this, "partialdone"));
            cc.on("done", this.trigger.bind(this, "done"));
        }, this);
        if (this.parse708captions_) {
            this.cc708Stream_.on("data", this.trigger.bind(this, "data"));
            this.cc708Stream_.on("partialdone", this.trigger.bind(this, "partialdone"));
            this.cc708Stream_.on("done", this.trigger.bind(this, "done"));
        }
    };
    CaptionStream$2.prototype = new Stream$7();
    CaptionStream$2.prototype.push = function(event) {
        var sei, userData, newCaptionPackets; // only examine SEI NALs
        if (event.nalUnitType !== "sei_rbsp") return;
         // parse the sei
        sei = cea708Parser.parseSei(event.escapedRBSP); // no payload data, skip
        if (!sei.payload) return;
         // ignore everything but user_data_registered_itu_t_t35
        if (sei.payloadType !== cea708Parser.USER_DATA_REGISTERED_ITU_T_T35) return;
         // parse out the user data payload
        userData = cea708Parser.parseUserData(sei); // ignore unrecognized userData
        if (!userData) return;
         // Sometimes, the same segment # will be downloaded twice. To stop the
        // caption data from being processed twice, we track the latest dts we've
        // received and ignore everything with a dts before that. However, since
        // data for a specific dts can be split across packets on either side of
        // a segment boundary, we need to make sure we *don't* ignore the packets
        // from the *next* segment that have dts === this.latestDts_. By constantly
        // tracking the number of packets received with dts === this.latestDts_, we
        // know how many should be ignored once we start receiving duplicates.
        if (event.dts < this.latestDts_) {
            // We've started getting older data, so set the flag.
            this.ignoreNextEqualDts_ = true;
            return;
        } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {
            this.numSameDts_--;
            if (!this.numSameDts_) // We've received the last duplicate packet, time to start processing again
            this.ignoreNextEqualDts_ = false;
            return;
        } // parse out CC data packets and save them for later
        newCaptionPackets = cea708Parser.parseCaptionPackets(event.pts, userData);
        this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);
        if (this.latestDts_ !== event.dts) this.numSameDts_ = 0;
        this.numSameDts_++;
        this.latestDts_ = event.dts;
    };
    CaptionStream$2.prototype.flushCCStreams = function(flushType) {
        this.ccStreams_.forEach(function(cc) {
            return flushType === "flush" ? cc.flush() : cc.partialFlush();
        }, this);
    };
    CaptionStream$2.prototype.flushStream = function(flushType) {
        // make sure we actually parsed captions before proceeding
        if (!this.captionPackets_.length) {
            this.flushCCStreams(flushType);
            return;
        } // In Chrome, the Array#sort function is not stable so add a
        // presortIndex that we can use to ensure we get a stable-sort
        this.captionPackets_.forEach(function(elem, idx) {
            elem.presortIndex = idx;
        }); // sort caption byte-pairs based on their PTS values
        this.captionPackets_.sort(function(a, b) {
            if (a.pts === b.pts) return a.presortIndex - b.presortIndex;
            return a.pts - b.pts;
        });
        this.captionPackets_.forEach(function(packet) {
            if (packet.type < 2) // Dispatch packet to the right Cea608Stream
            this.dispatchCea608Packet(packet);
            else // Dispatch packet to the Cea708Stream
            this.dispatchCea708Packet(packet);
        }, this);
        this.captionPackets_.length = 0;
        this.flushCCStreams(flushType);
    };
    CaptionStream$2.prototype.flush = function() {
        return this.flushStream("flush");
    }; // Only called if handling partial data
    CaptionStream$2.prototype.partialFlush = function() {
        return this.flushStream("partialFlush");
    };
    CaptionStream$2.prototype.reset = function() {
        this.latestDts_ = null;
        this.ignoreNextEqualDts_ = false;
        this.numSameDts_ = 0;
        this.activeCea608Channel_ = [
            null,
            null
        ];
        this.ccStreams_.forEach(function(ccStream) {
            ccStream.reset();
        });
    }; // From the CEA-608 spec:
    /*
   * When XDS sub-packets are interleaved with other services, the end of each sub-packet shall be followed
   * by a control pair to change to a different service. When any of the control codes from 0x10 to 0x1F is
   * used to begin a control code pair, it indicates the return to captioning or Text data. The control code pair
   * and subsequent data should then be processed according to the FCC rules. It may be necessary for the
   * line 21 data encoder to automatically insert a control code pair (i.e. RCL, RU2, RU3, RU4, RDC, or RTD)
   * to switch to captioning or Text.
  */ // With that in mind, we ignore any data between an XDS control code and a
    // subsequent closed-captioning control code.
    CaptionStream$2.prototype.dispatchCea608Packet = function(packet) {
        // NOTE: packet.type is the CEA608 field
        if (this.setsTextOrXDSActive(packet)) this.activeCea608Channel_[packet.type] = null;
        else if (this.setsChannel1Active(packet)) this.activeCea608Channel_[packet.type] = 0;
        else if (this.setsChannel2Active(packet)) this.activeCea608Channel_[packet.type] = 1;
        if (this.activeCea608Channel_[packet.type] === null) // If we haven't received anything to set the active channel, or the
        // packets are Text/XDS data, discard the data; we don't want jumbled
        // captions
        return;
        this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);
    };
    CaptionStream$2.prototype.setsChannel1Active = function(packet) {
        return (packet.ccData & 0x7800) === 0x1000;
    };
    CaptionStream$2.prototype.setsChannel2Active = function(packet) {
        return (packet.ccData & 0x7800) === 0x1800;
    };
    CaptionStream$2.prototype.setsTextOrXDSActive = function(packet) {
        return (packet.ccData & 0x7100) === 0x0100 || (packet.ccData & 0x78fe) === 0x102a || (packet.ccData & 0x78fe) === 0x182a;
    };
    CaptionStream$2.prototype.dispatchCea708Packet = function(packet) {
        if (this.parse708captions_) this.cc708Stream_.push(packet);
    }; // ----------------------
    // Session to Application
    // ----------------------
    // This hash maps special and extended character codes to their
    // proper Unicode equivalent. The first one-byte key is just a
    // non-standard character code. The two-byte keys that follow are
    // the extended CEA708 character codes, along with the preceding
    // 0x10 extended character byte to distinguish these codes from
    // non-extended character codes. Every CEA708 character code that
    // is not in this object maps directly to a standard unicode
    // character code.
    // The transparent space and non-breaking transparent space are
    // technically not fully supported since there is no code to
    // make them transparent, so they have normal non-transparent
    // stand-ins.
    // The special closed caption (CC) character isn't a standard
    // unicode character, so a fairly similar unicode character was
    // chosen in it's place.
    var CHARACTER_TRANSLATION_708 = {
        0x7f: 0x266a,
        // ♪
        0x1020: 0x20,
        // Transparent Space
        0x1021: 0xa0,
        // Nob-breaking Transparent Space
        0x1025: 0x2026,
        // …
        0x102a: 0x0160,
        // Š
        0x102c: 0x0152,
        // Œ
        0x1030: 0x2588,
        // █
        0x1031: 0x2018,
        // ‘
        0x1032: 0x2019,
        // ’
        0x1033: 0x201c,
        // “
        0x1034: 0x201d,
        // ”
        0x1035: 0x2022,
        // •
        0x1039: 0x2122,
        // ™
        0x103a: 0x0161,
        // š
        0x103c: 0x0153,
        // œ
        0x103d: 0x2120,
        // ℠
        0x103f: 0x0178,
        // Ÿ
        0x1076: 0x215b,
        // ⅛
        0x1077: 0x215c,
        // ⅜
        0x1078: 0x215d,
        // ⅝
        0x1079: 0x215e,
        // ⅞
        0x107a: 0x23d0,
        // ⏐
        0x107b: 0x23a4,
        // ⎤
        0x107c: 0x23a3,
        // ⎣
        0x107d: 0x23af,
        // ⎯
        0x107e: 0x23a6,
        // ⎦
        0x107f: 0x23a1,
        // ⎡
        0x10a0: 0x3138 // ㄸ (CC char)
    };
    var get708CharFromCode = function(code) {
        var newCode = CHARACTER_TRANSLATION_708[code] || code;
        if (code & 0x1000 && code === newCode) // Invalid extended code
        return "";
        return String.fromCharCode(newCode);
    };
    var within708TextBlock = function(b) {
        return 0x20 <= b && b <= 0x7f || 0xa0 <= b && b <= 0xff;
    };
    var Cea708Window = function(windowNum) {
        this.windowNum = windowNum;
        this.reset();
    };
    Cea708Window.prototype.reset = function() {
        this.clearText();
        this.pendingNewLine = false;
        this.winAttr = {};
        this.penAttr = {};
        this.penLoc = {};
        this.penColor = {}; // These default values are arbitrary,
        // defineWindow will usually override them
        this.visible = 0;
        this.rowLock = 0;
        this.columnLock = 0;
        this.priority = 0;
        this.relativePositioning = 0;
        this.anchorVertical = 0;
        this.anchorHorizontal = 0;
        this.anchorPoint = 0;
        this.rowCount = 1;
        this.virtualRowCount = this.rowCount + 1;
        this.columnCount = 41;
        this.windowStyle = 0;
        this.penStyle = 0;
    };
    Cea708Window.prototype.getText = function() {
        return this.rows.join("\n");
    };
    Cea708Window.prototype.clearText = function() {
        this.rows = [
            ""
        ];
        this.rowIdx = 0;
    };
    Cea708Window.prototype.newLine = function(pts) {
        if (this.rows.length >= this.virtualRowCount && typeof this.beforeRowOverflow === "function") this.beforeRowOverflow(pts);
        if (this.rows.length > 0) {
            this.rows.push("");
            this.rowIdx++;
        } // Show all virtual rows since there's no visible scrolling
        while(this.rows.length > this.virtualRowCount){
            this.rows.shift();
            this.rowIdx--;
        }
    };
    Cea708Window.prototype.isEmpty = function() {
        if (this.rows.length === 0) return true;
        else if (this.rows.length === 1) return this.rows[0] === "";
        return false;
    };
    Cea708Window.prototype.addText = function(text) {
        this.rows[this.rowIdx] += text;
    };
    Cea708Window.prototype.backspace = function() {
        if (!this.isEmpty()) {
            var row = this.rows[this.rowIdx];
            this.rows[this.rowIdx] = row.substr(0, row.length - 1);
        }
    };
    var Cea708Service = function(serviceNum, encoding, stream) {
        this.serviceNum = serviceNum;
        this.text = "";
        this.currentWindow = new Cea708Window(-1);
        this.windows = [];
        this.stream = stream; // Try to setup a TextDecoder if an `encoding` value was provided
        if (typeof encoding === "string") this.createTextDecoder(encoding);
    };
    /**
   * Initialize service windows
   * Must be run before service use
   *
   * @param  {Integer}  pts               PTS value
   * @param  {Function} beforeRowOverflow Function to execute before row overflow of a window
   */ Cea708Service.prototype.init = function(pts, beforeRowOverflow) {
        this.startPts = pts;
        for(var win = 0; win < 8; win++){
            this.windows[win] = new Cea708Window(win);
            if (typeof beforeRowOverflow === "function") this.windows[win].beforeRowOverflow = beforeRowOverflow;
        }
    };
    /**
   * Set current window of service to be affected by commands
   *
   * @param  {Integer} windowNum Window number
   */ Cea708Service.prototype.setCurrentWindow = function(windowNum) {
        this.currentWindow = this.windows[windowNum];
    };
    /**
   * Try to create a TextDecoder if it is natively supported
   */ Cea708Service.prototype.createTextDecoder = function(encoding) {
        if (typeof TextDecoder === "undefined") this.stream.trigger("log", {
            level: "warn",
            message: "The `encoding` option is unsupported without TextDecoder support"
        });
        else try {
            this.textDecoder_ = new TextDecoder(encoding);
        } catch (error) {
            this.stream.trigger("log", {
                level: "warn",
                message: "TextDecoder could not be created with " + encoding + " encoding. " + error
            });
        }
    };
    var Cea708Stream = function(options) {
        options = options || {};
        Cea708Stream.prototype.init.call(this);
        var self1 = this;
        var captionServices = options.captionServices || {};
        var captionServiceEncodings = {};
        var serviceProps; // Get service encodings from captionServices option block
        Object.keys(captionServices).forEach((serviceName)=>{
            serviceProps = captionServices[serviceName];
            if (/^SERVICE/.test(serviceName)) captionServiceEncodings[serviceName] = serviceProps.encoding;
        });
        this.serviceEncodings = captionServiceEncodings;
        this.current708Packet = null;
        this.services = {};
        this.push = function(packet) {
            if (packet.type === 3) {
                // 708 packet start
                self1.new708Packet();
                self1.add708Bytes(packet);
            } else {
                if (self1.current708Packet === null) // This should only happen at the start of a file if there's no packet start.
                self1.new708Packet();
                self1.add708Bytes(packet);
            }
        };
    };
    Cea708Stream.prototype = new Stream$7();
    /**
   * Push current 708 packet, create new 708 packet.
   */ Cea708Stream.prototype.new708Packet = function() {
        if (this.current708Packet !== null) this.push708Packet();
        this.current708Packet = {
            data: [],
            ptsVals: []
        };
    };
    /**
   * Add pts and both bytes from packet into current 708 packet.
   */ Cea708Stream.prototype.add708Bytes = function(packet) {
        var data = packet.ccData;
        var byte0 = data >>> 8;
        var byte1 = data & 0xff; // I would just keep a list of packets instead of bytes, but it isn't clear in the spec
        // that service blocks will always line up with byte pairs.
        this.current708Packet.ptsVals.push(packet.pts);
        this.current708Packet.data.push(byte0);
        this.current708Packet.data.push(byte1);
    };
    /**
   * Parse completed 708 packet into service blocks and push each service block.
   */ Cea708Stream.prototype.push708Packet = function() {
        var packet708 = this.current708Packet;
        var packetData = packet708.data;
        var serviceNum = null;
        var blockSize = null;
        var i = 0;
        var b = packetData[i++];
        packet708.seq = b >> 6;
        packet708.sizeCode = b & 0x3f; // 0b00111111;
        for(; i < packetData.length; i++){
            b = packetData[i++];
            serviceNum = b >> 5;
            blockSize = b & 0x1f; // 0b00011111
            if (serviceNum === 7 && blockSize > 0) {
                // Extended service num
                b = packetData[i++];
                serviceNum = b;
            }
            this.pushServiceBlock(serviceNum, i, blockSize);
            if (blockSize > 0) i += blockSize - 1;
        }
    };
    /**
   * Parse service block, execute commands, read text.
   *
   * Note: While many of these commands serve important purposes,
   * many others just parse out the parameters or attributes, but
   * nothing is done with them because this is not a full and complete
   * implementation of the entire 708 spec.
   *
   * @param  {Integer} serviceNum Service number
   * @param  {Integer} start      Start index of the 708 packet data
   * @param  {Integer} size       Block size
   */ Cea708Stream.prototype.pushServiceBlock = function(serviceNum, start, size) {
        var b;
        var i = start;
        var packetData = this.current708Packet.data;
        var service = this.services[serviceNum];
        if (!service) service = this.initService(serviceNum, i);
        for(; i < start + size && i < packetData.length; i++){
            b = packetData[i];
            if (within708TextBlock(b)) i = this.handleText(i, service);
            else if (b === 0x18) i = this.multiByteCharacter(i, service);
            else if (b === 0x10) i = this.extendedCommands(i, service);
            else if (0x80 <= b && b <= 0x87) i = this.setCurrentWindow(i, service);
            else if (0x98 <= b && b <= 0x9f) i = this.defineWindow(i, service);
            else if (b === 0x88) i = this.clearWindows(i, service);
            else if (b === 0x8c) i = this.deleteWindows(i, service);
            else if (b === 0x89) i = this.displayWindows(i, service);
            else if (b === 0x8a) i = this.hideWindows(i, service);
            else if (b === 0x8b) i = this.toggleWindows(i, service);
            else if (b === 0x97) i = this.setWindowAttributes(i, service);
            else if (b === 0x90) i = this.setPenAttributes(i, service);
            else if (b === 0x91) i = this.setPenColor(i, service);
            else if (b === 0x92) i = this.setPenLocation(i, service);
            else if (b === 0x8f) service = this.reset(i, service);
            else if (b === 0x08) // BS: Backspace
            service.currentWindow.backspace();
            else if (b === 0x0c) // FF: Form feed
            service.currentWindow.clearText();
            else if (b === 0x0d) // CR: Carriage return
            service.currentWindow.pendingNewLine = true;
            else if (b === 0x0e) // HCR: Horizontal carriage return
            service.currentWindow.clearText();
            else if (b === 0x8d) // DLY: Delay, nothing to do
            i++;
        }
    };
    /**
   * Execute an extended command
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */ Cea708Stream.prototype.extendedCommands = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[++i];
        if (within708TextBlock(b)) i = this.handleText(i, service, {
            isExtended: true
        });
        return i;
    };
    /**
   * Get PTS value of a given byte index
   *
   * @param  {Integer} byteIndex  Index of the byte
   * @return {Integer}            PTS
   */ Cea708Stream.prototype.getPts = function(byteIndex) {
        // There's 1 pts value per 2 bytes
        return this.current708Packet.ptsVals[Math.floor(byteIndex / 2)];
    };
    /**
   * Initializes a service
   *
   * @param  {Integer} serviceNum Service number
   * @return {Service}            Initialized service object
   */ Cea708Stream.prototype.initService = function(serviceNum, i) {
        var serviceName = "SERVICE" + serviceNum;
        var self1 = this;
        var serviceName;
        var encoding;
        if (serviceName in this.serviceEncodings) encoding = this.serviceEncodings[serviceName];
        this.services[serviceNum] = new Cea708Service(serviceNum, encoding, self1);
        this.services[serviceNum].init(this.getPts(i), function(pts) {
            self1.flushDisplayed(pts, self1.services[serviceNum]);
        });
        return this.services[serviceNum];
    };
    /**
   * Execute text writing to current window
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */ Cea708Stream.prototype.handleText = function(i, service, options) {
        var isExtended = options && options.isExtended;
        var isMultiByte = options && options.isMultiByte;
        var packetData = this.current708Packet.data;
        var extended = isExtended ? 0x1000 : 0x0000;
        var currentByte = packetData[i];
        var nextByte = packetData[i + 1];
        var win = service.currentWindow;
        var char;
        var charCodeArray; // Converts an array of bytes to a unicode hex string.
        function toHexString(byteArray) {
            return byteArray.map((byte)=>{
                return ("0" + (byte & 0xFF).toString(16)).slice(-2);
            }).join("");
        }
        if (isMultiByte) {
            charCodeArray = [
                currentByte,
                nextByte
            ];
            i++;
        } else charCodeArray = [
            currentByte
        ];
         // Use the TextDecoder if one was created for this service
        if (service.textDecoder_ && !isExtended) char = service.textDecoder_.decode(new Uint8Array(charCodeArray));
        else // We assume any multi-byte char without a decoder is unicode.
        if (isMultiByte) {
            const unicode = toHexString(charCodeArray); // Takes a unicode hex string and creates a single character.
            char = String.fromCharCode(parseInt(unicode, 16));
        } else char = get708CharFromCode(extended | currentByte);
        if (win.pendingNewLine && !win.isEmpty()) win.newLine(this.getPts(i));
        win.pendingNewLine = false;
        win.addText(char);
        return i;
    };
    /**
   * Handle decoding of multibyte character
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */ Cea708Stream.prototype.multiByteCharacter = function(i, service) {
        var packetData = this.current708Packet.data;
        var firstByte = packetData[i + 1];
        var secondByte = packetData[i + 2];
        if (within708TextBlock(firstByte) && within708TextBlock(secondByte)) i = this.handleText(++i, service, {
            isMultiByte: true
        });
        return i;
    };
    /**
   * Parse and execute the CW# command.
   *
   * Set the current window.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */ Cea708Stream.prototype.setCurrentWindow = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[i];
        var windowNum = b & 0x07;
        service.setCurrentWindow(windowNum);
        return i;
    };
    /**
   * Parse and execute the DF# command.
   *
   * Define a window and set it as the current window.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */ Cea708Stream.prototype.defineWindow = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[i];
        var windowNum = b & 0x07;
        service.setCurrentWindow(windowNum);
        var win = service.currentWindow;
        b = packetData[++i];
        win.visible = (b & 0x20) >> 5; // v
        win.rowLock = (b & 0x10) >> 4; // rl
        win.columnLock = (b & 0x08) >> 3; // cl
        win.priority = b & 0x07; // p
        b = packetData[++i];
        win.relativePositioning = (b & 0x80) >> 7; // rp
        win.anchorVertical = b & 0x7f; // av
        b = packetData[++i];
        win.anchorHorizontal = b; // ah
        b = packetData[++i];
        win.anchorPoint = (b & 0xf0) >> 4; // ap
        win.rowCount = b & 0x0f; // rc
        b = packetData[++i];
        win.columnCount = b & 0x3f; // cc
        b = packetData[++i];
        win.windowStyle = (b & 0x38) >> 3; // ws
        win.penStyle = b & 0x07; // ps
        // The spec says there are (rowCount+1) "virtual rows"
        win.virtualRowCount = win.rowCount + 1;
        return i;
    };
    /**
   * Parse and execute the SWA command.
   *
   * Set attributes of the current window.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */ Cea708Stream.prototype.setWindowAttributes = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[i];
        var winAttr = service.currentWindow.winAttr;
        b = packetData[++i];
        winAttr.fillOpacity = (b & 0xc0) >> 6; // fo
        winAttr.fillRed = (b & 0x30) >> 4; // fr
        winAttr.fillGreen = (b & 0x0c) >> 2; // fg
        winAttr.fillBlue = b & 0x03; // fb
        b = packetData[++i];
        winAttr.borderType = (b & 0xc0) >> 6; // bt
        winAttr.borderRed = (b & 0x30) >> 4; // br
        winAttr.borderGreen = (b & 0x0c) >> 2; // bg
        winAttr.borderBlue = b & 0x03; // bb
        b = packetData[++i];
        winAttr.borderType += (b & 0x80) >> 5; // bt
        winAttr.wordWrap = (b & 0x40) >> 6; // ww
        winAttr.printDirection = (b & 0x30) >> 4; // pd
        winAttr.scrollDirection = (b & 0x0c) >> 2; // sd
        winAttr.justify = b & 0x03; // j
        b = packetData[++i];
        winAttr.effectSpeed = (b & 0xf0) >> 4; // es
        winAttr.effectDirection = (b & 0x0c) >> 2; // ed
        winAttr.displayEffect = b & 0x03; // de
        return i;
    };
    /**
   * Gather text from all displayed windows and push a caption to output.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   */ Cea708Stream.prototype.flushDisplayed = function(pts, service) {
        var displayedText = []; // TODO: Positioning not supported, displaying multiple windows will not necessarily
        // display text in the correct order, but sample files so far have not shown any issue.
        for(var winId = 0; winId < 8; winId++)if (service.windows[winId].visible && !service.windows[winId].isEmpty()) displayedText.push(service.windows[winId].getText());
        service.endPts = pts;
        service.text = displayedText.join("\n\n");
        this.pushCaption(service);
        service.startPts = pts;
    };
    /**
   * Push a caption to output if the caption contains text.
   *
   * @param  {Service} service  The service object to be affected
   */ Cea708Stream.prototype.pushCaption = function(service) {
        if (service.text !== "") {
            this.trigger("data", {
                startPts: service.startPts,
                endPts: service.endPts,
                text: service.text,
                stream: "cc708_" + service.serviceNum
            });
            service.text = "";
            service.startPts = service.endPts;
        }
    };
    /**
   * Parse and execute the DSW command.
   *
   * Set visible property of windows based on the parsed bitmask.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */ Cea708Stream.prototype.displayWindows = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[++i];
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        for(var winId = 0; winId < 8; winId++)if (b & 0x01 << winId) service.windows[winId].visible = 1;
        return i;
    };
    /**
   * Parse and execute the HDW command.
   *
   * Set visible property of windows based on the parsed bitmask.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */ Cea708Stream.prototype.hideWindows = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[++i];
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        for(var winId = 0; winId < 8; winId++)if (b & 0x01 << winId) service.windows[winId].visible = 0;
        return i;
    };
    /**
   * Parse and execute the TGW command.
   *
   * Set visible property of windows based on the parsed bitmask.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */ Cea708Stream.prototype.toggleWindows = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[++i];
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        for(var winId = 0; winId < 8; winId++)if (b & 0x01 << winId) service.windows[winId].visible ^= 1;
        return i;
    };
    /**
   * Parse and execute the CLW command.
   *
   * Clear text of windows based on the parsed bitmask.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */ Cea708Stream.prototype.clearWindows = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[++i];
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        for(var winId = 0; winId < 8; winId++)if (b & 0x01 << winId) service.windows[winId].clearText();
        return i;
    };
    /**
   * Parse and execute the DLW command.
   *
   * Re-initialize windows based on the parsed bitmask.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */ Cea708Stream.prototype.deleteWindows = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[++i];
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        for(var winId = 0; winId < 8; winId++)if (b & 0x01 << winId) service.windows[winId].reset();
        return i;
    };
    /**
   * Parse and execute the SPA command.
   *
   * Set pen attributes of the current window.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */ Cea708Stream.prototype.setPenAttributes = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[i];
        var penAttr = service.currentWindow.penAttr;
        b = packetData[++i];
        penAttr.textTag = (b & 0xf0) >> 4; // tt
        penAttr.offset = (b & 0x0c) >> 2; // o
        penAttr.penSize = b & 0x03; // s
        b = packetData[++i];
        penAttr.italics = (b & 0x80) >> 7; // i
        penAttr.underline = (b & 0x40) >> 6; // u
        penAttr.edgeType = (b & 0x38) >> 3; // et
        penAttr.fontStyle = b & 0x07; // fs
        return i;
    };
    /**
   * Parse and execute the SPC command.
   *
   * Set pen color of the current window.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */ Cea708Stream.prototype.setPenColor = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[i];
        var penColor = service.currentWindow.penColor;
        b = packetData[++i];
        penColor.fgOpacity = (b & 0xc0) >> 6; // fo
        penColor.fgRed = (b & 0x30) >> 4; // fr
        penColor.fgGreen = (b & 0x0c) >> 2; // fg
        penColor.fgBlue = b & 0x03; // fb
        b = packetData[++i];
        penColor.bgOpacity = (b & 0xc0) >> 6; // bo
        penColor.bgRed = (b & 0x30) >> 4; // br
        penColor.bgGreen = (b & 0x0c) >> 2; // bg
        penColor.bgBlue = b & 0x03; // bb
        b = packetData[++i];
        penColor.edgeRed = (b & 0x30) >> 4; // er
        penColor.edgeGreen = (b & 0x0c) >> 2; // eg
        penColor.edgeBlue = b & 0x03; // eb
        return i;
    };
    /**
   * Parse and execute the SPL command.
   *
   * Set pen location of the current window.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */ Cea708Stream.prototype.setPenLocation = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[i];
        var penLoc = service.currentWindow.penLoc; // Positioning isn't really supported at the moment, so this essentially just inserts a linebreak
        service.currentWindow.pendingNewLine = true;
        b = packetData[++i];
        penLoc.row = b & 0x0f; // r
        b = packetData[++i];
        penLoc.column = b & 0x3f; // c
        return i;
    };
    /**
   * Execute the RST command.
   *
   * Reset service to a clean slate. Re-initialize.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Service}          Re-initialized service
   */ Cea708Stream.prototype.reset = function(i, service) {
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        return this.initService(service.serviceNum, i);
    }; // This hash maps non-ASCII, special, and extended character codes to their
    // proper Unicode equivalent. The first keys that are only a single byte
    // are the non-standard ASCII characters, which simply map the CEA608 byte
    // to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608
    // character codes, but have their MSB bitmasked with 0x03 so that a lookup
    // can be performed regardless of the field and data channel on which the
    // character code was received.
    var CHARACTER_TRANSLATION = {
        0x2a: 0xe1,
        // á
        0x5c: 0xe9,
        // é
        0x5e: 0xed,
        // í
        0x5f: 0xf3,
        // ó
        0x60: 0xfa,
        // ú
        0x7b: 0xe7,
        // ç
        0x7c: 0xf7,
        // ÷
        0x7d: 0xd1,
        // Ñ
        0x7e: 0xf1,
        // ñ
        0x7f: 0x2588,
        // █
        0x0130: 0xae,
        // ®
        0x0131: 0xb0,
        // °
        0x0132: 0xbd,
        // ½
        0x0133: 0xbf,
        // ¿
        0x0134: 0x2122,
        // ™
        0x0135: 0xa2,
        // ¢
        0x0136: 0xa3,
        // £
        0x0137: 0x266a,
        // ♪
        0x0138: 0xe0,
        // à
        0x0139: 0xa0,
        //
        0x013a: 0xe8,
        // è
        0x013b: 0xe2,
        // â
        0x013c: 0xea,
        // ê
        0x013d: 0xee,
        // î
        0x013e: 0xf4,
        // ô
        0x013f: 0xfb,
        // û
        0x0220: 0xc1,
        // Á
        0x0221: 0xc9,
        // É
        0x0222: 0xd3,
        // Ó
        0x0223: 0xda,
        // Ú
        0x0224: 0xdc,
        // Ü
        0x0225: 0xfc,
        // ü
        0x0226: 0x2018,
        // ‘
        0x0227: 0xa1,
        // ¡
        0x0228: 0x2a,
        // *
        0x0229: 0x27,
        // '
        0x022a: 0x2014,
        // —
        0x022b: 0xa9,
        // ©
        0x022c: 0x2120,
        // ℠
        0x022d: 0x2022,
        // •
        0x022e: 0x201c,
        // “
        0x022f: 0x201d,
        // ”
        0x0230: 0xc0,
        // À
        0x0231: 0xc2,
        // Â
        0x0232: 0xc7,
        // Ç
        0x0233: 0xc8,
        // È
        0x0234: 0xca,
        // Ê
        0x0235: 0xcb,
        // Ë
        0x0236: 0xeb,
        // ë
        0x0237: 0xce,
        // Î
        0x0238: 0xcf,
        // Ï
        0x0239: 0xef,
        // ï
        0x023a: 0xd4,
        // Ô
        0x023b: 0xd9,
        // Ù
        0x023c: 0xf9,
        // ù
        0x023d: 0xdb,
        // Û
        0x023e: 0xab,
        // «
        0x023f: 0xbb,
        // »
        0x0320: 0xc3,
        // Ã
        0x0321: 0xe3,
        // ã
        0x0322: 0xcd,
        // Í
        0x0323: 0xcc,
        // Ì
        0x0324: 0xec,
        // ì
        0x0325: 0xd2,
        // Ò
        0x0326: 0xf2,
        // ò
        0x0327: 0xd5,
        // Õ
        0x0328: 0xf5,
        // õ
        0x0329: 0x7b,
        // {
        0x032a: 0x7d,
        // }
        0x032b: 0x5c,
        // \
        0x032c: 0x5e,
        // ^
        0x032d: 0x5f,
        // _
        0x032e: 0x7c,
        // |
        0x032f: 0x7e,
        // ~
        0x0330: 0xc4,
        // Ä
        0x0331: 0xe4,
        // ä
        0x0332: 0xd6,
        // Ö
        0x0333: 0xf6,
        // ö
        0x0334: 0xdf,
        // ß
        0x0335: 0xa5,
        // ¥
        0x0336: 0xa4,
        // ¤
        0x0337: 0x2502,
        // │
        0x0338: 0xc5,
        // Å
        0x0339: 0xe5,
        // å
        0x033a: 0xd8,
        // Ø
        0x033b: 0xf8,
        // ø
        0x033c: 0x250c,
        // ┌
        0x033d: 0x2510,
        // ┐
        0x033e: 0x2514,
        // └
        0x033f: 0x2518 // ┘
    };
    var getCharFromCode = function(code) {
        if (code === null) return "";
        code = CHARACTER_TRANSLATION[code] || code;
        return String.fromCharCode(code);
    }; // the index of the last row in a CEA-608 display buffer
    var BOTTOM_ROW = 14; // This array is used for mapping PACs -> row #, since there's no way of
    // getting it through bit logic.
    var ROWS = [
        0x1100,
        0x1120,
        0x1200,
        0x1220,
        0x1500,
        0x1520,
        0x1600,
        0x1620,
        0x1700,
        0x1720,
        0x1000,
        0x1300,
        0x1320,
        0x1400,
        0x1420
    ]; // CEA-608 captions are rendered onto a 34x15 matrix of character
    // cells. The "bottom" row is the last element in the outer array.
    // We keep track of positioning information as we go by storing the
    // number of indentations and the tab offset in this buffer.
    var createDisplayBuffer = function() {
        var result = [], i = BOTTOM_ROW + 1;
        while(i--)result.push({
            text: "",
            indent: 0,
            offset: 0
        });
        return result;
    };
    var Cea608Stream = function(field, dataChannel) {
        Cea608Stream.prototype.init.call(this);
        this.field_ = field || 0;
        this.dataChannel_ = dataChannel || 0;
        this.name_ = "CC" + ((this.field_ << 1 | this.dataChannel_) + 1);
        this.setConstants();
        this.reset();
        this.push = function(packet) {
            var data, swap, char0, char1, text; // remove the parity bits
            data = packet.ccData & 0x7f7f; // ignore duplicate control codes; the spec demands they're sent twice
            if (data === this.lastControlCode_) {
                this.lastControlCode_ = null;
                return;
            } // Store control codes
            if ((data & 0xf000) === 0x1000) this.lastControlCode_ = data;
            else if (data !== this.PADDING_) this.lastControlCode_ = null;
            char0 = data >>> 8;
            char1 = data & 0xff;
            if (data === this.PADDING_) return;
            else if (data === this.RESUME_CAPTION_LOADING_) this.mode_ = "popOn";
            else if (data === this.END_OF_CAPTION_) {
                // If an EOC is received while in paint-on mode, the displayed caption
                // text should be swapped to non-displayed memory as if it was a pop-on
                // caption. Because of that, we should explicitly switch back to pop-on
                // mode
                this.mode_ = "popOn";
                this.clearFormatting(packet.pts); // if a caption was being displayed, it's gone now
                this.flushDisplayed(packet.pts); // flip memory
                swap = this.displayed_;
                this.displayed_ = this.nonDisplayed_;
                this.nonDisplayed_ = swap; // start measuring the time to display the caption
                this.startPts_ = packet.pts;
            } else if (data === this.ROLL_UP_2_ROWS_) {
                this.rollUpRows_ = 2;
                this.setRollUp(packet.pts);
            } else if (data === this.ROLL_UP_3_ROWS_) {
                this.rollUpRows_ = 3;
                this.setRollUp(packet.pts);
            } else if (data === this.ROLL_UP_4_ROWS_) {
                this.rollUpRows_ = 4;
                this.setRollUp(packet.pts);
            } else if (data === this.CARRIAGE_RETURN_) {
                this.clearFormatting(packet.pts);
                this.flushDisplayed(packet.pts);
                this.shiftRowsUp_();
                this.startPts_ = packet.pts;
            } else if (data === this.BACKSPACE_) {
                if (this.mode_ === "popOn") this.nonDisplayed_[this.row_].text = this.nonDisplayed_[this.row_].text.slice(0, -1);
                else this.displayed_[this.row_].text = this.displayed_[this.row_].text.slice(0, -1);
            } else if (data === this.ERASE_DISPLAYED_MEMORY_) {
                this.flushDisplayed(packet.pts);
                this.displayed_ = createDisplayBuffer();
            } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) this.nonDisplayed_ = createDisplayBuffer();
            else if (data === this.RESUME_DIRECT_CAPTIONING_) {
                if (this.mode_ !== "paintOn") {
                    // NOTE: This should be removed when proper caption positioning is
                    // implemented
                    this.flushDisplayed(packet.pts);
                    this.displayed_ = createDisplayBuffer();
                }
                this.mode_ = "paintOn";
                this.startPts_ = packet.pts; // Append special characters to caption text
            } else if (this.isSpecialCharacter(char0, char1)) {
                // Bitmask char0 so that we can apply character transformations
                // regardless of field and data channel.
                // Then byte-shift to the left and OR with char1 so we can pass the
                // entire character code to `getCharFromCode`.
                char0 = (char0 & 0x03) << 8;
                text = getCharFromCode(char0 | char1);
                this[this.mode_](packet.pts, text);
                this.column_++; // Append extended characters to caption text
            } else if (this.isExtCharacter(char0, char1)) {
                // Extended characters always follow their "non-extended" equivalents.
                // IE if a "è" is desired, you'll always receive "eè"; non-compliant
                // decoders are supposed to drop the "è", while compliant decoders
                // backspace the "e" and insert "è".
                // Delete the previous character
                if (this.mode_ === "popOn") this.nonDisplayed_[this.row_].text = this.nonDisplayed_[this.row_].text.slice(0, -1);
                else this.displayed_[this.row_].text = this.displayed_[this.row_].text.slice(0, -1);
                 // Bitmask char0 so that we can apply character transformations
                // regardless of field and data channel.
                // Then byte-shift to the left and OR with char1 so we can pass the
                // entire character code to `getCharFromCode`.
                char0 = (char0 & 0x03) << 8;
                text = getCharFromCode(char0 | char1);
                this[this.mode_](packet.pts, text);
                this.column_++; // Process mid-row codes
            } else if (this.isMidRowCode(char0, char1)) {
                // Attributes are not additive, so clear all formatting
                this.clearFormatting(packet.pts); // According to the standard, mid-row codes
                // should be replaced with spaces, so add one now
                this[this.mode_](packet.pts, " ");
                this.column_++;
                if ((char1 & 0xe) === 0xe) this.addFormatting(packet.pts, [
                    "i"
                ]);
                if ((char1 & 0x1) === 0x1) this.addFormatting(packet.pts, [
                    "u"
                ]);
                 // Detect offset control codes and adjust cursor
            } else if (this.isOffsetControlCode(char0, char1)) {
                // Cursor position is set by indent PAC (see below) in 4-column
                // increments, with an additional offset code of 1-3 to reach any
                // of the 32 columns specified by CEA-608. So all we need to do
                // here is increment the column cursor by the given offset.
                const offset = char1 & 0x03; // For an offest value 1-3, set the offset for that caption
                // in the non-displayed array.
                this.nonDisplayed_[this.row_].offset = offset;
                this.column_ += offset; // Detect PACs (Preamble Address Codes)
            } else if (this.isPAC(char0, char1)) {
                // There's no logic for PAC -> row mapping, so we have to just
                // find the row code in an array and use its index :(
                var row = ROWS.indexOf(data & 0x1f20); // Configure the caption window if we're in roll-up mode
                if (this.mode_ === "rollUp") {
                    // This implies that the base row is incorrectly set.
                    // As per the recommendation in CEA-608(Base Row Implementation), defer to the number
                    // of roll-up rows set.
                    if (row - this.rollUpRows_ + 1 < 0) row = this.rollUpRows_ - 1;
                    this.setRollUp(packet.pts, row);
                }
                if (row !== this.row_) {
                    // formatting is only persistent for current row
                    this.clearFormatting(packet.pts);
                    this.row_ = row;
                } // All PACs can apply underline, so detect and apply
                // (All odd-numbered second bytes set underline)
                if (char1 & 0x1 && this.formatting_.indexOf("u") === -1) this.addFormatting(packet.pts, [
                    "u"
                ]);
                if ((data & 0x10) === 0x10) {
                    // We've got an indent level code. Each successive even number
                    // increments the column cursor by 4, so we can get the desired
                    // column position by bit-shifting to the right (to get n/2)
                    // and multiplying by 4.
                    const indentations = (data & 0xe) >> 1;
                    this.column_ = indentations * 4; // add to the number of indentations for positioning
                    this.nonDisplayed_[this.row_].indent += indentations;
                }
                if (this.isColorPAC(char1)) // it's a color code, though we only support white, which
                // can be either normal or italicized. white italics can be
                // either 0x4e or 0x6e depending on the row, so we just
                // bitwise-and with 0xe to see if italics should be turned on
                {
                    if ((char1 & 0xe) === 0xe) this.addFormatting(packet.pts, [
                        "i"
                    ]);
                } // We have a normal character in char0, and possibly one in char1
            } else if (this.isNormalChar(char0)) {
                if (char1 === 0x00) char1 = null;
                text = getCharFromCode(char0);
                text += getCharFromCode(char1);
                this[this.mode_](packet.pts, text);
                this.column_ += text.length;
            } // finish data processing
        };
    };
    Cea608Stream.prototype = new Stream$7(); // Trigger a cue point that captures the current state of the
    // display buffer
    Cea608Stream.prototype.flushDisplayed = function(pts) {
        const logWarning = (index)=>{
            this.trigger("log", {
                level: "warn",
                message: "Skipping a malformed 608 caption at index " + index + "."
            });
        };
        const content = [];
        this.displayed_.forEach((row, i)=>{
            if (row && row.text && row.text.length) {
                try {
                    // remove spaces from the start and end of the string
                    row.text = row.text.trim();
                } catch (e) {
                    // Ordinarily, this shouldn't happen. However, caption
                    // parsing errors should not throw exceptions and
                    // break playback.
                    logWarning(i);
                } // See the below link for more details on the following fields:
                // https://dvcs.w3.org/hg/text-tracks/raw-file/default/608toVTT/608toVTT.html#positioning-in-cea-608
                if (row.text.length) content.push({
                    // The text to be displayed in the caption from this specific row, with whitespace removed.
                    text: row.text,
                    // Value between 1 and 15 representing the PAC row used to calculate line height.
                    line: i + 1,
                    // A number representing the indent position by percentage (CEA-608 PAC indent code).
                    // The value will be a number between 10 and 80. Offset is used to add an aditional
                    // value to the position if necessary.
                    position: 10 + Math.min(70, row.indent * 10) + row.offset * 2.5
                });
            } else if (row === undefined || row === null) logWarning(i);
        });
        if (content.length) this.trigger("data", {
            startPts: this.startPts_,
            endPts: pts,
            content: content,
            stream: this.name_
        });
    };
    /**
   * Zero out the data, used for startup and on seek
   */ Cea608Stream.prototype.reset = function() {
        this.mode_ = "popOn"; // When in roll-up mode, the index of the last row that will
        // actually display captions. If a caption is shifted to a row
        // with a lower index than this, it is cleared from the display
        // buffer
        this.topRow_ = 0;
        this.startPts_ = 0;
        this.displayed_ = createDisplayBuffer();
        this.nonDisplayed_ = createDisplayBuffer();
        this.lastControlCode_ = null; // Track row and column for proper line-breaking and spacing
        this.column_ = 0;
        this.row_ = BOTTOM_ROW;
        this.rollUpRows_ = 2; // This variable holds currently-applied formatting
        this.formatting_ = [];
    };
    /**
   * Sets up control code and related constants for this instance
   */ Cea608Stream.prototype.setConstants = function() {
        // The following attributes have these uses:
        // ext_ :    char0 for mid-row codes, and the base for extended
        //           chars (ext_+0, ext_+1, and ext_+2 are char0s for
        //           extended codes)
        // control_: char0 for control codes, except byte-shifted to the
        //           left so that we can do this.control_ | CONTROL_CODE
        // offset_:  char0 for tab offset codes
        //
        // It's also worth noting that control codes, and _only_ control codes,
        // differ between field 1 and field2. Field 2 control codes are always
        // their field 1 value plus 1. That's why there's the "| field" on the
        // control value.
        if (this.dataChannel_ === 0) {
            this.BASE_ = 0x10;
            this.EXT_ = 0x11;
            this.CONTROL_ = (0x14 | this.field_) << 8;
            this.OFFSET_ = 0x17;
        } else if (this.dataChannel_ === 1) {
            this.BASE_ = 0x18;
            this.EXT_ = 0x19;
            this.CONTROL_ = (0x1c | this.field_) << 8;
            this.OFFSET_ = 0x1f;
        } // Constants for the LSByte command codes recognized by Cea608Stream. This
        // list is not exhaustive. For a more comprehensive listing and semantics see
        // http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf
        // Padding
        this.PADDING_ = 0x0000; // Pop-on Mode
        this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;
        this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f; // Roll-up Mode
        this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;
        this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;
        this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;
        this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d; // paint-on mode
        this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29; // Erasure
        this.BACKSPACE_ = this.CONTROL_ | 0x21;
        this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;
        this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;
    };
    /**
   * Detects if the 2-byte packet data is a special character
   *
   * Special characters have a second byte in the range 0x30 to 0x3f,
   * with the first byte being 0x11 (for data channel 1) or 0x19 (for
   * data channel 2).
   *
   * @param  {Integer} char0 The first byte
   * @param  {Integer} char1 The second byte
   * @return {Boolean}       Whether the 2 bytes are an special character
   */ Cea608Stream.prototype.isSpecialCharacter = function(char0, char1) {
        return char0 === this.EXT_ && char1 >= 0x30 && char1 <= 0x3f;
    };
    /**
   * Detects if the 2-byte packet data is an extended character
   *
   * Extended characters have a second byte in the range 0x20 to 0x3f,
   * with the first byte being 0x12 or 0x13 (for data channel 1) or
   * 0x1a or 0x1b (for data channel 2).
   *
   * @param  {Integer} char0 The first byte
   * @param  {Integer} char1 The second byte
   * @return {Boolean}       Whether the 2 bytes are an extended character
   */ Cea608Stream.prototype.isExtCharacter = function(char0, char1) {
        return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 0x20 && char1 <= 0x3f;
    };
    /**
   * Detects if the 2-byte packet is a mid-row code
   *
   * Mid-row codes have a second byte in the range 0x20 to 0x2f, with
   * the first byte being 0x11 (for data channel 1) or 0x19 (for data
   * channel 2).
   *
   * @param  {Integer} char0 The first byte
   * @param  {Integer} char1 The second byte
   * @return {Boolean}       Whether the 2 bytes are a mid-row code
   */ Cea608Stream.prototype.isMidRowCode = function(char0, char1) {
        return char0 === this.EXT_ && char1 >= 0x20 && char1 <= 0x2f;
    };
    /**
   * Detects if the 2-byte packet is an offset control code
   *
   * Offset control codes have a second byte in the range 0x21 to 0x23,
   * with the first byte being 0x17 (for data channel 1) or 0x1f (for
   * data channel 2).
   *
   * @param  {Integer} char0 The first byte
   * @param  {Integer} char1 The second byte
   * @return {Boolean}       Whether the 2 bytes are an offset control code
   */ Cea608Stream.prototype.isOffsetControlCode = function(char0, char1) {
        return char0 === this.OFFSET_ && char1 >= 0x21 && char1 <= 0x23;
    };
    /**
   * Detects if the 2-byte packet is a Preamble Address Code
   *
   * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)
   * or 0x18 to 0x1f (for data channel 2), with the second byte in the
   * range 0x40 to 0x7f.
   *
   * @param  {Integer} char0 The first byte
   * @param  {Integer} char1 The second byte
   * @return {Boolean}       Whether the 2 bytes are a PAC
   */ Cea608Stream.prototype.isPAC = function(char0, char1) {
        return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 0x40 && char1 <= 0x7f;
    };
    /**
   * Detects if a packet's second byte is in the range of a PAC color code
   *
   * PAC color codes have the second byte be in the range 0x40 to 0x4f, or
   * 0x60 to 0x6f.
   *
   * @param  {Integer} char1 The second byte
   * @return {Boolean}       Whether the byte is a color PAC
   */ Cea608Stream.prototype.isColorPAC = function(char1) {
        return char1 >= 0x40 && char1 <= 0x4f || char1 >= 0x60 && char1 <= 0x7f;
    };
    /**
   * Detects if a single byte is in the range of a normal character
   *
   * Normal text bytes are in the range 0x20 to 0x7f.
   *
   * @param  {Integer} char  The byte
   * @return {Boolean}       Whether the byte is a normal character
   */ Cea608Stream.prototype.isNormalChar = function(char) {
        return char >= 0x20 && char <= 0x7f;
    };
    /**
   * Configures roll-up
   *
   * @param  {Integer} pts         Current PTS
   * @param  {Integer} newBaseRow  Used by PACs to slide the current window to
   *                               a new position
   */ Cea608Stream.prototype.setRollUp = function(pts, newBaseRow) {
        // Reset the base row to the bottom row when switching modes
        if (this.mode_ !== "rollUp") {
            this.row_ = BOTTOM_ROW;
            this.mode_ = "rollUp"; // Spec says to wipe memories when switching to roll-up
            this.flushDisplayed(pts);
            this.nonDisplayed_ = createDisplayBuffer();
            this.displayed_ = createDisplayBuffer();
        }
        if (newBaseRow !== undefined && newBaseRow !== this.row_) // move currently displayed captions (up or down) to the new base row
        for(var i = 0; i < this.rollUpRows_; i++){
            this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];
            this.displayed_[this.row_ - i] = {
                text: "",
                indent: 0,
                offset: 0
            };
        }
        if (newBaseRow === undefined) newBaseRow = this.row_;
        this.topRow_ = newBaseRow - this.rollUpRows_ + 1;
    }; // Adds the opening HTML tag for the passed character to the caption text,
    // and keeps track of it for later closing
    Cea608Stream.prototype.addFormatting = function(pts, format) {
        this.formatting_ = this.formatting_.concat(format);
        var text = format.reduce(function(text, format) {
            return text + "<" + format + ">";
        }, "");
        this[this.mode_](pts, text);
    }; // Adds HTML closing tags for current formatting to caption text and
    // clears remembered formatting
    Cea608Stream.prototype.clearFormatting = function(pts) {
        if (!this.formatting_.length) return;
        var text = this.formatting_.reverse().reduce(function(text, format) {
            return text + "</" + format + ">";
        }, "");
        this.formatting_ = [];
        this[this.mode_](pts, text);
    }; // Mode Implementations
    Cea608Stream.prototype.popOn = function(pts, text) {
        var baseRow = this.nonDisplayed_[this.row_].text; // buffer characters
        baseRow += text;
        this.nonDisplayed_[this.row_].text = baseRow;
    };
    Cea608Stream.prototype.rollUp = function(pts, text) {
        var baseRow = this.displayed_[this.row_].text;
        baseRow += text;
        this.displayed_[this.row_].text = baseRow;
    };
    Cea608Stream.prototype.shiftRowsUp_ = function() {
        var i; // clear out inactive rows
        for(i = 0; i < this.topRow_; i++)this.displayed_[i] = {
            text: "",
            indent: 0,
            offset: 0
        };
        for(i = this.row_ + 1; i < BOTTOM_ROW + 1; i++)this.displayed_[i] = {
            text: "",
            indent: 0,
            offset: 0
        };
         // shift displayed rows up
        for(i = this.topRow_; i < this.row_; i++)this.displayed_[i] = this.displayed_[i + 1];
         // clear out the bottom row
        this.displayed_[this.row_] = {
            text: "",
            indent: 0,
            offset: 0
        };
    };
    Cea608Stream.prototype.paintOn = function(pts, text) {
        var baseRow = this.displayed_[this.row_].text;
        baseRow += text;
        this.displayed_[this.row_].text = baseRow;
    }; // exports
    var captionStream = {
        CaptionStream: CaptionStream$2,
        Cea608Stream: Cea608Stream,
        Cea708Stream: Cea708Stream
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   */ var streamTypes = {
        H264_STREAM_TYPE: 0x1B,
        ADTS_STREAM_TYPE: 0x0F,
        METADATA_STREAM_TYPE: 0x15
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * Accepts program elementary stream (PES) data events and corrects
   * decode and presentation time stamps to account for a rollover
   * of the 33 bit value.
   */ var Stream$6 = stream;
    var MAX_TS = 8589934592;
    var RO_THRESH = 4294967296;
    var TYPE_SHARED = "shared";
    var handleRollover$1 = function(value, reference) {
        var direction = 1;
        if (value > reference) // If the current timestamp value is greater than our reference timestamp and we detect a
        // timestamp rollover, this means the roll over is happening in the opposite direction.
        // Example scenario: Enter a long stream/video just after a rollover occurred. The reference
        // point will be set to a small number, e.g. 1. The user then seeks backwards over the
        // rollover point. In loading this segment, the timestamp values will be very large,
        // e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust
        // the time stamp to be `value - 2^33`.
        direction = -1;
         // Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will
        // cause an incorrect adjustment.
        while(Math.abs(reference - value) > RO_THRESH)value += direction * MAX_TS;
        return value;
    };
    var TimestampRolloverStream$1 = function(type) {
        var lastDTS, referenceDTS;
        TimestampRolloverStream$1.prototype.init.call(this); // The "shared" type is used in cases where a stream will contain muxed
        // video and audio. We could use `undefined` here, but having a string
        // makes debugging a little clearer.
        this.type_ = type || TYPE_SHARED;
        this.push = function(data) {
            /**
       * Rollover stream expects data from elementary stream.
       * Elementary stream can push forward 2 types of data
       * - Parsed Video/Audio/Timed-metadata PES (packetized elementary stream) packets
       * - Tracks metadata from PMT (Program Map Table)
       * Rollover stream expects pts/dts info to be available, since it stores lastDTS
       * We should ignore non-PES packets since they may override lastDTS to undefined.
       * lastDTS is important to signal the next segments
       * about rollover from the previous segments.
       */ if (data.type === "metadata") {
                this.trigger("data", data);
                return;
            } // Any "shared" rollover streams will accept _all_ data. Otherwise,
            // streams will only accept data that matches their type.
            if (this.type_ !== TYPE_SHARED && data.type !== this.type_) return;
            if (referenceDTS === undefined) referenceDTS = data.dts;
            data.dts = handleRollover$1(data.dts, referenceDTS);
            data.pts = handleRollover$1(data.pts, referenceDTS);
            lastDTS = data.dts;
            this.trigger("data", data);
        };
        this.flush = function() {
            referenceDTS = lastDTS;
            this.trigger("done");
        };
        this.endTimeline = function() {
            this.flush();
            this.trigger("endedtimeline");
        };
        this.discontinuity = function() {
            referenceDTS = void 0;
            lastDTS = void 0;
        };
        this.reset = function() {
            this.discontinuity();
            this.trigger("reset");
        };
    };
    TimestampRolloverStream$1.prototype = new Stream$6();
    var timestampRolloverStream = {
        TimestampRolloverStream: TimestampRolloverStream$1,
        handleRollover: handleRollover$1
    }; // Once IE11 support is dropped, this function should be removed.
    var typedArrayIndexOf$1 = (typedArray, element, fromIndex)=>{
        if (!typedArray) return -1;
        var currentIndex = fromIndex;
        for(; currentIndex < typedArray.length; currentIndex++){
            if (typedArray[currentIndex] === element) return currentIndex;
        }
        return -1;
    };
    var typedArray = {
        typedArrayIndexOf: typedArrayIndexOf$1
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * Tools for parsing ID3 frame data
   * @see http://id3.org/id3v2.3.0
   */ var typedArrayIndexOf = typedArray.typedArrayIndexOf, // Frames that allow different types of text encoding contain a text
    // encoding description byte [ID3v2.4.0 section 4.]
    textEncodingDescriptionByte = {
        Iso88591: 0x00,
        // ISO-8859-1, terminated with \0.
        Utf16: 0x01,
        // UTF-16 encoded Unicode BOM, terminated with \0\0
        Utf16be: 0x02,
        // UTF-16BE encoded Unicode, without BOM, terminated with \0\0
        Utf8: 0x03 // UTF-8 encoded Unicode, terminated with \0
    }, // return a percent-encoded representation of the specified byte range
    // @see http://en.wikipedia.org/wiki/Percent-encoding 
    percentEncode$1 = function(bytes, start, end) {
        var i, result = "";
        for(i = start; i < end; i++)result += "%" + ("00" + bytes[i].toString(16)).slice(-2);
        return result;
    }, // return the string representation of the specified byte range,
    // interpreted as UTf-8.
    parseUtf8 = function(bytes, start, end) {
        return decodeURIComponent(percentEncode$1(bytes, start, end));
    }, // return the string representation of the specified byte range,
    // interpreted as ISO-8859-1.
    parseIso88591$1 = function(bytes, start, end) {
        return unescape(percentEncode$1(bytes, start, end)); // jshint ignore:line
    }, parseSyncSafeInteger$1 = function(data) {
        return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];
    }, frameParsers = {
        "APIC": function(frame) {
            var i = 1, mimeTypeEndIndex, descriptionEndIndex, LINK_MIME_TYPE = "-->";
            if (frame.data[0] !== textEncodingDescriptionByte.Utf8) // ignore frames with unrecognized character encodings
            return;
             // parsing fields [ID3v2.4.0 section 4.14.]
            mimeTypeEndIndex = typedArrayIndexOf(frame.data, 0, i);
            if (mimeTypeEndIndex < 0) // malformed frame
            return;
             // parsing Mime type field (terminated with \0)
            frame.mimeType = parseIso88591$1(frame.data, i, mimeTypeEndIndex);
            i = mimeTypeEndIndex + 1; // parsing 1-byte Picture Type field
            frame.pictureType = frame.data[i];
            i++;
            descriptionEndIndex = typedArrayIndexOf(frame.data, 0, i);
            if (descriptionEndIndex < 0) // malformed frame
            return;
             // parsing Description field (terminated with \0)
            frame.description = parseUtf8(frame.data, i, descriptionEndIndex);
            i = descriptionEndIndex + 1;
            if (frame.mimeType === LINK_MIME_TYPE) // parsing Picture Data field as URL (always represented as ISO-8859-1 [ID3v2.4.0 section 4.])
            frame.url = parseIso88591$1(frame.data, i, frame.data.length);
            else // parsing Picture Data field as binary data
            frame.pictureData = frame.data.subarray(i, frame.data.length);
        },
        "T*": function(frame) {
            if (frame.data[0] !== textEncodingDescriptionByte.Utf8) // ignore frames with unrecognized character encodings
            return;
             // parse text field, do not include null terminator in the frame value
            // frames that allow different types of encoding contain terminated text [ID3v2.4.0 section 4.]
            frame.value = parseUtf8(frame.data, 1, frame.data.length).replace(/\0*$/, ""); // text information frames supports multiple strings, stored as a terminator separated list [ID3v2.4.0 section 4.2.]
            frame.values = frame.value.split("\x00");
        },
        "TXXX": function(frame) {
            var descriptionEndIndex;
            if (frame.data[0] !== textEncodingDescriptionByte.Utf8) // ignore frames with unrecognized character encodings
            return;
            descriptionEndIndex = typedArrayIndexOf(frame.data, 0, 1);
            if (descriptionEndIndex === -1) return;
             // parse the text fields
            frame.description = parseUtf8(frame.data, 1, descriptionEndIndex); // do not include the null terminator in the tag value
            // frames that allow different types of encoding contain terminated text
            // [ID3v2.4.0 section 4.]
            frame.value = parseUtf8(frame.data, descriptionEndIndex + 1, frame.data.length).replace(/\0*$/, "");
            frame.data = frame.value;
        },
        "W*": function(frame) {
            // parse URL field; URL fields are always represented as ISO-8859-1 [ID3v2.4.0 section 4.]
            // if the value is followed by a string termination all the following information should be ignored [ID3v2.4.0 section 4.3]
            frame.url = parseIso88591$1(frame.data, 0, frame.data.length).replace(/\0.*$/, "");
        },
        "WXXX": function(frame) {
            var descriptionEndIndex;
            if (frame.data[0] !== textEncodingDescriptionByte.Utf8) // ignore frames with unrecognized character encodings
            return;
            descriptionEndIndex = typedArrayIndexOf(frame.data, 0, 1);
            if (descriptionEndIndex === -1) return;
             // parse the description and URL fields
            frame.description = parseUtf8(frame.data, 1, descriptionEndIndex); // URL fields are always represented as ISO-8859-1 [ID3v2.4.0 section 4.]
            // if the value is followed by a string termination all the following information
            // should be ignored [ID3v2.4.0 section 4.3]
            frame.url = parseIso88591$1(frame.data, descriptionEndIndex + 1, frame.data.length).replace(/\0.*$/, "");
        },
        "PRIV": function(frame) {
            var i;
            for(i = 0; i < frame.data.length; i++)if (frame.data[i] === 0) {
                // parse the description and URL fields
                frame.owner = parseIso88591$1(frame.data, 0, i);
                break;
            }
            frame.privateData = frame.data.subarray(i + 1);
            frame.data = frame.privateData;
        }
    };
    var parseId3Frames$1 = function(data) {
        var frameSize, frameHeader, frameStart = 10, tagSize = 0, frames = []; // If we don't have enough data for a header, 10 bytes, 
        // or 'ID3' in the first 3 bytes this is not a valid ID3 tag.
        if (data.length < 10 || data[0] !== "I".charCodeAt(0) || data[1] !== "D".charCodeAt(0) || data[2] !== "3".charCodeAt(0)) return;
         // the frame size is transmitted as a 28-bit integer in the
        // last four bytes of the ID3 header.
        // The most significant bit of each byte is dropped and the
        // results concatenated to recover the actual value.
        tagSize = parseSyncSafeInteger$1(data.subarray(6, 10)); // ID3 reports the tag size excluding the header but it's more
        // convenient for our comparisons to include it
        tagSize += 10; // check bit 6 of byte 5 for the extended header flag.
        var hasExtendedHeader = data[5] & 0x40;
        if (hasExtendedHeader) {
            // advance the frame start past the extended header
            frameStart += 4; // header size field
            frameStart += parseSyncSafeInteger$1(data.subarray(10, 14));
            tagSize -= parseSyncSafeInteger$1(data.subarray(16, 20)); // clip any padding off the end
        } // parse one or more ID3 frames
        // http://id3.org/id3v2.3.0#ID3v2_frame_overview
        do {
            // determine the number of bytes in this frame
            frameSize = parseSyncSafeInteger$1(data.subarray(frameStart + 4, frameStart + 8));
            if (frameSize < 1) break;
            frameHeader = String.fromCharCode(data[frameStart], data[frameStart + 1], data[frameStart + 2], data[frameStart + 3]);
            var frame = {
                id: frameHeader,
                data: data.subarray(frameStart + 10, frameStart + frameSize + 10)
            };
            frame.key = frame.id; // parse frame values
            if (frameParsers[frame.id]) // use frame specific parser
            frameParsers[frame.id](frame);
            else if (frame.id[0] === "T") // use text frame generic parser
            frameParsers["T*"](frame);
            else if (frame.id[0] === "W") // use URL link frame generic parser
            frameParsers["W*"](frame);
            frames.push(frame);
            frameStart += 10; // advance past the frame header
            frameStart += frameSize; // advance past the frame body
        }while (frameStart < tagSize);
        return frames;
    };
    var parseId3 = {
        parseId3Frames: parseId3Frames$1,
        parseSyncSafeInteger: parseSyncSafeInteger$1,
        frameParsers: frameParsers
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * Accepts program elementary stream (PES) data events and parses out
   * ID3 metadata from them, if present.
   * @see http://id3.org/id3v2.3.0
   */ var Stream$5 = stream, StreamTypes$3 = streamTypes, id3 = parseId3, MetadataStream;
    MetadataStream = function(options) {
        var settings = {
            // the bytes of the program-level descriptor field in MP2T
            // see ISO/IEC 13818-1:2013 (E), section 2.6 "Program and
            // program element descriptors"
            descriptor: options && options.descriptor
        }, // the total size in bytes of the ID3 tag being parsed
        tagSize = 0, // tag data that is not complete enough to be parsed
        buffer = [], // the total number of bytes currently in the buffer
        bufferSize = 0, i;
        MetadataStream.prototype.init.call(this); // calculate the text track in-band metadata track dispatch type
        // https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track
        this.dispatchType = StreamTypes$3.METADATA_STREAM_TYPE.toString(16);
        if (settings.descriptor) for(i = 0; i < settings.descriptor.length; i++)this.dispatchType += ("00" + settings.descriptor[i].toString(16)).slice(-2);
        this.push = function(chunk) {
            var tag, frameStart, frameSize, frame, i, frameHeader;
            if (chunk.type !== "timed-metadata") return;
             // if data_alignment_indicator is set in the PES header,
            // we must have the start of a new ID3 tag. Assume anything
            // remaining in the buffer was malformed and throw it out
            if (chunk.dataAlignmentIndicator) {
                bufferSize = 0;
                buffer.length = 0;
            } // ignore events that don't look like ID3 data
            if (buffer.length === 0 && (chunk.data.length < 10 || chunk.data[0] !== "I".charCodeAt(0) || chunk.data[1] !== "D".charCodeAt(0) || chunk.data[2] !== "3".charCodeAt(0))) {
                this.trigger("log", {
                    level: "warn",
                    message: "Skipping unrecognized metadata packet"
                });
                return;
            } // add this chunk to the data we've collected so far
            buffer.push(chunk);
            bufferSize += chunk.data.byteLength; // grab the size of the entire frame from the ID3 header
            if (buffer.length === 1) {
                // the frame size is transmitted as a 28-bit integer in the
                // last four bytes of the ID3 header.
                // The most significant bit of each byte is dropped and the
                // results concatenated to recover the actual value.
                tagSize = id3.parseSyncSafeInteger(chunk.data.subarray(6, 10)); // ID3 reports the tag size excluding the header but it's more
                // convenient for our comparisons to include it
                tagSize += 10;
            } // if the entire frame has not arrived, wait for more data
            if (bufferSize < tagSize) return;
             // collect the entire frame so it can be parsed
            tag = {
                data: new Uint8Array(tagSize),
                frames: [],
                pts: buffer[0].pts,
                dts: buffer[0].dts
            };
            for(i = 0; i < tagSize;){
                tag.data.set(buffer[0].data.subarray(0, tagSize - i), i);
                i += buffer[0].data.byteLength;
                bufferSize -= buffer[0].data.byteLength;
                buffer.shift();
            } // find the start of the first frame and the end of the tag
            frameStart = 10;
            if (tag.data[5] & 0x40) {
                // advance the frame start past the extended header
                frameStart += 4; // header size field
                frameStart += id3.parseSyncSafeInteger(tag.data.subarray(10, 14)); // clip any padding off the end
                tagSize -= id3.parseSyncSafeInteger(tag.data.subarray(16, 20));
            } // parse one or more ID3 frames
            // http://id3.org/id3v2.3.0#ID3v2_frame_overview
            do {
                // determine the number of bytes in this frame
                frameSize = id3.parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));
                if (frameSize < 1) {
                    this.trigger("log", {
                        level: "warn",
                        message: "Malformed ID3 frame encountered. Skipping remaining metadata parsing."
                    }); // If the frame is malformed, don't parse any further frames but allow previous valid parsed frames
                    break;
                }
                frameHeader = String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]);
                frame = {
                    id: frameHeader,
                    data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)
                };
                frame.key = frame.id; // parse frame values
                if (id3.frameParsers[frame.id]) // use frame specific parser
                id3.frameParsers[frame.id](frame);
                else if (frame.id[0] === "T") // use text frame generic parser
                id3.frameParsers["T*"](frame);
                else if (frame.id[0] === "W") // use URL link frame generic parser
                id3.frameParsers["W*"](frame);
                 // handle the special PRIV frame used to indicate the start
                // time for raw AAC data
                if (frame.owner === "com.apple.streaming.transportStreamTimestamp") {
                    var d = frame.data, size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;
                    size *= 4;
                    size += d[7] & 0x03;
                    frame.timeStamp = size; // in raw AAC, all subsequent data will be timestamped based
                    // on the value of this frame
                    // we couldn't have known the appropriate pts and dts before
                    // parsing this ID3 tag so set those values now
                    if (tag.pts === undefined && tag.dts === undefined) {
                        tag.pts = frame.timeStamp;
                        tag.dts = frame.timeStamp;
                    }
                    this.trigger("timestamp", frame);
                }
                tag.frames.push(frame);
                frameStart += 10; // advance past the frame header
                frameStart += frameSize; // advance past the frame body
            }while (frameStart < tagSize);
            this.trigger("data", tag);
        };
    };
    MetadataStream.prototype = new Stream$5();
    var metadataStream = MetadataStream;
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * A stream-based mp2t to mp4 converter. This utility can be used to
   * deliver mp4s to a SourceBuffer on platforms that support native
   * Media Source Extensions.
   */ var Stream$4 = stream, CaptionStream$1 = captionStream, StreamTypes$2 = streamTypes, TimestampRolloverStream = timestampRolloverStream.TimestampRolloverStream; // object types
    var TransportPacketStream, TransportParseStream, ElementaryStream; // constants
    var MP2T_PACKET_LENGTH$1 = 188, // bytes
    SYNC_BYTE$1 = 0x47;
    /**
   * Splits an incoming stream of binary data into MPEG-2 Transport
   * Stream packets.
   */ TransportPacketStream = function() {
        var buffer = new Uint8Array(MP2T_PACKET_LENGTH$1), bytesInBuffer = 0;
        TransportPacketStream.prototype.init.call(this); // Deliver new bytes to the stream.
        /**
     * Split a stream of data into M2TS packets
    **/ this.push = function(bytes) {
            var startIndex = 0, endIndex = MP2T_PACKET_LENGTH$1, everything; // If there are bytes remaining from the last segment, prepend them to the
            // bytes that were pushed in
            if (bytesInBuffer) {
                everything = new Uint8Array(bytes.byteLength + bytesInBuffer);
                everything.set(buffer.subarray(0, bytesInBuffer));
                everything.set(bytes, bytesInBuffer);
                bytesInBuffer = 0;
            } else everything = bytes;
             // While we have enough data for a packet
            while(endIndex < everything.byteLength){
                // Look for a pair of start and end sync bytes in the data..
                if (everything[startIndex] === SYNC_BYTE$1 && everything[endIndex] === SYNC_BYTE$1) {
                    // We found a packet so emit it and jump one whole packet forward in
                    // the stream
                    this.trigger("data", everything.subarray(startIndex, endIndex));
                    startIndex += MP2T_PACKET_LENGTH$1;
                    endIndex += MP2T_PACKET_LENGTH$1;
                    continue;
                } // If we get here, we have somehow become de-synchronized and we need to step
                // forward one byte at a time until we find a pair of sync bytes that denote
                // a packet
                startIndex++;
                endIndex++;
            } // If there was some data left over at the end of the segment that couldn't
            // possibly be a whole packet, keep it because it might be the start of a packet
            // that continues in the next segment
            if (startIndex < everything.byteLength) {
                buffer.set(everything.subarray(startIndex), 0);
                bytesInBuffer = everything.byteLength - startIndex;
            }
        };
        /**
     * Passes identified M2TS packets to the TransportParseStream to be parsed
    **/ this.flush = function() {
            // If the buffer contains a whole packet when we are being flushed, emit it
            // and empty the buffer. Otherwise hold onto the data because it may be
            // important for decoding the next segment
            if (bytesInBuffer === MP2T_PACKET_LENGTH$1 && buffer[0] === SYNC_BYTE$1) {
                this.trigger("data", buffer);
                bytesInBuffer = 0;
            }
            this.trigger("done");
        };
        this.endTimeline = function() {
            this.flush();
            this.trigger("endedtimeline");
        };
        this.reset = function() {
            bytesInBuffer = 0;
            this.trigger("reset");
        };
    };
    TransportPacketStream.prototype = new Stream$4();
    /**
   * Accepts an MP2T TransportPacketStream and emits data events with parsed
   * forms of the individual transport stream packets.
   */ TransportParseStream = function() {
        var parsePsi, parsePat, parsePmt, self1;
        TransportParseStream.prototype.init.call(this);
        self1 = this;
        this.packetsWaitingForPmt = [];
        this.programMapTable = undefined;
        parsePsi = function(payload, psi) {
            var offset = 0; // PSI packets may be split into multiple sections and those
            // sections may be split into multiple packets. If a PSI
            // section starts in this packet, the payload_unit_start_indicator
            // will be true and the first byte of the payload will indicate
            // the offset from the current position to the start of the
            // section.
            if (psi.payloadUnitStartIndicator) offset += payload[offset] + 1;
            if (psi.type === "pat") parsePat(payload.subarray(offset), psi);
            else parsePmt(payload.subarray(offset), psi);
        };
        parsePat = function(payload, pat) {
            pat.section_number = payload[7]; // eslint-disable-line camelcase
            pat.last_section_number = payload[8]; // eslint-disable-line camelcase
            // skip the PSI header and parse the first PMT entry
            self1.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];
            pat.pmtPid = self1.pmtPid;
        };
        /**
     * Parse out the relevant fields of a Program Map Table (PMT).
     * @param payload {Uint8Array} the PMT-specific portion of an MP2T
     * packet. The first byte in this array should be the table_id
     * field.
     * @param pmt {object} the object that should be decorated with
     * fields parsed from the PMT.
     */ parsePmt = function(payload, pmt) {
            var sectionLength, tableEnd, programInfoLength, offset; // PMTs can be sent ahead of the time when they should actually
            // take effect. We don't believe this should ever be the case
            // for HLS but we'll ignore "forward" PMT declarations if we see
            // them. Future PMT declarations have the current_next_indicator
            // set to zero.
            if (!(payload[5] & 0x01)) return;
             // overwrite any existing program map table
            self1.programMapTable = {
                video: null,
                audio: null,
                "timed-metadata": {}
            }; // the mapping table ends at the end of the current section
            sectionLength = (payload[1] & 0x0f) << 8 | payload[2];
            tableEnd = 3 + sectionLength - 4; // to determine where the table is, we have to figure out how
            // long the program info descriptors are
            programInfoLength = (payload[10] & 0x0f) << 8 | payload[11]; // advance the offset to the first entry in the mapping table
            offset = 12 + programInfoLength;
            while(offset < tableEnd){
                var streamType = payload[offset];
                var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2]; // only map a single elementary_pid for audio and video stream types
                // TODO: should this be done for metadata too? for now maintain behavior of
                //       multiple metadata streams
                if (streamType === StreamTypes$2.H264_STREAM_TYPE && self1.programMapTable.video === null) self1.programMapTable.video = pid;
                else if (streamType === StreamTypes$2.ADTS_STREAM_TYPE && self1.programMapTable.audio === null) self1.programMapTable.audio = pid;
                else if (streamType === StreamTypes$2.METADATA_STREAM_TYPE) // map pid to stream type for metadata streams
                self1.programMapTable["timed-metadata"][pid] = streamType;
                 // move to the next table entry
                // skip past the elementary stream descriptors, if present
                offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;
            } // record the map on the packet as well
            pmt.programMapTable = self1.programMapTable;
        };
        /**
     * Deliver a new MP2T packet to the next stream in the pipeline.
     */ this.push = function(packet) {
            var result = {}, offset = 4;
            result.payloadUnitStartIndicator = !!(packet[1] & 0x40); // pid is a 13-bit field starting at the last bit of packet[1]
            result.pid = packet[1] & 0x1f;
            result.pid <<= 8;
            result.pid |= packet[2]; // if an adaption field is present, its length is specified by the
            // fifth byte of the TS packet header. The adaptation field is
            // used to add stuffing to PES packets that don't fill a complete
            // TS packet, and to specify some forms of timing and control data
            // that we do not currently use.
            if ((packet[3] & 0x30) >>> 4 > 0x01) offset += packet[offset] + 1;
             // parse the rest of the packet based on the type
            if (result.pid === 0) {
                result.type = "pat";
                parsePsi(packet.subarray(offset), result);
                this.trigger("data", result);
            } else if (result.pid === this.pmtPid) {
                result.type = "pmt";
                parsePsi(packet.subarray(offset), result);
                this.trigger("data", result); // if there are any packets waiting for a PMT to be found, process them now
                while(this.packetsWaitingForPmt.length)this.processPes_.apply(this, this.packetsWaitingForPmt.shift());
            } else if (this.programMapTable === undefined) // When we have not seen a PMT yet, defer further processing of
            // PES packets until one has been parsed
            this.packetsWaitingForPmt.push([
                packet,
                offset,
                result
            ]);
            else this.processPes_(packet, offset, result);
        };
        this.processPes_ = function(packet, offset, result) {
            // set the appropriate stream type
            if (result.pid === this.programMapTable.video) result.streamType = StreamTypes$2.H264_STREAM_TYPE;
            else if (result.pid === this.programMapTable.audio) result.streamType = StreamTypes$2.ADTS_STREAM_TYPE;
            else // if not video or audio, it is timed-metadata or unknown
            // if unknown, streamType will be undefined
            result.streamType = this.programMapTable["timed-metadata"][result.pid];
            result.type = "pes";
            result.data = packet.subarray(offset);
            this.trigger("data", result);
        };
    };
    TransportParseStream.prototype = new Stream$4();
    TransportParseStream.STREAM_TYPES = {
        h264: 0x1b,
        adts: 0x0f
    };
    /**
   * Reconsistutes program elementary stream (PES) packets from parsed
   * transport stream packets. That is, if you pipe an
   * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output
   * events will be events which capture the bytes for individual PES
   * packets plus relevant metadata that has been extracted from the
   * container.
   */ ElementaryStream = function() {
        var self1 = this, segmentHadPmt = false, // PES packet fragments
        video = {
            data: [],
            size: 0
        }, audio = {
            data: [],
            size: 0
        }, timedMetadata = {
            data: [],
            size: 0
        }, programMapTable, parsePes = function(payload, pes) {
            var ptsDtsFlags;
            const startPrefix = payload[0] << 16 | payload[1] << 8 | payload[2]; // default to an empty array
            pes.data = new Uint8Array(); // In certain live streams, the start of a TS fragment has ts packets
            // that are frame data that is continuing from the previous fragment. This
            // is to check that the pes data is the start of a new pes payload
            if (startPrefix !== 1) return;
             // get the packet length, this will be 0 for video
            pes.packetLength = 6 + (payload[4] << 8 | payload[5]); // find out if this packets starts a new keyframe
            pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0; // PES packets may be annotated with a PTS value, or a PTS value
            // and a DTS value. Determine what combination of values is
            // available to work with.
            ptsDtsFlags = payload[7]; // PTS and DTS are normally stored as a 33-bit number.  Javascript
            // performs all bitwise operations on 32-bit integers but javascript
            // supports a much greater range (52-bits) of integer using standard
            // mathematical operations.
            // We construct a 31-bit value using bitwise operators over the 31
            // most significant bits and then multiply by 4 (equal to a left-shift
            // of 2) before we add the final 2 least significant bits of the
            // timestamp (equal to an OR.)
            if (ptsDtsFlags & 0xC0) {
                // the PTS and DTS are not written out directly. For information
                // on how they are encoded, see
                // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
                pes.pts = (payload[9] & 0x0E) << 27 | (payload[10] & 0xFF) << 20 | (payload[11] & 0xFE) << 12 | (payload[12] & 0xFF) << 5 | (payload[13] & 0xFE) >>> 3;
                pes.pts *= 4; // Left shift by 2
                pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs
                pes.dts = pes.pts;
                if (ptsDtsFlags & 0x40) {
                    pes.dts = (payload[14] & 0x0E) << 27 | (payload[15] & 0xFF) << 20 | (payload[16] & 0xFE) << 12 | (payload[17] & 0xFF) << 5 | (payload[18] & 0xFE) >>> 3;
                    pes.dts *= 4; // Left shift by 2
                    pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs
                }
            } // the data section starts immediately after the PES header.
            // pes_header_data_length specifies the number of header bytes
            // that follow the last byte of the field.
            pes.data = payload.subarray(9 + payload[8]);
        }, /**
        * Pass completely parsed PES packets to the next stream in the pipeline
       **/ flushStream = function(stream, type, forceFlush) {
            var packetData = new Uint8Array(stream.size), event = {
                type: type
            }, i = 0, offset = 0, packetFlushable = false, fragment; // do nothing if there is not enough buffered data for a complete
            // PES header
            if (!stream.data.length || stream.size < 9) return;
            event.trackId = stream.data[0].pid; // reassemble the packet
            for(i = 0; i < stream.data.length; i++){
                fragment = stream.data[i];
                packetData.set(fragment.data, offset);
                offset += fragment.data.byteLength;
            } // parse assembled packet's PES header
            parsePes(packetData, event); // non-video PES packets MUST have a non-zero PES_packet_length
            // check that there is enough stream data to fill the packet
            packetFlushable = type === "video" || event.packetLength <= stream.size; // flush pending packets if the conditions are right
            if (forceFlush || packetFlushable) {
                stream.size = 0;
                stream.data.length = 0;
            } // only emit packets that are complete. this is to avoid assembling
            // incomplete PES packets due to poor segmentation
            if (packetFlushable) self1.trigger("data", event);
        };
        ElementaryStream.prototype.init.call(this);
        /**
     * Identifies M2TS packet types and parses PES packets using metadata
     * parsed from the PMT
     **/ this.push = function(data) {
            ({
                pat: function() {
                // have any meaningful metadata
                },
                pes: function() {
                    var stream, streamType;
                    switch(data.streamType){
                        case StreamTypes$2.H264_STREAM_TYPE:
                            stream = video;
                            streamType = "video";
                            break;
                        case StreamTypes$2.ADTS_STREAM_TYPE:
                            stream = audio;
                            streamType = "audio";
                            break;
                        case StreamTypes$2.METADATA_STREAM_TYPE:
                            stream = timedMetadata;
                            streamType = "timed-metadata";
                            break;
                        default:
                            // ignore unknown stream types
                            return;
                    } // if a new packet is starting, we can flush the completed
                    // packet
                    if (data.payloadUnitStartIndicator) flushStream(stream, streamType, true);
                     // buffer this fragment until we are sure we've received the
                    // complete payload
                    stream.data.push(data);
                    stream.size += data.data.byteLength;
                },
                pmt: function() {
                    var event = {
                        type: "metadata",
                        tracks: []
                    };
                    programMapTable = data.programMapTable; // translate audio and video streams to tracks
                    if (programMapTable.video !== null) event.tracks.push({
                        timelineStartInfo: {
                            baseMediaDecodeTime: 0
                        },
                        id: +programMapTable.video,
                        codec: "avc",
                        type: "video"
                    });
                    if (programMapTable.audio !== null) event.tracks.push({
                        timelineStartInfo: {
                            baseMediaDecodeTime: 0
                        },
                        id: +programMapTable.audio,
                        codec: "adts",
                        type: "audio"
                    });
                    segmentHadPmt = true;
                    self1.trigger("data", event);
                }
            })[data.type]();
        };
        this.reset = function() {
            video.size = 0;
            video.data.length = 0;
            audio.size = 0;
            audio.data.length = 0;
            this.trigger("reset");
        };
        /**
     * Flush any remaining input. Video PES packets may be of variable
     * length. Normally, the start of a new video packet can trigger the
     * finalization of the previous packet. That is not possible if no
     * more video is forthcoming, however. In that case, some other
     * mechanism (like the end of the file) has to be employed. When it is
     * clear that no additional data is forthcoming, calling this method
     * will flush the buffered packets.
     */ this.flushStreams_ = function() {
            // !!THIS ORDER IS IMPORTANT!!
            // video first then audio
            flushStream(video, "video");
            flushStream(audio, "audio");
            flushStream(timedMetadata, "timed-metadata");
        };
        this.flush = function() {
            // if on flush we haven't had a pmt emitted
            // and we have a pmt to emit. emit the pmt
            // so that we trigger a trackinfo downstream.
            if (!segmentHadPmt && programMapTable) {
                var pmt = {
                    type: "metadata",
                    tracks: []
                }; // translate audio and video streams to tracks
                if (programMapTable.video !== null) pmt.tracks.push({
                    timelineStartInfo: {
                        baseMediaDecodeTime: 0
                    },
                    id: +programMapTable.video,
                    codec: "avc",
                    type: "video"
                });
                if (programMapTable.audio !== null) pmt.tracks.push({
                    timelineStartInfo: {
                        baseMediaDecodeTime: 0
                    },
                    id: +programMapTable.audio,
                    codec: "adts",
                    type: "audio"
                });
                self1.trigger("data", pmt);
            }
            segmentHadPmt = false;
            this.flushStreams_();
            this.trigger("done");
        };
    };
    ElementaryStream.prototype = new Stream$4();
    var m2ts$1 = {
        PAT_PID: 0x0000,
        MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH$1,
        TransportPacketStream: TransportPacketStream,
        TransportParseStream: TransportParseStream,
        ElementaryStream: ElementaryStream,
        TimestampRolloverStream: TimestampRolloverStream,
        CaptionStream: CaptionStream$1.CaptionStream,
        Cea608Stream: CaptionStream$1.Cea608Stream,
        Cea708Stream: CaptionStream$1.Cea708Stream,
        MetadataStream: metadataStream
    };
    for(var type in StreamTypes$2)if (StreamTypes$2.hasOwnProperty(type)) m2ts$1[type] = StreamTypes$2[type];
    var m2ts_1 = m2ts$1;
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   */ var Stream$3 = stream;
    var ONE_SECOND_IN_TS$2 = clock$2.ONE_SECOND_IN_TS;
    var AdtsStream$1;
    var ADTS_SAMPLING_FREQUENCIES$1 = [
        96000,
        88200,
        64000,
        48000,
        44100,
        32000,
        24000,
        22050,
        16000,
        12000,
        11025,
        8000,
        7350
    ];
    /*
   * Accepts a ElementaryStream and emits data events with parsed
   * AAC Audio Frames of the individual packets. Input audio in ADTS
   * format is unpacked and re-emitted as AAC frames.
   *
   * @see http://wiki.multimedia.cx/index.php?title=ADTS
   * @see http://wiki.multimedia.cx/?title=Understanding_AAC
   */ AdtsStream$1 = function(handlePartialSegments) {
        var buffer, frameNum = 0;
        AdtsStream$1.prototype.init.call(this);
        this.skipWarn_ = function(start, end) {
            this.trigger("log", {
                level: "warn",
                message: `adts skiping bytes ${start} to ${end} in frame ${frameNum} outside syncword`
            });
        };
        this.push = function(packet) {
            var i = 0, frameLength, protectionSkipBytes, oldBuffer, sampleCount, adtsFrameDuration;
            if (!handlePartialSegments) frameNum = 0;
            if (packet.type !== "audio") // ignore non-audio data
            return;
             // Prepend any data in the buffer to the input data so that we can parse
            // aac frames the cross a PES packet boundary
            if (buffer && buffer.length) {
                oldBuffer = buffer;
                buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);
                buffer.set(oldBuffer);
                buffer.set(packet.data, oldBuffer.byteLength);
            } else buffer = packet.data;
             // unpack any ADTS frames which have been fully received
            // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS
            var skip; // We use i + 7 here because we want to be able to parse the entire header.
            // If we don't have enough bytes to do that, then we definitely won't have a full frame.
            while(i + 7 < buffer.length){
                // Look for the start of an ADTS header..
                if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {
                    if (typeof skip !== "number") skip = i;
                     // If a valid header was not found,  jump one forward and attempt to
                    // find a valid ADTS header starting at the next byte
                    i++;
                    continue;
                }
                if (typeof skip === "number") {
                    this.skipWarn_(skip, i);
                    skip = null;
                } // The protection skip bit tells us if we have 2 bytes of CRC data at the
                // end of the ADTS header
                protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2; // Frame length is a 13 bit integer starting 16 bits from the
                // end of the sync sequence
                // NOTE: frame length includes the size of the header
                frameLength = (buffer[i + 3] & 0x03) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 0xe0) >> 5;
                sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;
                adtsFrameDuration = sampleCount * ONE_SECOND_IN_TS$2 / ADTS_SAMPLING_FREQUENCIES$1[(buffer[i + 2] & 0x3c) >>> 2]; // If we don't have enough data to actually finish this ADTS frame,
                // then we have to wait for more data
                if (buffer.byteLength - i < frameLength) break;
                 // Otherwise, deliver the complete AAC frame
                this.trigger("data", {
                    pts: packet.pts + frameNum * adtsFrameDuration,
                    dts: packet.dts + frameNum * adtsFrameDuration,
                    sampleCount: sampleCount,
                    audioobjecttype: (buffer[i + 2] >>> 6 & 0x03) + 1,
                    channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 0xc0) >>> 6,
                    samplerate: ADTS_SAMPLING_FREQUENCIES$1[(buffer[i + 2] & 0x3c) >>> 2],
                    samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,
                    // assume ISO/IEC 14496-12 AudioSampleEntry default of 16
                    samplesize: 16,
                    // data is the frame without it's header
                    data: buffer.subarray(i + 7 + protectionSkipBytes, i + frameLength)
                });
                frameNum++;
                i += frameLength;
            }
            if (typeof skip === "number") {
                this.skipWarn_(skip, i);
                skip = null;
            } // remove processed bytes from the buffer.
            buffer = buffer.subarray(i);
        };
        this.flush = function() {
            frameNum = 0;
            this.trigger("done");
        };
        this.reset = function() {
            buffer = void 0;
            this.trigger("reset");
        };
        this.endTimeline = function() {
            buffer = void 0;
            this.trigger("endedtimeline");
        };
    };
    AdtsStream$1.prototype = new Stream$3();
    var adts = AdtsStream$1;
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   */ var ExpGolomb$1;
    /**
   * Parser for exponential Golomb codes, a variable-bitwidth number encoding
   * scheme used by h264.
   */ ExpGolomb$1 = function(workingData) {
        var // the number of bytes left to examine in workingData
        workingBytesAvailable = workingData.byteLength, // the current word being examined
        workingWord = 0, // :uint
        // the number of bits left to examine in the current word
        workingBitsAvailable = 0; // :uint;
        // ():uint
        this.length = function() {
            return 8 * workingBytesAvailable;
        }; // ():uint
        this.bitsAvailable = function() {
            return 8 * workingBytesAvailable + workingBitsAvailable;
        }; // ():void
        this.loadWord = function() {
            var position = workingData.byteLength - workingBytesAvailable, workingBytes = new Uint8Array(4), availableBytes = Math.min(4, workingBytesAvailable);
            if (availableBytes === 0) throw new Error("no bytes available");
            workingBytes.set(workingData.subarray(position, position + availableBytes));
            workingWord = new DataView(workingBytes.buffer).getUint32(0); // track the amount of workingData that has been processed
            workingBitsAvailable = availableBytes * 8;
            workingBytesAvailable -= availableBytes;
        }; // (count:int):void
        this.skipBits = function(count) {
            var skipBytes; // :int
            if (workingBitsAvailable > count) {
                workingWord <<= count;
                workingBitsAvailable -= count;
            } else {
                count -= workingBitsAvailable;
                skipBytes = Math.floor(count / 8);
                count -= skipBytes * 8;
                workingBytesAvailable -= skipBytes;
                this.loadWord();
                workingWord <<= count;
                workingBitsAvailable -= count;
            }
        }; // (size:int):uint
        this.readBits = function(size) {
            var bits = Math.min(workingBitsAvailable, size), // :uint
            valu = workingWord >>> 32 - bits; // :uint
            // if size > 31, handle error
            workingBitsAvailable -= bits;
            if (workingBitsAvailable > 0) workingWord <<= bits;
            else if (workingBytesAvailable > 0) this.loadWord();
            bits = size - bits;
            if (bits > 0) return valu << bits | this.readBits(bits);
            return valu;
        }; // ():uint
        this.skipLeadingZeros = function() {
            var leadingZeroCount; // :uint
            for(leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount)if ((workingWord & 0x80000000 >>> leadingZeroCount) !== 0) {
                // the first bit of working word is 1
                workingWord <<= leadingZeroCount;
                workingBitsAvailable -= leadingZeroCount;
                return leadingZeroCount;
            }
             // we exhausted workingWord and still have not found a 1
            this.loadWord();
            return leadingZeroCount + this.skipLeadingZeros();
        }; // ():void
        this.skipUnsignedExpGolomb = function() {
            this.skipBits(1 + this.skipLeadingZeros());
        }; // ():void
        this.skipExpGolomb = function() {
            this.skipBits(1 + this.skipLeadingZeros());
        }; // ():uint
        this.readUnsignedExpGolomb = function() {
            var clz = this.skipLeadingZeros(); // :uint
            return this.readBits(clz + 1) - 1;
        }; // ():int
        this.readExpGolomb = function() {
            var valu = this.readUnsignedExpGolomb(); // :int
            if (0x01 & valu) // the number is odd if the low order bit is set
            return 1 + valu >>> 1; // add 1 to make it even, and divide by 2
            return -1 * (valu >>> 1); // divide by two then make it negative
        }; // Some convenience functions
        // :Boolean
        this.readBoolean = function() {
            return this.readBits(1) === 1;
        }; // ():int
        this.readUnsignedByte = function() {
            return this.readBits(8);
        };
        this.loadWord();
    };
    var expGolomb = ExpGolomb$1;
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   */ var Stream$2 = stream;
    var ExpGolomb = expGolomb;
    var H264Stream$1, NalByteStream;
    var PROFILES_WITH_OPTIONAL_SPS_DATA;
    /**
   * Accepts a NAL unit byte stream and unpacks the embedded NAL units.
   */ NalByteStream = function() {
        var syncPoint = 0, i, buffer;
        NalByteStream.prototype.init.call(this);
        /*
     * Scans a byte stream and triggers a data event with the NAL units found.
     * @param {Object} data Event received from H264Stream
     * @param {Uint8Array} data.data The h264 byte stream to be scanned
     *
     * @see H264Stream.push
     */ this.push = function(data) {
            var swapBuffer;
            if (!buffer) buffer = data.data;
            else {
                swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);
                swapBuffer.set(buffer);
                swapBuffer.set(data.data, buffer.byteLength);
                buffer = swapBuffer;
            }
            var len = buffer.byteLength; // Rec. ITU-T H.264, Annex B
            // scan for NAL unit boundaries
            // a match looks like this:
            // 0 0 1 .. NAL .. 0 0 1
            // ^ sync point        ^ i
            // or this:
            // 0 0 1 .. NAL .. 0 0 0
            // ^ sync point        ^ i
            // advance the sync point to a NAL start, if necessary
            for(; syncPoint < len - 3; syncPoint++)if (buffer[syncPoint + 2] === 1) {
                // the sync point is properly aligned
                i = syncPoint + 5;
                break;
            }
            while(i < len)// look at the current byte to determine if we've hit the end of
            // a NAL unit boundary
            switch(buffer[i]){
                case 0:
                    // skip past non-sync sequences
                    if (buffer[i - 1] !== 0) {
                        i += 2;
                        break;
                    } else if (buffer[i - 2] !== 0) {
                        i++;
                        break;
                    } // deliver the NAL unit if it isn't empty
                    if (syncPoint + 3 !== i - 2) this.trigger("data", buffer.subarray(syncPoint + 3, i - 2));
                     // drop trailing zeroes
                    do i++;
                    while (buffer[i] !== 1 && i < len);
                    syncPoint = i - 2;
                    i += 3;
                    break;
                case 1:
                    // skip past non-sync sequences
                    if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {
                        i += 3;
                        break;
                    } // deliver the NAL unit
                    this.trigger("data", buffer.subarray(syncPoint + 3, i - 2));
                    syncPoint = i - 2;
                    i += 3;
                    break;
                default:
                    // the current byte isn't a one or zero, so it cannot be part
                    // of a sync sequence
                    i += 3;
                    break;
            }
             // filter out the NAL units that were delivered
            buffer = buffer.subarray(syncPoint);
            i -= syncPoint;
            syncPoint = 0;
        };
        this.reset = function() {
            buffer = null;
            syncPoint = 0;
            this.trigger("reset");
        };
        this.flush = function() {
            // deliver the last buffered NAL unit
            if (buffer && buffer.byteLength > 3) this.trigger("data", buffer.subarray(syncPoint + 3));
             // reset the stream state
            buffer = null;
            syncPoint = 0;
            this.trigger("done");
        };
        this.endTimeline = function() {
            this.flush();
            this.trigger("endedtimeline");
        };
    };
    NalByteStream.prototype = new Stream$2(); // values of profile_idc that indicate additional fields are included in the SPS
    // see Recommendation ITU-T H.264 (4/2013),
    // 7.3.2.1.1 Sequence parameter set data syntax
    PROFILES_WITH_OPTIONAL_SPS_DATA = {
        100: true,
        110: true,
        122: true,
        244: true,
        44: true,
        83: true,
        86: true,
        118: true,
        128: true,
        // TODO: the three profiles below don't
        // appear to have sps data in the specificiation anymore?
        138: true,
        139: true,
        134: true
    };
    /**
   * Accepts input from a ElementaryStream and produces H.264 NAL unit data
   * events.
   */ H264Stream$1 = function() {
        var nalByteStream = new NalByteStream(), self1, trackId, currentPts, currentDts, discardEmulationPreventionBytes, readSequenceParameterSet, skipScalingList;
        H264Stream$1.prototype.init.call(this);
        self1 = this;
        /*
     * Pushes a packet from a stream onto the NalByteStream
     *
     * @param {Object} packet - A packet received from a stream
     * @param {Uint8Array} packet.data - The raw bytes of the packet
     * @param {Number} packet.dts - Decode timestamp of the packet
     * @param {Number} packet.pts - Presentation timestamp of the packet
     * @param {Number} packet.trackId - The id of the h264 track this packet came from
     * @param {('video'|'audio')} packet.type - The type of packet
     *
     */ this.push = function(packet) {
            if (packet.type !== "video") return;
            trackId = packet.trackId;
            currentPts = packet.pts;
            currentDts = packet.dts;
            nalByteStream.push(packet);
        };
        /*
     * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps
     * for the NALUs to the next stream component.
     * Also, preprocess caption and sequence parameter NALUs.
     *
     * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`
     * @see NalByteStream.push
     */ nalByteStream.on("data", function(data) {
            var event = {
                trackId: trackId,
                pts: currentPts,
                dts: currentDts,
                data: data,
                nalUnitTypeCode: data[0] & 0x1f
            };
            switch(event.nalUnitTypeCode){
                case 0x05:
                    event.nalUnitType = "slice_layer_without_partitioning_rbsp_idr";
                    break;
                case 0x06:
                    event.nalUnitType = "sei_rbsp";
                    event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));
                    break;
                case 0x07:
                    event.nalUnitType = "seq_parameter_set_rbsp";
                    event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));
                    event.config = readSequenceParameterSet(event.escapedRBSP);
                    break;
                case 0x08:
                    event.nalUnitType = "pic_parameter_set_rbsp";
                    break;
                case 0x09:
                    event.nalUnitType = "access_unit_delimiter_rbsp";
                    break;
            } // This triggers data on the H264Stream
            self1.trigger("data", event);
        });
        nalByteStream.on("done", function() {
            self1.trigger("done");
        });
        nalByteStream.on("partialdone", function() {
            self1.trigger("partialdone");
        });
        nalByteStream.on("reset", function() {
            self1.trigger("reset");
        });
        nalByteStream.on("endedtimeline", function() {
            self1.trigger("endedtimeline");
        });
        this.flush = function() {
            nalByteStream.flush();
        };
        this.partialFlush = function() {
            nalByteStream.partialFlush();
        };
        this.reset = function() {
            nalByteStream.reset();
        };
        this.endTimeline = function() {
            nalByteStream.endTimeline();
        };
        /**
     * Advance the ExpGolomb decoder past a scaling list. The scaling
     * list is optionally transmitted as part of a sequence parameter
     * set and is not relevant to transmuxing.
     * @param count {number} the number of entries in this scaling list
     * @param expGolombDecoder {object} an ExpGolomb pointed to the
     * start of a scaling list
     * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1
     */ skipScalingList = function(count, expGolombDecoder) {
            var lastScale = 8, nextScale = 8, j, deltaScale;
            for(j = 0; j < count; j++){
                if (nextScale !== 0) {
                    deltaScale = expGolombDecoder.readExpGolomb();
                    nextScale = (lastScale + deltaScale + 256) % 256;
                }
                lastScale = nextScale === 0 ? lastScale : nextScale;
            }
        };
        /**
     * Expunge any "Emulation Prevention" bytes from a "Raw Byte
     * Sequence Payload"
     * @param data {Uint8Array} the bytes of a RBSP from a NAL
     * unit
     * @return {Uint8Array} the RBSP without any Emulation
     * Prevention Bytes
     */ discardEmulationPreventionBytes = function(data) {
            var length = data.byteLength, emulationPreventionBytesPositions = [], i = 1, newLength, newData; // Find all `Emulation Prevention Bytes`
            while(i < length - 2)if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {
                emulationPreventionBytesPositions.push(i + 2);
                i += 2;
            } else i++;
             // If no Emulation Prevention Bytes were found just return the original
            // array
            if (emulationPreventionBytesPositions.length === 0) return data;
             // Create a new array to hold the NAL unit data
            newLength = length - emulationPreventionBytesPositions.length;
            newData = new Uint8Array(newLength);
            var sourceIndex = 0;
            for(i = 0; i < newLength; sourceIndex++, i++){
                if (sourceIndex === emulationPreventionBytesPositions[0]) {
                    // Skip this byte
                    sourceIndex++; // Remove this position index
                    emulationPreventionBytesPositions.shift();
                }
                newData[i] = data[sourceIndex];
            }
            return newData;
        };
        /**
     * Read a sequence parameter set and return some interesting video
     * properties. A sequence parameter set is the H264 metadata that
     * describes the properties of upcoming video frames.
     * @param data {Uint8Array} the bytes of a sequence parameter set
     * @return {object} an object with configuration parsed from the
     * sequence parameter set, including the dimensions of the
     * associated video frames.
     */ readSequenceParameterSet = function(data) {
            var frameCropLeftOffset = 0, frameCropRightOffset = 0, frameCropTopOffset = 0, frameCropBottomOffset = 0, expGolombDecoder, profileIdc, levelIdc, profileCompatibility, chromaFormatIdc, picOrderCntType, numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1, picHeightInMapUnitsMinus1, frameMbsOnlyFlag, scalingListCount, sarRatio = [
                1,
                1
            ], aspectRatioIdc, i;
            expGolombDecoder = new ExpGolomb(data);
            profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc
            profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag
            levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)
            expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id
            // some profiles have more optional data we don't need
            if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {
                chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();
                if (chromaFormatIdc === 3) expGolombDecoder.skipBits(1); // separate_colour_plane_flag
                expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8
                expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8
                expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag
                if (expGolombDecoder.readBoolean()) {
                    // seq_scaling_matrix_present_flag
                    scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;
                    for(i = 0; i < scalingListCount; i++)if (expGolombDecoder.readBoolean()) {
                        // seq_scaling_list_present_flag[ i ]
                        if (i < 6) skipScalingList(16, expGolombDecoder);
                        else skipScalingList(64, expGolombDecoder);
                    }
                }
            }
            expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4
            picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();
            if (picOrderCntType === 0) expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4
            else if (picOrderCntType === 1) {
                expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag
                expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic
                expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field
                numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();
                for(i = 0; i < numRefFramesInPicOrderCntCycle; i++)expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]
            }
            expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames
            expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag
            picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();
            picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();
            frameMbsOnlyFlag = expGolombDecoder.readBits(1);
            if (frameMbsOnlyFlag === 0) expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag
            expGolombDecoder.skipBits(1); // direct_8x8_inference_flag
            if (expGolombDecoder.readBoolean()) {
                // frame_cropping_flag
                frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();
                frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();
                frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();
                frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();
            }
            if (expGolombDecoder.readBoolean()) // vui_parameters_present_flag
            {
                if (expGolombDecoder.readBoolean()) {
                    // aspect_ratio_info_present_flag
                    aspectRatioIdc = expGolombDecoder.readUnsignedByte();
                    switch(aspectRatioIdc){
                        case 1:
                            sarRatio = [
                                1,
                                1
                            ];
                            break;
                        case 2:
                            sarRatio = [
                                12,
                                11
                            ];
                            break;
                        case 3:
                            sarRatio = [
                                10,
                                11
                            ];
                            break;
                        case 4:
                            sarRatio = [
                                16,
                                11
                            ];
                            break;
                        case 5:
                            sarRatio = [
                                40,
                                33
                            ];
                            break;
                        case 6:
                            sarRatio = [
                                24,
                                11
                            ];
                            break;
                        case 7:
                            sarRatio = [
                                20,
                                11
                            ];
                            break;
                        case 8:
                            sarRatio = [
                                32,
                                11
                            ];
                            break;
                        case 9:
                            sarRatio = [
                                80,
                                33
                            ];
                            break;
                        case 10:
                            sarRatio = [
                                18,
                                11
                            ];
                            break;
                        case 11:
                            sarRatio = [
                                15,
                                11
                            ];
                            break;
                        case 12:
                            sarRatio = [
                                64,
                                33
                            ];
                            break;
                        case 13:
                            sarRatio = [
                                160,
                                99
                            ];
                            break;
                        case 14:
                            sarRatio = [
                                4,
                                3
                            ];
                            break;
                        case 15:
                            sarRatio = [
                                3,
                                2
                            ];
                            break;
                        case 16:
                            sarRatio = [
                                2,
                                1
                            ];
                            break;
                        case 255:
                            sarRatio = [
                                expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(),
                                expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()
                            ];
                            break;
                    }
                    if (sarRatio) sarRatio[0], sarRatio[1];
                }
            }
            return {
                profileIdc: profileIdc,
                levelIdc: levelIdc,
                profileCompatibility: profileCompatibility,
                width: (picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2,
                height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2,
                // sar is sample aspect ratio
                sarRatio: sarRatio
            };
        };
    };
    H264Stream$1.prototype = new Stream$2();
    var h264 = {
        H264Stream: H264Stream$1,
        NalByteStream: NalByteStream
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * Utilities to detect basic properties and metadata about Aac data.
   */ var ADTS_SAMPLING_FREQUENCIES = [
        96000,
        88200,
        64000,
        48000,
        44100,
        32000,
        24000,
        22050,
        16000,
        12000,
        11025,
        8000,
        7350
    ];
    var parseId3TagSize = function(header, byteIndex) {
        var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9], flags = header[byteIndex + 5], footerPresent = (flags & 16) >> 4; // if we get a negative returnSize clamp it to 0
        returnSize = returnSize >= 0 ? returnSize : 0;
        if (footerPresent) return returnSize + 20;
        return returnSize + 10;
    };
    var getId3Offset = function(data, offset) {
        if (data.length - offset < 10 || data[offset] !== "I".charCodeAt(0) || data[offset + 1] !== "D".charCodeAt(0) || data[offset + 2] !== "3".charCodeAt(0)) return offset;
        offset += parseId3TagSize(data, offset);
        return getId3Offset(data, offset);
    }; // TODO: use vhs-utils
    var isLikelyAacData$1 = function(data) {
        var offset = getId3Offset(data, 0);
        return data.length >= offset + 2 && (data[offset] & 0xFF) === 0xFF && (data[offset + 1] & 0xF0) === 0xF0 && // verify that the 2 layer bits are 0, aka this
        // is not mp3 data but aac data.
        (data[offset + 1] & 0x16) === 0x10;
    };
    var parseSyncSafeInteger = function(data) {
        return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];
    }; // return a percent-encoded representation of the specified byte range
    // @see http://en.wikipedia.org/wiki/Percent-encoding
    var percentEncode = function(bytes, start, end) {
        var i, result = "";
        for(i = start; i < end; i++)result += "%" + ("00" + bytes[i].toString(16)).slice(-2);
        return result;
    }; // return the string representation of the specified byte range,
    // interpreted as ISO-8859-1.
    var parseIso88591 = function(bytes, start, end) {
        return unescape(percentEncode(bytes, start, end)); // jshint ignore:line
    };
    var parseAdtsSize = function(header, byteIndex) {
        var lowThree = (header[byteIndex + 5] & 0xE0) >> 5, middle = header[byteIndex + 4] << 3, highTwo = header[byteIndex + 3] & 6144;
        return highTwo | middle | lowThree;
    };
    var parseType$4 = function(header, byteIndex) {
        if (header[byteIndex] === "I".charCodeAt(0) && header[byteIndex + 1] === "D".charCodeAt(0) && header[byteIndex + 2] === "3".charCodeAt(0)) return "timed-metadata";
        else if (header[byteIndex] & true && (header[byteIndex + 1] & 0xf0) === 0xf0) return "audio";
        return null;
    };
    var parseSampleRate = function(packet) {
        var i = 0;
        while(i + 5 < packet.length){
            if (packet[i] !== 0xFF || (packet[i + 1] & 0xF6) !== 0xF0) {
                // If a valid header was not found,  jump one forward and attempt to
                // find a valid ADTS header starting at the next byte
                i++;
                continue;
            }
            return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 0x3c) >>> 2];
        }
        return null;
    };
    var parseAacTimestamp = function(packet) {
        var frameStart, frameSize, frame, frameHeader; // find the start of the first frame and the end of the tag
        frameStart = 10;
        if (packet[5] & 0x40) {
            // advance the frame start past the extended header
            frameStart += 4; // header size field
            frameStart += parseSyncSafeInteger(packet.subarray(10, 14));
        } // parse one or more ID3 frames
        // http://id3.org/id3v2.3.0#ID3v2_frame_overview
        do {
            // determine the number of bytes in this frame
            frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));
            if (frameSize < 1) return null;
            frameHeader = String.fromCharCode(packet[frameStart], packet[frameStart + 1], packet[frameStart + 2], packet[frameStart + 3]);
            if (frameHeader === "PRIV") {
                frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);
                for(var i = 0; i < frame.byteLength; i++)if (frame[i] === 0) {
                    var owner = parseIso88591(frame, 0, i);
                    if (owner === "com.apple.streaming.transportStreamTimestamp") {
                        var d = frame.subarray(i + 1);
                        var size = (d[3] & 0x01) << 30 | d[4] << 22 | d[5] << 14 | d[6] << 6 | d[7] >>> 2;
                        size *= 4;
                        size += d[7] & 0x03;
                        return size;
                    }
                    break;
                }
            }
            frameStart += 10; // advance past the frame header
            frameStart += frameSize; // advance past the frame body
        }while (frameStart < packet.byteLength);
        return null;
    };
    var utils = {
        isLikelyAacData: isLikelyAacData$1,
        parseId3TagSize: parseId3TagSize,
        parseAdtsSize: parseAdtsSize,
        parseType: parseType$4,
        parseSampleRate: parseSampleRate,
        parseAacTimestamp: parseAacTimestamp
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * A stream-based aac to mp4 converter. This utility can be used to
   * deliver mp4s to a SourceBuffer on platforms that support native
   * Media Source Extensions.
   */ var Stream$1 = stream;
    var aacUtils = utils; // Constants
    var AacStream$1;
    /**
   * Splits an incoming stream of binary data into ADTS and ID3 Frames.
   */ AacStream$1 = function() {
        var everything = new Uint8Array(), timeStamp = 0;
        AacStream$1.prototype.init.call(this);
        this.setTimestamp = function(timestamp) {
            timeStamp = timestamp;
        };
        this.push = function(bytes) {
            var frameSize = 0, byteIndex = 0, bytesLeft, chunk, packet, tempLength; // If there are bytes remaining from the last segment, prepend them to the
            // bytes that were pushed in
            if (everything.length) {
                tempLength = everything.length;
                everything = new Uint8Array(bytes.byteLength + tempLength);
                everything.set(everything.subarray(0, tempLength));
                everything.set(bytes, tempLength);
            } else everything = bytes;
            while(everything.length - byteIndex >= 3){
                if (everything[byteIndex] === "I".charCodeAt(0) && everything[byteIndex + 1] === "D".charCodeAt(0) && everything[byteIndex + 2] === "3".charCodeAt(0)) {
                    // Exit early because we don't have enough to parse
                    // the ID3 tag header
                    if (everything.length - byteIndex < 10) break;
                     // check framesize
                    frameSize = aacUtils.parseId3TagSize(everything, byteIndex); // Exit early if we don't have enough in the buffer
                    // to emit a full packet
                    // Add to byteIndex to support multiple ID3 tags in sequence
                    if (byteIndex + frameSize > everything.length) break;
                    chunk = {
                        type: "timed-metadata",
                        data: everything.subarray(byteIndex, byteIndex + frameSize)
                    };
                    this.trigger("data", chunk);
                    byteIndex += frameSize;
                    continue;
                } else if ((everything[byteIndex] & 0xff) === 0xff && (everything[byteIndex + 1] & 0xf0) === 0xf0) {
                    // Exit early because we don't have enough to parse
                    // the ADTS frame header
                    if (everything.length - byteIndex < 7) break;
                    frameSize = aacUtils.parseAdtsSize(everything, byteIndex); // Exit early if we don't have enough in the buffer
                    // to emit a full packet
                    if (byteIndex + frameSize > everything.length) break;
                    packet = {
                        type: "audio",
                        data: everything.subarray(byteIndex, byteIndex + frameSize),
                        pts: timeStamp,
                        dts: timeStamp
                    };
                    this.trigger("data", packet);
                    byteIndex += frameSize;
                    continue;
                }
                byteIndex++;
            }
            bytesLeft = everything.length - byteIndex;
            if (bytesLeft > 0) everything = everything.subarray(byteIndex);
            else everything = new Uint8Array();
        };
        this.reset = function() {
            everything = new Uint8Array();
            this.trigger("reset");
        };
        this.endTimeline = function() {
            everything = new Uint8Array();
            this.trigger("endedtimeline");
        };
    };
    AacStream$1.prototype = new Stream$1();
    var aac = AacStream$1;
    var AUDIO_PROPERTIES$1 = [
        "audioobjecttype",
        "channelcount",
        "samplerate",
        "samplingfrequencyindex",
        "samplesize"
    ];
    var audioProperties = AUDIO_PROPERTIES$1;
    var VIDEO_PROPERTIES$1 = [
        "width",
        "height",
        "profileIdc",
        "levelIdc",
        "profileCompatibility",
        "sarRatio"
    ];
    var videoProperties = VIDEO_PROPERTIES$1;
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * A stream-based mp2t to mp4 converter. This utility can be used to
   * deliver mp4s to a SourceBuffer on platforms that support native
   * Media Source Extensions.
   */ var Stream = stream;
    var mp4 = mp4Generator;
    var frameUtils = frameUtils$1;
    var audioFrameUtils = audioFrameUtils$1;
    var trackDecodeInfo = trackDecodeInfo$1;
    var m2ts = m2ts_1;
    var clock = clock$2;
    var AdtsStream = adts;
    var H264Stream = h264.H264Stream;
    var AacStream = aac;
    var isLikelyAacData = utils.isLikelyAacData;
    var ONE_SECOND_IN_TS$1 = clock$2.ONE_SECOND_IN_TS;
    var AUDIO_PROPERTIES = audioProperties;
    var VIDEO_PROPERTIES = videoProperties; // object types
    var VideoSegmentStream, AudioSegmentStream, Transmuxer, CoalesceStream;
    var retriggerForStream = function(key, event) {
        event.stream = key;
        this.trigger("log", event);
    };
    var addPipelineLogRetriggers = function(transmuxer, pipeline) {
        var keys = Object.keys(pipeline);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i]; // skip non-stream keys and headOfPipeline
            // which is just a duplicate
            if (key === "headOfPipeline" || !pipeline[key].on) continue;
            pipeline[key].on("log", retriggerForStream.bind(transmuxer, key));
        }
    };
    /**
   * Compare two arrays (even typed) for same-ness
   */ var arrayEquals = function(a, b) {
        var i;
        if (a.length !== b.length) return false;
         // compare the value of each element in the array
        for(i = 0; i < a.length; i++){
            if (a[i] !== b[i]) return false;
        }
        return true;
    };
    var generateSegmentTimingInfo = function(baseMediaDecodeTime, startDts, startPts, endDts, endPts, prependedContentDuration) {
        var ptsOffsetFromDts = startPts - startDts, decodeDuration = endDts - startDts, presentationDuration = endPts - startPts; // The PTS and DTS values are based on the actual stream times from the segment,
        // however, the player time values will reflect a start from the baseMediaDecodeTime.
        // In order to provide relevant values for the player times, base timing info on the
        // baseMediaDecodeTime and the DTS and PTS durations of the segment.
        return {
            start: {
                dts: baseMediaDecodeTime,
                pts: baseMediaDecodeTime + ptsOffsetFromDts
            },
            end: {
                dts: baseMediaDecodeTime + decodeDuration,
                pts: baseMediaDecodeTime + presentationDuration
            },
            prependedContentDuration: prependedContentDuration,
            baseMediaDecodeTime: baseMediaDecodeTime
        };
    };
    /**
   * Constructs a single-track, ISO BMFF media segment from AAC data
   * events. The output of this stream can be fed to a SourceBuffer
   * configured with a suitable initialization segment.
   * @param track {object} track metadata configuration
   * @param options {object} transmuxer options object
   * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
   *        in the source; false to adjust the first segment to start at 0.
   */ AudioSegmentStream = function(track, options) {
        var adtsFrames = [], sequenceNumber, earliestAllowedDts = 0, audioAppendStartTs = 0, videoBaseMediaDecodeTime = Infinity;
        options = options || {};
        sequenceNumber = options.firstSequenceNumber || 0;
        AudioSegmentStream.prototype.init.call(this);
        this.push = function(data) {
            trackDecodeInfo.collectDtsInfo(track, data);
            if (track) AUDIO_PROPERTIES.forEach(function(prop) {
                track[prop] = data[prop];
            });
             // buffer audio data until end() is called
            adtsFrames.push(data);
        };
        this.setEarliestDts = function(earliestDts) {
            earliestAllowedDts = earliestDts;
        };
        this.setVideoBaseMediaDecodeTime = function(baseMediaDecodeTime) {
            videoBaseMediaDecodeTime = baseMediaDecodeTime;
        };
        this.setAudioAppendStart = function(timestamp) {
            audioAppendStartTs = timestamp;
        };
        this.flush = function() {
            var frames, moof, mdat, boxes, frameDuration, segmentDuration, videoClockCyclesOfSilencePrefixed; // return early if no audio data has been observed
            if (adtsFrames.length === 0) {
                this.trigger("done", "AudioSegmentStream");
                return;
            }
            frames = audioFrameUtils.trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts);
            track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps); // amount of audio filled but the value is in video clock rather than audio clock
            videoClockCyclesOfSilencePrefixed = audioFrameUtils.prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime); // we have to build the index from byte locations to
            // samples (that is, adts frames) in the audio data
            track.samples = audioFrameUtils.generateSampleTable(frames); // concatenate the audio data to constuct the mdat
            mdat = mp4.mdat(audioFrameUtils.concatenateFrameData(frames));
            adtsFrames = [];
            moof = mp4.moof(sequenceNumber, [
                track
            ]);
            boxes = new Uint8Array(moof.byteLength + mdat.byteLength); // bump the sequence number for next time
            sequenceNumber++;
            boxes.set(moof);
            boxes.set(mdat, moof.byteLength);
            trackDecodeInfo.clearDtsInfo(track);
            frameDuration = Math.ceil(ONE_SECOND_IN_TS$1 * 1024 / track.samplerate); // TODO this check was added to maintain backwards compatibility (particularly with
            // tests) on adding the timingInfo event. However, it seems unlikely that there's a
            // valid use-case where an init segment/data should be triggered without associated
            // frames. Leaving for now, but should be looked into.
            if (frames.length) {
                segmentDuration = frames.length * frameDuration;
                this.trigger("segmentTimingInfo", generateSegmentTimingInfo(// The audio track's baseMediaDecodeTime is in audio clock cycles, but the
                // frame info is in video clock cycles. Convert to match expectation of
                // listeners (that all timestamps will be based on video clock cycles).
                clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate), // frame times are already in video clock, as is segment duration
                frames[0].dts, frames[0].pts, frames[0].dts + segmentDuration, frames[0].pts + segmentDuration, videoClockCyclesOfSilencePrefixed || 0));
                this.trigger("timingInfo", {
                    start: frames[0].pts,
                    end: frames[0].pts + segmentDuration
                });
            }
            this.trigger("data", {
                track: track,
                boxes: boxes
            });
            this.trigger("done", "AudioSegmentStream");
        };
        this.reset = function() {
            trackDecodeInfo.clearDtsInfo(track);
            adtsFrames = [];
            this.trigger("reset");
        };
    };
    AudioSegmentStream.prototype = new Stream();
    /**
   * Constructs a single-track, ISO BMFF media segment from H264 data
   * events. The output of this stream can be fed to a SourceBuffer
   * configured with a suitable initialization segment.
   * @param track {object} track metadata configuration
   * @param options {object} transmuxer options object
   * @param options.alignGopsAtEnd {boolean} If true, start from the end of the
   *        gopsToAlignWith list when attempting to align gop pts
   * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
   *        in the source; false to adjust the first segment to start at 0.
   */ VideoSegmentStream = function(track, options) {
        var sequenceNumber, nalUnits = [], gopsToAlignWith = [], config, pps;
        options = options || {};
        sequenceNumber = options.firstSequenceNumber || 0;
        VideoSegmentStream.prototype.init.call(this);
        delete track.minPTS;
        this.gopCache_ = [];
        /**
      * Constructs a ISO BMFF segment given H264 nalUnits
      * @param {Object} nalUnit A data event representing a nalUnit
      * @param {String} nalUnit.nalUnitType
      * @param {Object} nalUnit.config Properties for a mp4 track
      * @param {Uint8Array} nalUnit.data The nalUnit bytes
      * @see lib/codecs/h264.js
     **/ this.push = function(nalUnit) {
            trackDecodeInfo.collectDtsInfo(track, nalUnit); // record the track config
            if (nalUnit.nalUnitType === "seq_parameter_set_rbsp" && !config) {
                config = nalUnit.config;
                track.sps = [
                    nalUnit.data
                ];
                VIDEO_PROPERTIES.forEach(function(prop) {
                    track[prop] = config[prop];
                }, this);
            }
            if (nalUnit.nalUnitType === "pic_parameter_set_rbsp" && !pps) {
                pps = nalUnit.data;
                track.pps = [
                    nalUnit.data
                ];
            } // buffer video until flush() is called
            nalUnits.push(nalUnit);
        };
        /**
      * Pass constructed ISO BMFF track and boxes on to the
      * next stream in the pipeline
     **/ this.flush = function() {
            var frames, gopForFusion, gops, moof, mdat, boxes, prependedContentDuration = 0, firstGop, lastGop; // Throw away nalUnits at the start of the byte stream until
            // we find the first AUD
            while(nalUnits.length){
                if (nalUnits[0].nalUnitType === "access_unit_delimiter_rbsp") break;
                nalUnits.shift();
            } // Return early if no video data has been observed
            if (nalUnits.length === 0) {
                this.resetStream_();
                this.trigger("done", "VideoSegmentStream");
                return;
            } // Organize the raw nal-units into arrays that represent
            // higher-level constructs such as frames and gops
            // (group-of-pictures)
            frames = frameUtils.groupNalsIntoFrames(nalUnits);
            gops = frameUtils.groupFramesIntoGops(frames); // If the first frame of this fragment is not a keyframe we have
            // a problem since MSE (on Chrome) requires a leading keyframe.
            //
            // We have two approaches to repairing this situation:
            // 1) GOP-FUSION:
            //    This is where we keep track of the GOPS (group-of-pictures)
            //    from previous fragments and attempt to find one that we can
            //    prepend to the current fragment in order to create a valid
            //    fragment.
            // 2) KEYFRAME-PULLING:
            //    Here we search for the first keyframe in the fragment and
            //    throw away all the frames between the start of the fragment
            //    and that keyframe. We then extend the duration and pull the
            //    PTS of the keyframe forward so that it covers the time range
            //    of the frames that were disposed of.
            //
            // #1 is far prefereable over #2 which can cause "stuttering" but
            // requires more things to be just right.
            if (!gops[0][0].keyFrame) {
                // Search for a gop for fusion from our gopCache
                gopForFusion = this.getGopForFusion_(nalUnits[0], track);
                if (gopForFusion) {
                    // in order to provide more accurate timing information about the segment, save
                    // the number of seconds prepended to the original segment due to GOP fusion
                    prependedContentDuration = gopForFusion.duration;
                    gops.unshift(gopForFusion); // Adjust Gops' metadata to account for the inclusion of the
                    // new gop at the beginning
                    gops.byteLength += gopForFusion.byteLength;
                    gops.nalCount += gopForFusion.nalCount;
                    gops.pts = gopForFusion.pts;
                    gops.dts = gopForFusion.dts;
                    gops.duration += gopForFusion.duration;
                } else // If we didn't find a candidate gop fall back to keyframe-pulling
                gops = frameUtils.extendFirstKeyFrame(gops);
            } // Trim gops to align with gopsToAlignWith
            if (gopsToAlignWith.length) {
                var alignedGops;
                if (options.alignGopsAtEnd) alignedGops = this.alignGopsAtEnd_(gops);
                else alignedGops = this.alignGopsAtStart_(gops);
                if (!alignedGops) {
                    // save all the nals in the last GOP into the gop cache
                    this.gopCache_.unshift({
                        gop: gops.pop(),
                        pps: track.pps,
                        sps: track.sps
                    }); // Keep a maximum of 6 GOPs in the cache
                    this.gopCache_.length = Math.min(6, this.gopCache_.length); // Clear nalUnits
                    nalUnits = []; // return early no gops can be aligned with desired gopsToAlignWith
                    this.resetStream_();
                    this.trigger("done", "VideoSegmentStream");
                    return;
                } // Some gops were trimmed. clear dts info so minSegmentDts and pts are correct
                // when recalculated before sending off to CoalesceStream
                trackDecodeInfo.clearDtsInfo(track);
                gops = alignedGops;
            }
            trackDecodeInfo.collectDtsInfo(track, gops); // First, we have to build the index from byte locations to
            // samples (that is, frames) in the video data
            track.samples = frameUtils.generateSampleTable(gops); // Concatenate the video data and construct the mdat
            mdat = mp4.mdat(frameUtils.concatenateNalData(gops));
            track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);
            this.trigger("processedGopsInfo", gops.map(function(gop) {
                return {
                    pts: gop.pts,
                    dts: gop.dts,
                    byteLength: gop.byteLength
                };
            }));
            firstGop = gops[0];
            lastGop = gops[gops.length - 1];
            this.trigger("segmentTimingInfo", generateSegmentTimingInfo(track.baseMediaDecodeTime, firstGop.dts, firstGop.pts, lastGop.dts + lastGop.duration, lastGop.pts + lastGop.duration, prependedContentDuration));
            this.trigger("timingInfo", {
                start: gops[0].pts,
                end: gops[gops.length - 1].pts + gops[gops.length - 1].duration
            }); // save all the nals in the last GOP into the gop cache
            this.gopCache_.unshift({
                gop: gops.pop(),
                pps: track.pps,
                sps: track.sps
            }); // Keep a maximum of 6 GOPs in the cache
            this.gopCache_.length = Math.min(6, this.gopCache_.length); // Clear nalUnits
            nalUnits = [];
            this.trigger("baseMediaDecodeTime", track.baseMediaDecodeTime);
            this.trigger("timelineStartInfo", track.timelineStartInfo);
            moof = mp4.moof(sequenceNumber, [
                track
            ]); // it would be great to allocate this array up front instead of
            // throwing away hundreds of media segment fragments
            boxes = new Uint8Array(moof.byteLength + mdat.byteLength); // Bump the sequence number for next time
            sequenceNumber++;
            boxes.set(moof);
            boxes.set(mdat, moof.byteLength);
            this.trigger("data", {
                track: track,
                boxes: boxes
            });
            this.resetStream_(); // Continue with the flush process now
            this.trigger("done", "VideoSegmentStream");
        };
        this.reset = function() {
            this.resetStream_();
            nalUnits = [];
            this.gopCache_.length = 0;
            gopsToAlignWith.length = 0;
            this.trigger("reset");
        };
        this.resetStream_ = function() {
            trackDecodeInfo.clearDtsInfo(track); // reset config and pps because they may differ across segments
            // for instance, when we are rendition switching
            config = undefined;
            pps = undefined;
        }; // Search for a candidate Gop for gop-fusion from the gop cache and
        // return it or return null if no good candidate was found
        this.getGopForFusion_ = function(nalUnit) {
            var halfSecond = 45000, // Half-a-second in a 90khz clock
            allowableOverlap = 10000, // About 3 frames @ 30fps
            nearestDistance = Infinity, dtsDistance, nearestGopObj, currentGop, currentGopObj, i; // Search for the GOP nearest to the beginning of this nal unit
            for(i = 0; i < this.gopCache_.length; i++){
                currentGopObj = this.gopCache_[i];
                currentGop = currentGopObj.gop; // Reject Gops with different SPS or PPS
                if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) || !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) continue;
                 // Reject Gops that would require a negative baseMediaDecodeTime
                if (currentGop.dts < track.timelineStartInfo.dts) continue;
                 // The distance between the end of the gop and the start of the nalUnit
                dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration; // Only consider GOPS that start before the nal unit and end within
                // a half-second of the nal unit
                if (dtsDistance >= -allowableOverlap && dtsDistance <= halfSecond) // Always use the closest GOP we found if there is more than
                // one candidate
                {
                    if (!nearestGopObj || nearestDistance > dtsDistance) {
                        nearestGopObj = currentGopObj;
                        nearestDistance = dtsDistance;
                    }
                }
            }
            if (nearestGopObj) return nearestGopObj.gop;
            return null;
        }; // trim gop list to the first gop found that has a matching pts with a gop in the list
        // of gopsToAlignWith starting from the START of the list
        this.alignGopsAtStart_ = function(gops) {
            var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration, alignedGops;
            byteLength = gops.byteLength;
            nalCount = gops.nalCount;
            duration = gops.duration;
            alignIndex = gopIndex = 0;
            while(alignIndex < gopsToAlignWith.length && gopIndex < gops.length){
                align = gopsToAlignWith[alignIndex];
                gop = gops[gopIndex];
                if (align.pts === gop.pts) break;
                if (gop.pts > align.pts) {
                    // this current gop starts after the current gop we want to align on, so increment
                    // align index
                    alignIndex++;
                    continue;
                } // current gop starts before the current gop we want to align on. so increment gop
                // index
                gopIndex++;
                byteLength -= gop.byteLength;
                nalCount -= gop.nalCount;
                duration -= gop.duration;
            }
            if (gopIndex === 0) // no gops to trim
            return gops;
            if (gopIndex === gops.length) // all gops trimmed, skip appending all gops
            return null;
            alignedGops = gops.slice(gopIndex);
            alignedGops.byteLength = byteLength;
            alignedGops.duration = duration;
            alignedGops.nalCount = nalCount;
            alignedGops.pts = alignedGops[0].pts;
            alignedGops.dts = alignedGops[0].dts;
            return alignedGops;
        }; // trim gop list to the first gop found that has a matching pts with a gop in the list
        // of gopsToAlignWith starting from the END of the list
        this.alignGopsAtEnd_ = function(gops) {
            var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;
            alignIndex = gopsToAlignWith.length - 1;
            gopIndex = gops.length - 1;
            alignEndIndex = null;
            matchFound = false;
            while(alignIndex >= 0 && gopIndex >= 0){
                align = gopsToAlignWith[alignIndex];
                gop = gops[gopIndex];
                if (align.pts === gop.pts) {
                    matchFound = true;
                    break;
                }
                if (align.pts > gop.pts) {
                    alignIndex--;
                    continue;
                }
                if (alignIndex === gopsToAlignWith.length - 1) // gop.pts is greater than the last alignment candidate. If no match is found
                // by the end of this loop, we still want to append gops that come after this
                // point
                alignEndIndex = gopIndex;
                gopIndex--;
            }
            if (!matchFound && alignEndIndex === null) return null;
            var trimIndex;
            if (matchFound) trimIndex = gopIndex;
            else trimIndex = alignEndIndex;
            if (trimIndex === 0) return gops;
            var alignedGops = gops.slice(trimIndex);
            var metadata = alignedGops.reduce(function(total, gop) {
                total.byteLength += gop.byteLength;
                total.duration += gop.duration;
                total.nalCount += gop.nalCount;
                return total;
            }, {
                byteLength: 0,
                duration: 0,
                nalCount: 0
            });
            alignedGops.byteLength = metadata.byteLength;
            alignedGops.duration = metadata.duration;
            alignedGops.nalCount = metadata.nalCount;
            alignedGops.pts = alignedGops[0].pts;
            alignedGops.dts = alignedGops[0].dts;
            return alignedGops;
        };
        this.alignGopsWith = function(newGopsToAlignWith) {
            gopsToAlignWith = newGopsToAlignWith;
        };
    };
    VideoSegmentStream.prototype = new Stream();
    /**
   * A Stream that can combine multiple streams (ie. audio & video)
   * into a single output segment for MSE. Also supports audio-only
   * and video-only streams.
   * @param options {object} transmuxer options object
   * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
   *        in the source; false to adjust the first segment to start at media timeline start.
   */ CoalesceStream = function(options, metadataStream) {
        // Number of Tracks per output segment
        // If greater than 1, we combine multiple
        // tracks into a single segment
        this.numberOfTracks = 0;
        this.metadataStream = metadataStream;
        options = options || {};
        if (typeof options.remux !== "undefined") this.remuxTracks = !!options.remux;
        else this.remuxTracks = true;
        if (typeof options.keepOriginalTimestamps === "boolean") this.keepOriginalTimestamps = options.keepOriginalTimestamps;
        else this.keepOriginalTimestamps = false;
        this.pendingTracks = [];
        this.videoTrack = null;
        this.pendingBoxes = [];
        this.pendingCaptions = [];
        this.pendingMetadata = [];
        this.pendingBytes = 0;
        this.emittedTracks = 0;
        CoalesceStream.prototype.init.call(this); // Take output from multiple
        this.push = function(output) {
            // buffer incoming captions until the associated video segment
            // finishes
            if (output.content || output.text) return this.pendingCaptions.push(output);
             // buffer incoming id3 tags until the final flush
            if (output.frames) return this.pendingMetadata.push(output);
             // Add this track to the list of pending tracks and store
            // important information required for the construction of
            // the final segment
            this.pendingTracks.push(output.track);
            this.pendingBytes += output.boxes.byteLength; // TODO: is there an issue for this against chrome?
            // We unshift audio and push video because
            // as of Chrome 75 when switching from
            // one init segment to another if the video
            // mdat does not appear after the audio mdat
            // only audio will play for the duration of our transmux.
            if (output.track.type === "video") {
                this.videoTrack = output.track;
                this.pendingBoxes.push(output.boxes);
            }
            if (output.track.type === "audio") {
                this.audioTrack = output.track;
                this.pendingBoxes.unshift(output.boxes);
            }
        };
    };
    CoalesceStream.prototype = new Stream();
    CoalesceStream.prototype.flush = function(flushSource) {
        var offset = 0, event = {
            captions: [],
            captionStreams: {},
            metadata: [],
            info: {}
        }, caption, id3, initSegment, timelineStartPts = 0, i;
        if (this.pendingTracks.length < this.numberOfTracks) {
            if (flushSource !== "VideoSegmentStream" && flushSource !== "AudioSegmentStream") // Return because we haven't received a flush from a data-generating
            // portion of the segment (meaning that we have only recieved meta-data
            // or captions.)
            return;
            else if (this.remuxTracks) // Return until we have enough tracks from the pipeline to remux (if we
            // are remuxing audio and video into a single MP4)
            return;
            else if (this.pendingTracks.length === 0) {
                // In the case where we receive a flush without any data having been
                // received we consider it an emitted track for the purposes of coalescing
                // `done` events.
                // We do this for the case where there is an audio and video track in the
                // segment but no audio data. (seen in several playlists with alternate
                // audio tracks and no audio present in the main TS segments.)
                this.emittedTracks++;
                if (this.emittedTracks >= this.numberOfTracks) {
                    this.trigger("done");
                    this.emittedTracks = 0;
                }
                return;
            }
        }
        if (this.videoTrack) {
            timelineStartPts = this.videoTrack.timelineStartInfo.pts;
            VIDEO_PROPERTIES.forEach(function(prop) {
                event.info[prop] = this.videoTrack[prop];
            }, this);
        } else if (this.audioTrack) {
            timelineStartPts = this.audioTrack.timelineStartInfo.pts;
            AUDIO_PROPERTIES.forEach(function(prop) {
                event.info[prop] = this.audioTrack[prop];
            }, this);
        }
        if (this.videoTrack || this.audioTrack) {
            if (this.pendingTracks.length === 1) event.type = this.pendingTracks[0].type;
            else event.type = "combined";
            this.emittedTracks += this.pendingTracks.length;
            initSegment = mp4.initSegment(this.pendingTracks); // Create a new typed array to hold the init segment
            event.initSegment = new Uint8Array(initSegment.byteLength); // Create an init segment containing a moov
            // and track definitions
            event.initSegment.set(initSegment); // Create a new typed array to hold the moof+mdats
            event.data = new Uint8Array(this.pendingBytes); // Append each moof+mdat (one per track) together
            for(i = 0; i < this.pendingBoxes.length; i++){
                event.data.set(this.pendingBoxes[i], offset);
                offset += this.pendingBoxes[i].byteLength;
            } // Translate caption PTS times into second offsets to match the
            // video timeline for the segment, and add track info
            for(i = 0; i < this.pendingCaptions.length; i++){
                caption = this.pendingCaptions[i];
                caption.startTime = clock.metadataTsToSeconds(caption.startPts, timelineStartPts, this.keepOriginalTimestamps);
                caption.endTime = clock.metadataTsToSeconds(caption.endPts, timelineStartPts, this.keepOriginalTimestamps);
                event.captionStreams[caption.stream] = true;
                event.captions.push(caption);
            } // Translate ID3 frame PTS times into second offsets to match the
            // video timeline for the segment
            for(i = 0; i < this.pendingMetadata.length; i++){
                id3 = this.pendingMetadata[i];
                id3.cueTime = clock.metadataTsToSeconds(id3.pts, timelineStartPts, this.keepOriginalTimestamps);
                event.metadata.push(id3);
            } // We add this to every single emitted segment even though we only need
            // it for the first
            event.metadata.dispatchType = this.metadataStream.dispatchType; // Reset stream state
            this.pendingTracks.length = 0;
            this.videoTrack = null;
            this.pendingBoxes.length = 0;
            this.pendingCaptions.length = 0;
            this.pendingBytes = 0;
            this.pendingMetadata.length = 0; // Emit the built segment
            // We include captions and ID3 tags for backwards compatibility,
            // ideally we should send only video and audio in the data event
            this.trigger("data", event); // Emit each caption to the outside world
            // Ideally, this would happen immediately on parsing captions,
            // but we need to ensure that video data is sent back first
            // so that caption timing can be adjusted to match video timing
            for(i = 0; i < event.captions.length; i++){
                caption = event.captions[i];
                this.trigger("caption", caption);
            } // Emit each id3 tag to the outside world
            // Ideally, this would happen immediately on parsing the tag,
            // but we need to ensure that video data is sent back first
            // so that ID3 frame timing can be adjusted to match video timing
            for(i = 0; i < event.metadata.length; i++){
                id3 = event.metadata[i];
                this.trigger("id3Frame", id3);
            }
        } // Only emit `done` if all tracks have been flushed and emitted
        if (this.emittedTracks >= this.numberOfTracks) {
            this.trigger("done");
            this.emittedTracks = 0;
        }
    };
    CoalesceStream.prototype.setRemux = function(val) {
        this.remuxTracks = val;
    };
    /**
   * A Stream that expects MP2T binary data as input and produces
   * corresponding media segments, suitable for use with Media Source
   * Extension (MSE) implementations that support the ISO BMFF byte
   * stream format, like Chrome.
   */ Transmuxer = function(options) {
        var self1 = this, hasFlushed = true, videoTrack, audioTrack;
        Transmuxer.prototype.init.call(this);
        options = options || {};
        this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;
        this.transmuxPipeline_ = {};
        this.setupAacPipeline = function() {
            var pipeline = {};
            this.transmuxPipeline_ = pipeline;
            pipeline.type = "aac";
            pipeline.metadataStream = new m2ts.MetadataStream(); // set up the parsing pipeline
            pipeline.aacStream = new AacStream();
            pipeline.audioTimestampRolloverStream = new m2ts.TimestampRolloverStream("audio");
            pipeline.timedMetadataTimestampRolloverStream = new m2ts.TimestampRolloverStream("timed-metadata");
            pipeline.adtsStream = new AdtsStream();
            pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);
            pipeline.headOfPipeline = pipeline.aacStream;
            pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);
            pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);
            pipeline.metadataStream.on("timestamp", function(frame) {
                pipeline.aacStream.setTimestamp(frame.timeStamp);
            });
            pipeline.aacStream.on("data", function(data) {
                if (data.type !== "timed-metadata" && data.type !== "audio" || pipeline.audioSegmentStream) return;
                audioTrack = audioTrack || {
                    timelineStartInfo: {
                        baseMediaDecodeTime: self1.baseMediaDecodeTime
                    },
                    codec: "adts",
                    type: "audio"
                }; // hook up the audio segment stream to the first track with aac data
                pipeline.coalesceStream.numberOfTracks++;
                pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);
                pipeline.audioSegmentStream.on("log", self1.getLogTrigger_("audioSegmentStream"));
                pipeline.audioSegmentStream.on("timingInfo", self1.trigger.bind(self1, "audioTimingInfo")); // Set up the final part of the audio pipeline
                pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream); // emit pmt info
                self1.trigger("trackinfo", {
                    hasAudio: !!audioTrack,
                    hasVideo: !!videoTrack
                });
            }); // Re-emit any data coming from the coalesce stream to the outside world
            pipeline.coalesceStream.on("data", this.trigger.bind(this, "data")); // Let the consumer know we have finished flushing the entire pipeline
            pipeline.coalesceStream.on("done", this.trigger.bind(this, "done"));
            addPipelineLogRetriggers(this, pipeline);
        };
        this.setupTsPipeline = function() {
            var pipeline = {};
            this.transmuxPipeline_ = pipeline;
            pipeline.type = "ts";
            pipeline.metadataStream = new m2ts.MetadataStream(); // set up the parsing pipeline
            pipeline.packetStream = new m2ts.TransportPacketStream();
            pipeline.parseStream = new m2ts.TransportParseStream();
            pipeline.elementaryStream = new m2ts.ElementaryStream();
            pipeline.timestampRolloverStream = new m2ts.TimestampRolloverStream();
            pipeline.adtsStream = new AdtsStream();
            pipeline.h264Stream = new H264Stream();
            pipeline.captionStream = new m2ts.CaptionStream(options);
            pipeline.coalesceStream = new CoalesceStream(options, pipeline.metadataStream);
            pipeline.headOfPipeline = pipeline.packetStream; // disassemble MPEG2-TS packets into elementary streams
            pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream).pipe(pipeline.timestampRolloverStream); // !!THIS ORDER IS IMPORTANT!!
            // demux the streams
            pipeline.timestampRolloverStream.pipe(pipeline.h264Stream);
            pipeline.timestampRolloverStream.pipe(pipeline.adtsStream);
            pipeline.timestampRolloverStream.pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream); // Hook up CEA-608/708 caption stream
            pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream);
            pipeline.elementaryStream.on("data", function(data) {
                var i;
                if (data.type === "metadata") {
                    i = data.tracks.length; // scan the tracks listed in the metadata
                    while(i--){
                        if (!videoTrack && data.tracks[i].type === "video") {
                            videoTrack = data.tracks[i];
                            videoTrack.timelineStartInfo.baseMediaDecodeTime = self1.baseMediaDecodeTime;
                        } else if (!audioTrack && data.tracks[i].type === "audio") {
                            audioTrack = data.tracks[i];
                            audioTrack.timelineStartInfo.baseMediaDecodeTime = self1.baseMediaDecodeTime;
                        }
                    } // hook up the video segment stream to the first track with h264 data
                    if (videoTrack && !pipeline.videoSegmentStream) {
                        pipeline.coalesceStream.numberOfTracks++;
                        pipeline.videoSegmentStream = new VideoSegmentStream(videoTrack, options);
                        pipeline.videoSegmentStream.on("log", self1.getLogTrigger_("videoSegmentStream"));
                        pipeline.videoSegmentStream.on("timelineStartInfo", function(timelineStartInfo) {
                            // When video emits timelineStartInfo data after a flush, we forward that
                            // info to the AudioSegmentStream, if it exists, because video timeline
                            // data takes precedence.  Do not do this if keepOriginalTimestamps is set,
                            // because this is a particularly subtle form of timestamp alteration.
                            if (audioTrack && !options.keepOriginalTimestamps) {
                                audioTrack.timelineStartInfo = timelineStartInfo; // On the first segment we trim AAC frames that exist before the
                                // very earliest DTS we have seen in video because Chrome will
                                // interpret any video track with a baseMediaDecodeTime that is
                                // non-zero as a gap.
                                pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts - self1.baseMediaDecodeTime);
                            }
                        });
                        pipeline.videoSegmentStream.on("processedGopsInfo", self1.trigger.bind(self1, "gopInfo"));
                        pipeline.videoSegmentStream.on("segmentTimingInfo", self1.trigger.bind(self1, "videoSegmentTimingInfo"));
                        pipeline.videoSegmentStream.on("baseMediaDecodeTime", function(baseMediaDecodeTime) {
                            if (audioTrack) pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);
                        });
                        pipeline.videoSegmentStream.on("timingInfo", self1.trigger.bind(self1, "videoTimingInfo")); // Set up the final part of the video pipeline
                        pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream);
                    }
                    if (audioTrack && !pipeline.audioSegmentStream) {
                        // hook up the audio segment stream to the first track with aac data
                        pipeline.coalesceStream.numberOfTracks++;
                        pipeline.audioSegmentStream = new AudioSegmentStream(audioTrack, options);
                        pipeline.audioSegmentStream.on("log", self1.getLogTrigger_("audioSegmentStream"));
                        pipeline.audioSegmentStream.on("timingInfo", self1.trigger.bind(self1, "audioTimingInfo"));
                        pipeline.audioSegmentStream.on("segmentTimingInfo", self1.trigger.bind(self1, "audioSegmentTimingInfo")); // Set up the final part of the audio pipeline
                        pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);
                    } // emit pmt info
                    self1.trigger("trackinfo", {
                        hasAudio: !!audioTrack,
                        hasVideo: !!videoTrack
                    });
                }
            }); // Re-emit any data coming from the coalesce stream to the outside world
            pipeline.coalesceStream.on("data", this.trigger.bind(this, "data"));
            pipeline.coalesceStream.on("id3Frame", function(id3Frame) {
                id3Frame.dispatchType = pipeline.metadataStream.dispatchType;
                self1.trigger("id3Frame", id3Frame);
            });
            pipeline.coalesceStream.on("caption", this.trigger.bind(this, "caption")); // Let the consumer know we have finished flushing the entire pipeline
            pipeline.coalesceStream.on("done", this.trigger.bind(this, "done"));
            addPipelineLogRetriggers(this, pipeline);
        }; // hook up the segment streams once track metadata is delivered
        this.setBaseMediaDecodeTime = function(baseMediaDecodeTime) {
            var pipeline = this.transmuxPipeline_;
            if (!options.keepOriginalTimestamps) this.baseMediaDecodeTime = baseMediaDecodeTime;
            if (audioTrack) {
                audioTrack.timelineStartInfo.dts = undefined;
                audioTrack.timelineStartInfo.pts = undefined;
                trackDecodeInfo.clearDtsInfo(audioTrack);
                if (pipeline.audioTimestampRolloverStream) pipeline.audioTimestampRolloverStream.discontinuity();
            }
            if (videoTrack) {
                if (pipeline.videoSegmentStream) pipeline.videoSegmentStream.gopCache_ = [];
                videoTrack.timelineStartInfo.dts = undefined;
                videoTrack.timelineStartInfo.pts = undefined;
                trackDecodeInfo.clearDtsInfo(videoTrack);
                pipeline.captionStream.reset();
            }
            if (pipeline.timestampRolloverStream) pipeline.timestampRolloverStream.discontinuity();
        };
        this.setAudioAppendStart = function(timestamp) {
            if (audioTrack) this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);
        };
        this.setRemux = function(val) {
            var pipeline = this.transmuxPipeline_;
            options.remux = val;
            if (pipeline && pipeline.coalesceStream) pipeline.coalesceStream.setRemux(val);
        };
        this.alignGopsWith = function(gopsToAlignWith) {
            if (videoTrack && this.transmuxPipeline_.videoSegmentStream) this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);
        };
        this.getLogTrigger_ = function(key) {
            var self1 = this;
            return function(event) {
                event.stream = key;
                self1.trigger("log", event);
            };
        }; // feed incoming data to the front of the parsing pipeline
        this.push = function(data) {
            if (hasFlushed) {
                var isAac = isLikelyAacData(data);
                if (isAac && this.transmuxPipeline_.type !== "aac") this.setupAacPipeline();
                else if (!isAac && this.transmuxPipeline_.type !== "ts") this.setupTsPipeline();
                hasFlushed = false;
            }
            this.transmuxPipeline_.headOfPipeline.push(data);
        }; // flush any buffered data
        this.flush = function() {
            hasFlushed = true; // Start at the top of the pipeline and flush all pending work
            this.transmuxPipeline_.headOfPipeline.flush();
        };
        this.endTimeline = function() {
            this.transmuxPipeline_.headOfPipeline.endTimeline();
        };
        this.reset = function() {
            if (this.transmuxPipeline_.headOfPipeline) this.transmuxPipeline_.headOfPipeline.reset();
        }; // Caption data has to be reset when seeking outside buffered range
        this.resetCaptions = function() {
            if (this.transmuxPipeline_.captionStream) this.transmuxPipeline_.captionStream.reset();
        };
    };
    Transmuxer.prototype = new Stream();
    var transmuxer = {
        Transmuxer: Transmuxer,
        VideoSegmentStream: VideoSegmentStream,
        AudioSegmentStream: AudioSegmentStream,
        AUDIO_PROPERTIES: AUDIO_PROPERTIES,
        VIDEO_PROPERTIES: VIDEO_PROPERTIES,
        // exported for testing
        generateSegmentTimingInfo: generateSegmentTimingInfo
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   */ var toUnsigned$3 = function(value) {
        return value >>> 0;
    };
    var toHexString$1 = function(value) {
        return ("00" + value.toString(16)).slice(-2);
    };
    var bin = {
        toUnsigned: toUnsigned$3,
        toHexString: toHexString$1
    };
    var parseType$3 = function(buffer) {
        var result = "";
        result += String.fromCharCode(buffer[0]);
        result += String.fromCharCode(buffer[1]);
        result += String.fromCharCode(buffer[2]);
        result += String.fromCharCode(buffer[3]);
        return result;
    };
    var parseType_1 = parseType$3;
    var toUnsigned$2 = bin.toUnsigned;
    var parseType$2 = parseType_1;
    var findBox$2 = function(data, path) {
        var results = [], i, size, type, end, subresults;
        if (!path.length) // short-circuit the search for empty paths
        return null;
        for(i = 0; i < data.byteLength;){
            size = toUnsigned$2(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);
            type = parseType$2(data.subarray(i + 4, i + 8));
            end = size > 1 ? i + size : data.byteLength;
            if (type === path[0]) {
                if (path.length === 1) // this is the end of the path and we've found the box we were
                // looking for
                results.push(data.subarray(i + 8, end));
                else {
                    // recursively search for the next box along the path
                    subresults = findBox$2(data.subarray(i + 8, end), path.slice(1));
                    if (subresults.length) results = results.concat(subresults);
                }
            }
            i = end;
        } // we've finished searching all of data
        return results;
    };
    var findBox_1 = findBox$2;
    var toUnsigned$1 = bin.toUnsigned;
    var getUint64$2 = numbers.getUint64;
    var tfdt = function(data) {
        var result = {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4))
        };
        if (result.version === 1) result.baseMediaDecodeTime = getUint64$2(data.subarray(4));
        else result.baseMediaDecodeTime = toUnsigned$1(data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7]);
        return result;
    };
    var parseTfdt$2 = tfdt;
    var parseSampleFlags$1 = function(flags) {
        return {
            isLeading: (flags[0] & 0x0c) >>> 2,
            dependsOn: flags[0] & 0x03,
            isDependedOn: (flags[1] & 0xc0) >>> 6,
            hasRedundancy: (flags[1] & 0x30) >>> 4,
            paddingValue: (flags[1] & 0x0e) >>> 1,
            isNonSyncSample: flags[1] & 0x01,
            degradationPriority: flags[2] << 8 | flags[3]
        };
    };
    var parseSampleFlags_1 = parseSampleFlags$1;
    var parseSampleFlags = parseSampleFlags_1;
    var trun = function(data) {
        var result = {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4)),
            samples: []
        }, view = new DataView(data.buffer, data.byteOffset, data.byteLength), // Flag interpretation
        dataOffsetPresent = result.flags[2] & 0x01, // compare with 2nd byte of 0x1
        firstSampleFlagsPresent = result.flags[2] & 0x04, // compare with 2nd byte of 0x4
        sampleDurationPresent = result.flags[1] & 0x01, // compare with 2nd byte of 0x100
        sampleSizePresent = result.flags[1] & 0x02, // compare with 2nd byte of 0x200
        sampleFlagsPresent = result.flags[1] & 0x04, // compare with 2nd byte of 0x400
        sampleCompositionTimeOffsetPresent = result.flags[1] & 0x08, // compare with 2nd byte of 0x800
        sampleCount = view.getUint32(4), offset = 8, sample;
        if (dataOffsetPresent) {
            // 32 bit signed integer
            result.dataOffset = view.getInt32(offset);
            offset += 4;
        } // Overrides the flags for the first sample only. The order of
        // optional values will be: duration, size, compositionTimeOffset
        if (firstSampleFlagsPresent && sampleCount) {
            sample = {
                flags: parseSampleFlags(data.subarray(offset, offset + 4))
            };
            offset += 4;
            if (sampleDurationPresent) {
                sample.duration = view.getUint32(offset);
                offset += 4;
            }
            if (sampleSizePresent) {
                sample.size = view.getUint32(offset);
                offset += 4;
            }
            if (sampleCompositionTimeOffsetPresent) {
                if (result.version === 1) sample.compositionTimeOffset = view.getInt32(offset);
                else sample.compositionTimeOffset = view.getUint32(offset);
                offset += 4;
            }
            result.samples.push(sample);
            sampleCount--;
        }
        while(sampleCount--){
            sample = {};
            if (sampleDurationPresent) {
                sample.duration = view.getUint32(offset);
                offset += 4;
            }
            if (sampleSizePresent) {
                sample.size = view.getUint32(offset);
                offset += 4;
            }
            if (sampleFlagsPresent) {
                sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));
                offset += 4;
            }
            if (sampleCompositionTimeOffsetPresent) {
                if (result.version === 1) sample.compositionTimeOffset = view.getInt32(offset);
                else sample.compositionTimeOffset = view.getUint32(offset);
                offset += 4;
            }
            result.samples.push(sample);
        }
        return result;
    };
    var parseTrun$2 = trun;
    var tfhd = function(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
            version: data[0],
            flags: new Uint8Array(data.subarray(1, 4)),
            trackId: view.getUint32(4)
        }, baseDataOffsetPresent = result.flags[2] & 0x01, sampleDescriptionIndexPresent = result.flags[2] & 0x02, defaultSampleDurationPresent = result.flags[2] & 0x08, defaultSampleSizePresent = result.flags[2] & 0x10, defaultSampleFlagsPresent = result.flags[2] & 0x20, durationIsEmpty = result.flags[0] & 0x010000, defaultBaseIsMoof = result.flags[0] & 0x020000, i;
        i = 8;
        if (baseDataOffsetPresent) {
            i += 4; // truncate top 4 bytes
            // FIXME: should we read the full 64 bits?
            result.baseDataOffset = view.getUint32(12);
            i += 4;
        }
        if (sampleDescriptionIndexPresent) {
            result.sampleDescriptionIndex = view.getUint32(i);
            i += 4;
        }
        if (defaultSampleDurationPresent) {
            result.defaultSampleDuration = view.getUint32(i);
            i += 4;
        }
        if (defaultSampleSizePresent) {
            result.defaultSampleSize = view.getUint32(i);
            i += 4;
        }
        if (defaultSampleFlagsPresent) result.defaultSampleFlags = view.getUint32(i);
        if (durationIsEmpty) result.durationIsEmpty = true;
        if (!baseDataOffsetPresent && defaultBaseIsMoof) result.baseDataOffsetIsMoof = true;
        return result;
    };
    var parseTfhd$2 = tfhd;
    var win;
    if (typeof window !== "undefined") win = window;
    else if (typeof commonjsGlobal !== "undefined") win = commonjsGlobal;
    else if (typeof self !== "undefined") win = self;
    else win = {};
    var window_1 = win;
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * Reads in-band CEA-708 captions out of FMP4 segments.
   * @see https://en.wikipedia.org/wiki/CEA-708
   */ var discardEmulationPreventionBytes = captionPacketParser.discardEmulationPreventionBytes;
    var CaptionStream = captionStream.CaptionStream;
    var findBox$1 = findBox_1;
    var parseTfdt$1 = parseTfdt$2;
    var parseTrun$1 = parseTrun$2;
    var parseTfhd$1 = parseTfhd$2;
    var window$2 = window_1;
    /**
    * Maps an offset in the mdat to a sample based on the the size of the samples.
    * Assumes that `parseSamples` has been called first.
    *
    * @param {Number} offset - The offset into the mdat
    * @param {Object[]} samples - An array of samples, parsed using `parseSamples`
    * @return {?Object} The matching sample, or null if no match was found.
    *
    * @see ISO-BMFF-12/2015, Section 8.8.8
   **/ var mapToSample = function(offset, samples) {
        var approximateOffset = offset;
        for(var i = 0; i < samples.length; i++){
            var sample = samples[i];
            if (approximateOffset < sample.size) return sample;
            approximateOffset -= sample.size;
        }
        return null;
    };
    /**
    * Finds SEI nal units contained in a Media Data Box.
    * Assumes that `parseSamples` has been called first.
    *
    * @param {Uint8Array} avcStream - The bytes of the mdat
    * @param {Object[]} samples - The samples parsed out by `parseSamples`
    * @param {Number} trackId - The trackId of this video track
    * @return {Object[]} seiNals - the parsed SEI NALUs found.
    *   The contents of the seiNal should match what is expected by
    *   CaptionStream.push (nalUnitType, size, data, escapedRBSP, pts, dts)
    *
    * @see ISO-BMFF-12/2015, Section 8.1.1
    * @see Rec. ITU-T H.264, 7.3.2.3.1
   **/ var findSeiNals = function(avcStream, samples, trackId) {
        var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength), result = {
            logs: [],
            seiNals: []
        }, seiNal, i, length, lastMatchedSample;
        for(i = 0; i + 4 < avcStream.length; i += length){
            length = avcView.getUint32(i);
            i += 4; // Bail if this doesn't appear to be an H264 stream
            if (length <= 0) continue;
            switch(avcStream[i] & 0x1F){
                case 0x06:
                    var data = avcStream.subarray(i + 1, i + 1 + length);
                    var matchingSample = mapToSample(i, samples);
                    seiNal = {
                        nalUnitType: "sei_rbsp",
                        size: length,
                        data: data,
                        escapedRBSP: discardEmulationPreventionBytes(data),
                        trackId: trackId
                    };
                    if (matchingSample) {
                        seiNal.pts = matchingSample.pts;
                        seiNal.dts = matchingSample.dts;
                        lastMatchedSample = matchingSample;
                    } else if (lastMatchedSample) {
                        // If a matching sample cannot be found, use the last
                        // sample's values as they should be as close as possible
                        seiNal.pts = lastMatchedSample.pts;
                        seiNal.dts = lastMatchedSample.dts;
                    } else {
                        result.logs.push({
                            level: "warn",
                            message: "We've encountered a nal unit without data at " + i + " for trackId " + trackId + ". See mux.js#223."
                        });
                        break;
                    }
                    result.seiNals.push(seiNal);
                    break;
            }
        }
        return result;
    };
    /**
    * Parses sample information out of Track Run Boxes and calculates
    * the absolute presentation and decode timestamps of each sample.
    *
    * @param {Array<Uint8Array>} truns - The Trun Run boxes to be parsed
    * @param {Number|BigInt} baseMediaDecodeTime - base media decode time from tfdt
        @see ISO-BMFF-12/2015, Section 8.8.12
    * @param {Object} tfhd - The parsed Track Fragment Header
    *   @see inspect.parseTfhd
    * @return {Object[]} the parsed samples
    *
    * @see ISO-BMFF-12/2015, Section 8.8.8
   **/ var parseSamples = function(truns, baseMediaDecodeTime, tfhd) {
        var currentDts = baseMediaDecodeTime;
        var defaultSampleDuration = tfhd.defaultSampleDuration || 0;
        var defaultSampleSize = tfhd.defaultSampleSize || 0;
        var trackId = tfhd.trackId;
        var allSamples = [];
        truns.forEach(function(trun) {
            // Note: We currently do not parse the sample table as well
            // as the trun. It's possible some sources will require this.
            // moov > trak > mdia > minf > stbl
            var trackRun = parseTrun$1(trun);
            var samples = trackRun.samples;
            samples.forEach(function(sample) {
                if (sample.duration === undefined) sample.duration = defaultSampleDuration;
                if (sample.size === undefined) sample.size = defaultSampleSize;
                sample.trackId = trackId;
                sample.dts = currentDts;
                if (sample.compositionTimeOffset === undefined) sample.compositionTimeOffset = 0;
                if (typeof currentDts === "bigint") {
                    sample.pts = currentDts + window$2.BigInt(sample.compositionTimeOffset);
                    currentDts += window$2.BigInt(sample.duration);
                } else {
                    sample.pts = currentDts + sample.compositionTimeOffset;
                    currentDts += sample.duration;
                }
            });
            allSamples = allSamples.concat(samples);
        });
        return allSamples;
    };
    /**
    * Parses out caption nals from an FMP4 segment's video tracks.
    *
    * @param {Uint8Array} segment - The bytes of a single segment
    * @param {Number} videoTrackId - The trackId of a video track in the segment
    * @return {Object.<Number, Object[]>} A mapping of video trackId to
    *   a list of seiNals found in that track
   **/ var parseCaptionNals = function(segment, videoTrackId) {
        // To get the samples
        var trafs = findBox$1(segment, [
            "moof",
            "traf"
        ]); // To get SEI NAL units
        var mdats = findBox$1(segment, [
            "mdat"
        ]);
        var captionNals = {};
        var mdatTrafPairs = []; // Pair up each traf with a mdat as moofs and mdats are in pairs
        mdats.forEach(function(mdat, index) {
            var matchingTraf = trafs[index];
            mdatTrafPairs.push({
                mdat: mdat,
                traf: matchingTraf
            });
        });
        mdatTrafPairs.forEach(function(pair) {
            var mdat = pair.mdat;
            var traf = pair.traf;
            var tfhd = findBox$1(traf, [
                "tfhd"
            ]); // Exactly 1 tfhd per traf
            var headerInfo = parseTfhd$1(tfhd[0]);
            var trackId = headerInfo.trackId;
            var tfdt = findBox$1(traf, [
                "tfdt"
            ]); // Either 0 or 1 tfdt per traf
            var baseMediaDecodeTime = tfdt.length > 0 ? parseTfdt$1(tfdt[0]).baseMediaDecodeTime : 0;
            var truns = findBox$1(traf, [
                "trun"
            ]);
            var samples;
            var result; // Only parse video data for the chosen video track
            if (videoTrackId === trackId && truns.length > 0) {
                samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);
                result = findSeiNals(mdat, samples, trackId);
                if (!captionNals[trackId]) captionNals[trackId] = {
                    seiNals: [],
                    logs: []
                };
                captionNals[trackId].seiNals = captionNals[trackId].seiNals.concat(result.seiNals);
                captionNals[trackId].logs = captionNals[trackId].logs.concat(result.logs);
            }
        });
        return captionNals;
    };
    /**
    * Parses out inband captions from an MP4 container and returns
    * caption objects that can be used by WebVTT and the TextTrack API.
    * @see https://developer.mozilla.org/en-US/docs/Web/API/VTTCue
    * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack
    * Assumes that `probe.getVideoTrackIds` and `probe.timescale` have been called first
    *
    * @param {Uint8Array} segment - The fmp4 segment containing embedded captions
    * @param {Number} trackId - The id of the video track to parse
    * @param {Number} timescale - The timescale for the video track from the init segment
    *
    * @return {?Object[]} parsedCaptions - A list of captions or null if no video tracks
    * @return {Number} parsedCaptions[].startTime - The time to show the caption in seconds
    * @return {Number} parsedCaptions[].endTime - The time to stop showing the caption in seconds
    * @return {Object[]} parsedCaptions[].content - A list of individual caption segments
    * @return {String} parsedCaptions[].content.text - The visible content of the caption segment
    * @return {Number} parsedCaptions[].content.line - The line height from 1-15 for positioning of the caption segment
    * @return {Number} parsedCaptions[].content.position - The column indent percentage for cue positioning from 10-80
   **/ var parseEmbeddedCaptions = function(segment, trackId, timescale) {
        var captionNals; // the ISO-BMFF spec says that trackId can't be zero, but there's some broken content out there
        if (trackId === null) return null;
        captionNals = parseCaptionNals(segment, trackId);
        var trackNals = captionNals[trackId] || {};
        return {
            seiNals: trackNals.seiNals,
            logs: trackNals.logs,
            timescale: timescale
        };
    };
    /**
    * Converts SEI NALUs into captions that can be used by video.js
   **/ var CaptionParser = function() {
        var isInitialized = false;
        var captionStream; // Stores segments seen before trackId and timescale are set
        var segmentCache; // Stores video track ID of the track being parsed
        var trackId; // Stores the timescale of the track being parsed
        var timescale; // Stores captions parsed so far
        var parsedCaptions; // Stores whether we are receiving partial data or not
        var parsingPartial;
        /**
      * A method to indicate whether a CaptionParser has been initalized
      * @returns {Boolean}
     **/ this.isInitialized = function() {
            return isInitialized;
        };
        /**
      * Initializes the underlying CaptionStream, SEI NAL parsing
      * and management, and caption collection
     **/ this.init = function(options) {
            captionStream = new CaptionStream();
            isInitialized = true;
            parsingPartial = options ? options.isPartial : false; // Collect dispatched captions
            captionStream.on("data", function(event) {
                // Convert to seconds in the source's timescale
                event.startTime = event.startPts / timescale;
                event.endTime = event.endPts / timescale;
                parsedCaptions.captions.push(event);
                parsedCaptions.captionStreams[event.stream] = true;
            });
            captionStream.on("log", function(log) {
                parsedCaptions.logs.push(log);
            });
        };
        /**
      * Determines if a new video track will be selected
      * or if the timescale changed
      * @return {Boolean}
     **/ this.isNewInit = function(videoTrackIds, timescales) {
            if (videoTrackIds && videoTrackIds.length === 0 || timescales && typeof timescales === "object" && Object.keys(timescales).length === 0) return false;
            return trackId !== videoTrackIds[0] || timescale !== timescales[trackId];
        };
        /**
      * Parses out SEI captions and interacts with underlying
      * CaptionStream to return dispatched captions
      *
      * @param {Uint8Array} segment - The fmp4 segment containing embedded captions
      * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment
      * @param {Object.<Number, Number>} timescales - The timescales found in the init segment
      * @see parseEmbeddedCaptions
      * @see m2ts/caption-stream.js
     **/ this.parse = function(segment, videoTrackIds, timescales) {
            var parsedData;
            if (!this.isInitialized()) return null; // This is not likely to be a video segment
            else if (!videoTrackIds || !timescales) return null;
            else if (this.isNewInit(videoTrackIds, timescales)) {
                // Use the first video track only as there is no
                // mechanism to switch to other video tracks
                trackId = videoTrackIds[0];
                timescale = timescales[trackId]; // If an init segment has not been seen yet, hold onto segment
            // data until we have one.
            // the ISO-BMFF spec says that trackId can't be zero, but there's some broken content out there
            } else if (trackId === null || !timescale) {
                segmentCache.push(segment);
                return null;
            } // Now that a timescale and trackId is set, parse cached segments
            while(segmentCache.length > 0){
                var cachedSegment = segmentCache.shift();
                this.parse(cachedSegment, videoTrackIds, timescales);
            }
            parsedData = parseEmbeddedCaptions(segment, trackId, timescale);
            if (parsedData && parsedData.logs) parsedCaptions.logs = parsedCaptions.logs.concat(parsedData.logs);
            if (parsedData === null || !parsedData.seiNals) {
                if (parsedCaptions.logs.length) return {
                    logs: parsedCaptions.logs,
                    captions: [],
                    captionStreams: []
                };
                return null;
            }
            this.pushNals(parsedData.seiNals); // Force the parsed captions to be dispatched
            this.flushStream();
            return parsedCaptions;
        };
        /**
      * Pushes SEI NALUs onto CaptionStream
      * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`
      * Assumes that `parseCaptionNals` has been called first
      * @see m2ts/caption-stream.js
      **/ this.pushNals = function(nals) {
            if (!this.isInitialized() || !nals || nals.length === 0) return null;
            nals.forEach(function(nal) {
                captionStream.push(nal);
            });
        };
        /**
      * Flushes underlying CaptionStream to dispatch processed, displayable captions
      * @see m2ts/caption-stream.js
     **/ this.flushStream = function() {
            if (!this.isInitialized()) return null;
            if (!parsingPartial) captionStream.flush();
            else captionStream.partialFlush();
        };
        /**
      * Reset caption buckets for new data
     **/ this.clearParsedCaptions = function() {
            parsedCaptions.captions = [];
            parsedCaptions.captionStreams = {};
            parsedCaptions.logs = [];
        };
        /**
      * Resets underlying CaptionStream
      * @see m2ts/caption-stream.js
     **/ this.resetCaptionStream = function() {
            if (!this.isInitialized()) return null;
            captionStream.reset();
        };
        /**
      * Convenience method to clear all captions flushed from the
      * CaptionStream and still being parsed
      * @see m2ts/caption-stream.js
     **/ this.clearAllCaptions = function() {
            this.clearParsedCaptions();
            this.resetCaptionStream();
        };
        /**
      * Reset caption parser
     **/ this.reset = function() {
            segmentCache = [];
            trackId = null;
            timescale = null;
            if (!parsedCaptions) parsedCaptions = {
                captions: [],
                // CC1, CC2, CC3, CC4
                captionStreams: {},
                logs: []
            };
            else this.clearParsedCaptions();
            this.resetCaptionStream();
        };
        this.reset();
    };
    var captionParser = CaptionParser;
    /**
   * Returns the first string in the data array ending with a null char '\0'
   * @param {UInt8} data 
   * @returns the string with the null char
   */ var uint8ToCString$1 = function(data) {
        var index = 0;
        var curChar = String.fromCharCode(data[index]);
        var retString = "";
        while(curChar !== "\x00"){
            retString += curChar;
            index++;
            curChar = String.fromCharCode(data[index]);
        } // Add nullChar
        retString += curChar;
        return retString;
    };
    var string = {
        uint8ToCString: uint8ToCString$1
    };
    var uint8ToCString = string.uint8ToCString;
    var getUint64$1 = numbers.getUint64;
    /**
   * Based on: ISO/IEC 23009 Section: 5.10.3.3
   * References:
   * https://dashif-documents.azurewebsites.net/Events/master/event.html#emsg-format
   * https://aomediacodec.github.io/id3-emsg/
   * 
   * Takes emsg box data as a uint8 array and returns a emsg box object
   * @param {UInt8Array} boxData data from emsg box
   * @returns A parsed emsg box object
   */ var parseEmsgBox = function(boxData) {
        // version + flags
        var offset = 4;
        var version = boxData[0];
        var scheme_id_uri, value, timescale, presentation_time, presentation_time_delta, event_duration, id, message_data;
        if (version === 0) {
            scheme_id_uri = uint8ToCString(boxData.subarray(offset));
            offset += scheme_id_uri.length;
            value = uint8ToCString(boxData.subarray(offset));
            offset += value.length;
            var dv = new DataView(boxData.buffer);
            timescale = dv.getUint32(offset);
            offset += 4;
            presentation_time_delta = dv.getUint32(offset);
            offset += 4;
            event_duration = dv.getUint32(offset);
            offset += 4;
            id = dv.getUint32(offset);
            offset += 4;
        } else if (version === 1) {
            var dv = new DataView(boxData.buffer);
            timescale = dv.getUint32(offset);
            offset += 4;
            presentation_time = getUint64$1(boxData.subarray(offset));
            offset += 8;
            event_duration = dv.getUint32(offset);
            offset += 4;
            id = dv.getUint32(offset);
            offset += 4;
            scheme_id_uri = uint8ToCString(boxData.subarray(offset));
            offset += scheme_id_uri.length;
            value = uint8ToCString(boxData.subarray(offset));
            offset += value.length;
        }
        message_data = new Uint8Array(boxData.subarray(offset, boxData.byteLength));
        var emsgBox = {
            scheme_id_uri: scheme_id_uri,
            value: value,
            // if timescale is undefined or 0 set to 1 
            timescale: timescale ? timescale : 1,
            presentation_time: presentation_time,
            presentation_time_delta: presentation_time_delta,
            event_duration: event_duration,
            id: id,
            message_data: message_data
        };
        return isValidEmsgBox(version, emsgBox) ? emsgBox : undefined;
    };
    /**
   * Scales a presentation time or time delta with an offset with a provided timescale
   * @param {number} presentationTime 
   * @param {number} timescale 
   * @param {number} timeDelta 
   * @param {number} offset 
   * @returns the scaled time as a number
   */ var scaleTime = function(presentationTime, timescale, timeDelta, offset) {
        return presentationTime || presentationTime === 0 ? presentationTime / timescale : offset + timeDelta / timescale;
    };
    /**
   * Checks the emsg box data for validity based on the version
   * @param {number} version of the emsg box to validate
   * @param {Object} emsg the emsg data to validate
   * @returns if the box is valid as a boolean
   */ var isValidEmsgBox = function(version, emsg) {
        var hasScheme = emsg.scheme_id_uri !== "\x00";
        var isValidV0Box = version === 0 && isDefined(emsg.presentation_time_delta) && hasScheme;
        var isValidV1Box = version === 1 && isDefined(emsg.presentation_time) && hasScheme; // Only valid versions of emsg are 0 and 1
        return !(version > 1) && isValidV0Box || isValidV1Box;
    }; // Utility function to check if an object is defined
    var isDefined = function(data) {
        return data !== undefined || data !== null;
    };
    var emsg$1 = {
        parseEmsgBox: parseEmsgBox,
        scaleTime: scaleTime
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * Utilities to detect basic properties and metadata about MP4s.
   */ var toUnsigned = bin.toUnsigned;
    var toHexString = bin.toHexString;
    var findBox = findBox_1;
    var parseType$1 = parseType_1;
    var emsg = emsg$1;
    var parseTfhd = parseTfhd$2;
    var parseTrun = parseTrun$2;
    var parseTfdt = parseTfdt$2;
    var getUint64 = numbers.getUint64;
    var timescale, startTime, compositionStartTime, getVideoTrackIds, getTracks, getTimescaleFromMediaHeader, getEmsgID3;
    var window$1 = window_1;
    var parseId3Frames = parseId3.parseId3Frames;
    /**
   * Parses an MP4 initialization segment and extracts the timescale
   * values for any declared tracks. Timescale values indicate the
   * number of clock ticks per second to assume for time-based values
   * elsewhere in the MP4.
   *
   * To determine the start time of an MP4, you need two pieces of
   * information: the timescale unit and the earliest base media decode
   * time. Multiple timescales can be specified within an MP4 but the
   * base media decode time is always expressed in the timescale from
   * the media header box for the track:
   * ```
   * moov > trak > mdia > mdhd.timescale
   * ```
   * @param init {Uint8Array} the bytes of the init segment
   * @return {object} a hash of track ids to timescale values or null if
   * the init segment is malformed.
   */ timescale = function(init) {
        var result = {}, traks = findBox(init, [
            "moov",
            "trak"
        ]); // mdhd timescale
        return traks.reduce(function(result, trak) {
            var tkhd, version, index, id, mdhd;
            tkhd = findBox(trak, [
                "tkhd"
            ])[0];
            if (!tkhd) return null;
            version = tkhd[0];
            index = version === 0 ? 12 : 20;
            id = toUnsigned(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);
            mdhd = findBox(trak, [
                "mdia",
                "mdhd"
            ])[0];
            if (!mdhd) return null;
            version = mdhd[0];
            index = version === 0 ? 12 : 20;
            result[id] = toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);
            return result;
        }, result);
    };
    /**
   * Determine the base media decode start time, in seconds, for an MP4
   * fragment. If multiple fragments are specified, the earliest time is
   * returned.
   *
   * The base media decode time can be parsed from track fragment
   * metadata:
   * ```
   * moof > traf > tfdt.baseMediaDecodeTime
   * ```
   * It requires the timescale value from the mdhd to interpret.
   *
   * @param timescale {object} a hash of track ids to timescale values.
   * @return {number} the earliest base media decode start time for the
   * fragment, in seconds
   */ startTime = function(timescale, fragment) {
        var trafs; // we need info from two childrend of each track fragment box
        trafs = findBox(fragment, [
            "moof",
            "traf"
        ]); // determine the start times for each track
        var lowestTime = trafs.reduce(function(acc, traf) {
            var tfhd = findBox(traf, [
                "tfhd"
            ])[0]; // get the track id from the tfhd
            var id = toUnsigned(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]); // assume a 90kHz clock if no timescale was specified
            var scale = timescale[id] || 90e3; // get the base media decode time from the tfdt
            var tfdt = findBox(traf, [
                "tfdt"
            ])[0];
            var dv = new DataView(tfdt.buffer, tfdt.byteOffset, tfdt.byteLength);
            var baseTime; // version 1 is 64 bit
            if (tfdt[0] === 1) baseTime = getUint64(tfdt.subarray(4, 12));
            else baseTime = dv.getUint32(4);
             // convert base time to seconds if it is a valid number.
            let seconds;
            if (typeof baseTime === "bigint") seconds = baseTime / window$1.BigInt(scale);
            else if (typeof baseTime === "number" && !isNaN(baseTime)) seconds = baseTime / scale;
            if (seconds < Number.MAX_SAFE_INTEGER) seconds = Number(seconds);
            if (seconds < acc) acc = seconds;
            return acc;
        }, Infinity);
        return typeof lowestTime === "bigint" || isFinite(lowestTime) ? lowestTime : 0;
    };
    /**
   * Determine the composition start, in seconds, for an MP4
   * fragment.
   *
   * The composition start time of a fragment can be calculated using the base
   * media decode time, composition time offset, and timescale, as follows:
   *
   * compositionStartTime = (baseMediaDecodeTime + compositionTimeOffset) / timescale
   *
   * All of the aforementioned information is contained within a media fragment's
   * `traf` box, except for timescale info, which comes from the initialization
   * segment, so a track id (also contained within a `traf`) is also necessary to
   * associate it with a timescale
   *
   *
   * @param timescales {object} - a hash of track ids to timescale values.
   * @param fragment {Unit8Array} - the bytes of a media segment
   * @return {number} the composition start time for the fragment, in seconds
   **/ compositionStartTime = function(timescales, fragment) {
        var trafBoxes = findBox(fragment, [
            "moof",
            "traf"
        ]);
        var baseMediaDecodeTime = 0;
        var compositionTimeOffset = 0;
        var trackId;
        if (trafBoxes && trafBoxes.length) {
            // The spec states that track run samples contained within a `traf` box are contiguous, but
            // it does not explicitly state whether the `traf` boxes themselves are contiguous.
            // We will assume that they are, so we only need the first to calculate start time.
            var tfhd = findBox(trafBoxes[0], [
                "tfhd"
            ])[0];
            var trun = findBox(trafBoxes[0], [
                "trun"
            ])[0];
            var tfdt = findBox(trafBoxes[0], [
                "tfdt"
            ])[0];
            if (tfhd) {
                var parsedTfhd = parseTfhd(tfhd);
                trackId = parsedTfhd.trackId;
            }
            if (tfdt) {
                var parsedTfdt = parseTfdt(tfdt);
                baseMediaDecodeTime = parsedTfdt.baseMediaDecodeTime;
            }
            if (trun) {
                var parsedTrun = parseTrun(trun);
                if (parsedTrun.samples && parsedTrun.samples.length) compositionTimeOffset = parsedTrun.samples[0].compositionTimeOffset || 0;
            }
        } // Get timescale for this specific track. Assume a 90kHz clock if no timescale was
        // specified.
        var timescale = timescales[trackId] || 90e3; // return the composition start time, in seconds
        if (typeof baseMediaDecodeTime === "bigint") {
            compositionTimeOffset = window$1.BigInt(compositionTimeOffset);
            timescale = window$1.BigInt(timescale);
        }
        var result = (baseMediaDecodeTime + compositionTimeOffset) / timescale;
        if (typeof result === "bigint" && result < Number.MAX_SAFE_INTEGER) result = Number(result);
        return result;
    };
    /**
    * Find the trackIds of the video tracks in this source.
    * Found by parsing the Handler Reference and Track Header Boxes:
    *   moov > trak > mdia > hdlr
    *   moov > trak > tkhd
    *
    * @param {Uint8Array} init - The bytes of the init segment for this source
    * @return {Number[]} A list of trackIds
    *
    * @see ISO-BMFF-12/2015, Section 8.4.3
   **/ getVideoTrackIds = function(init) {
        var traks = findBox(init, [
            "moov",
            "trak"
        ]);
        var videoTrackIds = [];
        traks.forEach(function(trak) {
            var hdlrs = findBox(trak, [
                "mdia",
                "hdlr"
            ]);
            var tkhds = findBox(trak, [
                "tkhd"
            ]);
            hdlrs.forEach(function(hdlr, index) {
                var handlerType = parseType$1(hdlr.subarray(8, 12));
                var tkhd = tkhds[index];
                var view;
                var version;
                var trackId;
                if (handlerType === "vide") {
                    view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);
                    version = view.getUint8(0);
                    trackId = version === 0 ? view.getUint32(12) : view.getUint32(20);
                    videoTrackIds.push(trackId);
                }
            });
        });
        return videoTrackIds;
    };
    getTimescaleFromMediaHeader = function(mdhd) {
        // mdhd is a FullBox, meaning it will have its own version as the first byte
        var version = mdhd[0];
        var index = version === 0 ? 12 : 20;
        return toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);
    };
    /**
   * Get all the video, audio, and hint tracks from a non fragmented
   * mp4 segment
   */ getTracks = function(init) {
        var traks = findBox(init, [
            "moov",
            "trak"
        ]);
        var tracks = [];
        traks.forEach(function(trak) {
            var track = {};
            var tkhd = findBox(trak, [
                "tkhd"
            ])[0];
            var view, tkhdVersion; // id
            if (tkhd) {
                view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);
                tkhdVersion = view.getUint8(0);
                track.id = tkhdVersion === 0 ? view.getUint32(12) : view.getUint32(20);
            }
            var hdlr = findBox(trak, [
                "mdia",
                "hdlr"
            ])[0]; // type
            if (hdlr) {
                var type = parseType$1(hdlr.subarray(8, 12));
                if (type === "vide") track.type = "video";
                else if (type === "soun") track.type = "audio";
                else track.type = type;
            } // codec
            var stsd = findBox(trak, [
                "mdia",
                "minf",
                "stbl",
                "stsd"
            ])[0];
            if (stsd) {
                var sampleDescriptions = stsd.subarray(8); // gives the codec type string
                track.codec = parseType$1(sampleDescriptions.subarray(4, 8));
                var codecBox = findBox(sampleDescriptions, [
                    track.codec
                ])[0];
                var codecConfig, codecConfigType;
                if (codecBox) {
                    // https://tools.ietf.org/html/rfc6381#section-3.3
                    if (/^[asm]vc[1-9]$/i.test(track.codec)) {
                        // we don't need anything but the "config" parameter of the
                        // avc1 codecBox
                        codecConfig = codecBox.subarray(78);
                        codecConfigType = parseType$1(codecConfig.subarray(4, 8));
                        if (codecConfigType === "avcC" && codecConfig.length > 11) {
                            track.codec += "."; // left padded with zeroes for single digit hex
                            // profile idc
                            track.codec += toHexString(codecConfig[9]); // the byte containing the constraint_set flags
                            track.codec += toHexString(codecConfig[10]); // level idc
                            track.codec += toHexString(codecConfig[11]);
                        } else // TODO: show a warning that we couldn't parse the codec
                        // and are using the default
                        track.codec = "avc1.4d400d";
                    } else if (/^mp4[a,v]$/i.test(track.codec)) {
                        // we do not need anything but the streamDescriptor of the mp4a codecBox
                        codecConfig = codecBox.subarray(28);
                        codecConfigType = parseType$1(codecConfig.subarray(4, 8));
                        if (codecConfigType === "esds" && codecConfig.length > 20 && codecConfig[19] !== 0) {
                            track.codec += "." + toHexString(codecConfig[19]); // this value is only a single digit
                            track.codec += "." + toHexString(codecConfig[20] >>> 2 & 0x3f).replace(/^0/, "");
                        } else // TODO: show a warning that we couldn't parse the codec
                        // and are using the default
                        track.codec = "mp4a.40.2";
                    } else // flac, opus, etc
                    track.codec = track.codec.toLowerCase();
                }
            }
            var mdhd = findBox(trak, [
                "mdia",
                "mdhd"
            ])[0];
            if (mdhd) track.timescale = getTimescaleFromMediaHeader(mdhd);
            tracks.push(track);
        });
        return tracks;
    };
    /**
   * Returns an array of emsg ID3 data from the provided segmentData.
   * An offset can also be provided as the Latest Arrival Time to calculate 
   * the Event Start Time of v0 EMSG boxes. 
   * See: https://dashif-documents.azurewebsites.net/Events/master/event.html#Inband-event-timing
   * 
   * @param {Uint8Array} segmentData the segment byte array.
   * @param {number} offset the segment start time or Latest Arrival Time, 
   * @return {Object[]} an array of ID3 parsed from EMSG boxes
   */ getEmsgID3 = function(segmentData, offset = 0) {
        var emsgBoxes = findBox(segmentData, [
            "emsg"
        ]);
        return emsgBoxes.map((data)=>{
            var parsedBox = emsg.parseEmsgBox(new Uint8Array(data));
            var parsedId3Frames = parseId3Frames(parsedBox.message_data);
            return {
                cueTime: emsg.scaleTime(parsedBox.presentation_time, parsedBox.timescale, parsedBox.presentation_time_delta, offset),
                duration: emsg.scaleTime(parsedBox.event_duration, parsedBox.timescale),
                frames: parsedId3Frames
            };
        });
    };
    var probe$2 = {
        // export mp4 inspector's findBox and parseType for backwards compatibility
        findBox: findBox,
        parseType: parseType$1,
        timescale: timescale,
        startTime: startTime,
        compositionStartTime: compositionStartTime,
        videoTrackIds: getVideoTrackIds,
        tracks: getTracks,
        getTimescaleFromMediaHeader: getTimescaleFromMediaHeader,
        getEmsgID3: getEmsgID3
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * Utilities to detect basic properties and metadata about TS Segments.
   */ var StreamTypes$1 = streamTypes;
    var parsePid = function(packet) {
        var pid = packet[1] & 0x1f;
        pid <<= 8;
        pid |= packet[2];
        return pid;
    };
    var parsePayloadUnitStartIndicator = function(packet) {
        return !!(packet[1] & 0x40);
    };
    var parseAdaptionField = function(packet) {
        var offset = 0; // if an adaption field is present, its length is specified by the
        // fifth byte of the TS packet header. The adaptation field is
        // used to add stuffing to PES packets that don't fill a complete
        // TS packet, and to specify some forms of timing and control data
        // that we do not currently use.
        if ((packet[3] & 0x30) >>> 4 > 0x01) offset += packet[4] + 1;
        return offset;
    };
    var parseType = function(packet, pmtPid) {
        var pid = parsePid(packet);
        if (pid === 0) return "pat";
        else if (pid === pmtPid) return "pmt";
        else if (pmtPid) return "pes";
        return null;
    };
    var parsePat = function(packet) {
        var pusi = parsePayloadUnitStartIndicator(packet);
        var offset = 4 + parseAdaptionField(packet);
        if (pusi) offset += packet[offset] + 1;
        return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];
    };
    var parsePmt = function(packet) {
        var programMapTable = {};
        var pusi = parsePayloadUnitStartIndicator(packet);
        var payloadOffset = 4 + parseAdaptionField(packet);
        if (pusi) payloadOffset += packet[payloadOffset] + 1;
         // PMTs can be sent ahead of the time when they should actually
        // take effect. We don't believe this should ever be the case
        // for HLS but we'll ignore "forward" PMT declarations if we see
        // them. Future PMT declarations have the current_next_indicator
        // set to zero.
        if (!(packet[payloadOffset + 5] & 0x01)) return;
        var sectionLength, tableEnd, programInfoLength; // the mapping table ends at the end of the current section
        sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];
        tableEnd = 3 + sectionLength - 4; // to determine where the table is, we have to figure out how
        // long the program info descriptors are
        programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11]; // advance the offset to the first entry in the mapping table
        var offset = 12 + programInfoLength;
        while(offset < tableEnd){
            var i = payloadOffset + offset; // add an entry that maps the elementary_pid to the stream_type
            programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i]; // move to the next table entry
            // skip past the elementary stream descriptors, if present
            offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;
        }
        return programMapTable;
    };
    var parsePesType = function(packet, programMapTable) {
        var pid = parsePid(packet);
        var type = programMapTable[pid];
        switch(type){
            case StreamTypes$1.H264_STREAM_TYPE:
                return "video";
            case StreamTypes$1.ADTS_STREAM_TYPE:
                return "audio";
            case StreamTypes$1.METADATA_STREAM_TYPE:
                return "timed-metadata";
            default:
                return null;
        }
    };
    var parsePesTime = function(packet) {
        var pusi = parsePayloadUnitStartIndicator(packet);
        if (!pusi) return null;
        var offset = 4 + parseAdaptionField(packet);
        if (offset >= packet.byteLength) // From the H 222.0 MPEG-TS spec
        // "For transport stream packets carrying PES packets, stuffing is needed when there
        //  is insufficient PES packet data to completely fill the transport stream packet
        //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than
        //  the sum of the lengths of the data elements in it, so that the payload bytes
        //  remaining after the adaptation field exactly accommodates the available PES packet
        //  data."
        //
        // If the offset is >= the length of the packet, then the packet contains no data
        // and instead is just adaption field stuffing bytes
        return null;
        var pes = null;
        var ptsDtsFlags; // PES packets may be annotated with a PTS value, or a PTS value
        // and a DTS value. Determine what combination of values is
        // available to work with.
        ptsDtsFlags = packet[offset + 7]; // PTS and DTS are normally stored as a 33-bit number.  Javascript
        // performs all bitwise operations on 32-bit integers but javascript
        // supports a much greater range (52-bits) of integer using standard
        // mathematical operations.
        // We construct a 31-bit value using bitwise operators over the 31
        // most significant bits and then multiply by 4 (equal to a left-shift
        // of 2) before we add the final 2 least significant bits of the
        // timestamp (equal to an OR.)
        if (ptsDtsFlags & 0xC0) {
            pes = {}; // the PTS and DTS are not written out directly. For information
            // on how they are encoded, see
            // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
            pes.pts = (packet[offset + 9] & 0x0E) << 27 | (packet[offset + 10] & 0xFF) << 20 | (packet[offset + 11] & 0xFE) << 12 | (packet[offset + 12] & 0xFF) << 5 | (packet[offset + 13] & 0xFE) >>> 3;
            pes.pts *= 4; // Left shift by 2
            pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs
            pes.dts = pes.pts;
            if (ptsDtsFlags & 0x40) {
                pes.dts = (packet[offset + 14] & 0x0E) << 27 | (packet[offset + 15] & 0xFF) << 20 | (packet[offset + 16] & 0xFE) << 12 | (packet[offset + 17] & 0xFF) << 5 | (packet[offset + 18] & 0xFE) >>> 3;
                pes.dts *= 4; // Left shift by 2
                pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs
            }
        }
        return pes;
    };
    var parseNalUnitType = function(type) {
        switch(type){
            case 0x05:
                return "slice_layer_without_partitioning_rbsp_idr";
            case 0x06:
                return "sei_rbsp";
            case 0x07:
                return "seq_parameter_set_rbsp";
            case 0x08:
                return "pic_parameter_set_rbsp";
            case 0x09:
                return "access_unit_delimiter_rbsp";
            default:
                return null;
        }
    };
    var videoPacketContainsKeyFrame = function(packet) {
        var offset = 4 + parseAdaptionField(packet);
        var frameBuffer = packet.subarray(offset);
        var frameI = 0;
        var frameSyncPoint = 0;
        var foundKeyFrame = false;
        var nalType; // advance the sync point to a NAL start, if necessary
        for(; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++)if (frameBuffer[frameSyncPoint + 2] === 1) {
            // the sync point is properly aligned
            frameI = frameSyncPoint + 5;
            break;
        }
        while(frameI < frameBuffer.byteLength)// look at the current byte to determine if we've hit the end of
        // a NAL unit boundary
        switch(frameBuffer[frameI]){
            case 0:
                // skip past non-sync sequences
                if (frameBuffer[frameI - 1] !== 0) {
                    frameI += 2;
                    break;
                } else if (frameBuffer[frameI - 2] !== 0) {
                    frameI++;
                    break;
                }
                if (frameSyncPoint + 3 !== frameI - 2) {
                    nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);
                    if (nalType === "slice_layer_without_partitioning_rbsp_idr") foundKeyFrame = true;
                } // drop trailing zeroes
                do frameI++;
                while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);
                frameSyncPoint = frameI - 2;
                frameI += 3;
                break;
            case 1:
                // skip past non-sync sequences
                if (frameBuffer[frameI - 1] !== 0 || frameBuffer[frameI - 2] !== 0) {
                    frameI += 3;
                    break;
                }
                nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);
                if (nalType === "slice_layer_without_partitioning_rbsp_idr") foundKeyFrame = true;
                frameSyncPoint = frameI - 2;
                frameI += 3;
                break;
            default:
                // the current byte isn't a one or zero, so it cannot be part
                // of a sync sequence
                frameI += 3;
                break;
        }
        frameBuffer = frameBuffer.subarray(frameSyncPoint);
        frameI -= frameSyncPoint;
        frameSyncPoint = 0; // parse the final nal
        if (frameBuffer && frameBuffer.byteLength > 3) {
            nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);
            if (nalType === "slice_layer_without_partitioning_rbsp_idr") foundKeyFrame = true;
        }
        return foundKeyFrame;
    };
    var probe$1 = {
        parseType: parseType,
        parsePat: parsePat,
        parsePmt: parsePmt,
        parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,
        parsePesType: parsePesType,
        parsePesTime: parsePesTime,
        videoPacketContainsKeyFrame: videoPacketContainsKeyFrame
    };
    /**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * Parse mpeg2 transport stream packets to extract basic timing information
   */ var StreamTypes = streamTypes;
    var handleRollover = timestampRolloverStream.handleRollover;
    var probe = {};
    probe.ts = probe$1;
    probe.aac = utils;
    var ONE_SECOND_IN_TS = clock$2.ONE_SECOND_IN_TS;
    var MP2T_PACKET_LENGTH = 188, // bytes
    SYNC_BYTE = 0x47;
    /**
   * walks through segment data looking for pat and pmt packets to parse out
   * program map table information
   */ var parsePsi_ = function(bytes, pmt) {
        var startIndex = 0, endIndex = MP2T_PACKET_LENGTH, packet, type;
        while(endIndex < bytes.byteLength){
            // Look for a pair of start and end sync bytes in the data..
            if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {
                // We found a packet
                packet = bytes.subarray(startIndex, endIndex);
                type = probe.ts.parseType(packet, pmt.pid);
                switch(type){
                    case "pat":
                        pmt.pid = probe.ts.parsePat(packet);
                        break;
                    case "pmt":
                        var table = probe.ts.parsePmt(packet);
                        pmt.table = pmt.table || {};
                        Object.keys(table).forEach(function(key) {
                            pmt.table[key] = table[key];
                        });
                        break;
                }
                startIndex += MP2T_PACKET_LENGTH;
                endIndex += MP2T_PACKET_LENGTH;
                continue;
            } // If we get here, we have somehow become de-synchronized and we need to step
            // forward one byte at a time until we find a pair of sync bytes that denote
            // a packet
            startIndex++;
            endIndex++;
        }
    };
    /**
   * walks through the segment data from the start and end to get timing information
   * for the first and last audio pes packets
   */ var parseAudioPes_ = function(bytes, pmt, result) {
        var startIndex = 0, endIndex = MP2T_PACKET_LENGTH, packet, type, pesType, pusi, parsed;
        var endLoop = false; // Start walking from start of segment to get first audio packet
        while(endIndex <= bytes.byteLength){
            // Look for a pair of start and end sync bytes in the data..
            if (bytes[startIndex] === SYNC_BYTE && (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {
                // We found a packet
                packet = bytes.subarray(startIndex, endIndex);
                type = probe.ts.parseType(packet, pmt.pid);
                switch(type){
                    case "pes":
                        pesType = probe.ts.parsePesType(packet, pmt.table);
                        pusi = probe.ts.parsePayloadUnitStartIndicator(packet);
                        if (pesType === "audio" && pusi) {
                            parsed = probe.ts.parsePesTime(packet);
                            if (parsed) {
                                parsed.type = "audio";
                                result.audio.push(parsed);
                                endLoop = true;
                            }
                        }
                        break;
                }
                if (endLoop) break;
                startIndex += MP2T_PACKET_LENGTH;
                endIndex += MP2T_PACKET_LENGTH;
                continue;
            } // If we get here, we have somehow become de-synchronized and we need to step
            // forward one byte at a time until we find a pair of sync bytes that denote
            // a packet
            startIndex++;
            endIndex++;
        } // Start walking from end of segment to get last audio packet
        endIndex = bytes.byteLength;
        startIndex = endIndex - MP2T_PACKET_LENGTH;
        endLoop = false;
        while(startIndex >= 0){
            // Look for a pair of start and end sync bytes in the data..
            if (bytes[startIndex] === SYNC_BYTE && (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {
                // We found a packet
                packet = bytes.subarray(startIndex, endIndex);
                type = probe.ts.parseType(packet, pmt.pid);
                switch(type){
                    case "pes":
                        pesType = probe.ts.parsePesType(packet, pmt.table);
                        pusi = probe.ts.parsePayloadUnitStartIndicator(packet);
                        if (pesType === "audio" && pusi) {
                            parsed = probe.ts.parsePesTime(packet);
                            if (parsed) {
                                parsed.type = "audio";
                                result.audio.push(parsed);
                                endLoop = true;
                            }
                        }
                        break;
                }
                if (endLoop) break;
                startIndex -= MP2T_PACKET_LENGTH;
                endIndex -= MP2T_PACKET_LENGTH;
                continue;
            } // If we get here, we have somehow become de-synchronized and we need to step
            // forward one byte at a time until we find a pair of sync bytes that denote
            // a packet
            startIndex--;
            endIndex--;
        }
    };
    /**
   * walks through the segment data from the start and end to get timing information
   * for the first and last video pes packets as well as timing information for the first
   * key frame.
   */ var parseVideoPes_ = function(bytes, pmt, result) {
        var startIndex = 0, endIndex = MP2T_PACKET_LENGTH, packet, type, pesType, pusi, parsed, frame, i, pes;
        var endLoop = false;
        var currentFrame = {
            data: [],
            size: 0
        }; // Start walking from start of segment to get first video packet
        while(endIndex < bytes.byteLength){
            // Look for a pair of start and end sync bytes in the data..
            if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {
                // We found a packet
                packet = bytes.subarray(startIndex, endIndex);
                type = probe.ts.parseType(packet, pmt.pid);
                switch(type){
                    case "pes":
                        pesType = probe.ts.parsePesType(packet, pmt.table);
                        pusi = probe.ts.parsePayloadUnitStartIndicator(packet);
                        if (pesType === "video") {
                            if (pusi && !endLoop) {
                                parsed = probe.ts.parsePesTime(packet);
                                if (parsed) {
                                    parsed.type = "video";
                                    result.video.push(parsed);
                                    endLoop = true;
                                }
                            }
                            if (!result.firstKeyFrame) {
                                if (pusi) {
                                    if (currentFrame.size !== 0) {
                                        frame = new Uint8Array(currentFrame.size);
                                        i = 0;
                                        while(currentFrame.data.length){
                                            pes = currentFrame.data.shift();
                                            frame.set(pes, i);
                                            i += pes.byteLength;
                                        }
                                        if (probe.ts.videoPacketContainsKeyFrame(frame)) {
                                            var firstKeyFrame = probe.ts.parsePesTime(frame); // PTS/DTS may not be available. Simply *not* setting
                                            // the keyframe seems to work fine with HLS playback
                                            // and definitely preferable to a crash with TypeError...
                                            if (firstKeyFrame) {
                                                result.firstKeyFrame = firstKeyFrame;
                                                result.firstKeyFrame.type = "video";
                                            } else // eslint-disable-next-line
                                            console.warn("Failed to extract PTS/DTS from PES at first keyframe. This could be an unusual TS segment, or else mux.js did not parse your TS segment correctly. If you know your TS segments do contain PTS/DTS on keyframes please file a bug report! You can try ffprobe to double check for yourself.");
                                        }
                                        currentFrame.size = 0;
                                    }
                                }
                                currentFrame.data.push(packet);
                                currentFrame.size += packet.byteLength;
                            }
                        }
                        break;
                }
                if (endLoop && result.firstKeyFrame) break;
                startIndex += MP2T_PACKET_LENGTH;
                endIndex += MP2T_PACKET_LENGTH;
                continue;
            } // If we get here, we have somehow become de-synchronized and we need to step
            // forward one byte at a time until we find a pair of sync bytes that denote
            // a packet
            startIndex++;
            endIndex++;
        } // Start walking from end of segment to get last video packet
        endIndex = bytes.byteLength;
        startIndex = endIndex - MP2T_PACKET_LENGTH;
        endLoop = false;
        while(startIndex >= 0){
            // Look for a pair of start and end sync bytes in the data..
            if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {
                // We found a packet
                packet = bytes.subarray(startIndex, endIndex);
                type = probe.ts.parseType(packet, pmt.pid);
                switch(type){
                    case "pes":
                        pesType = probe.ts.parsePesType(packet, pmt.table);
                        pusi = probe.ts.parsePayloadUnitStartIndicator(packet);
                        if (pesType === "video" && pusi) {
                            parsed = probe.ts.parsePesTime(packet);
                            if (parsed) {
                                parsed.type = "video";
                                result.video.push(parsed);
                                endLoop = true;
                            }
                        }
                        break;
                }
                if (endLoop) break;
                startIndex -= MP2T_PACKET_LENGTH;
                endIndex -= MP2T_PACKET_LENGTH;
                continue;
            } // If we get here, we have somehow become de-synchronized and we need to step
            // forward one byte at a time until we find a pair of sync bytes that denote
            // a packet
            startIndex--;
            endIndex--;
        }
    };
    /**
   * Adjusts the timestamp information for the segment to account for
   * rollover and convert to seconds based on pes packet timescale (90khz clock)
   */ var adjustTimestamp_ = function(segmentInfo, baseTimestamp) {
        if (segmentInfo.audio && segmentInfo.audio.length) {
            var audioBaseTimestamp = baseTimestamp;
            if (typeof audioBaseTimestamp === "undefined" || isNaN(audioBaseTimestamp)) audioBaseTimestamp = segmentInfo.audio[0].dts;
            segmentInfo.audio.forEach(function(info) {
                info.dts = handleRollover(info.dts, audioBaseTimestamp);
                info.pts = handleRollover(info.pts, audioBaseTimestamp); // time in seconds
                info.dtsTime = info.dts / ONE_SECOND_IN_TS;
                info.ptsTime = info.pts / ONE_SECOND_IN_TS;
            });
        }
        if (segmentInfo.video && segmentInfo.video.length) {
            var videoBaseTimestamp = baseTimestamp;
            if (typeof videoBaseTimestamp === "undefined" || isNaN(videoBaseTimestamp)) videoBaseTimestamp = segmentInfo.video[0].dts;
            segmentInfo.video.forEach(function(info) {
                info.dts = handleRollover(info.dts, videoBaseTimestamp);
                info.pts = handleRollover(info.pts, videoBaseTimestamp); // time in seconds
                info.dtsTime = info.dts / ONE_SECOND_IN_TS;
                info.ptsTime = info.pts / ONE_SECOND_IN_TS;
            });
            if (segmentInfo.firstKeyFrame) {
                var frame = segmentInfo.firstKeyFrame;
                frame.dts = handleRollover(frame.dts, videoBaseTimestamp);
                frame.pts = handleRollover(frame.pts, videoBaseTimestamp); // time in seconds
                frame.dtsTime = frame.dts / ONE_SECOND_IN_TS;
                frame.ptsTime = frame.pts / ONE_SECOND_IN_TS;
            }
        }
    };
    /**
   * inspects the aac data stream for start and end time information
   */ var inspectAac_ = function(bytes) {
        var endLoop = false, audioCount = 0, sampleRate = null, timestamp = null, frameSize = 0, byteIndex = 0, packet;
        while(bytes.length - byteIndex >= 3){
            var type = probe.aac.parseType(bytes, byteIndex);
            switch(type){
                case "timed-metadata":
                    // Exit early because we don't have enough to parse
                    // the ID3 tag header
                    if (bytes.length - byteIndex < 10) {
                        endLoop = true;
                        break;
                    }
                    frameSize = probe.aac.parseId3TagSize(bytes, byteIndex); // Exit early if we don't have enough in the buffer
                    // to emit a full packet
                    if (frameSize > bytes.length) {
                        endLoop = true;
                        break;
                    }
                    if (timestamp === null) {
                        packet = bytes.subarray(byteIndex, byteIndex + frameSize);
                        timestamp = probe.aac.parseAacTimestamp(packet);
                    }
                    byteIndex += frameSize;
                    break;
                case "audio":
                    // Exit early because we don't have enough to parse
                    // the ADTS frame header
                    if (bytes.length - byteIndex < 7) {
                        endLoop = true;
                        break;
                    }
                    frameSize = probe.aac.parseAdtsSize(bytes, byteIndex); // Exit early if we don't have enough in the buffer
                    // to emit a full packet
                    if (frameSize > bytes.length) {
                        endLoop = true;
                        break;
                    }
                    if (sampleRate === null) {
                        packet = bytes.subarray(byteIndex, byteIndex + frameSize);
                        sampleRate = probe.aac.parseSampleRate(packet);
                    }
                    audioCount++;
                    byteIndex += frameSize;
                    break;
                default:
                    byteIndex++;
                    break;
            }
            if (endLoop) return null;
        }
        if (sampleRate === null || timestamp === null) return null;
        var audioTimescale = ONE_SECOND_IN_TS / sampleRate;
        var result = {
            audio: [
                {
                    type: "audio",
                    dts: timestamp,
                    pts: timestamp
                },
                {
                    type: "audio",
                    dts: timestamp + audioCount * 1024 * audioTimescale,
                    pts: timestamp + audioCount * 1024 * audioTimescale
                }
            ]
        };
        return result;
    };
    /**
   * inspects the transport stream segment data for start and end time information
   * of the audio and video tracks (when present) as well as the first key frame's
   * start time.
   */ var inspectTs_ = function(bytes) {
        var pmt = {
            pid: null,
            table: null
        };
        var result = {};
        parsePsi_(bytes, pmt);
        for(var pid in pmt.table)if (pmt.table.hasOwnProperty(pid)) {
            var type = pmt.table[pid];
            switch(type){
                case StreamTypes.H264_STREAM_TYPE:
                    result.video = [];
                    parseVideoPes_(bytes, pmt, result);
                    if (result.video.length === 0) delete result.video;
                    break;
                case StreamTypes.ADTS_STREAM_TYPE:
                    result.audio = [];
                    parseAudioPes_(bytes, pmt, result);
                    if (result.audio.length === 0) delete result.audio;
                    break;
            }
        }
        return result;
    };
    /**
   * Inspects segment byte data and returns an object with start and end timing information
   *
   * @param {Uint8Array} bytes The segment byte data
   * @param {Number} baseTimestamp Relative reference timestamp used when adjusting frame
   *  timestamps for rollover. This value must be in 90khz clock.
   * @return {Object} Object containing start and end frame timing info of segment.
   */ var inspect = function(bytes, baseTimestamp) {
        var isAacData = probe.aac.isLikelyAacData(bytes);
        var result;
        if (isAacData) result = inspectAac_(bytes);
        else result = inspectTs_(bytes);
        if (!result || !result.audio && !result.video) return null;
        adjustTimestamp_(result, baseTimestamp);
        return result;
    };
    var tsInspector = {
        inspect: inspect,
        parseAudioPes_: parseAudioPes_
    };
    /* global self */ /**
   * Re-emits transmuxer events by converting them into messages to the
   * world outside the worker.
   *
   * @param {Object} transmuxer the transmuxer to wire events on
   * @private
   */ const wireTransmuxerEvents = function(self1, transmuxer) {
        transmuxer.on("data", function(segment) {
            // transfer ownership of the underlying ArrayBuffer
            // instead of doing a copy to save memory
            // ArrayBuffers are transferable but generic TypedArrays are not
            // @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)
            const initArray = segment.initSegment;
            segment.initSegment = {
                data: initArray.buffer,
                byteOffset: initArray.byteOffset,
                byteLength: initArray.byteLength
            };
            const typedArray = segment.data;
            segment.data = typedArray.buffer;
            self1.postMessage({
                action: "data",
                segment: segment,
                byteOffset: typedArray.byteOffset,
                byteLength: typedArray.byteLength
            }, [
                segment.data
            ]);
        });
        transmuxer.on("done", function(data) {
            self1.postMessage({
                action: "done"
            });
        });
        transmuxer.on("gopInfo", function(gopInfo) {
            self1.postMessage({
                action: "gopInfo",
                gopInfo: gopInfo
            });
        });
        transmuxer.on("videoSegmentTimingInfo", function(timingInfo) {
            const videoSegmentTimingInfo = {
                start: {
                    decode: clock$2.videoTsToSeconds(timingInfo.start.dts),
                    presentation: clock$2.videoTsToSeconds(timingInfo.start.pts)
                },
                end: {
                    decode: clock$2.videoTsToSeconds(timingInfo.end.dts),
                    presentation: clock$2.videoTsToSeconds(timingInfo.end.pts)
                },
                baseMediaDecodeTime: clock$2.videoTsToSeconds(timingInfo.baseMediaDecodeTime)
            };
            if (timingInfo.prependedContentDuration) videoSegmentTimingInfo.prependedContentDuration = clock$2.videoTsToSeconds(timingInfo.prependedContentDuration);
            self1.postMessage({
                action: "videoSegmentTimingInfo",
                videoSegmentTimingInfo: videoSegmentTimingInfo
            });
        });
        transmuxer.on("audioSegmentTimingInfo", function(timingInfo) {
            // Note that all times for [audio/video]SegmentTimingInfo events are in video clock
            const audioSegmentTimingInfo = {
                start: {
                    decode: clock$2.videoTsToSeconds(timingInfo.start.dts),
                    presentation: clock$2.videoTsToSeconds(timingInfo.start.pts)
                },
                end: {
                    decode: clock$2.videoTsToSeconds(timingInfo.end.dts),
                    presentation: clock$2.videoTsToSeconds(timingInfo.end.pts)
                },
                baseMediaDecodeTime: clock$2.videoTsToSeconds(timingInfo.baseMediaDecodeTime)
            };
            if (timingInfo.prependedContentDuration) audioSegmentTimingInfo.prependedContentDuration = clock$2.videoTsToSeconds(timingInfo.prependedContentDuration);
            self1.postMessage({
                action: "audioSegmentTimingInfo",
                audioSegmentTimingInfo: audioSegmentTimingInfo
            });
        });
        transmuxer.on("id3Frame", function(id3Frame) {
            self1.postMessage({
                action: "id3Frame",
                id3Frame: id3Frame
            });
        });
        transmuxer.on("caption", function(caption) {
            self1.postMessage({
                action: "caption",
                caption: caption
            });
        });
        transmuxer.on("trackinfo", function(trackInfo) {
            self1.postMessage({
                action: "trackinfo",
                trackInfo: trackInfo
            });
        });
        transmuxer.on("audioTimingInfo", function(audioTimingInfo) {
            // convert to video TS since we prioritize video time over audio
            self1.postMessage({
                action: "audioTimingInfo",
                audioTimingInfo: {
                    start: clock$2.videoTsToSeconds(audioTimingInfo.start),
                    end: clock$2.videoTsToSeconds(audioTimingInfo.end)
                }
            });
        });
        transmuxer.on("videoTimingInfo", function(videoTimingInfo) {
            self1.postMessage({
                action: "videoTimingInfo",
                videoTimingInfo: {
                    start: clock$2.videoTsToSeconds(videoTimingInfo.start),
                    end: clock$2.videoTsToSeconds(videoTimingInfo.end)
                }
            });
        });
        transmuxer.on("log", function(log) {
            self1.postMessage({
                action: "log",
                log: log
            });
        });
    };
    /**
   * All incoming messages route through this hash. If no function exists
   * to handle an incoming message, then we ignore the message.
   *
   * @class MessageHandlers
   * @param {Object} options the options to initialize with
   */ class MessageHandlers {
        constructor(self1, options){
            this.options = options || {};
            this.self = self1;
            this.init();
        }
        /**
     * initialize our web worker and wire all the events.
     */ init() {
            if (this.transmuxer) this.transmuxer.dispose();
            this.transmuxer = new transmuxer.Transmuxer(this.options);
            wireTransmuxerEvents(this.self, this.transmuxer);
        }
        pushMp4Captions(data) {
            if (!this.captionParser) {
                this.captionParser = new captionParser();
                this.captionParser.init();
            }
            const segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);
            const parsed = this.captionParser.parse(segment, data.trackIds, data.timescales);
            this.self.postMessage({
                action: "mp4Captions",
                captions: parsed && parsed.captions || [],
                logs: parsed && parsed.logs || [],
                data: segment.buffer
            }, [
                segment.buffer
            ]);
        }
        probeMp4StartTime({ timescales: timescales, data: data }) {
            const startTime = probe$2.startTime(timescales, data);
            this.self.postMessage({
                action: "probeMp4StartTime",
                startTime: startTime,
                data: data
            }, [
                data.buffer
            ]);
        }
        probeMp4Tracks({ data: data }) {
            const tracks = probe$2.tracks(data);
            this.self.postMessage({
                action: "probeMp4Tracks",
                tracks: tracks,
                data: data
            }, [
                data.buffer
            ]);
        }
        /**
     * Probes an mp4 segment for EMSG boxes containing ID3 data.
     * https://aomediacodec.github.io/id3-emsg/
     *
     * @param {Uint8Array} data segment data
     * @param {number} offset segment start time
     * @return {Object[]} an array of ID3 frames
     */ probeEmsgID3({ data: data, offset: offset }) {
            const id3Frames = probe$2.getEmsgID3(data, offset);
            this.self.postMessage({
                action: "probeEmsgID3",
                id3Frames: id3Frames,
                emsgData: data
            }, [
                data.buffer
            ]);
        }
        /**
     * Probe an mpeg2-ts segment to determine the start time of the segment in it's
     * internal "media time," as well as whether it contains video and/or audio.
     *
     * @private
     * @param {Uint8Array} bytes - segment bytes
     * @param {number} baseStartTime
     *        Relative reference timestamp used when adjusting frame timestamps for rollover.
     *        This value should be in seconds, as it's converted to a 90khz clock within the
     *        function body.
     * @return {Object} The start time of the current segment in "media time" as well as
     *                  whether it contains video and/or audio
     */ probeTs({ data: data, baseStartTime: baseStartTime }) {
            const tsStartTime = typeof baseStartTime === "number" && !isNaN(baseStartTime) ? baseStartTime * clock$2.ONE_SECOND_IN_TS : void 0;
            const timeInfo = tsInspector.inspect(data, tsStartTime);
            let result = null;
            if (timeInfo) {
                result = {
                    // each type's time info comes back as an array of 2 times, start and end
                    hasVideo: timeInfo.video && timeInfo.video.length === 2 || false,
                    hasAudio: timeInfo.audio && timeInfo.audio.length === 2 || false
                };
                if (result.hasVideo) result.videoStart = timeInfo.video[0].ptsTime;
                if (result.hasAudio) result.audioStart = timeInfo.audio[0].ptsTime;
            }
            this.self.postMessage({
                action: "probeTs",
                result: result,
                data: data
            }, [
                data.buffer
            ]);
        }
        clearAllMp4Captions() {
            if (this.captionParser) this.captionParser.clearAllCaptions();
        }
        clearParsedMp4Captions() {
            if (this.captionParser) this.captionParser.clearParsedCaptions();
        }
        /**
     * Adds data (a ts segment) to the start of the transmuxer pipeline for
     * processing.
     *
     * @param {ArrayBuffer} data data to push into the muxer
     */ push(data) {
            // Cast array buffer to correct type for transmuxer
            const segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);
            this.transmuxer.push(segment);
        }
        /**
     * Recreate the transmuxer so that the next segment added via `push`
     * start with a fresh transmuxer.
     */ reset() {
            this.transmuxer.reset();
        }
        /**
     * Set the value that will be used as the `baseMediaDecodeTime` time for the
     * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`
     * set relative to the first based on the PTS values.
     *
     * @param {Object} data used to set the timestamp offset in the muxer
     */ setTimestampOffset(data) {
            const timestampOffset = data.timestampOffset || 0;
            this.transmuxer.setBaseMediaDecodeTime(Math.round(clock$2.secondsToVideoTs(timestampOffset)));
        }
        setAudioAppendStart(data) {
            this.transmuxer.setAudioAppendStart(Math.ceil(clock$2.secondsToVideoTs(data.appendStart)));
        }
        setRemux(data) {
            this.transmuxer.setRemux(data.remux);
        }
        /**
     * Forces the pipeline to finish processing the last segment and emit it's
     * results.
     *
     * @param {Object} data event data, not really used
     */ flush(data) {
            this.transmuxer.flush(); // transmuxed done action is fired after both audio/video pipelines are flushed
            self.postMessage({
                action: "done",
                type: "transmuxed"
            });
        }
        endTimeline() {
            this.transmuxer.endTimeline(); // transmuxed endedtimeline action is fired after both audio/video pipelines end their
            // timelines
            self.postMessage({
                action: "endedtimeline",
                type: "transmuxed"
            });
        }
        alignGopsWith(data) {
            this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice());
        }
    }
    /**
   * Our web worker interface so that things can talk to mux.js
   * that will be running in a web worker. the scope is passed to this by
   * webworkify.
   *
   * @param {Object} self the scope for the web worker
   */ self.onmessage = function(event) {
        if (event.data.action === "init" && event.data.options) {
            this.messageHandlers = new MessageHandlers(self, event.data.options);
            return;
        }
        if (!this.messageHandlers) this.messageHandlers = new MessageHandlers(self);
        if (event.data && event.data.action && event.data.action !== "init") {
            if (this.messageHandlers[event.data.action]) this.messageHandlers[event.data.action](event.data);
        }
    };
}));
var $e88cd91ee18355c1$var$TransmuxWorker = $e88cd91ee18355c1$var$factory($e88cd91ee18355c1$var$workerCode$1);
/* rollup-plugin-worker-factory end for worker!/home/runner/work/http-streaming/http-streaming/src/transmuxer-worker.js */ const $e88cd91ee18355c1$var$handleData_ = (event, transmuxedData, callback)=>{
    const { type: type, initSegment: initSegment, captions: captions, captionStreams: captionStreams, metadata: metadata, videoFrameDtsTime: videoFrameDtsTime, videoFramePtsTime: videoFramePtsTime } = event.data.segment;
    transmuxedData.buffer.push({
        captions: captions,
        captionStreams: captionStreams,
        metadata: metadata
    });
    const boxes = event.data.segment.boxes || {
        data: event.data.segment.data
    };
    const result = {
        type: type,
        // cast ArrayBuffer to TypedArray
        data: new Uint8Array(boxes.data, boxes.data.byteOffset, boxes.data.byteLength),
        initSegment: new Uint8Array(initSegment.data, initSegment.byteOffset, initSegment.byteLength)
    };
    if (typeof videoFrameDtsTime !== "undefined") result.videoFrameDtsTime = videoFrameDtsTime;
    if (typeof videoFramePtsTime !== "undefined") result.videoFramePtsTime = videoFramePtsTime;
    callback(result);
};
const $e88cd91ee18355c1$var$handleDone_ = ({ transmuxedData: transmuxedData, callback: callback })=>{
    // Previously we only returned data on data events,
    // not on done events. Clear out the buffer to keep that consistent.
    transmuxedData.buffer = []; // all buffers should have been flushed from the muxer, so start processing anything we
    // have received
    callback(transmuxedData);
};
const $e88cd91ee18355c1$var$handleGopInfo_ = (event, transmuxedData)=>{
    transmuxedData.gopInfo = event.data.gopInfo;
};
const $e88cd91ee18355c1$var$processTransmux = (options)=>{
    const { transmuxer: transmuxer, bytes: bytes, audioAppendStart: audioAppendStart, gopsToAlignWith: gopsToAlignWith, remux: remux, onData: onData, onTrackInfo: onTrackInfo, onAudioTimingInfo: onAudioTimingInfo, onVideoTimingInfo: onVideoTimingInfo, onVideoSegmentTimingInfo: onVideoSegmentTimingInfo, onAudioSegmentTimingInfo: onAudioSegmentTimingInfo, onId3: onId3, onCaptions: onCaptions, onDone: onDone, onEndedTimeline: onEndedTimeline, onTransmuxerLog: onTransmuxerLog, isEndOfTimeline: isEndOfTimeline } = options;
    const transmuxedData = {
        buffer: []
    };
    let waitForEndedTimelineEvent = isEndOfTimeline;
    const handleMessage = (event)=>{
        if (transmuxer.currentTransmux !== options) // disposed
        return;
        if (event.data.action === "data") $e88cd91ee18355c1$var$handleData_(event, transmuxedData, onData);
        if (event.data.action === "trackinfo") onTrackInfo(event.data.trackInfo);
        if (event.data.action === "gopInfo") $e88cd91ee18355c1$var$handleGopInfo_(event, transmuxedData);
        if (event.data.action === "audioTimingInfo") onAudioTimingInfo(event.data.audioTimingInfo);
        if (event.data.action === "videoTimingInfo") onVideoTimingInfo(event.data.videoTimingInfo);
        if (event.data.action === "videoSegmentTimingInfo") onVideoSegmentTimingInfo(event.data.videoSegmentTimingInfo);
        if (event.data.action === "audioSegmentTimingInfo") onAudioSegmentTimingInfo(event.data.audioSegmentTimingInfo);
        if (event.data.action === "id3Frame") onId3([
            event.data.id3Frame
        ], event.data.id3Frame.dispatchType);
        if (event.data.action === "caption") onCaptions(event.data.caption);
        if (event.data.action === "endedtimeline") {
            waitForEndedTimelineEvent = false;
            onEndedTimeline();
        }
        if (event.data.action === "log") onTransmuxerLog(event.data.log);
         // wait for the transmuxed event since we may have audio and video
        if (event.data.type !== "transmuxed") return;
         // If the "endedtimeline" event has not yet fired, and this segment represents the end
        // of a timeline, that means there may still be data events before the segment
        // processing can be considerred complete. In that case, the final event should be
        // an "endedtimeline" event with the type "transmuxed."
        if (waitForEndedTimelineEvent) return;
        transmuxer.onmessage = null;
        $e88cd91ee18355c1$var$handleDone_({
            transmuxedData: transmuxedData,
            callback: onDone
        });
        /* eslint-disable no-use-before-define */ $e88cd91ee18355c1$var$dequeue(transmuxer);
    /* eslint-enable */ };
    transmuxer.onmessage = handleMessage;
    if (audioAppendStart) transmuxer.postMessage({
        action: "setAudioAppendStart",
        appendStart: audioAppendStart
    });
     // allow empty arrays to be passed to clear out GOPs
    if (Array.isArray(gopsToAlignWith)) transmuxer.postMessage({
        action: "alignGopsWith",
        gopsToAlignWith: gopsToAlignWith
    });
    if (typeof remux !== "undefined") transmuxer.postMessage({
        action: "setRemux",
        remux: remux
    });
    if (bytes.byteLength) {
        const buffer = bytes instanceof ArrayBuffer ? bytes : bytes.buffer;
        const byteOffset = bytes instanceof ArrayBuffer ? 0 : bytes.byteOffset;
        transmuxer.postMessage({
            action: "push",
            // Send the typed-array of data as an ArrayBuffer so that
            // it can be sent as a "Transferable" and avoid the costly
            // memory copy
            data: buffer,
            byteOffset: // To recreate the original typed-array, we need information
            // about what portion of the ArrayBuffer it was a view into
            byteOffset,
            byteLength: bytes.byteLength
        }, [
            buffer
        ]);
    }
    if (isEndOfTimeline) transmuxer.postMessage({
        action: "endTimeline"
    });
     // even if we didn't push any bytes, we have to make sure we flush in case we reached
    // the end of the segment
    transmuxer.postMessage({
        action: "flush"
    });
};
const $e88cd91ee18355c1$var$dequeue = (transmuxer)=>{
    transmuxer.currentTransmux = null;
    if (transmuxer.transmuxQueue.length) {
        transmuxer.currentTransmux = transmuxer.transmuxQueue.shift();
        if (typeof transmuxer.currentTransmux === "function") transmuxer.currentTransmux();
        else $e88cd91ee18355c1$var$processTransmux(transmuxer.currentTransmux);
    }
};
const $e88cd91ee18355c1$var$processAction = (transmuxer, action)=>{
    transmuxer.postMessage({
        action: action
    });
    $e88cd91ee18355c1$var$dequeue(transmuxer);
};
const $e88cd91ee18355c1$var$enqueueAction = (action, transmuxer)=>{
    if (!transmuxer.currentTransmux) {
        transmuxer.currentTransmux = action;
        $e88cd91ee18355c1$var$processAction(transmuxer, action);
        return;
    }
    transmuxer.transmuxQueue.push($e88cd91ee18355c1$var$processAction.bind(null, transmuxer, action));
};
const $e88cd91ee18355c1$var$reset = (transmuxer)=>{
    $e88cd91ee18355c1$var$enqueueAction("reset", transmuxer);
};
const $e88cd91ee18355c1$var$endTimeline = (transmuxer)=>{
    $e88cd91ee18355c1$var$enqueueAction("endTimeline", transmuxer);
};
const $e88cd91ee18355c1$var$transmux = (options)=>{
    if (!options.transmuxer.currentTransmux) {
        options.transmuxer.currentTransmux = options;
        $e88cd91ee18355c1$var$processTransmux(options);
        return;
    }
    options.transmuxer.transmuxQueue.push(options);
};
const $e88cd91ee18355c1$var$createTransmuxer = (options)=>{
    const transmuxer = new $e88cd91ee18355c1$var$TransmuxWorker();
    transmuxer.currentTransmux = null;
    transmuxer.transmuxQueue = [];
    const term = transmuxer.terminate;
    transmuxer.terminate = ()=>{
        transmuxer.currentTransmux = null;
        transmuxer.transmuxQueue.length = 0;
        return term.call(transmuxer);
    };
    transmuxer.postMessage({
        action: "init",
        options: options
    });
    return transmuxer;
};
var $e88cd91ee18355c1$var$segmentTransmuxer = {
    reset: $e88cd91ee18355c1$var$reset,
    endTimeline: $e88cd91ee18355c1$var$endTimeline,
    transmux: $e88cd91ee18355c1$var$transmux,
    createTransmuxer: $e88cd91ee18355c1$var$createTransmuxer
};
const $e88cd91ee18355c1$var$workerCallback = function(options) {
    const transmuxer = options.transmuxer;
    const endAction = options.endAction || options.action;
    const callback = options.callback;
    const message = (0, (/*@__PURE__*/$parcel$interopDefault($a41f6c2ef6e36772$exports)))({}, options, {
        endAction: null,
        transmuxer: null,
        callback: null
    });
    const listenForEndEvent = (event)=>{
        if (event.data.action !== endAction) return;
        transmuxer.removeEventListener("message", listenForEndEvent); // transfer ownership of bytes back to us.
        if (event.data.data) {
            event.data.data = new Uint8Array(event.data.data, options.byteOffset || 0, options.byteLength || event.data.data.byteLength);
            if (options.data) options.data = event.data.data;
        }
        callback(event.data);
    };
    transmuxer.addEventListener("message", listenForEndEvent);
    if (options.data) {
        const isArrayBuffer = options.data instanceof ArrayBuffer;
        message.byteOffset = isArrayBuffer ? 0 : options.data.byteOffset;
        message.byteLength = options.data.byteLength;
        const transfers = [
            isArrayBuffer ? options.data : options.data.buffer
        ];
        transmuxer.postMessage(message, transfers);
    } else transmuxer.postMessage(message);
};
const $e88cd91ee18355c1$var$REQUEST_ERRORS = {
    FAILURE: 2,
    TIMEOUT: -101,
    ABORTED: -102
};
/**
 * Abort all requests
 *
 * @param {Object} activeXhrs - an object that tracks all XHR requests
 */ const $e88cd91ee18355c1$var$abortAll = (activeXhrs)=>{
    activeXhrs.forEach((xhr)=>{
        xhr.abort();
    });
};
/**
 * Gather important bandwidth stats once a request has completed
 *
 * @param {Object} request - the XHR request from which to gather stats
 */ const $e88cd91ee18355c1$var$getRequestStats = (request)=>{
    return {
        bandwidth: request.bandwidth,
        bytesReceived: request.bytesReceived || 0,
        roundTripTime: request.roundTripTime || 0
    };
};
/**
 * If possible gather bandwidth stats as a request is in
 * progress
 *
 * @param {Event} progressEvent - an event object from an XHR's progress event
 */ const $e88cd91ee18355c1$var$getProgressStats = (progressEvent)=>{
    const request = progressEvent.target;
    const roundTripTime = Date.now() - request.requestTime;
    const stats = {
        bandwidth: Infinity,
        bytesReceived: 0,
        roundTripTime: roundTripTime || 0
    };
    stats.bytesReceived = progressEvent.loaded; // This can result in Infinity if stats.roundTripTime is 0 but that is ok
    // because we should only use bandwidth stats on progress to determine when
    // abort a request early due to insufficient bandwidth
    stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8000);
    return stats;
};
/**
 * Handle all error conditions in one place and return an object
 * with all the information
 *
 * @param {Error|null} error - if non-null signals an error occured with the XHR
 * @param {Object} request -  the XHR request that possibly generated the error
 */ const $e88cd91ee18355c1$var$handleErrors = (error, request)=>{
    if (request.timedout) return {
        status: request.status,
        message: "HLS request timed-out at URL: " + request.uri,
        code: $e88cd91ee18355c1$var$REQUEST_ERRORS.TIMEOUT,
        xhr: request
    };
    if (request.aborted) return {
        status: request.status,
        message: "HLS request aborted at URL: " + request.uri,
        code: $e88cd91ee18355c1$var$REQUEST_ERRORS.ABORTED,
        xhr: request
    };
    if (error) return {
        status: request.status,
        message: "HLS request errored at URL: " + request.uri,
        code: $e88cd91ee18355c1$var$REQUEST_ERRORS.FAILURE,
        xhr: request
    };
    if (request.responseType === "arraybuffer" && request.response.byteLength === 0) return {
        status: request.status,
        message: "Empty HLS response at URL: " + request.uri,
        code: $e88cd91ee18355c1$var$REQUEST_ERRORS.FAILURE,
        xhr: request
    };
    return null;
};
/**
 * Handle responses for key data and convert the key data to the correct format
 * for the decryption step later
 *
 * @param {Object} segment - a simplified copy of the segmentInfo object
 *                           from SegmentLoader
 * @param {Array} objects - objects to add the key bytes to.
 * @param {Function} finishProcessingFn - a callback to execute to continue processing
 *                                        this request
 */ const $e88cd91ee18355c1$var$handleKeyResponse = (segment, objects, finishProcessingFn)=>(error, request)=>{
        const response = request.response;
        const errorObj = $e88cd91ee18355c1$var$handleErrors(error, request);
        if (errorObj) return finishProcessingFn(errorObj, segment);
        if (response.byteLength !== 16) return finishProcessingFn({
            status: request.status,
            message: "Invalid HLS key at URL: " + request.uri,
            code: $e88cd91ee18355c1$var$REQUEST_ERRORS.FAILURE,
            xhr: request
        }, segment);
        const view = new DataView(response);
        const bytes = new Uint32Array([
            view.getUint32(0),
            view.getUint32(4),
            view.getUint32(8),
            view.getUint32(12)
        ]);
        for(let i = 0; i < objects.length; i++)objects[i].bytes = bytes;
        return finishProcessingFn(null, segment);
    };
const $e88cd91ee18355c1$var$parseInitSegment = (segment, callback)=>{
    const type = (0, $4595dd0b95b78e8a$export$894319e75ed840c3)(segment.map.bytes); // TODO: We should also handle ts init segments here, but we
    // only know how to parse mp4 init segments at the moment
    if (type !== "mp4") {
        const uri = segment.map.resolvedUri || segment.map.uri;
        return callback({
            internal: true,
            message: `Found unsupported ${type || "unknown"} container for initialization segment at URL: ${uri}`,
            code: $e88cd91ee18355c1$var$REQUEST_ERRORS.FAILURE
        });
    }
    $e88cd91ee18355c1$var$workerCallback({
        action: "probeMp4Tracks",
        data: segment.map.bytes,
        transmuxer: segment.transmuxer,
        callback: ({ tracks: tracks, data: data })=>{
            // transfer bytes back to us
            segment.map.bytes = data;
            tracks.forEach(function(track) {
                segment.map.tracks = segment.map.tracks || {}; // only support one track of each type for now
                if (segment.map.tracks[track.type]) return;
                segment.map.tracks[track.type] = track;
                if (typeof track.id === "number" && track.timescale) {
                    segment.map.timescales = segment.map.timescales || {};
                    segment.map.timescales[track.id] = track.timescale;
                }
            });
            return callback(null);
        }
    });
};
/**
 * Handle init-segment responses
 *
 * @param {Object} segment - a simplified copy of the segmentInfo object
 *                           from SegmentLoader
 * @param {Function} finishProcessingFn - a callback to execute to continue processing
 *                                        this request
 */ const $e88cd91ee18355c1$var$handleInitSegmentResponse = ({ segment: segment, finishProcessingFn: finishProcessingFn })=>(error, request)=>{
        const errorObj = $e88cd91ee18355c1$var$handleErrors(error, request);
        if (errorObj) return finishProcessingFn(errorObj, segment);
        const bytes = new Uint8Array(request.response); // init segment is encypted, we will have to wait
        // until the key request is done to decrypt.
        if (segment.map.key) {
            segment.map.encryptedBytes = bytes;
            return finishProcessingFn(null, segment);
        }
        segment.map.bytes = bytes;
        $e88cd91ee18355c1$var$parseInitSegment(segment, function(parseError) {
            if (parseError) {
                parseError.xhr = request;
                parseError.status = request.status;
                return finishProcessingFn(parseError, segment);
            }
            finishProcessingFn(null, segment);
        });
    };
/**
 * Response handler for segment-requests being sure to set the correct
 * property depending on whether the segment is encryped or not
 * Also records and keeps track of stats that are used for ABR purposes
 *
 * @param {Object} segment - a simplified copy of the segmentInfo object
 *                           from SegmentLoader
 * @param {Function} finishProcessingFn - a callback to execute to continue processing
 *                                        this request
 */ const $e88cd91ee18355c1$var$handleSegmentResponse = ({ segment: segment, finishProcessingFn: finishProcessingFn, responseType: responseType })=>(error, request)=>{
        const errorObj = $e88cd91ee18355c1$var$handleErrors(error, request);
        if (errorObj) return finishProcessingFn(errorObj, segment);
        const newBytes = // although responseText "should" exist, this guard serves to prevent an error being
        // thrown for two primary cases:
        // 1. the mime type override stops working, or is not implemented for a specific
        //    browser
        // 2. when using mock XHR libraries like sinon that do not allow the override behavior
        responseType === "arraybuffer" || !request.responseText ? request.response : $e88cd91ee18355c1$var$stringToArrayBuffer(request.responseText.substring(segment.lastReachedChar || 0));
        segment.stats = $e88cd91ee18355c1$var$getRequestStats(request);
        if (segment.key) segment.encryptedBytes = new Uint8Array(newBytes);
        else segment.bytes = new Uint8Array(newBytes);
        return finishProcessingFn(null, segment);
    };
const $e88cd91ee18355c1$var$transmuxAndNotify = ({ segment: segment, bytes: bytes, trackInfoFn: trackInfoFn, timingInfoFn: timingInfoFn, videoSegmentTimingInfoFn: videoSegmentTimingInfoFn, audioSegmentTimingInfoFn: audioSegmentTimingInfoFn, id3Fn: id3Fn, captionsFn: captionsFn, isEndOfTimeline: isEndOfTimeline, endedTimelineFn: endedTimelineFn, dataFn: dataFn, doneFn: doneFn, onTransmuxerLog: onTransmuxerLog })=>{
    const fmp4Tracks = segment.map && segment.map.tracks || {};
    const isMuxed = Boolean(fmp4Tracks.audio && fmp4Tracks.video); // Keep references to each function so we can null them out after we're done with them.
    // One reason for this is that in the case of full segments, we want to trust start
    // times from the probe, rather than the transmuxer.
    let audioStartFn = timingInfoFn.bind(null, segment, "audio", "start");
    const audioEndFn = timingInfoFn.bind(null, segment, "audio", "end");
    let videoStartFn = timingInfoFn.bind(null, segment, "video", "start");
    const videoEndFn = timingInfoFn.bind(null, segment, "video", "end");
    const finish = ()=>$e88cd91ee18355c1$var$transmux({
            bytes: bytes,
            transmuxer: segment.transmuxer,
            audioAppendStart: segment.audioAppendStart,
            gopsToAlignWith: segment.gopsToAlignWith,
            remux: isMuxed,
            onData: (result)=>{
                result.type = result.type === "combined" ? "video" : result.type;
                dataFn(segment, result);
            },
            onTrackInfo: (trackInfo)=>{
                if (trackInfoFn) {
                    if (isMuxed) trackInfo.isMuxed = true;
                    trackInfoFn(segment, trackInfo);
                }
            },
            onAudioTimingInfo: (audioTimingInfo)=>{
                // we only want the first start value we encounter
                if (audioStartFn && typeof audioTimingInfo.start !== "undefined") {
                    audioStartFn(audioTimingInfo.start);
                    audioStartFn = null;
                } // we want to continually update the end time
                if (audioEndFn && typeof audioTimingInfo.end !== "undefined") audioEndFn(audioTimingInfo.end);
            },
            onVideoTimingInfo: (videoTimingInfo)=>{
                // we only want the first start value we encounter
                if (videoStartFn && typeof videoTimingInfo.start !== "undefined") {
                    videoStartFn(videoTimingInfo.start);
                    videoStartFn = null;
                } // we want to continually update the end time
                if (videoEndFn && typeof videoTimingInfo.end !== "undefined") videoEndFn(videoTimingInfo.end);
            },
            onVideoSegmentTimingInfo: (videoSegmentTimingInfo)=>{
                videoSegmentTimingInfoFn(videoSegmentTimingInfo);
            },
            onAudioSegmentTimingInfo: (audioSegmentTimingInfo)=>{
                audioSegmentTimingInfoFn(audioSegmentTimingInfo);
            },
            onId3: (id3Frames, dispatchType)=>{
                id3Fn(segment, id3Frames, dispatchType);
            },
            onCaptions: (captions)=>{
                captionsFn(segment, [
                    captions
                ]);
            },
            isEndOfTimeline: isEndOfTimeline,
            onEndedTimeline: ()=>{
                endedTimelineFn();
            },
            onTransmuxerLog: onTransmuxerLog,
            onDone: (result)=>{
                if (!doneFn) return;
                result.type = result.type === "combined" ? "video" : result.type;
                doneFn(null, segment, result);
            }
        }); // In the transmuxer, we don't yet have the ability to extract a "proper" start time.
    // Meaning cached frame data may corrupt our notion of where this segment
    // really starts. To get around this, probe for the info needed.
    $e88cd91ee18355c1$var$workerCallback({
        action: "probeTs",
        transmuxer: segment.transmuxer,
        data: bytes,
        baseStartTime: segment.baseStartTime,
        callback: (data)=>{
            segment.bytes = bytes = data.data;
            const probeResult = data.result;
            if (probeResult) {
                trackInfoFn(segment, {
                    hasAudio: probeResult.hasAudio,
                    hasVideo: probeResult.hasVideo,
                    isMuxed: isMuxed
                });
                trackInfoFn = null;
            }
            finish();
        }
    });
};
const $e88cd91ee18355c1$var$handleSegmentBytes = ({ segment: segment, bytes: bytes, trackInfoFn: trackInfoFn, timingInfoFn: timingInfoFn, videoSegmentTimingInfoFn: videoSegmentTimingInfoFn, audioSegmentTimingInfoFn: audioSegmentTimingInfoFn, id3Fn: id3Fn, captionsFn: captionsFn, isEndOfTimeline: isEndOfTimeline, endedTimelineFn: endedTimelineFn, dataFn: dataFn, doneFn: doneFn, onTransmuxerLog: onTransmuxerLog })=>{
    let bytesAsUint8Array = new Uint8Array(bytes); // TODO:
    // We should have a handler that fetches the number of bytes required
    // to check if something is fmp4. This will allow us to save bandwidth
    // because we can only exclude a playlist and abort requests
    // by codec after trackinfo triggers.
    if ((0, $4595dd0b95b78e8a$export$7d0b693bd7ec7827)(bytesAsUint8Array)) {
        segment.isFmp4 = true;
        const { tracks: tracks } = segment.map;
        const trackInfo = {
            isFmp4: true,
            hasVideo: !!tracks.video,
            hasAudio: !!tracks.audio
        }; // if we have a audio track, with a codec that is not set to
        // encrypted audio
        if (tracks.audio && tracks.audio.codec && tracks.audio.codec !== "enca") trackInfo.audioCodec = tracks.audio.codec;
         // if we have a video track, with a codec that is not set to
        // encrypted video
        if (tracks.video && tracks.video.codec && tracks.video.codec !== "encv") trackInfo.videoCodec = tracks.video.codec;
        if (tracks.video && tracks.audio) trackInfo.isMuxed = true;
         // since we don't support appending fmp4 data on progress, we know we have the full
        // segment here
        trackInfoFn(segment, trackInfo); // The probe doesn't provide the segment end time, so only callback with the start
        // time. The end time can be roughly calculated by the receiver using the duration.
        //
        // Note that the start time returned by the probe reflects the baseMediaDecodeTime, as
        // that is the true start of the segment (where the playback engine should begin
        // decoding).
        const finishLoading = (captions, id3Frames)=>{
            // if the track still has audio at this point it is only possible
            // for it to be audio only. See `tracks.video && tracks.audio` if statement
            // above.
            // we make sure to use segment.bytes here as that
            dataFn(segment, {
                data: bytesAsUint8Array,
                type: trackInfo.hasAudio && !trackInfo.isMuxed ? "audio" : "video"
            });
            if (id3Frames && id3Frames.length) id3Fn(segment, id3Frames);
            if (captions && captions.length) captionsFn(segment, captions);
            doneFn(null, segment, {});
        };
        $e88cd91ee18355c1$var$workerCallback({
            action: "probeMp4StartTime",
            timescales: segment.map.timescales,
            data: bytesAsUint8Array,
            transmuxer: segment.transmuxer,
            callback: ({ data: data, startTime: startTime })=>{
                // transfer bytes back to us
                bytes = data.buffer;
                segment.bytes = bytesAsUint8Array = data;
                if (trackInfo.hasAudio && !trackInfo.isMuxed) timingInfoFn(segment, "audio", "start", startTime);
                if (trackInfo.hasVideo) timingInfoFn(segment, "video", "start", startTime);
                $e88cd91ee18355c1$var$workerCallback({
                    action: "probeEmsgID3",
                    data: bytesAsUint8Array,
                    transmuxer: segment.transmuxer,
                    offset: startTime,
                    callback: ({ emsgData: emsgData, id3Frames: id3Frames })=>{
                        // transfer bytes back to us
                        bytes = emsgData.buffer;
                        segment.bytes = bytesAsUint8Array = emsgData; // Run through the CaptionParser in case there are captions.
                        // Initialize CaptionParser if it hasn't been yet
                        if (!tracks.video || !emsgData.byteLength || !segment.transmuxer) {
                            finishLoading(undefined, id3Frames);
                            return;
                        }
                        $e88cd91ee18355c1$var$workerCallback({
                            action: "pushMp4Captions",
                            endAction: "mp4Captions",
                            transmuxer: segment.transmuxer,
                            data: bytesAsUint8Array,
                            timescales: segment.map.timescales,
                            trackIds: [
                                tracks.video.id
                            ],
                            callback: (message)=>{
                                // transfer bytes back to us
                                bytes = message.data.buffer;
                                segment.bytes = bytesAsUint8Array = message.data;
                                message.logs.forEach(function(log) {
                                    onTransmuxerLog($e88cd91ee18355c1$var$merge(log, {
                                        stream: "mp4CaptionParser"
                                    }));
                                });
                                finishLoading(message.captions, id3Frames);
                            }
                        });
                    }
                });
            }
        });
        return;
    } // VTT or other segments that don't need processing
    if (!segment.transmuxer) {
        doneFn(null, segment, {});
        return;
    }
    if (typeof segment.container === "undefined") segment.container = (0, $4595dd0b95b78e8a$export$894319e75ed840c3)(bytesAsUint8Array);
    if (segment.container !== "ts" && segment.container !== "aac") {
        trackInfoFn(segment, {
            hasAudio: false,
            hasVideo: false
        });
        doneFn(null, segment, {});
        return;
    } // ts or aac
    $e88cd91ee18355c1$var$transmuxAndNotify({
        segment: segment,
        bytes: bytes,
        trackInfoFn: trackInfoFn,
        timingInfoFn: timingInfoFn,
        videoSegmentTimingInfoFn: videoSegmentTimingInfoFn,
        audioSegmentTimingInfoFn: audioSegmentTimingInfoFn,
        id3Fn: id3Fn,
        captionsFn: captionsFn,
        isEndOfTimeline: isEndOfTimeline,
        endedTimelineFn: endedTimelineFn,
        dataFn: dataFn,
        doneFn: doneFn,
        onTransmuxerLog: onTransmuxerLog
    });
};
const $e88cd91ee18355c1$var$decrypt = function({ id: id, key: key, encryptedBytes: encryptedBytes, decryptionWorker: decryptionWorker }, callback) {
    const decryptionHandler = (event)=>{
        if (event.data.source === id) {
            decryptionWorker.removeEventListener("message", decryptionHandler);
            const decrypted = event.data.decrypted;
            callback(new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength));
        }
    };
    decryptionWorker.addEventListener("message", decryptionHandler);
    let keyBytes;
    if (key.bytes.slice) keyBytes = key.bytes.slice();
    else keyBytes = new Uint32Array(Array.prototype.slice.call(key.bytes));
     // incrementally decrypt the bytes
    decryptionWorker.postMessage($e88cd91ee18355c1$var$createTransferableMessage({
        source: id,
        encrypted: encryptedBytes,
        key: keyBytes,
        iv: key.iv
    }), [
        encryptedBytes.buffer,
        keyBytes.buffer
    ]);
};
/**
 * Decrypt the segment via the decryption web worker
 *
 * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128 decryption
 *                                       routines
 * @param {Object} segment - a simplified copy of the segmentInfo object
 *                           from SegmentLoader
 * @param {Function} trackInfoFn - a callback that receives track info
 * @param {Function} timingInfoFn - a callback that receives timing info
 * @param {Function} videoSegmentTimingInfoFn
 *                   a callback that receives video timing info based on media times and
 *                   any adjustments made by the transmuxer
 * @param {Function} audioSegmentTimingInfoFn
 *                   a callback that receives audio timing info based on media times and
 *                   any adjustments made by the transmuxer
 * @param {boolean}  isEndOfTimeline
 *                   true if this segment represents the last segment in a timeline
 * @param {Function} endedTimelineFn
 *                   a callback made when a timeline is ended, will only be called if
 *                   isEndOfTimeline is true
 * @param {Function} dataFn - a callback that is executed when segment bytes are available
 *                            and ready to use
 * @param {Function} doneFn - a callback that is executed after decryption has completed
 */ const $e88cd91ee18355c1$var$decryptSegment = ({ decryptionWorker: decryptionWorker, segment: segment, trackInfoFn: trackInfoFn, timingInfoFn: timingInfoFn, videoSegmentTimingInfoFn: videoSegmentTimingInfoFn, audioSegmentTimingInfoFn: audioSegmentTimingInfoFn, id3Fn: id3Fn, captionsFn: captionsFn, isEndOfTimeline: isEndOfTimeline, endedTimelineFn: endedTimelineFn, dataFn: dataFn, doneFn: doneFn, onTransmuxerLog: onTransmuxerLog })=>{
    $e88cd91ee18355c1$var$decrypt({
        id: segment.requestId,
        key: segment.key,
        encryptedBytes: segment.encryptedBytes,
        decryptionWorker: decryptionWorker
    }, (decryptedBytes)=>{
        segment.bytes = decryptedBytes;
        $e88cd91ee18355c1$var$handleSegmentBytes({
            segment: segment,
            bytes: segment.bytes,
            trackInfoFn: trackInfoFn,
            timingInfoFn: timingInfoFn,
            videoSegmentTimingInfoFn: videoSegmentTimingInfoFn,
            audioSegmentTimingInfoFn: audioSegmentTimingInfoFn,
            id3Fn: id3Fn,
            captionsFn: captionsFn,
            isEndOfTimeline: isEndOfTimeline,
            endedTimelineFn: endedTimelineFn,
            dataFn: dataFn,
            doneFn: doneFn,
            onTransmuxerLog: onTransmuxerLog
        });
    });
};
/**
 * This function waits for all XHRs to finish (with either success or failure)
 * before continueing processing via it's callback. The function gathers errors
 * from each request into a single errors array so that the error status for
 * each request can be examined later.
 *
 * @param {Object} activeXhrs - an object that tracks all XHR requests
 * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128 decryption
 *                                       routines
 * @param {Function} trackInfoFn - a callback that receives track info
 * @param {Function} timingInfoFn - a callback that receives timing info
 * @param {Function} videoSegmentTimingInfoFn
 *                   a callback that receives video timing info based on media times and
 *                   any adjustments made by the transmuxer
 * @param {Function} audioSegmentTimingInfoFn
 *                   a callback that receives audio timing info based on media times and
 *                   any adjustments made by the transmuxer
 * @param {Function} id3Fn - a callback that receives ID3 metadata
 * @param {Function} captionsFn - a callback that receives captions
 * @param {boolean}  isEndOfTimeline
 *                   true if this segment represents the last segment in a timeline
 * @param {Function} endedTimelineFn
 *                   a callback made when a timeline is ended, will only be called if
 *                   isEndOfTimeline is true
 * @param {Function} dataFn - a callback that is executed when segment bytes are available
 *                            and ready to use
 * @param {Function} doneFn - a callback that is executed after all resources have been
 *                            downloaded and any decryption completed
 */ const $e88cd91ee18355c1$var$waitForCompletion = ({ activeXhrs: activeXhrs, decryptionWorker: decryptionWorker, trackInfoFn: trackInfoFn, timingInfoFn: timingInfoFn, videoSegmentTimingInfoFn: videoSegmentTimingInfoFn, audioSegmentTimingInfoFn: audioSegmentTimingInfoFn, id3Fn: id3Fn, captionsFn: captionsFn, isEndOfTimeline: isEndOfTimeline, endedTimelineFn: endedTimelineFn, dataFn: dataFn, doneFn: doneFn, onTransmuxerLog: onTransmuxerLog })=>{
    let count = 0;
    let didError = false;
    return (error, segment)=>{
        if (didError) return;
        if (error) {
            didError = true; // If there are errors, we have to abort any outstanding requests
            $e88cd91ee18355c1$var$abortAll(activeXhrs); // Even though the requests above are aborted, and in theory we could wait until we
            // handle the aborted events from those requests, there are some cases where we may
            // never get an aborted event. For instance, if the network connection is lost and
            // there were two requests, the first may have triggered an error immediately, while
            // the second request remains unsent. In that case, the aborted algorithm will not
            // trigger an abort: see https://xhr.spec.whatwg.org/#the-abort()-method
            //
            // We also can't rely on the ready state of the XHR, since the request that
            // triggered the connection error may also show as a ready state of 0 (unsent).
            // Therefore, we have to finish this group of requests immediately after the first
            // seen error.
            return doneFn(error, segment);
        }
        count += 1;
        if (count === activeXhrs.length) {
            const segmentFinish = function() {
                if (segment.encryptedBytes) return $e88cd91ee18355c1$var$decryptSegment({
                    decryptionWorker: decryptionWorker,
                    segment: segment,
                    trackInfoFn: trackInfoFn,
                    timingInfoFn: timingInfoFn,
                    videoSegmentTimingInfoFn: videoSegmentTimingInfoFn,
                    audioSegmentTimingInfoFn: audioSegmentTimingInfoFn,
                    id3Fn: id3Fn,
                    captionsFn: captionsFn,
                    isEndOfTimeline: isEndOfTimeline,
                    endedTimelineFn: endedTimelineFn,
                    dataFn: dataFn,
                    doneFn: doneFn,
                    onTransmuxerLog: onTransmuxerLog
                });
                 // Otherwise, everything is ready just continue
                $e88cd91ee18355c1$var$handleSegmentBytes({
                    segment: segment,
                    bytes: segment.bytes,
                    trackInfoFn: trackInfoFn,
                    timingInfoFn: timingInfoFn,
                    videoSegmentTimingInfoFn: videoSegmentTimingInfoFn,
                    audioSegmentTimingInfoFn: audioSegmentTimingInfoFn,
                    id3Fn: id3Fn,
                    captionsFn: captionsFn,
                    isEndOfTimeline: isEndOfTimeline,
                    endedTimelineFn: endedTimelineFn,
                    dataFn: dataFn,
                    doneFn: doneFn,
                    onTransmuxerLog: onTransmuxerLog
                });
            }; // Keep track of when *all* of the requests have completed
            segment.endOfAllRequests = Date.now();
            if (segment.map && segment.map.encryptedBytes && !segment.map.bytes) return $e88cd91ee18355c1$var$decrypt({
                decryptionWorker: decryptionWorker,
                // add -init to the "id" to differentiate between segment
                // and init segment decryption, just in case they happen
                // at the same time at some point in the future.
                id: segment.requestId + "-init",
                encryptedBytes: segment.map.encryptedBytes,
                key: segment.map.key
            }, (decryptedBytes)=>{
                segment.map.bytes = decryptedBytes;
                $e88cd91ee18355c1$var$parseInitSegment(segment, (parseError)=>{
                    if (parseError) {
                        $e88cd91ee18355c1$var$abortAll(activeXhrs);
                        return doneFn(parseError, segment);
                    }
                    segmentFinish();
                });
            });
            segmentFinish();
        }
    };
};
/**
 * Calls the abort callback if any request within the batch was aborted. Will only call
 * the callback once per batch of requests, even if multiple were aborted.
 *
 * @param {Object} loadendState - state to check to see if the abort function was called
 * @param {Function} abortFn - callback to call for abort
 */ const $e88cd91ee18355c1$var$handleLoadEnd = ({ loadendState: loadendState, abortFn: abortFn })=>(event)=>{
        const request = event.target;
        if (request.aborted && abortFn && !loadendState.calledAbortFn) {
            abortFn();
            loadendState.calledAbortFn = true;
        }
    };
/**
 * Simple progress event callback handler that gathers some stats before
 * executing a provided callback with the `segment` object
 *
 * @param {Object} segment - a simplified copy of the segmentInfo object
 *                           from SegmentLoader
 * @param {Function} progressFn - a callback that is executed each time a progress event
 *                                is received
 * @param {Function} trackInfoFn - a callback that receives track info
 * @param {Function} timingInfoFn - a callback that receives timing info
 * @param {Function} videoSegmentTimingInfoFn
 *                   a callback that receives video timing info based on media times and
 *                   any adjustments made by the transmuxer
 * @param {Function} audioSegmentTimingInfoFn
 *                   a callback that receives audio timing info based on media times and
 *                   any adjustments made by the transmuxer
 * @param {boolean}  isEndOfTimeline
 *                   true if this segment represents the last segment in a timeline
 * @param {Function} endedTimelineFn
 *                   a callback made when a timeline is ended, will only be called if
 *                   isEndOfTimeline is true
 * @param {Function} dataFn - a callback that is executed when segment bytes are available
 *                            and ready to use
 * @param {Event} event - the progress event object from XMLHttpRequest
 */ const $e88cd91ee18355c1$var$handleProgress = ({ segment: segment, progressFn: progressFn, trackInfoFn: trackInfoFn, timingInfoFn: timingInfoFn, videoSegmentTimingInfoFn: videoSegmentTimingInfoFn, audioSegmentTimingInfoFn: audioSegmentTimingInfoFn, id3Fn: id3Fn, captionsFn: captionsFn, isEndOfTimeline: isEndOfTimeline, endedTimelineFn: endedTimelineFn, dataFn: dataFn })=>(event)=>{
        const request = event.target;
        if (request.aborted) return;
        segment.stats = $e88cd91ee18355c1$var$merge(segment.stats, $e88cd91ee18355c1$var$getProgressStats(event)); // record the time that we receive the first byte of data
        if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) segment.stats.firstBytesReceivedAt = Date.now();
        return progressFn(event, segment);
    };
/**
 * Load all resources and does any processing necessary for a media-segment
 *
 * Features:
 *   decrypts the media-segment if it has a key uri and an iv
 *   aborts *all* requests if *any* one request fails
 *
 * The segment object, at minimum, has the following format:
 * {
 *   resolvedUri: String,
 *   [transmuxer]: Object,
 *   [byterange]: {
 *     offset: Number,
 *     length: Number
 *   },
 *   [key]: {
 *     resolvedUri: String
 *     [byterange]: {
 *       offset: Number,
 *       length: Number
 *     },
 *     iv: {
 *       bytes: Uint32Array
 *     }
 *   },
 *   [map]: {
 *     resolvedUri: String,
 *     [byterange]: {
 *       offset: Number,
 *       length: Number
 *     },
 *     [bytes]: Uint8Array
 *   }
 * }
 * ...where [name] denotes optional properties
 *
 * @param {Function} xhr - an instance of the xhr wrapper in xhr.js
 * @param {Object} xhrOptions - the base options to provide to all xhr requests
 * @param {WebWorker} decryptionWorker - a WebWorker interface to AES-128
 *                                       decryption routines
 * @param {Object} segment - a simplified copy of the segmentInfo object
 *                           from SegmentLoader
 * @param {Function} abortFn - a callback called (only once) if any piece of a request was
 *                             aborted
 * @param {Function} progressFn - a callback that receives progress events from the main
 *                                segment's xhr request
 * @param {Function} trackInfoFn - a callback that receives track info
 * @param {Function} timingInfoFn - a callback that receives timing info
 * @param {Function} videoSegmentTimingInfoFn
 *                   a callback that receives video timing info based on media times and
 *                   any adjustments made by the transmuxer
 * @param {Function} audioSegmentTimingInfoFn
 *                   a callback that receives audio timing info based on media times and
 *                   any adjustments made by the transmuxer
 * @param {Function} id3Fn - a callback that receives ID3 metadata
 * @param {Function} captionsFn - a callback that receives captions
 * @param {boolean}  isEndOfTimeline
 *                   true if this segment represents the last segment in a timeline
 * @param {Function} endedTimelineFn
 *                   a callback made when a timeline is ended, will only be called if
 *                   isEndOfTimeline is true
 * @param {Function} dataFn - a callback that receives data from the main segment's xhr
 *                            request, transmuxed if needed
 * @param {Function} doneFn - a callback that is executed only once all requests have
 *                            succeeded or failed
 * @return {Function} a function that, when invoked, immediately aborts all
 *                     outstanding requests
 */ const $e88cd91ee18355c1$var$mediaSegmentRequest = ({ xhr: xhr, xhrOptions: xhrOptions, decryptionWorker: decryptionWorker, segment: segment, abortFn: abortFn, progressFn: progressFn, trackInfoFn: trackInfoFn, timingInfoFn: timingInfoFn, videoSegmentTimingInfoFn: videoSegmentTimingInfoFn, audioSegmentTimingInfoFn: audioSegmentTimingInfoFn, id3Fn: id3Fn, captionsFn: captionsFn, isEndOfTimeline: isEndOfTimeline, endedTimelineFn: endedTimelineFn, dataFn: dataFn, doneFn: doneFn, onTransmuxerLog: onTransmuxerLog })=>{
    const activeXhrs = [];
    const finishProcessingFn = $e88cd91ee18355c1$var$waitForCompletion({
        activeXhrs: activeXhrs,
        decryptionWorker: decryptionWorker,
        trackInfoFn: trackInfoFn,
        timingInfoFn: timingInfoFn,
        videoSegmentTimingInfoFn: videoSegmentTimingInfoFn,
        audioSegmentTimingInfoFn: audioSegmentTimingInfoFn,
        id3Fn: id3Fn,
        captionsFn: captionsFn,
        isEndOfTimeline: isEndOfTimeline,
        endedTimelineFn: endedTimelineFn,
        dataFn: dataFn,
        doneFn: doneFn,
        onTransmuxerLog: onTransmuxerLog
    }); // optionally, request the decryption key
    if (segment.key && !segment.key.bytes) {
        const objects = [
            segment.key
        ];
        if (segment.map && !segment.map.bytes && segment.map.key && segment.map.key.resolvedUri === segment.key.resolvedUri) objects.push(segment.map.key);
        const keyRequestOptions = $e88cd91ee18355c1$var$merge(xhrOptions, {
            uri: segment.key.resolvedUri,
            responseType: "arraybuffer"
        });
        const keyRequestCallback = $e88cd91ee18355c1$var$handleKeyResponse(segment, objects, finishProcessingFn);
        const keyXhr = xhr(keyRequestOptions, keyRequestCallback);
        activeXhrs.push(keyXhr);
    } // optionally, request the associated media init segment
    if (segment.map && !segment.map.bytes) {
        const differentMapKey = segment.map.key && (!segment.key || segment.key.resolvedUri !== segment.map.key.resolvedUri);
        if (differentMapKey) {
            const mapKeyRequestOptions = $e88cd91ee18355c1$var$merge(xhrOptions, {
                uri: segment.map.key.resolvedUri,
                responseType: "arraybuffer"
            });
            const mapKeyRequestCallback = $e88cd91ee18355c1$var$handleKeyResponse(segment, [
                segment.map.key
            ], finishProcessingFn);
            const mapKeyXhr = xhr(mapKeyRequestOptions, mapKeyRequestCallback);
            activeXhrs.push(mapKeyXhr);
        }
        const initSegmentOptions = $e88cd91ee18355c1$var$merge(xhrOptions, {
            uri: segment.map.resolvedUri,
            responseType: "arraybuffer",
            headers: $e88cd91ee18355c1$var$segmentXhrHeaders(segment.map)
        });
        const initSegmentRequestCallback = $e88cd91ee18355c1$var$handleInitSegmentResponse({
            segment: segment,
            finishProcessingFn: finishProcessingFn
        });
        const initSegmentXhr = xhr(initSegmentOptions, initSegmentRequestCallback);
        activeXhrs.push(initSegmentXhr);
    }
    const segmentRequestOptions = $e88cd91ee18355c1$var$merge(xhrOptions, {
        uri: segment.part && segment.part.resolvedUri || segment.resolvedUri,
        responseType: "arraybuffer",
        headers: $e88cd91ee18355c1$var$segmentXhrHeaders(segment)
    });
    const segmentRequestCallback = $e88cd91ee18355c1$var$handleSegmentResponse({
        segment: segment,
        finishProcessingFn: finishProcessingFn,
        responseType: segmentRequestOptions.responseType
    });
    const segmentXhr = xhr(segmentRequestOptions, segmentRequestCallback);
    segmentXhr.addEventListener("progress", $e88cd91ee18355c1$var$handleProgress({
        segment: segment,
        progressFn: progressFn,
        trackInfoFn: trackInfoFn,
        timingInfoFn: timingInfoFn,
        videoSegmentTimingInfoFn: videoSegmentTimingInfoFn,
        audioSegmentTimingInfoFn: audioSegmentTimingInfoFn,
        id3Fn: id3Fn,
        captionsFn: captionsFn,
        isEndOfTimeline: isEndOfTimeline,
        endedTimelineFn: endedTimelineFn,
        dataFn: dataFn
    }));
    activeXhrs.push(segmentXhr); // since all parts of the request must be considered, but should not make callbacks
    // multiple times, provide a shared state object
    const loadendState = {};
    activeXhrs.forEach((activeXhr)=>{
        activeXhr.addEventListener("loadend", $e88cd91ee18355c1$var$handleLoadEnd({
            loadendState: loadendState,
            abortFn: abortFn
        }));
    });
    return ()=>$e88cd91ee18355c1$var$abortAll(activeXhrs);
};
/**
 * @file - codecs.js - Handles tasks regarding codec strings such as translating them to
 * codec strings, or translating codec strings into objects that can be examined.
 */ const $e88cd91ee18355c1$var$logFn$1 = $e88cd91ee18355c1$var$logger("CodecUtils");
/**
 * Returns a set of codec strings parsed from the playlist or the default
 * codec strings if no codecs were specified in the playlist
 *
 * @param {Playlist} media the current media playlist
 * @return {Object} an object with the video and audio codecs
 */ const $e88cd91ee18355c1$var$getCodecs = function(media) {
    // if the codecs were explicitly specified, use them instead of the
    // defaults
    const mediaAttributes = media.attributes || {};
    if (mediaAttributes.CODECS) return (0, $823f1f5df1bbf628$export$56679b562aa2891c)(mediaAttributes.CODECS);
};
const $e88cd91ee18355c1$var$isMaat = (main, media)=>{
    const mediaAttributes = media.attributes || {};
    return main && main.mediaGroups && main.mediaGroups.AUDIO && mediaAttributes.AUDIO && main.mediaGroups.AUDIO[mediaAttributes.AUDIO];
};
const $e88cd91ee18355c1$var$isMuxed = (main, media)=>{
    if (!$e88cd91ee18355c1$var$isMaat(main, media)) return true;
    const mediaAttributes = media.attributes || {};
    const audioGroup = main.mediaGroups.AUDIO[mediaAttributes.AUDIO];
    for(const groupId in audioGroup){
        // If an audio group has a URI (the case for HLS, as HLS will use external playlists),
        // or there are listed playlists (the case for DASH, as the manifest will have already
        // provided all of the details necessary to generate the audio playlist, as opposed to
        // HLS' externally requested playlists), then the content is demuxed.
        if (!audioGroup[groupId].uri && !audioGroup[groupId].playlists) return true;
    }
    return false;
};
const $e88cd91ee18355c1$var$unwrapCodecList = function(codecList) {
    const codecs = {};
    codecList.forEach(({ mediaType: mediaType, type: type, details: details })=>{
        codecs[mediaType] = codecs[mediaType] || [];
        codecs[mediaType].push((0, $823f1f5df1bbf628$export$4e61c3c458a5b005)(`${type}${details}`));
    });
    Object.keys(codecs).forEach(function(mediaType) {
        if (codecs[mediaType].length > 1) {
            $e88cd91ee18355c1$var$logFn$1(`multiple ${mediaType} codecs found as attributes: ${codecs[mediaType].join(", ")}. Setting playlist codecs to null so that we wait for mux.js to probe segments for real codecs.`);
            codecs[mediaType] = null;
            return;
        }
        codecs[mediaType] = codecs[mediaType][0];
    });
    return codecs;
};
const $e88cd91ee18355c1$var$codecCount = function(codecObj) {
    let count = 0;
    if (codecObj.audio) count++;
    if (codecObj.video) count++;
    return count;
};
/**
 * Calculates the codec strings for a working configuration of
 * SourceBuffers to play variant streams in a main playlist. If
 * there is no possible working configuration, an empty object will be
 * returned.
 *
 * @param main {Object} the m3u8 object for the main playlist
 * @param media {Object} the m3u8 object for the variant playlist
 * @return {Object} the codec strings.
 *
 * @private
 */ const $e88cd91ee18355c1$var$codecsForPlaylist = function(main, media) {
    const mediaAttributes = media.attributes || {};
    const codecInfo = $e88cd91ee18355c1$var$unwrapCodecList($e88cd91ee18355c1$var$getCodecs(media) || []); // HLS with multiple-audio tracks must always get an audio codec.
    // Put another way, there is no way to have a video-only multiple-audio HLS!
    if ($e88cd91ee18355c1$var$isMaat(main, media) && !codecInfo.audio) {
        if (!$e88cd91ee18355c1$var$isMuxed(main, media)) {
            // It is possible for codecs to be specified on the audio media group playlist but
            // not on the rendition playlist. This is mostly the case for DASH, where audio and
            // video are always separate (and separately specified).
            const defaultCodecs = $e88cd91ee18355c1$var$unwrapCodecList((0, $823f1f5df1bbf628$export$e192782a4d0b5c5c)(main, mediaAttributes.AUDIO) || []);
            if (defaultCodecs.audio) codecInfo.audio = defaultCodecs.audio;
        }
    }
    return codecInfo;
};
const $e88cd91ee18355c1$var$logFn = $e88cd91ee18355c1$var$logger("PlaylistSelector");
const $e88cd91ee18355c1$var$representationToString = function(representation) {
    if (!representation || !representation.playlist) return;
    const playlist = representation.playlist;
    return JSON.stringify({
        id: playlist.id,
        bandwidth: representation.bandwidth,
        width: representation.width,
        height: representation.height,
        codecs: playlist.attributes && playlist.attributes.CODECS || ""
    });
}; // Utilities
/**
 * Returns the CSS value for the specified property on an element
 * using `getComputedStyle`. Firefox has a long-standing issue where
 * getComputedStyle() may return null when running in an iframe with
 * `display: none`.
 *
 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397
 * @param {HTMLElement} el the htmlelement to work on
 * @param {string} the proprety to get the style for
 */ const $e88cd91ee18355c1$var$safeGetComputedStyle = function(el, property) {
    if (!el) return "";
    const result = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).getComputedStyle(el);
    if (!result) return "";
    return result[property];
};
/**
 * Resuable stable sort function
 *
 * @param {Playlists} array
 * @param {Function} sortFn Different comparators
 * @function stableSort
 */ const $e88cd91ee18355c1$var$stableSort = function(array, sortFn) {
    const newArray = array.slice();
    array.sort(function(left, right) {
        const cmp = sortFn(left, right);
        if (cmp === 0) return newArray.indexOf(left) - newArray.indexOf(right);
        return cmp;
    });
};
/**
 * A comparator function to sort two playlist object by bandwidth.
 *
 * @param {Object} left a media playlist object
 * @param {Object} right a media playlist object
 * @return {number} Greater than zero if the bandwidth attribute of
 * left is greater than the corresponding attribute of right. Less
 * than zero if the bandwidth of right is greater than left and
 * exactly zero if the two are equal.
 */ const $e88cd91ee18355c1$var$comparePlaylistBandwidth = function(left, right) {
    let leftBandwidth;
    let rightBandwidth;
    if (left.attributes.BANDWIDTH) leftBandwidth = left.attributes.BANDWIDTH;
    leftBandwidth = leftBandwidth || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).Number.MAX_VALUE;
    if (right.attributes.BANDWIDTH) rightBandwidth = right.attributes.BANDWIDTH;
    rightBandwidth = rightBandwidth || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).Number.MAX_VALUE;
    return leftBandwidth - rightBandwidth;
};
/**
 * A comparator function to sort two playlist object by resolution (width).
 *
 * @param {Object} left a media playlist object
 * @param {Object} right a media playlist object
 * @return {number} Greater than zero if the resolution.width attribute of
 * left is greater than the corresponding attribute of right. Less
 * than zero if the resolution.width of right is greater than left and
 * exactly zero if the two are equal.
 */ const $e88cd91ee18355c1$var$comparePlaylistResolution = function(left, right) {
    let leftWidth;
    let rightWidth;
    if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) leftWidth = left.attributes.RESOLUTION.width;
    leftWidth = leftWidth || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).Number.MAX_VALUE;
    if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) rightWidth = right.attributes.RESOLUTION.width;
    rightWidth = rightWidth || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).Number.MAX_VALUE; // NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions
    // have the same media dimensions/ resolution
    if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;
    return leftWidth - rightWidth;
};
/**
 * Chooses the appropriate media playlist based on bandwidth and player size
 *
 * @param {Object} main
 *        Object representation of the main manifest
 * @param {number} playerBandwidth
 *        Current calculated bandwidth of the player
 * @param {number} playerWidth
 *        Current width of the player element (should account for the device pixel ratio)
 * @param {number} playerHeight
 *        Current height of the player element (should account for the device pixel ratio)
 * @param {boolean} limitRenditionByPlayerDimensions
 *        True if the player width and height should be used during the selection, false otherwise
 * @param {Object} playlistController
 *        the current playlistController object
 * @return {Playlist} the highest bitrate playlist less than the
 * currently detected bandwidth, accounting for some amount of
 * bandwidth variance
 */ let $e88cd91ee18355c1$var$simpleSelector = function(main, playerBandwidth, playerWidth, playerHeight, limitRenditionByPlayerDimensions, playlistController) {
    // If we end up getting called before `main` is available, exit early
    if (!main) return;
    const options = {
        bandwidth: playerBandwidth,
        width: playerWidth,
        height: playerHeight,
        limitRenditionByPlayerDimensions: limitRenditionByPlayerDimensions
    };
    let playlists = main.playlists; // if playlist is audio only, select between currently active audio group playlists.
    if ($e88cd91ee18355c1$var$Playlist.isAudioOnly(main)) {
        playlists = playlistController.getAudioTrackPlaylists_(); // add audioOnly to options so that we log audioOnly: true
        // at the buttom of this function for debugging.
        options.audioOnly = true;
    } // convert the playlists to an intermediary representation to make comparisons easier
    let sortedPlaylistReps = playlists.map((playlist)=>{
        let bandwidth;
        const width = playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;
        const height = playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;
        bandwidth = playlist.attributes && playlist.attributes.BANDWIDTH;
        bandwidth = bandwidth || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).Number.MAX_VALUE;
        return {
            bandwidth: bandwidth,
            width: width,
            height: height,
            playlist: playlist
        };
    });
    $e88cd91ee18355c1$var$stableSort(sortedPlaylistReps, (left, right)=>left.bandwidth - right.bandwidth); // filter out any playlists that have been excluded due to
    // incompatible configurations
    sortedPlaylistReps = sortedPlaylistReps.filter((rep)=>!$e88cd91ee18355c1$var$Playlist.isIncompatible(rep.playlist)); // filter out any playlists that have been disabled manually through the representations
    // api or excluded temporarily due to playback errors.
    let enabledPlaylistReps = sortedPlaylistReps.filter((rep)=>$e88cd91ee18355c1$var$Playlist.isEnabled(rep.playlist));
    if (!enabledPlaylistReps.length) // if there are no enabled playlists, then they have all been excluded or disabled
    // by the user through the representations api. In this case, ignore exclusion and
    // fallback to what the user wants by using playlists the user has not disabled.
    enabledPlaylistReps = sortedPlaylistReps.filter((rep)=>!$e88cd91ee18355c1$var$Playlist.isDisabled(rep.playlist));
     // filter out any variant that has greater effective bitrate
    // than the current estimated bandwidth
    const bandwidthPlaylistReps = enabledPlaylistReps.filter((rep)=>rep.bandwidth * $e88cd91ee18355c1$var$Config.BANDWIDTH_VARIANCE < playerBandwidth);
    let highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1]; // get all of the renditions with the same (highest) bandwidth
    // and then taking the very first element
    const bandwidthBestRep = bandwidthPlaylistReps.filter((rep)=>rep.bandwidth === highestRemainingBandwidthRep.bandwidth)[0]; // if we're not going to limit renditions by player size, make an early decision.
    if (limitRenditionByPlayerDimensions === false) {
        const chosenRep = bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];
        if (chosenRep && chosenRep.playlist) {
            let type = "sortedPlaylistReps";
            if (bandwidthBestRep) type = "bandwidthBestRep";
            if (enabledPlaylistReps[0]) type = "enabledPlaylistReps";
            $e88cd91ee18355c1$var$logFn(`choosing ${$e88cd91ee18355c1$var$representationToString(chosenRep)} using ${type} with options`, options);
            return chosenRep.playlist;
        }
        $e88cd91ee18355c1$var$logFn("could not choose a playlist with options", options);
        return null;
    } // filter out playlists without resolution information
    const haveResolution = bandwidthPlaylistReps.filter((rep)=>rep.width && rep.height); // sort variants by resolution
    $e88cd91ee18355c1$var$stableSort(haveResolution, (left, right)=>left.width - right.width); // if we have the exact resolution as the player use it
    const resolutionBestRepList = haveResolution.filter((rep)=>rep.width === playerWidth && rep.height === playerHeight);
    highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1]; // ensure that we pick the highest bandwidth variant that have exact resolution
    const resolutionBestRep = resolutionBestRepList.filter((rep)=>rep.bandwidth === highestRemainingBandwidthRep.bandwidth)[0];
    let resolutionPlusOneList;
    let resolutionPlusOneSmallest;
    let resolutionPlusOneRep; // find the smallest variant that is larger than the player
    // if there is no match of exact resolution
    if (!resolutionBestRep) {
        resolutionPlusOneList = haveResolution.filter((rep)=>rep.width > playerWidth || rep.height > playerHeight); // find all the variants have the same smallest resolution
        resolutionPlusOneSmallest = resolutionPlusOneList.filter((rep)=>rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height); // ensure that we also pick the highest bandwidth variant that
        // is just-larger-than the video player
        highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];
        resolutionPlusOneRep = resolutionPlusOneSmallest.filter((rep)=>rep.bandwidth === highestRemainingBandwidthRep.bandwidth)[0];
    }
    let leastPixelDiffRep; // If this selector proves to be better than others,
    // resolutionPlusOneRep and resolutionBestRep and all
    // the code involving them should be removed.
    if (playlistController.leastPixelDiffSelector) {
        // find the variant that is closest to the player's pixel size
        const leastPixelDiffList = haveResolution.map((rep)=>{
            rep.pixelDiff = Math.abs(rep.width - playerWidth) + Math.abs(rep.height - playerHeight);
            return rep;
        }); // get the highest bandwidth, closest resolution playlist
        $e88cd91ee18355c1$var$stableSort(leastPixelDiffList, (left, right)=>{
            // sort by highest bandwidth if pixelDiff is the same
            if (left.pixelDiff === right.pixelDiff) return right.bandwidth - left.bandwidth;
            return left.pixelDiff - right.pixelDiff;
        });
        leastPixelDiffRep = leastPixelDiffList[0];
    } // fallback chain of variants
    const chosenRep = leastPixelDiffRep || resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];
    if (chosenRep && chosenRep.playlist) {
        let type = "sortedPlaylistReps";
        if (leastPixelDiffRep) type = "leastPixelDiffRep";
        else if (resolutionPlusOneRep) type = "resolutionPlusOneRep";
        else if (resolutionBestRep) type = "resolutionBestRep";
        else if (bandwidthBestRep) type = "bandwidthBestRep";
        else if (enabledPlaylistReps[0]) type = "enabledPlaylistReps";
        $e88cd91ee18355c1$var$logFn(`choosing ${$e88cd91ee18355c1$var$representationToString(chosenRep)} using ${type} with options`, options);
        return chosenRep.playlist;
    }
    $e88cd91ee18355c1$var$logFn("could not choose a playlist with options", options);
    return null;
};
/**
 * Chooses the appropriate media playlist based on the most recent
 * bandwidth estimate and the player size.
 *
 * Expects to be called within the context of an instance of VhsHandler
 *
 * @return {Playlist} the highest bitrate playlist less than the
 * currently detected bandwidth, accounting for some amount of
 * bandwidth variance
 */ const $e88cd91ee18355c1$var$lastBandwidthSelector = function() {
    const pixelRatio = this.useDevicePixelRatio ? (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).devicePixelRatio || 1 : 1;
    return $e88cd91ee18355c1$var$simpleSelector(this.playlists.main, this.systemBandwidth, parseInt($e88cd91ee18355c1$var$safeGetComputedStyle(this.tech_.el(), "width"), 10) * pixelRatio, parseInt($e88cd91ee18355c1$var$safeGetComputedStyle(this.tech_.el(), "height"), 10) * pixelRatio, this.limitRenditionByPlayerDimensions, this.playlistController_);
};
/**
 * Chooses the appropriate media playlist based on an
 * exponential-weighted moving average of the bandwidth after
 * filtering for player size.
 *
 * Expects to be called within the context of an instance of VhsHandler
 *
 * @param {number} decay - a number between 0 and 1. Higher values of
 * this parameter will cause previous bandwidth estimates to lose
 * significance more quickly.
 * @return {Function} a function which can be invoked to create a new
 * playlist selector function.
 * @see https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
 */ const $e88cd91ee18355c1$var$movingAverageBandwidthSelector = function(decay) {
    let average = -1;
    let lastSystemBandwidth = -1;
    if (decay < 0 || decay > 1) throw new Error("Moving average bandwidth decay must be between 0 and 1.");
    return function() {
        const pixelRatio = this.useDevicePixelRatio ? (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).devicePixelRatio || 1 : 1;
        if (average < 0) {
            average = this.systemBandwidth;
            lastSystemBandwidth = this.systemBandwidth;
        } // stop the average value from decaying for every 250ms
        // when the systemBandwidth is constant
        // and
        // stop average from setting to a very low value when the
        // systemBandwidth becomes 0 in case of chunk cancellation
        if (this.systemBandwidth > 0 && this.systemBandwidth !== lastSystemBandwidth) {
            average = decay * this.systemBandwidth + (1 - decay) * average;
            lastSystemBandwidth = this.systemBandwidth;
        }
        return $e88cd91ee18355c1$var$simpleSelector(this.playlists.main, average, parseInt($e88cd91ee18355c1$var$safeGetComputedStyle(this.tech_.el(), "width"), 10) * pixelRatio, parseInt($e88cd91ee18355c1$var$safeGetComputedStyle(this.tech_.el(), "height"), 10) * pixelRatio, this.limitRenditionByPlayerDimensions, this.playlistController_);
    };
};
/**
 * Chooses the appropriate media playlist based on the potential to rebuffer
 *
 * @param {Object} settings
 *        Object of information required to use this selector
 * @param {Object} settings.main
 *        Object representation of the main manifest
 * @param {number} settings.currentTime
 *        The current time of the player
 * @param {number} settings.bandwidth
 *        Current measured bandwidth
 * @param {number} settings.duration
 *        Duration of the media
 * @param {number} settings.segmentDuration
 *        Segment duration to be used in round trip time calculations
 * @param {number} settings.timeUntilRebuffer
 *        Time left in seconds until the player has to rebuffer
 * @param {number} settings.currentTimeline
 *        The current timeline segments are being loaded from
 * @param {SyncController} settings.syncController
 *        SyncController for determining if we have a sync point for a given playlist
 * @return {Object|null}
 *         {Object} return.playlist
 *         The highest bandwidth playlist with the least amount of rebuffering
 *         {Number} return.rebufferingImpact
 *         The amount of time in seconds switching to this playlist will rebuffer. A
 *         negative value means that switching will cause zero rebuffering.
 */ const $e88cd91ee18355c1$var$minRebufferMaxBandwidthSelector = function(settings) {
    const { main: main, currentTime: currentTime, bandwidth: bandwidth, duration: duration, segmentDuration: segmentDuration, timeUntilRebuffer: timeUntilRebuffer, currentTimeline: currentTimeline, syncController: syncController } = settings; // filter out any playlists that have been excluded due to
    // incompatible configurations
    const compatiblePlaylists = main.playlists.filter((playlist)=>!$e88cd91ee18355c1$var$Playlist.isIncompatible(playlist)); // filter out any playlists that have been disabled manually through the representations
    // api or excluded temporarily due to playback errors.
    let enabledPlaylists = compatiblePlaylists.filter($e88cd91ee18355c1$var$Playlist.isEnabled);
    if (!enabledPlaylists.length) // if there are no enabled playlists, then they have all been excluded or disabled
    // by the user through the representations api. In this case, ignore exclusion and
    // fallback to what the user wants by using playlists the user has not disabled.
    enabledPlaylists = compatiblePlaylists.filter((playlist)=>!$e88cd91ee18355c1$var$Playlist.isDisabled(playlist));
    const bandwidthPlaylists = enabledPlaylists.filter($e88cd91ee18355c1$var$Playlist.hasAttribute.bind(null, "BANDWIDTH"));
    const rebufferingEstimates = bandwidthPlaylists.map((playlist)=>{
        const syncPoint = syncController.getSyncPoint(playlist, duration, currentTimeline, currentTime); // If there is no sync point for this playlist, switching to it will require a
        // sync request first. This will double the request time
        const numRequests = syncPoint ? 1 : 2;
        const requestTimeEstimate = $e88cd91ee18355c1$var$Playlist.estimateSegmentRequestTime(segmentDuration, bandwidth, playlist);
        const rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer;
        return {
            playlist: playlist,
            rebufferingImpact: rebufferingImpact
        };
    });
    const noRebufferingPlaylists = rebufferingEstimates.filter((estimate)=>estimate.rebufferingImpact <= 0); // Sort by bandwidth DESC
    $e88cd91ee18355c1$var$stableSort(noRebufferingPlaylists, (a, b)=>$e88cd91ee18355c1$var$comparePlaylistBandwidth(b.playlist, a.playlist));
    if (noRebufferingPlaylists.length) return noRebufferingPlaylists[0];
    $e88cd91ee18355c1$var$stableSort(rebufferingEstimates, (a, b)=>a.rebufferingImpact - b.rebufferingImpact);
    return rebufferingEstimates[0] || null;
};
/**
 * Chooses the appropriate media playlist, which in this case is the lowest bitrate
 * one with video.  If no renditions with video exist, return the lowest audio rendition.
 *
 * Expects to be called within the context of an instance of VhsHandler
 *
 * @return {Object|null}
 *         {Object} return.playlist
 *         The lowest bitrate playlist that contains a video codec.  If no such rendition
 *         exists pick the lowest audio rendition.
 */ const $e88cd91ee18355c1$var$lowestBitrateCompatibleVariantSelector = function() {
    // filter out any playlists that have been excluded due to
    // incompatible configurations or playback errors
    const playlists = this.playlists.main.playlists.filter($e88cd91ee18355c1$var$Playlist.isEnabled); // Sort ascending by bitrate
    $e88cd91ee18355c1$var$stableSort(playlists, (a, b)=>$e88cd91ee18355c1$var$comparePlaylistBandwidth(a, b)); // Parse and assume that playlists with no video codec have no video
    // (this is not necessarily true, although it is generally true).
    //
    // If an entire manifest has no valid videos everything will get filtered
    // out.
    const playlistsWithVideo = playlists.filter((playlist)=>!!$e88cd91ee18355c1$var$codecsForPlaylist(this.playlists.main, playlist).video);
    return playlistsWithVideo[0] || null;
};
/**
 * Combine all segments into a single Uint8Array
 *
 * @param {Object} segmentObj
 * @return {Uint8Array} concatenated bytes
 * @private
 */ const $e88cd91ee18355c1$var$concatSegments = (segmentObj)=>{
    let offset = 0;
    let tempBuffer;
    if (segmentObj.bytes) {
        tempBuffer = new Uint8Array(segmentObj.bytes); // combine the individual segments into one large typed-array
        segmentObj.segments.forEach((segment)=>{
            tempBuffer.set(segment, offset);
            offset += segment.byteLength;
        });
    }
    return tempBuffer;
};
/**
 * @file text-tracks.js
 */ /**
 * Create captions text tracks on video.js if they do not exist
 *
 * @param {Object} inbandTextTracks a reference to current inbandTextTracks
 * @param {Object} tech the video.js tech
 * @param {Object} captionStream the caption stream to create
 * @private
 */ const $e88cd91ee18355c1$var$createCaptionsTrackIfNotExists = function(inbandTextTracks, tech, captionStream) {
    if (!inbandTextTracks[captionStream]) {
        tech.trigger({
            type: "usage",
            name: "vhs-608"
        });
        let instreamId = captionStream; // we need to translate SERVICEn for 708 to how mux.js currently labels them
        if (/^cc708_/.test(captionStream)) instreamId = "SERVICE" + captionStream.split("_")[1];
        const track = tech.textTracks().getTrackById(instreamId);
        if (track) // Resuse an existing track with a CC# id because this was
        // very likely created by videojs-contrib-hls from information
        // in the m3u8 for us to use
        inbandTextTracks[captionStream] = track;
        else {
            // This section gets called when we have caption services that aren't specified in the manifest.
            // Manifest level caption services are handled in media-groups.js under CLOSED-CAPTIONS.
            const captionServices = tech.options_.vhs && tech.options_.vhs.captionServices || {};
            let label = captionStream;
            let language = captionStream;
            let def = false;
            const captionService = captionServices[instreamId];
            if (captionService) {
                label = captionService.label;
                language = captionService.language;
                def = captionService.default;
            } // Otherwise, create a track with the default `CC#` label and
            // without a language
            inbandTextTracks[captionStream] = tech.addRemoteTextTrack({
                kind: "captions",
                id: instreamId,
                // TODO: investigate why this doesn't seem to turn the caption on by default
                default: def,
                label: label,
                language: language
            }, false).track;
        }
    }
};
/**
 * Add caption text track data to a source handler given an array of captions
 *
 * @param {Object}
 *   @param {Object} inbandTextTracks the inband text tracks
 *   @param {number} timestampOffset the timestamp offset of the source buffer
 *   @param {Array} captionArray an array of caption data
 * @private
 */ const $e88cd91ee18355c1$var$addCaptionData = function({ inbandTextTracks: inbandTextTracks, captionArray: captionArray, timestampOffset: timestampOffset }) {
    if (!captionArray) return;
    const Cue = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebKitDataCue || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).VTTCue;
    captionArray.forEach((caption)=>{
        const track = caption.stream; // in CEA 608 captions, video.js/mux.js sends a content array
        // with positioning data
        if (caption.content) caption.content.forEach((value)=>{
            const cue = new Cue(caption.startTime + timestampOffset, caption.endTime + timestampOffset, value.text);
            cue.line = value.line;
            cue.align = "left";
            cue.position = value.position;
            cue.positionAlign = "line-left";
            inbandTextTracks[track].addCue(cue);
        });
        else // otherwise, a text value with combined captions is sent
        inbandTextTracks[track].addCue(new Cue(caption.startTime + timestampOffset, caption.endTime + timestampOffset, caption.text));
    });
};
/**
 * Define properties on a cue for backwards compatability,
 * but warn the user that the way that they are using it
 * is depricated and will be removed at a later date.
 *
 * @param {Cue} cue the cue to add the properties on
 * @private
 */ const $e88cd91ee18355c1$var$deprecateOldCue = function(cue) {
    Object.defineProperties(cue.frame, {
        id: {
            get () {
                $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn("cue.frame.id is deprecated. Use cue.value.key instead.");
                return cue.value.key;
            }
        },
        value: {
            get () {
                $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn("cue.frame.value is deprecated. Use cue.value.data instead.");
                return cue.value.data;
            }
        },
        privateData: {
            get () {
                $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn("cue.frame.privateData is deprecated. Use cue.value.data instead.");
                return cue.value.data;
            }
        }
    });
};
/**
 * Add metadata text track data to a source handler given an array of metadata
 *
 * @param {Object}
 *   @param {Object} inbandTextTracks the inband text tracks
 *   @param {Array} metadataArray an array of meta data
 *   @param {number} timestampOffset the timestamp offset of the source buffer
 *   @param {number} videoDuration the duration of the video
 * @private
 */ const $e88cd91ee18355c1$var$addMetadata = ({ inbandTextTracks: inbandTextTracks, metadataArray: metadataArray, timestampOffset: timestampOffset, videoDuration: videoDuration })=>{
    if (!metadataArray) return;
    const Cue = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebKitDataCue || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).VTTCue;
    const metadataTrack = inbandTextTracks.metadataTrack_;
    if (!metadataTrack) return;
    metadataArray.forEach((metadata)=>{
        const time = metadata.cueTime + timestampOffset; // if time isn't a finite number between 0 and Infinity, like NaN,
        // ignore this bit of metadata.
        // This likely occurs when you have an non-timed ID3 tag like TIT2,
        // which is the "Title/Songname/Content description" frame
        if (typeof time !== "number" || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).isNaN(time) || time < 0 || !(time < Infinity)) return;
         // If we have no frames, we can't create a cue.
        if (!metadata.frames || !metadata.frames.length) return;
        metadata.frames.forEach((frame)=>{
            const cue = new Cue(time, time, frame.value || frame.url || frame.data || "");
            cue.frame = frame;
            cue.value = frame;
            $e88cd91ee18355c1$var$deprecateOldCue(cue);
            metadataTrack.addCue(cue);
        });
    });
    if (!metadataTrack.cues || !metadataTrack.cues.length) return;
     // Updating the metadeta cues so that
    // the endTime of each cue is the startTime of the next cue
    // the endTime of last cue is the duration of the video
    const cues = metadataTrack.cues;
    const cuesArray = []; // Create a copy of the TextTrackCueList...
    // ...disregarding cues with a falsey value
    for(let i = 0; i < cues.length; i++)if (cues[i]) cuesArray.push(cues[i]);
     // Group cues by their startTime value
    const cuesGroupedByStartTime = cuesArray.reduce((obj, cue)=>{
        const timeSlot = obj[cue.startTime] || [];
        timeSlot.push(cue);
        obj[cue.startTime] = timeSlot;
        return obj;
    }, {}); // Sort startTimes by ascending order
    const sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort((a, b)=>Number(a) - Number(b)); // Map each cue group's endTime to the next group's startTime
    sortedStartTimes.forEach((startTime, idx)=>{
        const cueGroup = cuesGroupedByStartTime[startTime];
        const finiteDuration = isFinite(videoDuration) ? videoDuration : startTime;
        const nextTime = Number(sortedStartTimes[idx + 1]) || finiteDuration; // Map each cue's endTime the next group's startTime
        cueGroup.forEach((cue)=>{
            cue.endTime = nextTime;
        });
    });
}; // object for mapping daterange attributes
const $e88cd91ee18355c1$var$dateRangeAttr = {
    id: "ID",
    class: "CLASS",
    startDate: "START-DATE",
    duration: "DURATION",
    endDate: "END-DATE",
    endOnNext: "END-ON-NEXT",
    plannedDuration: "PLANNED-DURATION",
    scte35Out: "SCTE35-OUT",
    scte35In: "SCTE35-IN"
};
const $e88cd91ee18355c1$var$dateRangeKeysToOmit = new Set([
    "id",
    "class",
    "startDate",
    "duration",
    "endDate",
    "endOnNext",
    "startTime",
    "endTime",
    "processDateRange"
]);
/**
 * Add DateRange metadata text track to a source handler given an array of metadata
 *
 * @param {Object}
 *   @param {Object} inbandTextTracks the inband text tracks
 *   @param {Array} dateRanges parsed media playlist
 * @private
 */ const $e88cd91ee18355c1$var$addDateRangeMetadata = ({ inbandTextTracks: inbandTextTracks, dateRanges: dateRanges })=>{
    const metadataTrack = inbandTextTracks.metadataTrack_;
    if (!metadataTrack) return;
    const Cue = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebKitDataCue || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).VTTCue;
    dateRanges.forEach((dateRange)=>{
        // we generate multiple cues for each date range with different attributes
        for (const key of Object.keys(dateRange)){
            if ($e88cd91ee18355c1$var$dateRangeKeysToOmit.has(key)) continue;
            const cue = new Cue(dateRange.startTime, dateRange.endTime, "");
            cue.id = dateRange.id;
            cue.type = "com.apple.quicktime.HLS";
            cue.value = {
                key: $e88cd91ee18355c1$var$dateRangeAttr[key],
                data: dateRange[key]
            };
            if (key === "scte35Out" || key === "scte35In") cue.value.data = new Uint8Array(cue.value.data.match(/[\da-f]{2}/gi)).buffer;
            metadataTrack.addCue(cue);
        }
        dateRange.processDateRange();
    });
};
/**
 * Create metadata text track on video.js if it does not exist
 *
 * @param {Object} inbandTextTracks a reference to current inbandTextTracks
 * @param {string} dispatchType the inband metadata track dispatch type
 * @param {Object} tech the video.js tech
 * @private
 */ const $e88cd91ee18355c1$var$createMetadataTrackIfNotExists = (inbandTextTracks, dispatchType, tech)=>{
    if (inbandTextTracks.metadataTrack_) return;
    inbandTextTracks.metadataTrack_ = tech.addRemoteTextTrack({
        kind: "metadata",
        label: "Timed Metadata"
    }, false).track;
    if (!$e88cd91ee18355c1$export$2e2bcd8739ae039.browser.IS_ANY_SAFARI) inbandTextTracks.metadataTrack_.inBandMetadataTrackDispatchType = dispatchType;
};
/**
 * Remove cues from a track on video.js.
 *
 * @param {Double} start start of where we should remove the cue
 * @param {Double} end end of where the we should remove the cue
 * @param {Object} track the text track to remove the cues from
 * @private
 */ const $e88cd91ee18355c1$var$removeCuesFromTrack = function(start, end, track) {
    let i;
    let cue;
    if (!track) return;
    if (!track.cues) return;
    i = track.cues.length;
    while(i--){
        cue = track.cues[i]; // Remove any cue within the provided start and end time
        if (cue.startTime >= start && cue.endTime <= end) track.removeCue(cue);
    }
};
/**
 * Remove duplicate cues from a track on video.js (a cue is considered a
 * duplicate if it has the same time interval and text as another)
 *
 * @param {Object} track the text track to remove the duplicate cues from
 * @private
 */ const $e88cd91ee18355c1$var$removeDuplicateCuesFromTrack = function(track) {
    const cues = track.cues;
    if (!cues) return;
    const uniqueCues = {};
    for(let i = cues.length - 1; i >= 0; i--){
        const cue = cues[i];
        const cueKey = `${cue.startTime}-${cue.endTime}-${cue.text}`;
        if (uniqueCues[cueKey]) track.removeCue(cue);
        else uniqueCues[cueKey] = cue;
    }
};
/**
 * Returns a list of gops in the buffer that have a pts value of 3 seconds or more in
 * front of current time.
 *
 * @param {Array} buffer
 *        The current buffer of gop information
 * @param {number} currentTime
 *        The current time
 * @param {Double} mapping
 *        Offset to map display time to stream presentation time
 * @return {Array}
 *         List of gops considered safe to append over
 */ const $e88cd91ee18355c1$var$gopsSafeToAlignWith = (buffer, currentTime, mapping)=>{
    if (typeof currentTime === "undefined" || currentTime === null || !buffer.length) return [];
     // pts value for current time + 3 seconds to give a bit more wiggle room
    const currentTimePts = Math.ceil((currentTime - mapping + 3) * (0, $50c25c64d7e54de5$exports.ONE_SECOND_IN_TS));
    let i;
    for(i = 0; i < buffer.length; i++){
        if (buffer[i].pts > currentTimePts) break;
    }
    return buffer.slice(i);
};
/**
 * Appends gop information (timing and byteLength) received by the transmuxer for the
 * gops appended in the last call to appendBuffer
 *
 * @param {Array} buffer
 *        The current buffer of gop information
 * @param {Array} gops
 *        List of new gop information
 * @param {boolean} replace
 *        If true, replace the buffer with the new gop information. If false, append the
 *        new gop information to the buffer in the right location of time.
 * @return {Array}
 *         Updated list of gop information
 */ const $e88cd91ee18355c1$var$updateGopBuffer = (buffer, gops, replace)=>{
    if (!gops.length) return buffer;
    if (replace) // If we are in safe append mode, then completely overwrite the gop buffer
    // with the most recent appeneded data. This will make sure that when appending
    // future segments, we only try to align with gops that are both ahead of current
    // time and in the last segment appended.
    return gops.slice();
    const start = gops[0].pts;
    let i = 0;
    for(i; i < buffer.length; i++){
        if (buffer[i].pts >= start) break;
    }
    return buffer.slice(0, i).concat(gops);
};
/**
 * Removes gop information in buffer that overlaps with provided start and end
 *
 * @param {Array} buffer
 *        The current buffer of gop information
 * @param {Double} start
 *        position to start the remove at
 * @param {Double} end
 *        position to end the remove at
 * @param {Double} mapping
 *        Offset to map display time to stream presentation time
 */ const $e88cd91ee18355c1$var$removeGopBuffer = (buffer, start, end, mapping)=>{
    const startPts = Math.ceil((start - mapping) * (0, $50c25c64d7e54de5$exports.ONE_SECOND_IN_TS));
    const endPts = Math.ceil((end - mapping) * (0, $50c25c64d7e54de5$exports.ONE_SECOND_IN_TS));
    const updatedBuffer = buffer.slice();
    let i = buffer.length;
    while(i--){
        if (buffer[i].pts <= endPts) break;
    }
    if (i === -1) // no removal because end of remove range is before start of buffer
    return updatedBuffer;
    let j = i + 1;
    while(j--){
        if (buffer[j].pts <= startPts) break;
    } // clamp remove range start to 0 index
    j = Math.max(j, 0);
    updatedBuffer.splice(j, i - j + 1);
    return updatedBuffer;
};
const $e88cd91ee18355c1$var$shallowEqual = function(a, b) {
    // if both are undefined
    // or one or the other is undefined
    // they are not equal
    if (!a && !b || !a && b || a && !b) return false;
     // they are the same object and thus, equal
    if (a === b) return true;
     // sort keys so we can make sure they have
    // all the same keys later.
    const akeys = Object.keys(a).sort();
    const bkeys = Object.keys(b).sort(); // different number of keys, not equal
    if (akeys.length !== bkeys.length) return false;
    for(let i = 0; i < akeys.length; i++){
        const key = akeys[i]; // different sorted keys, not equal
        if (key !== bkeys[i]) return false;
         // different values, not equal
        if (a[key] !== b[key]) return false;
    }
    return true;
};
// https://www.w3.org/TR/WebIDL-1/#quotaexceedederror
const $e88cd91ee18355c1$var$QUOTA_EXCEEDED_ERR = 22;
/**
 * The segment loader has no recourse except to fetch a segment in the
 * current playlist and use the internal timestamps in that segment to
 * generate a syncPoint. This function returns a good candidate index
 * for that process.
 *
 * @param {Array} segments - the segments array from a playlist.
 * @return {number} An index of a segment from the playlist to load
 */ const $e88cd91ee18355c1$var$getSyncSegmentCandidate = function(currentTimeline, segments, targetTime) {
    segments = segments || [];
    const timelineSegments = [];
    let time = 0;
    for(let i = 0; i < segments.length; i++){
        const segment = segments[i];
        if (currentTimeline === segment.timeline) {
            timelineSegments.push(i);
            time += segment.duration;
            if (time > targetTime) return i;
        }
    }
    if (timelineSegments.length === 0) return 0;
     // default to the last timeline segment
    return timelineSegments[timelineSegments.length - 1];
}; // In the event of a quota exceeded error, keep at least one second of back buffer. This
// number was arbitrarily chosen and may be updated in the future, but seemed reasonable
// as a start to prevent any potential issues with removing content too close to the
// playhead.
const $e88cd91ee18355c1$var$MIN_BACK_BUFFER = 1; // in ms
const $e88cd91ee18355c1$var$CHECK_BUFFER_DELAY = 500;
const $e88cd91ee18355c1$var$finite = (num)=>typeof num === "number" && isFinite(num); // With most content hovering around 30fps, if a segment has a duration less than a half
// frame at 30fps or one frame at 60fps, the bandwidth and throughput calculations will
// not accurately reflect the rest of the content.
const $e88cd91ee18355c1$var$MIN_SEGMENT_DURATION_TO_SAVE_STATS = 1 / 60;
const $e88cd91ee18355c1$var$illegalMediaSwitch = (loaderType, startingMedia, trackInfo)=>{
    // Although these checks should most likely cover non 'main' types, for now it narrows
    // the scope of our checks.
    if (loaderType !== "main" || !startingMedia || !trackInfo) return null;
    if (!trackInfo.hasAudio && !trackInfo.hasVideo) return "Neither audio nor video found in segment.";
    if (startingMedia.hasVideo && !trackInfo.hasVideo) return "Only audio found in segment when we expected video. We can't switch to audio only from a stream that had video. To get rid of this message, please add codec information to the manifest.";
    if (!startingMedia.hasVideo && trackInfo.hasVideo) return "Video found in segment when we expected only audio. We can't switch to a stream with video from an audio only stream. To get rid of this message, please add codec information to the manifest.";
    return null;
};
/**
 * Calculates a time value that is safe to remove from the back buffer without interrupting
 * playback.
 *
 * @param {TimeRange} seekable
 *        The current seekable range
 * @param {number} currentTime
 *        The current time of the player
 * @param {number} targetDuration
 *        The target duration of the current playlist
 * @return {number}
 *         Time that is safe to remove from the back buffer without interrupting playback
 */ const $e88cd91ee18355c1$var$safeBackBufferTrimTime = (seekable, currentTime, targetDuration)=>{
    // 30 seconds before the playhead provides a safe default for trimming.
    //
    // Choosing a reasonable default is particularly important for high bitrate content and
    // VOD videos/live streams with large windows, as the buffer may end up overfilled and
    // throw an APPEND_BUFFER_ERR.
    let trimTime = currentTime - $e88cd91ee18355c1$var$Config.BACK_BUFFER_LENGTH;
    if (seekable.length) // Some live playlists may have a shorter window of content than the full allowed back
    // buffer. For these playlists, don't save content that's no longer within the window.
    trimTime = Math.max(trimTime, seekable.start(0));
     // Don't remove within target duration of the current time to avoid the possibility of
    // removing the GOP currently being played, as removing it can cause playback stalls.
    const maxTrimTime = currentTime - targetDuration;
    return Math.min(maxTrimTime, trimTime);
};
const $e88cd91ee18355c1$var$segmentInfoString = (segmentInfo)=>{
    const { startOfSegment: startOfSegment, duration: duration, segment: segment, part: part, playlist: { mediaSequence: seq, id: id, segments: segments = [] }, mediaIndex: index, partIndex: partIndex, timeline: timeline } = segmentInfo;
    const segmentLen = segments.length - 1;
    let selection = "mediaIndex/partIndex increment";
    if (segmentInfo.getMediaInfoForTime) selection = `getMediaInfoForTime (${segmentInfo.getMediaInfoForTime})`;
    else if (segmentInfo.isSyncRequest) selection = "getSyncSegmentCandidate (isSyncRequest)";
    if (segmentInfo.independent) selection += ` with independent ${segmentInfo.independent}`;
    const hasPartIndex = typeof partIndex === "number";
    const name = segmentInfo.segment.uri ? "segment" : "pre-segment";
    const zeroBasedPartCount = hasPartIndex ? $e88cd91ee18355c1$var$getKnownPartCount({
        preloadSegment: segment
    }) - 1 : 0;
    return `${name} [${seq + index}/${seq + segmentLen}]` + (hasPartIndex ? ` part [${partIndex}/${zeroBasedPartCount}]` : "") + ` segment start/end [${segment.start} => ${segment.end}]` + (hasPartIndex ? ` part start/end [${part.start} => ${part.end}]` : "") + ` startOfSegment [${startOfSegment}]` + ` duration [${duration}]` + ` timeline [${timeline}]` + ` selected by [${selection}]` + ` playlist [${id}]`;
};
const $e88cd91ee18355c1$var$timingInfoPropertyForMedia = (mediaType)=>`${mediaType}TimingInfo`;
/**
 * Returns the timestamp offset to use for the segment.
 *
 * @param {number} segmentTimeline
 *        The timeline of the segment
 * @param {number} currentTimeline
 *        The timeline currently being followed by the loader
 * @param {number} startOfSegment
 *        The estimated segment start
 * @param {TimeRange[]} buffered
 *        The loader's buffer
 * @param {boolean} overrideCheck
 *        If true, no checks are made to see if the timestamp offset value should be set,
 *        but sets it directly to a value.
 *
 * @return {number|null}
 *         Either a number representing a new timestamp offset, or null if the segment is
 *         part of the same timeline
 */ const $e88cd91ee18355c1$var$timestampOffsetForSegment = ({ segmentTimeline: segmentTimeline, currentTimeline: currentTimeline, startOfSegment: startOfSegment, buffered: buffered, overrideCheck: overrideCheck })=>{
    // Check to see if we are crossing a discontinuity to see if we need to set the
    // timestamp offset on the transmuxer and source buffer.
    //
    // Previously, we changed the timestampOffset if the start of this segment was less than
    // the currently set timestampOffset, but this isn't desirable as it can produce bad
    // behavior, especially around long running live streams.
    if (!overrideCheck && segmentTimeline === currentTimeline) return null;
     // When changing renditions, it's possible to request a segment on an older timeline. For
    // instance, given two renditions with the following:
    //
    // #EXTINF:10
    // segment1
    // #EXT-X-DISCONTINUITY
    // #EXTINF:10
    // segment2
    // #EXTINF:10
    // segment3
    //
    // And the current player state:
    //
    // current time: 8
    // buffer: 0 => 20
    //
    // The next segment on the current rendition would be segment3, filling the buffer from
    // 20s onwards. However, if a rendition switch happens after segment2 was requested,
    // then the next segment to be requested will be segment1 from the new rendition in
    // order to fill time 8 and onwards. Using the buffered end would result in repeated
    // content (since it would position segment1 of the new rendition starting at 20s). This
    // case can be identified when the new segment's timeline is a prior value. Instead of
    // using the buffered end, the startOfSegment can be used, which, hopefully, will be
    // more accurate to the actual start time of the segment.
    if (segmentTimeline < currentTimeline) return startOfSegment;
     // segmentInfo.startOfSegment used to be used as the timestamp offset, however, that
    // value uses the end of the last segment if it is available. While this value
    // should often be correct, it's better to rely on the buffered end, as the new
    // content post discontinuity should line up with the buffered end as if it were
    // time 0 for the new content.
    return buffered.length ? buffered.end(buffered.length - 1) : startOfSegment;
};
/**
 * Returns whether or not the loader should wait for a timeline change from the timeline
 * change controller before processing the segment.
 *
 * Primary timing in VHS goes by video. This is different from most media players, as
 * audio is more often used as the primary timing source. For the foreseeable future, VHS
 * will continue to use video as the primary timing source, due to the current logic and
 * expectations built around it.

 * Since the timing follows video, in order to maintain sync, the video loader is
 * responsible for setting both audio and video source buffer timestamp offsets.
 *
 * Setting different values for audio and video source buffers could lead to
 * desyncing. The following examples demonstrate some of the situations where this
 * distinction is important. Note that all of these cases involve demuxed content. When
 * content is muxed, the audio and video are packaged together, therefore syncing
 * separate media playlists is not an issue.
 *
 * CASE 1: Audio prepares to load a new timeline before video:
 *
 * Timeline:       0                 1
 * Audio Segments: 0 1 2 3 4 5 DISCO 6 7 8 9
 * Audio Loader:                     ^
 * Video Segments: 0 1 2 3 4 5 DISCO 6 7 8 9
 * Video Loader              ^
 *
 * In the above example, the audio loader is preparing to load the 6th segment, the first
 * after a discontinuity, while the video loader is still loading the 5th segment, before
 * the discontinuity.
 *
 * If the audio loader goes ahead and loads and appends the 6th segment before the video
 * loader crosses the discontinuity, then when appended, the 6th audio segment will use
 * the timestamp offset from timeline 0. This will likely lead to desyncing. In addition,
 * the audio loader must provide the audioAppendStart value to trim the content in the
 * transmuxer, and that value relies on the audio timestamp offset. Since the audio
 * timestamp offset is set by the video (main) loader, the audio loader shouldn't load the
 * segment until that value is provided.
 *
 * CASE 2: Video prepares to load a new timeline before audio:
 *
 * Timeline:       0                 1
 * Audio Segments: 0 1 2 3 4 5 DISCO 6 7 8 9
 * Audio Loader:             ^
 * Video Segments: 0 1 2 3 4 5 DISCO 6 7 8 9
 * Video Loader                      ^
 *
 * In the above example, the video loader is preparing to load the 6th segment, the first
 * after a discontinuity, while the audio loader is still loading the 5th segment, before
 * the discontinuity.
 *
 * If the video loader goes ahead and loads and appends the 6th segment, then once the
 * segment is loaded and processed, both the video and audio timestamp offsets will be
 * set, since video is used as the primary timing source. This is to ensure content lines
 * up appropriately, as any modifications to the video timing are reflected by audio when
 * the video loader sets the audio and video timestamp offsets to the same value. However,
 * setting the timestamp offset for audio before audio has had a chance to change
 * timelines will likely lead to desyncing, as the audio loader will append segment 5 with
 * a timestamp intended to apply to segments from timeline 1 rather than timeline 0.
 *
 * CASE 3: When seeking, audio prepares to load a new timeline before video
 *
 * Timeline:       0                 1
 * Audio Segments: 0 1 2 3 4 5 DISCO 6 7 8 9
 * Audio Loader:           ^
 * Video Segments: 0 1 2 3 4 5 DISCO 6 7 8 9
 * Video Loader            ^
 *
 * In the above example, both audio and video loaders are loading segments from timeline
 * 0, but imagine that the seek originated from timeline 1.
 *
 * When seeking to a new timeline, the timestamp offset will be set based on the expected
 * segment start of the loaded video segment. In order to maintain sync, the audio loader
 * must wait for the video loader to load its segment and update both the audio and video
 * timestamp offsets before it may load and append its own segment. This is the case
 * whether the seek results in a mismatched segment request (e.g., the audio loader
 * chooses to load segment 3 and the video loader chooses to load segment 4) or the
 * loaders choose to load the same segment index from each playlist, as the segments may
 * not be aligned perfectly, even for matching segment indexes.
 *
 * @param {Object} timelinechangeController
 * @param {number} currentTimeline
 *        The timeline currently being followed by the loader
 * @param {number} segmentTimeline
 *        The timeline of the segment being loaded
 * @param {('main'|'audio')} loaderType
 *        The loader type
 * @param {boolean} audioDisabled
 *        Whether the audio is disabled for the loader. This should only be true when the
 *        loader may have muxed audio in its segment, but should not append it, e.g., for
 *        the main loader when an alternate audio playlist is active.
 *
 * @return {boolean}
 *         Whether the loader should wait for a timeline change from the timeline change
 *         controller before processing the segment
 */ const $e88cd91ee18355c1$var$shouldWaitForTimelineChange = ({ timelineChangeController: timelineChangeController, currentTimeline: currentTimeline, segmentTimeline: segmentTimeline, loaderType: loaderType, audioDisabled: audioDisabled })=>{
    if (currentTimeline === segmentTimeline) return false;
    if (loaderType === "audio") {
        const lastMainTimelineChange = timelineChangeController.lastTimelineChange({
            type: "main"
        }); // Audio loader should wait if:
        //
        // * main hasn't had a timeline change yet (thus has not loaded its first segment)
        // * main hasn't yet changed to the timeline audio is looking to load
        return !lastMainTimelineChange || lastMainTimelineChange.to !== segmentTimeline;
    } // The main loader only needs to wait for timeline changes if there's demuxed audio.
    // Otherwise, there's nothing to wait for, since audio would be muxed into the main
    // loader's segments (or the content is audio/video only and handled by the main
    // loader).
    if (loaderType === "main" && audioDisabled) {
        const pendingAudioTimelineChange = timelineChangeController.pendingTimelineChange({
            type: "audio"
        }); // Main loader should wait for the audio loader if audio is not pending a timeline
        // change to the current timeline.
        //
        // Since the main loader is responsible for setting the timestamp offset for both
        // audio and video, the main loader must wait for audio to be about to change to its
        // timeline before setting the offset, otherwise, if audio is behind in loading,
        // segments from the previous timeline would be adjusted by the new timestamp offset.
        //
        // This requirement means that video will not cross a timeline until the audio is
        // about to cross to it, so that way audio and video will always cross the timeline
        // together.
        //
        // In addition to normal timeline changes, these rules also apply to the start of a
        // stream (going from a non-existent timeline, -1, to timeline 0). It's important
        // that these rules apply to the first timeline change because if they did not, it's
        // possible that the main loader will cross two timelines before the audio loader has
        // crossed one. Logic may be implemented to handle the startup as a special case, but
        // it's easier to simply treat all timeline changes the same.
        if (pendingAudioTimelineChange && pendingAudioTimelineChange.to === segmentTimeline) return false;
        return true;
    }
    return false;
};
const $e88cd91ee18355c1$var$mediaDuration = (timingInfos)=>{
    let maxDuration = 0;
    [
        "video",
        "audio"
    ].forEach(function(type) {
        const typeTimingInfo = timingInfos[`${type}TimingInfo`];
        if (!typeTimingInfo) return;
        const { start: start, end: end } = typeTimingInfo;
        let duration;
        if (typeof start === "bigint" || typeof end === "bigint") duration = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(end) - (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).BigInt(start);
        else if (typeof start === "number" && typeof end === "number") duration = end - start;
        if (typeof duration !== "undefined" && duration > maxDuration) maxDuration = duration;
    }); // convert back to a number if it is lower than MAX_SAFE_INTEGER
    // as we only need BigInt when we are above that.
    if (typeof maxDuration === "bigint" && maxDuration < Number.MAX_SAFE_INTEGER) maxDuration = Number(maxDuration);
    return maxDuration;
};
const $e88cd91ee18355c1$var$segmentTooLong = ({ segmentDuration: segmentDuration, maxDuration: maxDuration })=>{
    // 0 duration segments are most likely due to metadata only segments or a lack of
    // information.
    if (!segmentDuration) return false;
     // For HLS:
    //
    // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1
    // The EXTINF duration of each Media Segment in the Playlist
    // file, when rounded to the nearest integer, MUST be less than or equal
    // to the target duration; longer segments can trigger playback stalls
    // or other errors.
    //
    // For DASH, the mpd-parser uses the largest reported segment duration as the target
    // duration. Although that reported duration is occasionally approximate (i.e., not
    // exact), a strict check may report that a segment is too long more often in DASH.
    return Math.round(segmentDuration) > maxDuration + $e88cd91ee18355c1$var$TIME_FUDGE_FACTOR;
};
const $e88cd91ee18355c1$var$getTroublesomeSegmentDurationMessage = (segmentInfo, sourceType)=>{
    // Right now we aren't following DASH's timing model exactly, so only perform
    // this check for HLS content.
    if (sourceType !== "hls") return null;
    const segmentDuration = $e88cd91ee18355c1$var$mediaDuration({
        audioTimingInfo: segmentInfo.audioTimingInfo,
        videoTimingInfo: segmentInfo.videoTimingInfo
    }); // Don't report if we lack information.
    //
    // If the segment has a duration of 0 it is either a lack of information or a
    // metadata only segment and shouldn't be reported here.
    if (!segmentDuration) return null;
    const targetDuration = segmentInfo.playlist.targetDuration;
    const isSegmentWayTooLong = $e88cd91ee18355c1$var$segmentTooLong({
        segmentDuration: segmentDuration,
        maxDuration: targetDuration * 2
    });
    const isSegmentSlightlyTooLong = $e88cd91ee18355c1$var$segmentTooLong({
        segmentDuration: segmentDuration,
        maxDuration: targetDuration
    });
    const segmentTooLongMessage = `Segment with index ${segmentInfo.mediaIndex} ` + `from playlist ${segmentInfo.playlist.id} ` + `has a duration of ${segmentDuration} ` + `when the reported duration is ${segmentInfo.duration} ` + `and the target duration is ${targetDuration}. ` + "For HLS content, a duration in excess of the target duration may result in " + "playback issues. See the HLS specification section on EXT-X-TARGETDURATION for " + "more details: " + "https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1";
    if (isSegmentWayTooLong || isSegmentSlightlyTooLong) return {
        severity: isSegmentWayTooLong ? "warn" : "info",
        message: segmentTooLongMessage
    };
    return null;
};
/**
 * An object that manages segment loading and appending.
 *
 * @class SegmentLoader
 * @param {Object} options required and optional options
 * @extends videojs.EventTarget
 */ class $e88cd91ee18355c1$var$SegmentLoader extends $e88cd91ee18355c1$export$2e2bcd8739ae039.EventTarget {
    constructor(settings, options = {}){
        super(); // check pre-conditions
        if (!settings) throw new TypeError("Initialization settings are required");
        if (typeof settings.currentTime !== "function") throw new TypeError("No currentTime getter specified");
        if (!settings.mediaSource) throw new TypeError("No MediaSource specified");
         // public properties
        this.bandwidth = settings.bandwidth;
        this.throughput = {
            rate: 0,
            count: 0
        };
        this.roundTrip = NaN;
        this.resetStats_();
        this.mediaIndex = null;
        this.partIndex = null; // private settings
        this.hasPlayed_ = settings.hasPlayed;
        this.currentTime_ = settings.currentTime;
        this.seekable_ = settings.seekable;
        this.seeking_ = settings.seeking;
        this.duration_ = settings.duration;
        this.mediaSource_ = settings.mediaSource;
        this.vhs_ = settings.vhs;
        this.loaderType_ = settings.loaderType;
        this.currentMediaInfo_ = void 0;
        this.startingMediaInfo_ = void 0;
        this.segmentMetadataTrack_ = settings.segmentMetadataTrack;
        this.goalBufferLength_ = settings.goalBufferLength;
        this.sourceType_ = settings.sourceType;
        this.sourceUpdater_ = settings.sourceUpdater;
        this.inbandTextTracks_ = settings.inbandTextTracks;
        this.state_ = "INIT";
        this.timelineChangeController_ = settings.timelineChangeController;
        this.shouldSaveSegmentTimingInfo_ = true;
        this.parse708captions_ = settings.parse708captions;
        this.useDtsForTimestampOffset_ = settings.useDtsForTimestampOffset;
        this.captionServices_ = settings.captionServices;
        this.exactManifestTimings = settings.exactManifestTimings;
        this.addMetadataToTextTrack = settings.addMetadataToTextTrack; // private instance variables
        this.checkBufferTimeout_ = null;
        this.error_ = void 0;
        this.currentTimeline_ = -1;
        this.shouldForceTimestampOffsetAfterResync_ = false;
        this.pendingSegment_ = null;
        this.xhrOptions_ = null;
        this.pendingSegments_ = [];
        this.audioDisabled_ = false;
        this.isPendingTimestampOffset_ = false; // TODO possibly move gopBuffer and timeMapping info to a separate controller
        this.gopBuffer_ = [];
        this.timeMapping_ = 0;
        this.safeAppend_ = false;
        this.appendInitSegment_ = {
            audio: true,
            video: true
        };
        this.playlistOfLastInitSegment_ = {
            audio: null,
            video: null
        };
        this.callQueue_ = []; // If the segment loader prepares to load a segment, but does not have enough
        // information yet to start the loading process (e.g., if the audio loader wants to
        // load a segment from the next timeline but the main loader hasn't yet crossed that
        // timeline), then the load call will be added to the queue until it is ready to be
        // processed.
        this.loadQueue_ = [];
        this.metadataQueue_ = {
            id3: [],
            caption: []
        };
        this.waitingOnRemove_ = false;
        this.quotaExceededErrorRetryTimeout_ = null; // Fragmented mp4 playback
        this.activeInitSegmentId_ = null;
        this.initSegments_ = {}; // HLSe playback
        this.cacheEncryptionKeys_ = settings.cacheEncryptionKeys;
        this.keyCache_ = {};
        this.decrypter_ = settings.decrypter; // Manages the tracking and generation of sync-points, mappings
        // between a time in the display time and a segment index within
        // a playlist
        this.syncController_ = settings.syncController;
        this.syncPoint_ = {
            segmentIndex: 0,
            time: 0
        };
        this.transmuxer_ = this.createTransmuxer_();
        this.triggerSyncInfoUpdate_ = ()=>this.trigger("syncinfoupdate");
        this.syncController_.on("syncinfoupdate", this.triggerSyncInfoUpdate_);
        this.mediaSource_.addEventListener("sourceopen", ()=>{
            if (!this.isEndOfStream_()) this.ended_ = false;
        }); // ...for determining the fetch location
        this.fetchAtBuffer_ = false;
        this.logger_ = $e88cd91ee18355c1$var$logger(`SegmentLoader[${this.loaderType_}]`);
        Object.defineProperty(this, "state", {
            get () {
                return this.state_;
            },
            set (newState) {
                if (newState !== this.state_) {
                    this.logger_(`${this.state_} -> ${newState}`);
                    this.state_ = newState;
                    this.trigger("statechange");
                }
            }
        });
        this.sourceUpdater_.on("ready", ()=>{
            if (this.hasEnoughInfoToAppend_()) this.processCallQueue_();
        }); // Only the main loader needs to listen for pending timeline changes, as the main
        // loader should wait for audio to be ready to change its timeline so that both main
        // and audio timelines change together. For more details, see the
        // shouldWaitForTimelineChange function.
        if (this.loaderType_ === "main") this.timelineChangeController_.on("pendingtimelinechange", ()=>{
            if (this.hasEnoughInfoToAppend_()) this.processCallQueue_();
        });
         // The main loader only listens on pending timeline changes, but the audio loader,
        // since its loads follow main, needs to listen on timeline changes. For more details,
        // see the shouldWaitForTimelineChange function.
        if (this.loaderType_ === "audio") this.timelineChangeController_.on("timelinechange", ()=>{
            if (this.hasEnoughInfoToLoad_()) this.processLoadQueue_();
            if (this.hasEnoughInfoToAppend_()) this.processCallQueue_();
        });
    }
    createTransmuxer_() {
        return $e88cd91ee18355c1$var$segmentTransmuxer.createTransmuxer({
            remux: false,
            alignGopsAtEnd: this.safeAppend_,
            keepOriginalTimestamps: true,
            parse708captions: this.parse708captions_,
            captionServices: this.captionServices_
        });
    }
    /**
   * reset all of our media stats
   *
   * @private
   */ resetStats_() {
        this.mediaBytesTransferred = 0;
        this.mediaRequests = 0;
        this.mediaRequestsAborted = 0;
        this.mediaRequestsTimedout = 0;
        this.mediaRequestsErrored = 0;
        this.mediaTransferDuration = 0;
        this.mediaSecondsLoaded = 0;
        this.mediaAppends = 0;
    }
    /**
   * dispose of the SegmentLoader and reset to the default state
   */ dispose() {
        this.trigger("dispose");
        this.state = "DISPOSED";
        this.pause();
        this.abort_();
        if (this.transmuxer_) this.transmuxer_.terminate();
        this.resetStats_();
        if (this.checkBufferTimeout_) (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.checkBufferTimeout_);
        if (this.syncController_ && this.triggerSyncInfoUpdate_) this.syncController_.off("syncinfoupdate", this.triggerSyncInfoUpdate_);
        this.off();
    }
    setAudio(enable) {
        this.audioDisabled_ = !enable;
        if (enable) this.appendInitSegment_.audio = true;
        else // remove current track audio if it gets disabled
        this.sourceUpdater_.removeAudio(0, this.duration_());
    }
    /**
   * abort anything that is currently doing on with the SegmentLoader
   * and reset to a default state
   */ abort() {
        if (this.state !== "WAITING") {
            if (this.pendingSegment_) this.pendingSegment_ = null;
            return;
        }
        this.abort_(); // We aborted the requests we were waiting on, so reset the loader's state to READY
        // since we are no longer "waiting" on any requests. XHR callback is not always run
        // when the request is aborted. This will prevent the loader from being stuck in the
        // WAITING state indefinitely.
        this.state = "READY"; // don't wait for buffer check timeouts to begin fetching the
        // next segment
        if (!this.paused()) this.monitorBuffer_();
    }
    /**
   * abort all pending xhr requests and null any pending segements
   *
   * @private
   */ abort_() {
        if (this.pendingSegment_ && this.pendingSegment_.abortRequests) this.pendingSegment_.abortRequests();
         // clear out the segment being processed
        this.pendingSegment_ = null;
        this.callQueue_ = [];
        this.loadQueue_ = [];
        this.metadataQueue_.id3 = [];
        this.metadataQueue_.caption = [];
        this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_);
        this.waitingOnRemove_ = false;
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.quotaExceededErrorRetryTimeout_);
        this.quotaExceededErrorRetryTimeout_ = null;
    }
    checkForAbort_(requestId) {
        // If the state is APPENDING, then aborts will not modify the state, meaning the first
        // callback that happens should reset the state to READY so that loading can continue.
        if (this.state === "APPENDING" && !this.pendingSegment_) {
            this.state = "READY";
            return true;
        }
        if (!this.pendingSegment_ || this.pendingSegment_.requestId !== requestId) return true;
        return false;
    }
    /**
   * set an error on the segment loader and null out any pending segements
   *
   * @param {Error} error the error to set on the SegmentLoader
   * @return {Error} the error that was set or that is currently set
   */ error(error) {
        if (typeof error !== "undefined") {
            this.logger_("error occurred:", error);
            this.error_ = error;
        }
        this.pendingSegment_ = null;
        return this.error_;
    }
    endOfStream() {
        this.ended_ = true;
        if (this.transmuxer_) // need to clear out any cached data to prepare for the new segment
        $e88cd91ee18355c1$var$segmentTransmuxer.reset(this.transmuxer_);
        this.gopBuffer_.length = 0;
        this.pause();
        this.trigger("ended");
    }
    /**
   * Indicates which time ranges are buffered
   *
   * @return {TimeRange}
   *         TimeRange object representing the current buffered ranges
   */ buffered_() {
        const trackInfo = this.getMediaInfo_();
        if (!this.sourceUpdater_ || !trackInfo) return $e88cd91ee18355c1$var$createTimeRanges();
        if (this.loaderType_ === "main") {
            const { hasAudio: hasAudio, hasVideo: hasVideo, isMuxed: isMuxed } = trackInfo;
            if (hasVideo && hasAudio && !this.audioDisabled_ && !isMuxed) return this.sourceUpdater_.buffered();
            if (hasVideo) return this.sourceUpdater_.videoBuffered();
        } // One case that can be ignored for now is audio only with alt audio,
        // as we don't yet have proper support for that.
        return this.sourceUpdater_.audioBuffered();
    }
    /**
   * Gets and sets init segment for the provided map
   *
   * @param {Object} map
   *        The map object representing the init segment to get or set
   * @param {boolean=} set
   *        If true, the init segment for the provided map should be saved
   * @return {Object}
   *         map object for desired init segment
   */ initSegmentForMap(map, set = false) {
        if (!map) return null;
        const id = $e88cd91ee18355c1$var$initSegmentId(map);
        let storedMap = this.initSegments_[id];
        if (set && !storedMap && map.bytes) this.initSegments_[id] = storedMap = {
            resolvedUri: map.resolvedUri,
            byterange: map.byterange,
            bytes: map.bytes,
            tracks: map.tracks,
            timescales: map.timescales
        };
        return storedMap || map;
    }
    /**
   * Gets and sets key for the provided key
   *
   * @param {Object} key
   *        The key object representing the key to get or set
   * @param {boolean=} set
   *        If true, the key for the provided key should be saved
   * @return {Object}
   *         Key object for desired key
   */ segmentKey(key, set = false) {
        if (!key) return null;
        const id = $e88cd91ee18355c1$var$segmentKeyId(key);
        let storedKey = this.keyCache_[id]; // TODO: We should use the HTTP Expires header to invalidate our cache per
        // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-6.2.3
        if (this.cacheEncryptionKeys_ && set && !storedKey && key.bytes) this.keyCache_[id] = storedKey = {
            resolvedUri: key.resolvedUri,
            bytes: key.bytes
        };
        const result = {
            resolvedUri: (storedKey || key).resolvedUri
        };
        if (storedKey) result.bytes = storedKey.bytes;
        return result;
    }
    /**
   * Returns true if all configuration required for loading is present, otherwise false.
   *
   * @return {boolean} True if the all configuration is ready for loading
   * @private
   */ couldBeginLoading_() {
        return this.playlist_ && !this.paused();
    }
    /**
   * load a playlist and start to fill the buffer
   */ load() {
        // un-pause
        this.monitorBuffer_(); // if we don't have a playlist yet, keep waiting for one to be
        // specified
        if (!this.playlist_) return;
         // if all the configuration is ready, initialize and begin loading
        if (this.state === "INIT" && this.couldBeginLoading_()) return this.init_();
         // if we're in the middle of processing a segment already, don't
        // kick off an additional segment request
        if (!this.couldBeginLoading_() || this.state !== "READY" && this.state !== "INIT") return;
        this.state = "READY";
    }
    /**
   * Once all the starting parameters have been specified, begin
   * operation. This method should only be invoked from the INIT
   * state.
   *
   * @private
   */ init_() {
        this.state = "READY"; // if this is the audio segment loader, and it hasn't been inited before, then any old
        // audio data from the muxed content should be removed
        this.resetEverything();
        return this.monitorBuffer_();
    }
    /**
   * set a playlist on the segment loader
   *
   * @param {PlaylistLoader} media the playlist to set on the segment loader
   */ playlist(newPlaylist, options = {}) {
        if (!newPlaylist) return;
        const oldPlaylist = this.playlist_;
        const segmentInfo = this.pendingSegment_;
        this.playlist_ = newPlaylist;
        this.xhrOptions_ = options; // when we haven't started playing yet, the start of a live playlist
        // is always our zero-time so force a sync update each time the playlist
        // is refreshed from the server
        //
        // Use the INIT state to determine if playback has started, as the playlist sync info
        // should be fixed once requests begin (as sync points are generated based on sync
        // info), but not before then.
        if (this.state === "INIT") {
            newPlaylist.syncInfo = {
                mediaSequence: newPlaylist.mediaSequence,
                time: 0
            }; // Setting the date time mapping means mapping the program date time (if available)
            // to time 0 on the player's timeline. The playlist's syncInfo serves a similar
            // purpose, mapping the initial mediaSequence to time zero. Since the syncInfo can
            // be updated as the playlist is refreshed before the loader starts loading, the
            // program date time mapping needs to be updated as well.
            //
            // This mapping is only done for the main loader because a program date time should
            // map equivalently between playlists.
            if (this.loaderType_ === "main") this.syncController_.setDateTimeMappingForStart(newPlaylist);
        }
        let oldId = null;
        if (oldPlaylist) {
            if (oldPlaylist.id) oldId = oldPlaylist.id;
            else if (oldPlaylist.uri) oldId = oldPlaylist.uri;
        }
        this.logger_(`playlist update [${oldId} => ${newPlaylist.id || newPlaylist.uri}]`);
        this.syncController_.updateMediaSequenceMap(newPlaylist, this.currentTime_(), this.loaderType_); // in VOD, this is always a rendition switch (or we updated our syncInfo above)
        // in LIVE, we always want to update with new playlists (including refreshes)
        this.trigger("syncinfoupdate"); // if we were unpaused but waiting for a playlist, start
        // buffering now
        if (this.state === "INIT" && this.couldBeginLoading_()) return this.init_();
        if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {
            if (this.mediaIndex !== null) {
                // we must reset/resync the segment loader when we switch renditions and
                // the segment loader is already synced to the previous rendition
                // We only want to reset the loader here for LLHLS playback, as resetLoader sets fetchAtBuffer_
                // to false, resulting in fetching segments at currentTime and causing repeated
                // same-segment requests on playlist change. This erroneously drives up the playback watcher
                // stalled segment count, as re-requesting segments at the currentTime or browser cached segments
                // will not change the buffer.
                // Reference for LLHLS fixes: https://github.com/videojs/http-streaming/pull/1201
                const isLLHLS = !newPlaylist.endList && typeof newPlaylist.partTargetDuration === "number";
                if (isLLHLS) this.resetLoader();
                else this.resyncLoader();
            }
            this.currentMediaInfo_ = void 0;
            this.trigger("playlistupdate"); // the rest of this function depends on `oldPlaylist` being defined
            return;
        } // we reloaded the same playlist so we are in a live scenario
        // and we will likely need to adjust the mediaIndex
        const mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;
        this.logger_(`live window shift [${mediaSequenceDiff}]`); // update the mediaIndex on the SegmentLoader
        // this is important because we can abort a request and this value must be
        // equal to the last appended mediaIndex
        if (this.mediaIndex !== null) {
            this.mediaIndex -= mediaSequenceDiff; // this can happen if we are going to load the first segment, but get a playlist
            // update during that. mediaIndex would go from 0 to -1 if mediaSequence in the
            // new playlist was incremented by 1.
            if (this.mediaIndex < 0) {
                this.mediaIndex = null;
                this.partIndex = null;
            } else {
                const segment = this.playlist_.segments[this.mediaIndex]; // partIndex should remain the same for the same segment
                // unless parts fell off of the playlist for this segment.
                // In that case we need to reset partIndex and resync
                if (this.partIndex && (!segment.parts || !segment.parts.length || !segment.parts[this.partIndex])) {
                    const mediaIndex = this.mediaIndex;
                    this.logger_(`currently processing part (index ${this.partIndex}) no longer exists.`);
                    this.resetLoader(); // We want to throw away the partIndex and the data associated with it,
                    // as the part was dropped from our current playlists segment.
                    // The mediaIndex will still be valid so keep that around.
                    this.mediaIndex = mediaIndex;
                }
            }
        } // update the mediaIndex on the SegmentInfo object
        // this is important because we will update this.mediaIndex with this value
        // in `handleAppendsDone_` after the segment has been successfully appended
        if (segmentInfo) {
            segmentInfo.mediaIndex -= mediaSequenceDiff;
            if (segmentInfo.mediaIndex < 0) {
                segmentInfo.mediaIndex = null;
                segmentInfo.partIndex = null;
            } else {
                // we need to update the referenced segment so that timing information is
                // saved for the new playlist's segment, however, if the segment fell off the
                // playlist, we can leave the old reference and just lose the timing info
                if (segmentInfo.mediaIndex >= 0) segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];
                if (segmentInfo.partIndex >= 0 && segmentInfo.segment.parts) segmentInfo.part = segmentInfo.segment.parts[segmentInfo.partIndex];
            }
        }
        this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);
    }
    /**
   * Prevent the loader from fetching additional segments. If there
   * is a segment request outstanding, it will finish processing
   * before the loader halts. A segment loader can be unpaused by
   * calling load().
   */ pause() {
        if (this.checkBufferTimeout_) {
            (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.checkBufferTimeout_);
            this.checkBufferTimeout_ = null;
        }
    }
    /**
   * Returns whether the segment loader is fetching additional
   * segments when given the opportunity. This property can be
   * modified through calls to pause() and load().
   */ paused() {
        return this.checkBufferTimeout_ === null;
    }
    /**
   * Delete all the buffered data and reset the SegmentLoader
   *
   * @param {Function} [done] an optional callback to be executed when the remove
   * operation is complete
   */ resetEverything(done) {
        this.ended_ = false;
        this.activeInitSegmentId_ = null;
        this.appendInitSegment_ = {
            audio: true,
            video: true
        };
        this.resetLoader(); // remove from 0, the earliest point, to Infinity, to signify removal of everything.
        // VTT Segment Loader doesn't need to do anything but in the regular SegmentLoader,
        // we then clamp the value to duration if necessary.
        this.remove(0, Infinity, done); // clears fmp4 captions
        if (this.transmuxer_) {
            this.transmuxer_.postMessage({
                action: "clearAllMp4Captions"
            }); // reset the cache in the transmuxer
            this.transmuxer_.postMessage({
                action: "reset"
            });
        }
    }
    /**
   * Force the SegmentLoader to resync and start loading around the currentTime instead
   * of starting at the end of the buffer
   *
   * Useful for fast quality changes
   */ resetLoader() {
        this.fetchAtBuffer_ = false;
        this.resyncLoader();
    }
    /**
   * Force the SegmentLoader to restart synchronization and make a conservative guess
   * before returning to the simple walk-forward method
   */ resyncLoader() {
        if (this.transmuxer_) // need to clear out any cached data to prepare for the new segment
        $e88cd91ee18355c1$var$segmentTransmuxer.reset(this.transmuxer_);
        this.mediaIndex = null;
        this.partIndex = null;
        this.syncPoint_ = null;
        this.isPendingTimestampOffset_ = false;
        this.shouldForceTimestampOffsetAfterResync_ = true;
        this.callQueue_ = [];
        this.loadQueue_ = [];
        this.metadataQueue_.id3 = [];
        this.metadataQueue_.caption = [];
        this.abort();
        if (this.transmuxer_) this.transmuxer_.postMessage({
            action: "clearParsedMp4Captions"
        });
    }
    /**
   * Remove any data in the source buffer between start and end times
   *
   * @param {number} start - the start time of the region to remove from the buffer
   * @param {number} end - the end time of the region to remove from the buffer
   * @param {Function} [done] - an optional callback to be executed when the remove
   * @param {boolean} force - force all remove operations to happen
   * operation is complete
   */ remove(start, end, done = ()=>{}, force = false) {
        // clamp end to duration if we need to remove everything.
        // This is due to a browser bug that causes issues if we remove to Infinity.
        // videojs/videojs-contrib-hls#1225
        if (end === Infinity) end = this.duration_();
         // skip removes that would throw an error
        // commonly happens during a rendition switch at the start of a video
        // from start 0 to end 0
        if (end <= start) {
            this.logger_("skipping remove because end ${end} is <= start ${start}");
            return;
        }
        if (!this.sourceUpdater_ || !this.getMediaInfo_()) {
            this.logger_("skipping remove because no source updater or starting media info"); // nothing to remove if we haven't processed any media
            return;
        } // set it to one to complete this function's removes
        let removesRemaining = 1;
        const removeFinished = ()=>{
            removesRemaining--;
            if (removesRemaining === 0) done();
        };
        if (force || !this.audioDisabled_) {
            removesRemaining++;
            this.sourceUpdater_.removeAudio(start, end, removeFinished);
        } // While it would be better to only remove video if the main loader has video, this
        // should be safe with audio only as removeVideo will call back even if there's no
        // video buffer.
        //
        // In theory we can check to see if there's video before calling the remove, but in
        // the event that we're switching between renditions and from video to audio only
        // (when we add support for that), we may need to clear the video contents despite
        // what the new media will contain.
        if (force || this.loaderType_ === "main") {
            this.gopBuffer_ = $e88cd91ee18355c1$var$removeGopBuffer(this.gopBuffer_, start, end, this.timeMapping_);
            removesRemaining++;
            this.sourceUpdater_.removeVideo(start, end, removeFinished);
        } // remove any captions and ID3 tags
        for(const track in this.inbandTextTracks_)$e88cd91ee18355c1$var$removeCuesFromTrack(start, end, this.inbandTextTracks_[track]);
        $e88cd91ee18355c1$var$removeCuesFromTrack(start, end, this.segmentMetadataTrack_); // finished this function's removes
        removeFinished();
    }
    /**
   * (re-)schedule monitorBufferTick_ to run as soon as possible
   *
   * @private
   */ monitorBuffer_() {
        if (this.checkBufferTimeout_) (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.checkBufferTimeout_);
        this.checkBufferTimeout_ = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(this.monitorBufferTick_.bind(this), 1);
    }
    /**
   * As long as the SegmentLoader is in the READY state, periodically
   * invoke fillBuffer_().
   *
   * @private
   */ monitorBufferTick_() {
        if (this.state === "READY") this.fillBuffer_();
        if (this.checkBufferTimeout_) (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.checkBufferTimeout_);
        this.checkBufferTimeout_ = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(this.monitorBufferTick_.bind(this), $e88cd91ee18355c1$var$CHECK_BUFFER_DELAY);
    }
    /**
   * fill the buffer with segements unless the sourceBuffers are
   * currently updating
   *
   * Note: this function should only ever be called by monitorBuffer_
   * and never directly
   *
   * @private
   */ fillBuffer_() {
        // TODO since the source buffer maintains a queue, and we shouldn't call this function
        // except when we're ready for the next segment, this check can most likely be removed
        if (this.sourceUpdater_.updating()) return;
         // see if we need to begin loading immediately
        const segmentInfo = this.chooseNextRequest_();
        if (!segmentInfo) return;
        if (typeof segmentInfo.timestampOffset === "number") {
            this.isPendingTimestampOffset_ = false;
            this.timelineChangeController_.pendingTimelineChange({
                type: this.loaderType_,
                from: this.currentTimeline_,
                to: segmentInfo.timeline
            });
        }
        this.loadSegment_(segmentInfo);
    }
    /**
   * Determines if we should call endOfStream on the media source based
   * on the state of the buffer or if appened segment was the final
   * segment in the playlist.
   *
   * @param {number} [mediaIndex] the media index of segment we last appended
   * @param {Object} [playlist] a media playlist object
   * @return {boolean} do we need to call endOfStream on the MediaSource
   */ isEndOfStream_(mediaIndex = this.mediaIndex, playlist = this.playlist_, partIndex = this.partIndex) {
        if (!playlist || !this.mediaSource_) return false;
        const segment = typeof mediaIndex === "number" && playlist.segments[mediaIndex]; // mediaIndex is zero based but length is 1 based
        const appendedLastSegment = mediaIndex + 1 === playlist.segments.length; // true if there are no parts, or this is the last part.
        const appendedLastPart = !segment || !segment.parts || partIndex + 1 === segment.parts.length; // if we've buffered to the end of the video, we need to call endOfStream
        // so that MediaSources can trigger the `ended` event when it runs out of
        // buffered data instead of waiting for me
        return playlist.endList && this.mediaSource_.readyState === "open" && appendedLastSegment && appendedLastPart;
    }
    /**
   * Determines what request should be made given current segment loader state.
   *
   * @return {Object} a request object that describes the segment/part to load
   */ chooseNextRequest_() {
        const buffered = this.buffered_();
        const bufferedEnd = $e88cd91ee18355c1$var$lastBufferedEnd(buffered) || 0;
        const bufferedTime = $e88cd91ee18355c1$var$timeAheadOf(buffered, this.currentTime_());
        const preloaded = !this.hasPlayed_() && bufferedTime >= 1;
        const haveEnoughBuffer = bufferedTime >= this.goalBufferLength_();
        const segments = this.playlist_.segments; // return no segment if:
        // 1. we don't have segments
        // 2. The video has not yet played and we already downloaded a segment
        // 3. we already have enough buffered time
        if (!segments.length || preloaded || haveEnoughBuffer) return null;
        this.syncPoint_ = this.syncPoint_ || this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_(), this.loaderType_);
        const next = {
            partIndex: null,
            mediaIndex: null,
            startOfSegment: null,
            playlist: this.playlist_,
            isSyncRequest: Boolean(!this.syncPoint_)
        };
        if (next.isSyncRequest) {
            next.mediaIndex = $e88cd91ee18355c1$var$getSyncSegmentCandidate(this.currentTimeline_, segments, bufferedEnd);
            this.logger_(`choose next request. Can not find sync point. Fallback to media Index: ${next.mediaIndex}`);
        } else if (this.mediaIndex !== null) {
            const segment = segments[this.mediaIndex];
            const partIndex = typeof this.partIndex === "number" ? this.partIndex : -1;
            next.startOfSegment = segment.end ? segment.end : bufferedEnd;
            if (segment.parts && segment.parts[partIndex + 1]) {
                next.mediaIndex = this.mediaIndex;
                next.partIndex = partIndex + 1;
            } else next.mediaIndex = this.mediaIndex + 1;
        } else {
            // Find the segment containing the end of the buffer or current time.
            const { segmentIndex: segmentIndex, startTime: startTime, partIndex: partIndex } = $e88cd91ee18355c1$var$Playlist.getMediaInfoForTime({
                exactManifestTimings: this.exactManifestTimings,
                playlist: this.playlist_,
                currentTime: this.fetchAtBuffer_ ? bufferedEnd : this.currentTime_(),
                startingPartIndex: this.syncPoint_.partIndex,
                startingSegmentIndex: this.syncPoint_.segmentIndex,
                startTime: this.syncPoint_.time
            });
            next.getMediaInfoForTime = this.fetchAtBuffer_ ? `bufferedEnd ${bufferedEnd}` : `currentTime ${this.currentTime_()}`;
            next.mediaIndex = segmentIndex;
            next.startOfSegment = startTime;
            next.partIndex = partIndex;
            this.logger_(`choose next request. Playlist switched and we have a sync point. Media Index: ${next.mediaIndex} `);
        }
        const nextSegment = segments[next.mediaIndex];
        let nextPart = nextSegment && typeof next.partIndex === "number" && nextSegment.parts && nextSegment.parts[next.partIndex]; // if the next segment index is invalid or
        // the next partIndex is invalid do not choose a next segment.
        if (!nextSegment || typeof next.partIndex === "number" && !nextPart) return null;
         // if the next segment has parts, and we don't have a partIndex.
        // Set partIndex to 0
        if (typeof next.partIndex !== "number" && nextSegment.parts) {
            next.partIndex = 0;
            nextPart = nextSegment.parts[0];
        } // independentSegments applies to every segment in a playlist. If independentSegments appears in a main playlist,
        // it applies to each segment in each media playlist.
        // https://datatracker.ietf.org/doc/html/draft-pantos-http-live-streaming-23#section-4.3.5.1
        const hasIndependentSegments = this.vhs_.playlists && this.vhs_.playlists.main && this.vhs_.playlists.main.independentSegments || this.playlist_.independentSegments; // if we have no buffered data then we need to make sure
        // that the next part we append is "independent" if possible.
        // So we check if the previous part is independent, and request
        // it if it is.
        if (!bufferedTime && nextPart && !hasIndependentSegments && !nextPart.independent) {
            if (next.partIndex === 0) {
                const lastSegment = segments[next.mediaIndex - 1];
                const lastSegmentLastPart = lastSegment.parts && lastSegment.parts.length && lastSegment.parts[lastSegment.parts.length - 1];
                if (lastSegmentLastPart && lastSegmentLastPart.independent) {
                    next.mediaIndex -= 1;
                    next.partIndex = lastSegment.parts.length - 1;
                    next.independent = "previous segment";
                }
            } else if (nextSegment.parts[next.partIndex - 1].independent) {
                next.partIndex -= 1;
                next.independent = "previous part";
            }
        }
        const ended = this.mediaSource_ && this.mediaSource_.readyState === "ended"; // do not choose a next segment if all of the following:
        // 1. this is the last segment in the playlist
        // 2. end of stream has been called on the media source already
        // 3. the player is not seeking
        if (next.mediaIndex >= segments.length - 1 && ended && !this.seeking_()) return null;
        if (this.shouldForceTimestampOffsetAfterResync_) {
            this.shouldForceTimestampOffsetAfterResync_ = false;
            next.forceTimestampOffset = true;
            this.logger_("choose next request. Force timestamp offset after loader resync");
        }
        return this.generateSegmentInfo_(next);
    }
    generateSegmentInfo_(options) {
        const { independent: independent, playlist: playlist, mediaIndex: mediaIndex, startOfSegment: startOfSegment, isSyncRequest: isSyncRequest, partIndex: partIndex, forceTimestampOffset: forceTimestampOffset, getMediaInfoForTime: getMediaInfoForTime } = options;
        const segment = playlist.segments[mediaIndex];
        const part = typeof partIndex === "number" && segment.parts[partIndex];
        const segmentInfo = {
            requestId: "segment-loader-" + Math.random(),
            // resolve the segment URL relative to the playlist
            uri: part && part.resolvedUri || segment.resolvedUri,
            mediaIndex: // the segment's mediaIndex at the time it was requested
            mediaIndex,
            partIndex: part ? partIndex : null,
            isSyncRequest: // whether or not to update the SegmentLoader's state with this
            // segment's mediaIndex
            isSyncRequest,
            startOfSegment: startOfSegment,
            playlist: // the segment's playlist
            playlist,
            // unencrypted bytes of the segment
            bytes: null,
            // when a key is defined for this segment, the encrypted bytes
            encryptedBytes: null,
            // The target timestampOffset for this segment when we append it
            // to the source buffer
            timestampOffset: null,
            // The timeline that the segment is in
            timeline: segment.timeline,
            // The expected duration of the segment in seconds
            duration: part && part.duration || segment.duration,
            segment: // retain the segment in case the playlist updates while doing an async process
            segment,
            part: part,
            byteLength: 0,
            transmuxer: this.transmuxer_,
            getMediaInfoForTime: // type of getMediaInfoForTime that was used to get this segment
            getMediaInfoForTime,
            independent: independent
        };
        const overrideCheck = typeof forceTimestampOffset !== "undefined" ? forceTimestampOffset : this.isPendingTimestampOffset_;
        segmentInfo.timestampOffset = this.timestampOffsetForSegment_({
            segmentTimeline: segment.timeline,
            currentTimeline: this.currentTimeline_,
            startOfSegment: startOfSegment,
            buffered: this.buffered_(),
            overrideCheck: overrideCheck
        });
        const audioBufferedEnd = $e88cd91ee18355c1$var$lastBufferedEnd(this.sourceUpdater_.audioBuffered());
        if (typeof audioBufferedEnd === "number") // since the transmuxer is using the actual timing values, but the buffer is
        // adjusted by the timestamp offset, we must adjust the value here
        segmentInfo.audioAppendStart = audioBufferedEnd - this.sourceUpdater_.audioTimestampOffset();
        if (this.sourceUpdater_.videoBuffered().length) segmentInfo.gopsToAlignWith = $e88cd91ee18355c1$var$gopsSafeToAlignWith(this.gopBuffer_, // since the transmuxer is using the actual timing values, but the time is
        // adjusted by the timestmap offset, we must adjust the value here
        this.currentTime_() - this.sourceUpdater_.videoTimestampOffset(), this.timeMapping_);
        return segmentInfo;
    }
    // added so that vtt segment loader can override and prevent
    // adding timestamp offsets.
    timestampOffsetForSegment_(options) {
        return $e88cd91ee18355c1$var$timestampOffsetForSegment(options);
    }
    /**
   * Determines if the network has enough bandwidth to complete the current segment
   * request in a timely manner. If not, the request will be aborted early and bandwidth
   * updated to trigger a playlist switch.
   *
   * @param {Object} stats
   *        Object containing stats about the request timing and size
   * @private
   */ earlyAbortWhenNeeded_(stats) {
        if (this.vhs_.tech_.paused() || // Don't abort if the current playlist is on the lowestEnabledRendition
        // TODO: Replace using timeout with a boolean indicating whether this playlist is
        //       the lowestEnabledRendition.
        !this.xhrOptions_.timeout || // Don't abort if we have no bandwidth information to estimate segment sizes
        !this.playlist_.attributes.BANDWIDTH) return;
         // Wait at least 1 second since the first byte of data has been received before
        // using the calculated bandwidth from the progress event to allow the bitrate
        // to stabilize
        if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1000) return;
        const currentTime = this.currentTime_();
        const measuredBandwidth = stats.bandwidth;
        const segmentDuration = this.pendingSegment_.duration;
        const requestTimeRemaining = $e88cd91ee18355c1$var$Playlist.estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived); // Subtract 1 from the timeUntilRebuffer so we still consider an early abort
        // if we are only left with less than 1 second when the request completes.
        // A negative timeUntilRebuffering indicates we are already rebuffering
        const timeUntilRebuffer$1 = $e88cd91ee18355c1$var$timeUntilRebuffer(this.buffered_(), currentTime, this.vhs_.tech_.playbackRate()) - 1; // Only consider aborting early if the estimated time to finish the download
        // is larger than the estimated time until the player runs out of forward buffer
        if (requestTimeRemaining <= timeUntilRebuffer$1) return;
        const switchCandidate = $e88cd91ee18355c1$var$minRebufferMaxBandwidthSelector({
            main: this.vhs_.playlists.main,
            currentTime: currentTime,
            bandwidth: measuredBandwidth,
            duration: this.duration_(),
            segmentDuration: segmentDuration,
            timeUntilRebuffer: timeUntilRebuffer$1,
            currentTimeline: this.currentTimeline_,
            syncController: this.syncController_
        });
        if (!switchCandidate) return;
        const rebufferingImpact = requestTimeRemaining - timeUntilRebuffer$1;
        const timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;
        let minimumTimeSaving = 0.5; // If we are already rebuffering, increase the amount of variance we add to the
        // potential round trip time of the new request so that we are not too aggressive
        // with switching to a playlist that might save us a fraction of a second.
        if (timeUntilRebuffer$1 <= $e88cd91ee18355c1$var$TIME_FUDGE_FACTOR) minimumTimeSaving = 1;
        if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) return;
         // set the bandwidth to that of the desired playlist being sure to scale by
        // BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it
        // don't trigger a bandwidthupdate as the bandwidth is artifial
        this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * $e88cd91ee18355c1$var$Config.BANDWIDTH_VARIANCE + 1;
        this.trigger("earlyabort");
    }
    handleAbort_(segmentInfo) {
        this.logger_(`Aborting ${$e88cd91ee18355c1$var$segmentInfoString(segmentInfo)}`);
        this.mediaRequestsAborted += 1;
    }
    /**
   * XHR `progress` event handler
   *
   * @param {Event}
   *        The XHR `progress` event
   * @param {Object} simpleSegment
   *        A simplified segment object copy
   * @private
   */ handleProgress_(event, simpleSegment) {
        this.earlyAbortWhenNeeded_(simpleSegment.stats);
        if (this.checkForAbort_(simpleSegment.requestId)) return;
        this.trigger("progress");
    }
    handleTrackInfo_(simpleSegment, trackInfo) {
        this.earlyAbortWhenNeeded_(simpleSegment.stats);
        if (this.checkForAbort_(simpleSegment.requestId)) return;
        if (this.checkForIllegalMediaSwitch(trackInfo)) return;
        trackInfo = trackInfo || {}; // When we have track info, determine what media types this loader is dealing with.
        // Guard against cases where we're not getting track info at all until we are
        // certain that all streams will provide it.
        if (!$e88cd91ee18355c1$var$shallowEqual(this.currentMediaInfo_, trackInfo)) {
            this.appendInitSegment_ = {
                audio: true,
                video: true
            };
            this.startingMediaInfo_ = trackInfo;
            this.currentMediaInfo_ = trackInfo;
            this.logger_("trackinfo update", trackInfo);
            this.trigger("trackinfo");
        } // trackinfo may cause an abort if the trackinfo
        // causes a codec change to an unsupported codec.
        if (this.checkForAbort_(simpleSegment.requestId)) return;
         // set trackinfo on the pending segment so that
        // it can append.
        this.pendingSegment_.trackInfo = trackInfo; // check if any calls were waiting on the track info
        if (this.hasEnoughInfoToAppend_()) this.processCallQueue_();
    }
    handleTimingInfo_(simpleSegment, mediaType, timeType, time) {
        this.earlyAbortWhenNeeded_(simpleSegment.stats);
        if (this.checkForAbort_(simpleSegment.requestId)) return;
        const segmentInfo = this.pendingSegment_;
        const timingInfoProperty = $e88cd91ee18355c1$var$timingInfoPropertyForMedia(mediaType);
        segmentInfo[timingInfoProperty] = segmentInfo[timingInfoProperty] || {};
        segmentInfo[timingInfoProperty][timeType] = time;
        this.logger_(`timinginfo: ${mediaType} - ${timeType} - ${time}`); // check if any calls were waiting on the timing info
        if (this.hasEnoughInfoToAppend_()) this.processCallQueue_();
    }
    handleCaptions_(simpleSegment, captionData) {
        this.earlyAbortWhenNeeded_(simpleSegment.stats);
        if (this.checkForAbort_(simpleSegment.requestId)) return;
         // This could only happen with fmp4 segments, but
        // should still not happen in general
        if (captionData.length === 0) {
            this.logger_("SegmentLoader received no captions from a caption event");
            return;
        }
        const segmentInfo = this.pendingSegment_; // Wait until we have some video data so that caption timing
        // can be adjusted by the timestamp offset
        if (!segmentInfo.hasAppendedData_) {
            this.metadataQueue_.caption.push(this.handleCaptions_.bind(this, simpleSegment, captionData));
            return;
        }
        const timestampOffset = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();
        const captionTracks = {}; // get total start/end and captions for each track/stream
        captionData.forEach((caption)=>{
            // caption.stream is actually a track name...
            // set to the existing values in tracks or default values
            captionTracks[caption.stream] = captionTracks[caption.stream] || {
                // Infinity, as any other value will be less than this
                startTime: Infinity,
                captions: [],
                // 0 as an other value will be more than this
                endTime: 0
            };
            const captionTrack = captionTracks[caption.stream];
            captionTrack.startTime = Math.min(captionTrack.startTime, caption.startTime + timestampOffset);
            captionTrack.endTime = Math.max(captionTrack.endTime, caption.endTime + timestampOffset);
            captionTrack.captions.push(caption);
        });
        Object.keys(captionTracks).forEach((trackName)=>{
            const { startTime: startTime, endTime: endTime, captions: captions } = captionTracks[trackName];
            const inbandTextTracks = this.inbandTextTracks_;
            this.logger_(`adding cues from ${startTime} -> ${endTime} for ${trackName}`);
            $e88cd91ee18355c1$var$createCaptionsTrackIfNotExists(inbandTextTracks, this.vhs_.tech_, trackName); // clear out any cues that start and end at the same time period for the same track.
            // We do this because a rendition change that also changes the timescale for captions
            // will result in captions being re-parsed for certain segments. If we add them again
            // without clearing we will have two of the same captions visible.
            $e88cd91ee18355c1$var$removeCuesFromTrack(startTime, endTime, inbandTextTracks[trackName]);
            $e88cd91ee18355c1$var$addCaptionData({
                captionArray: captions,
                inbandTextTracks: inbandTextTracks,
                timestampOffset: timestampOffset
            });
        }); // Reset stored captions since we added parsed
        // captions to a text track at this point
        if (this.transmuxer_) this.transmuxer_.postMessage({
            action: "clearParsedMp4Captions"
        });
    }
    handleId3_(simpleSegment, id3Frames, dispatchType) {
        this.earlyAbortWhenNeeded_(simpleSegment.stats);
        if (this.checkForAbort_(simpleSegment.requestId)) return;
        const segmentInfo = this.pendingSegment_; // we need to have appended data in order for the timestamp offset to be set
        if (!segmentInfo.hasAppendedData_) {
            this.metadataQueue_.id3.push(this.handleId3_.bind(this, simpleSegment, id3Frames, dispatchType));
            return;
        }
        this.addMetadataToTextTrack(dispatchType, id3Frames, this.duration_());
    }
    processMetadataQueue_() {
        this.metadataQueue_.id3.forEach((fn)=>fn());
        this.metadataQueue_.caption.forEach((fn)=>fn());
        this.metadataQueue_.id3 = [];
        this.metadataQueue_.caption = [];
    }
    processCallQueue_() {
        const callQueue = this.callQueue_; // Clear out the queue before the queued functions are run, since some of the
        // functions may check the length of the load queue and default to pushing themselves
        // back onto the queue.
        this.callQueue_ = [];
        callQueue.forEach((fun)=>fun());
    }
    processLoadQueue_() {
        const loadQueue = this.loadQueue_; // Clear out the queue before the queued functions are run, since some of the
        // functions may check the length of the load queue and default to pushing themselves
        // back onto the queue.
        this.loadQueue_ = [];
        loadQueue.forEach((fun)=>fun());
    }
    /**
   * Determines whether the loader has enough info to load the next segment.
   *
   * @return {boolean}
   *         Whether or not the loader has enough info to load the next segment
   */ hasEnoughInfoToLoad_() {
        // Since primary timing goes by video, only the audio loader potentially needs to wait
        // to load.
        if (this.loaderType_ !== "audio") return true;
        const segmentInfo = this.pendingSegment_; // A fill buffer must have already run to establish a pending segment before there's
        // enough info to load.
        if (!segmentInfo) return false;
         // The first segment can and should be loaded immediately so that source buffers are
        // created together (before appending). Source buffer creation uses the presence of
        // audio and video data to determine whether to create audio/video source buffers, and
        // uses processed (transmuxed or parsed) media to determine the types required.
        if (!this.getCurrentMediaInfo_()) return true;
        if (// Technically, instead of waiting to load a segment on timeline changes, a segment
        // can be requested and downloaded and only wait before it is transmuxed or parsed.
        // But in practice, there are a few reasons why it is better to wait until a loader
        // is ready to append that segment before requesting and downloading:
        //
        // 1. Because audio and main loaders cross discontinuities together, if this loader
        //    is waiting for the other to catch up, then instead of requesting another
        //    segment and using up more bandwidth, by not yet loading, more bandwidth is
        //    allotted to the loader currently behind.
        // 2. media-segment-request doesn't have to have logic to consider whether a segment
        // is ready to be processed or not, isolating the queueing behavior to the loader.
        // 3. The audio loader bases some of its segment properties on timing information
        //    provided by the main loader, meaning that, if the logic for waiting on
        //    processing was in media-segment-request, then it would also need to know how
        //    to re-generate the segment information after the main loader caught up.
        $e88cd91ee18355c1$var$shouldWaitForTimelineChange({
            timelineChangeController: this.timelineChangeController_,
            currentTimeline: this.currentTimeline_,
            segmentTimeline: segmentInfo.timeline,
            loaderType: this.loaderType_,
            audioDisabled: this.audioDisabled_
        })) return false;
        return true;
    }
    getCurrentMediaInfo_(segmentInfo = this.pendingSegment_) {
        return segmentInfo && segmentInfo.trackInfo || this.currentMediaInfo_;
    }
    getMediaInfo_(segmentInfo = this.pendingSegment_) {
        return this.getCurrentMediaInfo_(segmentInfo) || this.startingMediaInfo_;
    }
    getPendingSegmentPlaylist() {
        return this.pendingSegment_ ? this.pendingSegment_.playlist : null;
    }
    hasEnoughInfoToAppend_() {
        if (!this.sourceUpdater_.ready()) return false;
         // If content needs to be removed or the loader is waiting on an append reattempt,
        // then no additional content should be appended until the prior append is resolved.
        if (this.waitingOnRemove_ || this.quotaExceededErrorRetryTimeout_) return false;
        const segmentInfo = this.pendingSegment_;
        const trackInfo = this.getCurrentMediaInfo_(); // no segment to append any data for or
        // we do not have information on this specific
        // segment yet
        if (!segmentInfo || !trackInfo) return false;
        const { hasAudio: hasAudio, hasVideo: hasVideo, isMuxed: isMuxed } = trackInfo;
        if (hasVideo && !segmentInfo.videoTimingInfo) return false;
         // muxed content only relies on video timing information for now.
        if (hasAudio && !this.audioDisabled_ && !isMuxed && !segmentInfo.audioTimingInfo) return false;
        if ($e88cd91ee18355c1$var$shouldWaitForTimelineChange({
            timelineChangeController: this.timelineChangeController_,
            currentTimeline: this.currentTimeline_,
            segmentTimeline: segmentInfo.timeline,
            loaderType: this.loaderType_,
            audioDisabled: this.audioDisabled_
        })) return false;
        return true;
    }
    handleData_(simpleSegment, result) {
        this.earlyAbortWhenNeeded_(simpleSegment.stats);
        if (this.checkForAbort_(simpleSegment.requestId)) return;
         // If there's anything in the call queue, then this data came later and should be
        // executed after the calls currently queued.
        if (this.callQueue_.length || !this.hasEnoughInfoToAppend_()) {
            this.callQueue_.push(this.handleData_.bind(this, simpleSegment, result));
            return;
        }
        const segmentInfo = this.pendingSegment_; // update the time mapping so we can translate from display time to media time
        this.setTimeMapping_(segmentInfo.timeline); // for tracking overall stats
        this.updateMediaSecondsLoaded_(segmentInfo.part || segmentInfo.segment); // Note that the state isn't changed from loading to appending. This is because abort
        // logic may change behavior depending on the state, and changing state too early may
        // inflate our estimates of bandwidth. In the future this should be re-examined to
        // note more granular states.
        // don't process and append data if the mediaSource is closed
        if (this.mediaSource_.readyState === "closed") return;
         // if this request included an initialization segment, save that data
        // to the initSegment cache
        if (simpleSegment.map) {
            simpleSegment.map = this.initSegmentForMap(simpleSegment.map, true); // move over init segment properties to media request
            segmentInfo.segment.map = simpleSegment.map;
        } // if this request included a segment key, save that data in the cache
        if (simpleSegment.key) this.segmentKey(simpleSegment.key, true);
        segmentInfo.isFmp4 = simpleSegment.isFmp4;
        segmentInfo.timingInfo = segmentInfo.timingInfo || {};
        if (segmentInfo.isFmp4) {
            this.trigger("fmp4");
            segmentInfo.timingInfo.start = segmentInfo[$e88cd91ee18355c1$var$timingInfoPropertyForMedia(result.type)].start;
        } else {
            const trackInfo = this.getCurrentMediaInfo_();
            const useVideoTimingInfo = this.loaderType_ === "main" && trackInfo && trackInfo.hasVideo;
            let firstVideoFrameTimeForData;
            if (useVideoTimingInfo) firstVideoFrameTimeForData = segmentInfo.videoTimingInfo.start;
             // Segment loader knows more about segment timing than the transmuxer (in certain
            // aspects), so make any changes required for a more accurate start time.
            // Don't set the end time yet, as the segment may not be finished processing.
            segmentInfo.timingInfo.start = this.trueSegmentStart_({
                currentStart: segmentInfo.timingInfo.start,
                playlist: segmentInfo.playlist,
                mediaIndex: segmentInfo.mediaIndex,
                currentVideoTimestampOffset: this.sourceUpdater_.videoTimestampOffset(),
                useVideoTimingInfo: useVideoTimingInfo,
                firstVideoFrameTimeForData: firstVideoFrameTimeForData,
                videoTimingInfo: segmentInfo.videoTimingInfo,
                audioTimingInfo: segmentInfo.audioTimingInfo
            });
        } // Init segments for audio and video only need to be appended in certain cases. Now
        // that data is about to be appended, we can check the final cases to determine
        // whether we should append an init segment.
        this.updateAppendInitSegmentStatus(segmentInfo, result.type); // Timestamp offset should be updated once we get new data and have its timing info,
        // as we use the start of the segment to offset the best guess (playlist provided)
        // timestamp offset.
        this.updateSourceBufferTimestampOffset_(segmentInfo); // if this is a sync request we need to determine whether it should
        // be appended or not.
        if (segmentInfo.isSyncRequest) {
            // first save/update our timing info for this segment.
            // this is what allows us to choose an accurate segment
            // and the main reason we make a sync request.
            this.updateTimingInfoEnd_(segmentInfo);
            this.syncController_.saveSegmentTimingInfo({
                segmentInfo: segmentInfo,
                shouldSaveTimelineMapping: this.loaderType_ === "main"
            });
            const next = this.chooseNextRequest_(); // If the sync request isn't the segment that would be requested next
            // after taking into account its timing info, do not append it.
            if (next.mediaIndex !== segmentInfo.mediaIndex || next.partIndex !== segmentInfo.partIndex) {
                this.logger_("sync segment was incorrect, not appending");
                return;
            } // otherwise append it like any other segment as our guess was correct.
            this.logger_("sync segment was correct, appending");
        } // Save some state so that in the future anything waiting on first append (and/or
        // timestamp offset(s)) can process immediately. While the extra state isn't optimal,
        // we need some notion of whether the timestamp offset or other relevant information
        // has had a chance to be set.
        segmentInfo.hasAppendedData_ = true; // Now that the timestamp offset should be set, we can append any waiting ID3 tags.
        this.processMetadataQueue_();
        this.appendData_(segmentInfo, result);
    }
    updateAppendInitSegmentStatus(segmentInfo, type) {
        // alt audio doesn't manage timestamp offset
        if (this.loaderType_ === "main" && typeof segmentInfo.timestampOffset === "number" && // in the case that we're handling partial data, we don't want to append an init
        // segment for each chunk
        !segmentInfo.changedTimestampOffset) // if the timestamp offset changed, the timeline may have changed, so we have to re-
        // append init segments
        this.appendInitSegment_ = {
            audio: true,
            video: true
        };
        if (this.playlistOfLastInitSegment_[type] !== segmentInfo.playlist) // make sure we append init segment on playlist changes, in case the media config
        // changed
        this.appendInitSegment_[type] = true;
    }
    getInitSegmentAndUpdateState_({ type: type, initSegment: initSegment, map: map, playlist: playlist }) {
        // "The EXT-X-MAP tag specifies how to obtain the Media Initialization Section
        // (Section 3) required to parse the applicable Media Segments.  It applies to every
        // Media Segment that appears after it in the Playlist until the next EXT-X-MAP tag
        // or until the end of the playlist."
        // https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.5
        if (map) {
            const id = $e88cd91ee18355c1$var$initSegmentId(map);
            if (this.activeInitSegmentId_ === id) // don't need to re-append the init segment if the ID matches
            return null;
             // a map-specified init segment takes priority over any transmuxed (or otherwise
            // obtained) init segment
            //
            // this also caches the init segment for later use
            initSegment = this.initSegmentForMap(map, true).bytes;
            this.activeInitSegmentId_ = id;
        } // We used to always prepend init segments for video, however, that shouldn't be
        // necessary. Instead, we should only append on changes, similar to what we've always
        // done for audio. This is more important (though may not be that important) for
        // frame-by-frame appending for LHLS, simply because of the increased quantity of
        // appends.
        if (initSegment && this.appendInitSegment_[type]) {
            // Make sure we track the playlist that we last used for the init segment, so that
            // we can re-append the init segment in the event that we get data from a new
            // playlist. Discontinuities and track changes are handled in other sections.
            this.playlistOfLastInitSegment_[type] = playlist; // Disable future init segment appends for this type. Until a change is necessary.
            this.appendInitSegment_[type] = false; // we need to clear out the fmp4 active init segment id, since
            // we are appending the muxer init segment
            this.activeInitSegmentId_ = null;
            return initSegment;
        }
        return null;
    }
    handleQuotaExceededError_({ segmentInfo: segmentInfo, type: type, bytes: bytes }, error) {
        const audioBuffered = this.sourceUpdater_.audioBuffered();
        const videoBuffered = this.sourceUpdater_.videoBuffered(); // For now we're ignoring any notion of gaps in the buffer, but they, in theory,
        // should be cleared out during the buffer removals. However, log in case it helps
        // debug.
        if (audioBuffered.length > 1) this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the audio buffer: " + $e88cd91ee18355c1$var$timeRangesToArray(audioBuffered).join(", "));
        if (videoBuffered.length > 1) this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the video buffer: " + $e88cd91ee18355c1$var$timeRangesToArray(videoBuffered).join(", "));
        const audioBufferStart = audioBuffered.length ? audioBuffered.start(0) : 0;
        const audioBufferEnd = audioBuffered.length ? audioBuffered.end(audioBuffered.length - 1) : 0;
        const videoBufferStart = videoBuffered.length ? videoBuffered.start(0) : 0;
        const videoBufferEnd = videoBuffered.length ? videoBuffered.end(videoBuffered.length - 1) : 0;
        if (audioBufferEnd - audioBufferStart <= $e88cd91ee18355c1$var$MIN_BACK_BUFFER && videoBufferEnd - videoBufferStart <= $e88cd91ee18355c1$var$MIN_BACK_BUFFER) {
            // Can't remove enough buffer to make room for new segment (or the browser doesn't
            // allow for appends of segments this size). In the future, it may be possible to
            // split up the segment and append in pieces, but for now, error out this playlist
            // in an attempt to switch to a more manageable rendition.
            this.logger_("On QUOTA_EXCEEDED_ERR, single segment too large to append to buffer, triggering an error. " + `Appended byte length: ${bytes.byteLength}, ` + `audio buffer: ${$e88cd91ee18355c1$var$timeRangesToArray(audioBuffered).join(", ")}, ` + `video buffer: ${$e88cd91ee18355c1$var$timeRangesToArray(videoBuffered).join(", ")}, `);
            this.error({
                message: "Quota exceeded error with append of a single segment of content",
                excludeUntil: Infinity
            });
            this.trigger("error");
            return;
        } // To try to resolve the quota exceeded error, clear back buffer and retry. This means
        // that the segment-loader should block on future events until this one is handled, so
        // that it doesn't keep moving onto further segments. Adding the call to the call
        // queue will prevent further appends until waitingOnRemove_ and
        // quotaExceededErrorRetryTimeout_ are cleared.
        //
        // Note that this will only block the current loader. In the case of demuxed content,
        // the other load may keep filling as fast as possible. In practice, this should be
        // OK, as it is a rare case when either audio has a high enough bitrate to fill up a
        // source buffer, or video fills without enough room for audio to append (and without
        // the availability of clearing out seconds of back buffer to make room for audio).
        // But it might still be good to handle this case in the future as a TODO.
        this.waitingOnRemove_ = true;
        this.callQueue_.push(this.appendToSourceBuffer_.bind(this, {
            segmentInfo: segmentInfo,
            type: type,
            bytes: bytes
        }));
        const currentTime = this.currentTime_(); // Try to remove as much audio and video as possible to make room for new content
        // before retrying.
        const timeToRemoveUntil = currentTime - $e88cd91ee18355c1$var$MIN_BACK_BUFFER;
        this.logger_(`On QUOTA_EXCEEDED_ERR, removing audio/video from 0 to ${timeToRemoveUntil}`);
        this.remove(0, timeToRemoveUntil, ()=>{
            this.logger_(`On QUOTA_EXCEEDED_ERR, retrying append in ${$e88cd91ee18355c1$var$MIN_BACK_BUFFER}s`);
            this.waitingOnRemove_ = false; // wait the length of time alotted in the back buffer to prevent wasted
            // attempts (since we can't clear less than the minimum)
            this.quotaExceededErrorRetryTimeout_ = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(()=>{
                this.logger_("On QUOTA_EXCEEDED_ERR, re-processing call queue");
                this.quotaExceededErrorRetryTimeout_ = null;
                this.processCallQueue_();
            }, $e88cd91ee18355c1$var$MIN_BACK_BUFFER * 1000);
        }, true);
    }
    handleAppendError_({ segmentInfo: segmentInfo, type: type, bytes: bytes }, error) {
        // if there's no error, nothing to do
        if (!error) return;
        if (error.code === $e88cd91ee18355c1$var$QUOTA_EXCEEDED_ERR) {
            this.handleQuotaExceededError_({
                segmentInfo: segmentInfo,
                type: type,
                bytes: bytes
            }); // A quota exceeded error should be recoverable with a future re-append, so no need
            // to trigger an append error.
            return;
        }
        this.logger_("Received non QUOTA_EXCEEDED_ERR on append", error);
        this.error(`${type} append of ${bytes.length}b failed for segment ` + `#${segmentInfo.mediaIndex} in playlist ${segmentInfo.playlist.id}`); // If an append errors, we often can't recover.
        // (see https://w3c.github.io/media-source/#sourcebuffer-append-error).
        //
        // Trigger a special error so that it can be handled separately from normal,
        // recoverable errors.
        this.trigger("appenderror");
    }
    appendToSourceBuffer_({ segmentInfo: segmentInfo, type: type, initSegment: initSegment, data: data, bytes: bytes }) {
        // If this is a re-append, bytes were already created and don't need to be recreated
        if (!bytes) {
            const segments = [
                data
            ];
            let byteLength = data.byteLength;
            if (initSegment) {
                // if the media initialization segment is changing, append it before the content
                // segment
                segments.unshift(initSegment);
                byteLength += initSegment.byteLength;
            } // Technically we should be OK appending the init segment separately, however, we
            // haven't yet tested that, and prepending is how we have always done things.
            bytes = $e88cd91ee18355c1$var$concatSegments({
                bytes: byteLength,
                segments: segments
            });
        }
        this.sourceUpdater_.appendBuffer({
            segmentInfo: segmentInfo,
            type: type,
            bytes: bytes
        }, this.handleAppendError_.bind(this, {
            segmentInfo: segmentInfo,
            type: type,
            bytes: bytes
        }));
    }
    handleSegmentTimingInfo_(type, requestId, segmentTimingInfo) {
        if (!this.pendingSegment_ || requestId !== this.pendingSegment_.requestId) return;
        const segment = this.pendingSegment_.segment;
        const timingInfoProperty = `${type}TimingInfo`;
        if (!segment[timingInfoProperty]) segment[timingInfoProperty] = {};
        segment[timingInfoProperty].transmuxerPrependedSeconds = segmentTimingInfo.prependedContentDuration || 0;
        segment[timingInfoProperty].transmuxedPresentationStart = segmentTimingInfo.start.presentation;
        segment[timingInfoProperty].transmuxedDecodeStart = segmentTimingInfo.start.decode;
        segment[timingInfoProperty].transmuxedPresentationEnd = segmentTimingInfo.end.presentation;
        segment[timingInfoProperty].transmuxedDecodeEnd = segmentTimingInfo.end.decode; // mainly used as a reference for debugging
        segment[timingInfoProperty].baseMediaDecodeTime = segmentTimingInfo.baseMediaDecodeTime;
    }
    appendData_(segmentInfo, result) {
        const { type: type, data: data } = result;
        if (!data || !data.byteLength) return;
        if (type === "audio" && this.audioDisabled_) return;
        const initSegment = this.getInitSegmentAndUpdateState_({
            type: type,
            initSegment: result.initSegment,
            playlist: segmentInfo.playlist,
            map: segmentInfo.isFmp4 ? segmentInfo.segment.map : null
        });
        this.appendToSourceBuffer_({
            segmentInfo: segmentInfo,
            type: type,
            initSegment: initSegment,
            data: data
        });
    }
    /**
   * load a specific segment from a request into the buffer
   *
   * @private
   */ loadSegment_(segmentInfo) {
        this.state = "WAITING";
        this.pendingSegment_ = segmentInfo;
        this.trimBackBuffer_(segmentInfo);
        if (typeof segmentInfo.timestampOffset === "number") {
            if (this.transmuxer_) this.transmuxer_.postMessage({
                action: "clearAllMp4Captions"
            });
        }
        if (!this.hasEnoughInfoToLoad_()) {
            this.loadQueue_.push(()=>{
                // regenerate the audioAppendStart, timestampOffset, etc as they
                // may have changed since this function was added to the queue.
                const options = (0, (/*@__PURE__*/$parcel$interopDefault($a41f6c2ef6e36772$exports)))({}, segmentInfo, {
                    forceTimestampOffset: true
                });
                (0, (/*@__PURE__*/$parcel$interopDefault($a41f6c2ef6e36772$exports)))(segmentInfo, this.generateSegmentInfo_(options));
                this.isPendingTimestampOffset_ = false;
                this.updateTransmuxerAndRequestSegment_(segmentInfo);
            });
            return;
        }
        this.updateTransmuxerAndRequestSegment_(segmentInfo);
    }
    updateTransmuxerAndRequestSegment_(segmentInfo) {
        // We'll update the source buffer's timestamp offset once we have transmuxed data, but
        // the transmuxer still needs to be updated before then.
        //
        // Even though keepOriginalTimestamps is set to true for the transmuxer, timestamp
        // offset must be passed to the transmuxer for stream correcting adjustments.
        if (this.shouldUpdateTransmuxerTimestampOffset_(segmentInfo.timestampOffset)) {
            this.gopBuffer_.length = 0; // gopsToAlignWith was set before the GOP buffer was cleared
            segmentInfo.gopsToAlignWith = [];
            this.timeMapping_ = 0; // reset values in the transmuxer since a discontinuity should start fresh
            this.transmuxer_.postMessage({
                action: "reset"
            });
            this.transmuxer_.postMessage({
                action: "setTimestampOffset",
                timestampOffset: segmentInfo.timestampOffset
            });
        }
        const simpleSegment = this.createSimplifiedSegmentObj_(segmentInfo);
        const isEndOfStream = this.isEndOfStream_(segmentInfo.mediaIndex, segmentInfo.playlist, segmentInfo.partIndex);
        const isWalkingForward = this.mediaIndex !== null;
        const isDiscontinuity = segmentInfo.timeline !== this.currentTimeline_ && // currentTimeline starts at -1, so we shouldn't end the timeline switching to 0,
        // the first timeline
        segmentInfo.timeline > 0;
        const isEndOfTimeline = isEndOfStream || isWalkingForward && isDiscontinuity;
        this.logger_(`Requesting ${$e88cd91ee18355c1$var$segmentInfoString(segmentInfo)}`); // If there's an init segment associated with this segment, but it is not cached (identified by a lack of bytes),
        // then this init segment has never been seen before and should be appended.
        //
        // At this point the content type (audio/video or both) is not yet known, but it should be safe to set
        // both to true and leave the decision of whether to append the init segment to append time.
        if (simpleSegment.map && !simpleSegment.map.bytes) {
            this.logger_("going to request init segment.");
            this.appendInitSegment_ = {
                video: true,
                audio: true
            };
        }
        segmentInfo.abortRequests = $e88cd91ee18355c1$var$mediaSegmentRequest({
            xhr: this.vhs_.xhr,
            xhrOptions: this.xhrOptions_,
            decryptionWorker: this.decrypter_,
            segment: simpleSegment,
            abortFn: this.handleAbort_.bind(this, segmentInfo),
            progressFn: this.handleProgress_.bind(this),
            trackInfoFn: this.handleTrackInfo_.bind(this),
            timingInfoFn: this.handleTimingInfo_.bind(this),
            videoSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "video", segmentInfo.requestId),
            audioSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "audio", segmentInfo.requestId),
            captionsFn: this.handleCaptions_.bind(this),
            isEndOfTimeline: isEndOfTimeline,
            endedTimelineFn: ()=>{
                this.logger_("received endedtimeline callback");
            },
            id3Fn: this.handleId3_.bind(this),
            dataFn: this.handleData_.bind(this),
            doneFn: this.segmentRequestFinished_.bind(this),
            onTransmuxerLog: ({ message: message, level: level, stream: stream })=>{
                this.logger_(`${$e88cd91ee18355c1$var$segmentInfoString(segmentInfo)} logged from transmuxer stream ${stream} as a ${level}: ${message}`);
            }
        });
    }
    /**
   * trim the back buffer so that we don't have too much data
   * in the source buffer
   *
   * @private
   *
   * @param {Object} segmentInfo - the current segment
   */ trimBackBuffer_(segmentInfo) {
        const removeToTime = $e88cd91ee18355c1$var$safeBackBufferTrimTime(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10); // Chrome has a hard limit of 150MB of
        // buffer and a very conservative "garbage collector"
        // We manually clear out the old buffer to ensure
        // we don't trigger the QuotaExceeded error
        // on the source buffer during subsequent appends
        if (removeToTime > 0) this.remove(0, removeToTime);
    }
    /**
   * created a simplified copy of the segment object with just the
   * information necessary to perform the XHR and decryption
   *
   * @private
   *
   * @param {Object} segmentInfo - the current segment
   * @return {Object} a simplified segment object copy
   */ createSimplifiedSegmentObj_(segmentInfo) {
        const segment = segmentInfo.segment;
        const part = segmentInfo.part;
        const simpleSegment = {
            resolvedUri: part ? part.resolvedUri : segment.resolvedUri,
            byterange: part ? part.byterange : segment.byterange,
            requestId: segmentInfo.requestId,
            transmuxer: segmentInfo.transmuxer,
            audioAppendStart: segmentInfo.audioAppendStart,
            gopsToAlignWith: segmentInfo.gopsToAlignWith,
            part: segmentInfo.part
        };
        const previousSegment = segmentInfo.playlist.segments[segmentInfo.mediaIndex - 1];
        if (previousSegment && previousSegment.timeline === segment.timeline) {
            // The baseStartTime of a segment is used to handle rollover when probing the TS
            // segment to retrieve timing information. Since the probe only looks at the media's
            // times (e.g., PTS and DTS values of the segment), and doesn't consider the
            // player's time (e.g., player.currentTime()), baseStartTime should reflect the
            // media time as well. transmuxedDecodeEnd represents the end time of a segment, in
            // seconds of media time, so should be used here. The previous segment is used since
            // the end of the previous segment should represent the beginning of the current
            // segment, so long as they are on the same timeline.
            if (previousSegment.videoTimingInfo) simpleSegment.baseStartTime = previousSegment.videoTimingInfo.transmuxedDecodeEnd;
            else if (previousSegment.audioTimingInfo) simpleSegment.baseStartTime = previousSegment.audioTimingInfo.transmuxedDecodeEnd;
        }
        if (segment.key) {
            // if the media sequence is greater than 2^32, the IV will be incorrect
            // assuming 10s segments, that would be about 1300 years
            const iv = segment.key.iv || new Uint32Array([
                0,
                0,
                0,
                segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence
            ]);
            simpleSegment.key = this.segmentKey(segment.key);
            simpleSegment.key.iv = iv;
        }
        if (segment.map) simpleSegment.map = this.initSegmentForMap(segment.map);
        return simpleSegment;
    }
    saveTransferStats_(stats) {
        // every request counts as a media request even if it has been aborted
        // or canceled due to a timeout
        this.mediaRequests += 1;
        if (stats) {
            this.mediaBytesTransferred += stats.bytesReceived;
            this.mediaTransferDuration += stats.roundTripTime;
        }
    }
    saveBandwidthRelatedStats_(duration, stats) {
        // byteLength will be used for throughput, and should be based on bytes receieved,
        // which we only know at the end of the request and should reflect total bytes
        // downloaded rather than just bytes processed from components of the segment
        this.pendingSegment_.byteLength = stats.bytesReceived;
        if (duration < $e88cd91ee18355c1$var$MIN_SEGMENT_DURATION_TO_SAVE_STATS) {
            this.logger_(`Ignoring segment's bandwidth because its duration of ${duration}` + ` is less than the min to record ${$e88cd91ee18355c1$var$MIN_SEGMENT_DURATION_TO_SAVE_STATS}`);
            return;
        }
        this.bandwidth = stats.bandwidth;
        this.roundTrip = stats.roundTripTime;
    }
    handleTimeout_() {
        // although the VTT segment loader bandwidth isn't really used, it's good to
        // maintain functinality between segment loaders
        this.mediaRequestsTimedout += 1;
        this.bandwidth = 1;
        this.roundTrip = NaN;
        this.trigger("bandwidthupdate");
        this.trigger("timeout");
    }
    /**
   * Handle the callback from the segmentRequest function and set the
   * associated SegmentLoader state and errors if necessary
   *
   * @private
   */ segmentRequestFinished_(error, simpleSegment, result) {
        // TODO handle special cases, e.g., muxed audio/video but only audio in the segment
        // check the call queue directly since this function doesn't need to deal with any
        // data, and can continue even if the source buffers are not set up and we didn't get
        // any data from the segment
        if (this.callQueue_.length) {
            this.callQueue_.push(this.segmentRequestFinished_.bind(this, error, simpleSegment, result));
            return;
        }
        this.saveTransferStats_(simpleSegment.stats); // The request was aborted and the SegmentLoader has already been reset
        if (!this.pendingSegment_) return;
         // the request was aborted and the SegmentLoader has already started
        // another request. this can happen when the timeout for an aborted
        // request triggers due to a limitation in the XHR library
        // do not count this as any sort of request or we risk double-counting
        if (simpleSegment.requestId !== this.pendingSegment_.requestId) return;
         // an error occurred from the active pendingSegment_ so reset everything
        if (error) {
            this.pendingSegment_ = null;
            this.state = "READY"; // aborts are not a true error condition and nothing corrective needs to be done
            if (error.code === $e88cd91ee18355c1$var$REQUEST_ERRORS.ABORTED) return;
            this.pause(); // the error is really just that at least one of the requests timed-out
            // set the bandwidth to a very low value and trigger an ABR switch to
            // take emergency action
            if (error.code === $e88cd91ee18355c1$var$REQUEST_ERRORS.TIMEOUT) {
                this.handleTimeout_();
                return;
            } // if control-flow has arrived here, then the error is real
            // emit an error event to exclude the current playlist
            this.mediaRequestsErrored += 1;
            this.error(error);
            this.trigger("error");
            return;
        }
        const segmentInfo = this.pendingSegment_; // the response was a success so set any bandwidth stats the request
        // generated for ABR purposes
        this.saveBandwidthRelatedStats_(segmentInfo.duration, simpleSegment.stats);
        segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;
        if (result.gopInfo) this.gopBuffer_ = $e88cd91ee18355c1$var$updateGopBuffer(this.gopBuffer_, result.gopInfo, this.safeAppend_);
         // Although we may have already started appending on progress, we shouldn't switch the
        // state away from loading until we are officially done loading the segment data.
        this.state = "APPENDING"; // used for testing
        this.trigger("appending");
        this.waitForAppendsToComplete_(segmentInfo);
    }
    setTimeMapping_(timeline) {
        const timelineMapping = this.syncController_.mappingForTimeline(timeline);
        if (timelineMapping !== null) this.timeMapping_ = timelineMapping;
    }
    updateMediaSecondsLoaded_(segment) {
        if (typeof segment.start === "number" && typeof segment.end === "number") this.mediaSecondsLoaded += segment.end - segment.start;
        else this.mediaSecondsLoaded += segment.duration;
    }
    shouldUpdateTransmuxerTimestampOffset_(timestampOffset) {
        if (timestampOffset === null) return false;
         // note that we're potentially using the same timestamp offset for both video and
        // audio
        if (this.loaderType_ === "main" && timestampOffset !== this.sourceUpdater_.videoTimestampOffset()) return true;
        if (!this.audioDisabled_ && timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) return true;
        return false;
    }
    trueSegmentStart_({ currentStart: currentStart, playlist: playlist, mediaIndex: mediaIndex, firstVideoFrameTimeForData: firstVideoFrameTimeForData, currentVideoTimestampOffset: currentVideoTimestampOffset, useVideoTimingInfo: useVideoTimingInfo, videoTimingInfo: videoTimingInfo, audioTimingInfo: audioTimingInfo }) {
        if (typeof currentStart !== "undefined") // if start was set once, keep using it
        return currentStart;
        if (!useVideoTimingInfo) return audioTimingInfo.start;
        const previousSegment = playlist.segments[mediaIndex - 1]; // The start of a segment should be the start of the first full frame contained
        // within that segment. Since the transmuxer maintains a cache of incomplete data
        // from and/or the last frame seen, the start time may reflect a frame that starts
        // in the previous segment. Check for that case and ensure the start time is
        // accurate for the segment.
        if (mediaIndex === 0 || !previousSegment || typeof previousSegment.start === "undefined" || previousSegment.end !== firstVideoFrameTimeForData + currentVideoTimestampOffset) return firstVideoFrameTimeForData;
        return videoTimingInfo.start;
    }
    waitForAppendsToComplete_(segmentInfo) {
        const trackInfo = this.getCurrentMediaInfo_(segmentInfo);
        if (!trackInfo) {
            this.error({
                message: "No starting media returned, likely due to an unsupported media format.",
                playlistExclusionDuration: Infinity
            });
            this.trigger("error");
            return;
        } // Although transmuxing is done, appends may not yet be finished. Throw a marker
        // on each queue this loader is responsible for to ensure that the appends are
        // complete.
        const { hasAudio: hasAudio, hasVideo: hasVideo, isMuxed: isMuxed } = trackInfo;
        const waitForVideo = this.loaderType_ === "main" && hasVideo;
        const waitForAudio = !this.audioDisabled_ && hasAudio && !isMuxed;
        segmentInfo.waitingOnAppends = 0; // segments with no data
        if (!segmentInfo.hasAppendedData_) {
            if (!segmentInfo.timingInfo && typeof segmentInfo.timestampOffset === "number") // When there's no audio or video data in the segment, there's no audio or video
            // timing information.
            //
            // If there's no audio or video timing information, then the timestamp offset
            // can't be adjusted to the appropriate value for the transmuxer and source
            // buffers.
            //
            // Therefore, the next segment should be used to set the timestamp offset.
            this.isPendingTimestampOffset_ = true;
             // override settings for metadata only segments
            segmentInfo.timingInfo = {
                start: 0
            };
            segmentInfo.waitingOnAppends++;
            if (!this.isPendingTimestampOffset_) {
                // update the timestampoffset
                this.updateSourceBufferTimestampOffset_(segmentInfo); // make sure the metadata queue is processed even though we have
                // no video/audio data.
                this.processMetadataQueue_();
            } // append is "done" instantly with no data.
            this.checkAppendsDone_(segmentInfo);
            return;
        } // Since source updater could call back synchronously, do the increments first.
        if (waitForVideo) segmentInfo.waitingOnAppends++;
        if (waitForAudio) segmentInfo.waitingOnAppends++;
        if (waitForVideo) this.sourceUpdater_.videoQueueCallback(this.checkAppendsDone_.bind(this, segmentInfo));
        if (waitForAudio) this.sourceUpdater_.audioQueueCallback(this.checkAppendsDone_.bind(this, segmentInfo));
    }
    checkAppendsDone_(segmentInfo) {
        if (this.checkForAbort_(segmentInfo.requestId)) return;
        segmentInfo.waitingOnAppends--;
        if (segmentInfo.waitingOnAppends === 0) this.handleAppendsDone_();
    }
    checkForIllegalMediaSwitch(trackInfo) {
        const illegalMediaSwitchError = $e88cd91ee18355c1$var$illegalMediaSwitch(this.loaderType_, this.getCurrentMediaInfo_(), trackInfo);
        if (illegalMediaSwitchError) {
            this.error({
                message: illegalMediaSwitchError,
                playlistExclusionDuration: Infinity
            });
            this.trigger("error");
            return true;
        }
        return false;
    }
    updateSourceBufferTimestampOffset_(segmentInfo) {
        if (segmentInfo.timestampOffset === null || // we don't yet have the start for whatever media type (video or audio) has
        // priority, timing-wise, so we must wait
        typeof segmentInfo.timingInfo.start !== "number" || // already updated the timestamp offset for this segment
        segmentInfo.changedTimestampOffset || // the alt audio loader should not be responsible for setting the timestamp offset
        this.loaderType_ !== "main") return;
        let didChange = false; // Primary timing goes by video, and audio is trimmed in the transmuxer, meaning that
        // the timing info here comes from video. In the event that the audio is longer than
        // the video, this will trim the start of the audio.
        // This also trims any offset from 0 at the beginning of the media
        segmentInfo.timestampOffset -= this.getSegmentStartTimeForTimestampOffsetCalculation_({
            videoTimingInfo: segmentInfo.segment.videoTimingInfo,
            audioTimingInfo: segmentInfo.segment.audioTimingInfo,
            timingInfo: segmentInfo.timingInfo
        }); // In the event that there are part segment downloads, each will try to update the
        // timestamp offset. Retaining this bit of state prevents us from updating in the
        // future (within the same segment), however, there may be a better way to handle it.
        segmentInfo.changedTimestampOffset = true;
        if (segmentInfo.timestampOffset !== this.sourceUpdater_.videoTimestampOffset()) {
            this.sourceUpdater_.videoTimestampOffset(segmentInfo.timestampOffset);
            didChange = true;
        }
        if (segmentInfo.timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) {
            this.sourceUpdater_.audioTimestampOffset(segmentInfo.timestampOffset);
            didChange = true;
        }
        if (didChange) this.trigger("timestampoffset");
    }
    getSegmentStartTimeForTimestampOffsetCalculation_({ videoTimingInfo: videoTimingInfo, audioTimingInfo: audioTimingInfo, timingInfo: timingInfo }) {
        if (!this.useDtsForTimestampOffset_) return timingInfo.start;
        if (videoTimingInfo && typeof videoTimingInfo.transmuxedDecodeStart === "number") return videoTimingInfo.transmuxedDecodeStart;
         // handle audio only
        if (audioTimingInfo && typeof audioTimingInfo.transmuxedDecodeStart === "number") return audioTimingInfo.transmuxedDecodeStart;
         // handle content not transmuxed (e.g., MP4)
        return timingInfo.start;
    }
    updateTimingInfoEnd_(segmentInfo) {
        segmentInfo.timingInfo = segmentInfo.timingInfo || {};
        const trackInfo = this.getMediaInfo_();
        const useVideoTimingInfo = this.loaderType_ === "main" && trackInfo && trackInfo.hasVideo;
        const prioritizedTimingInfo = useVideoTimingInfo && segmentInfo.videoTimingInfo ? segmentInfo.videoTimingInfo : segmentInfo.audioTimingInfo;
        if (!prioritizedTimingInfo) return;
        segmentInfo.timingInfo.end = typeof prioritizedTimingInfo.end === "number" ? // End time may not exist in a case where we aren't parsing the full segment (one
        // current example is the case of fmp4), so use the rough duration to calculate an
        // end time.
        prioritizedTimingInfo.end : prioritizedTimingInfo.start + segmentInfo.duration;
    }
    /**
   * callback to run when appendBuffer is finished. detects if we are
   * in a good state to do things with the data we got, or if we need
   * to wait for more
   *
   * @private
   */ handleAppendsDone_() {
        // appendsdone can cause an abort
        if (this.pendingSegment_) this.trigger("appendsdone");
        if (!this.pendingSegment_) {
            this.state = "READY"; // TODO should this move into this.checkForAbort to speed up requests post abort in
            // all appending cases?
            if (!this.paused()) this.monitorBuffer_();
            return;
        }
        const segmentInfo = this.pendingSegment_; // Now that the end of the segment has been reached, we can set the end time. It's
        // best to wait until all appends are done so we're sure that the primary media is
        // finished (and we have its end time).
        this.updateTimingInfoEnd_(segmentInfo);
        if (this.shouldSaveSegmentTimingInfo_) // Timeline mappings should only be saved for the main loader. This is for multiple
        // reasons:
        //
        // 1) Only one mapping is saved per timeline, meaning that if both the audio loader
        //    and the main loader try to save the timeline mapping, whichever comes later
        //    will overwrite the first. In theory this is OK, as the mappings should be the
        //    same, however, it breaks for (2)
        // 2) In the event of a live stream, the initial live point will make for a somewhat
        //    arbitrary mapping. If audio and video streams are not perfectly in-sync, then
        //    the mapping will be off for one of the streams, dependent on which one was
        //    first saved (see (1)).
        // 3) Primary timing goes by video in VHS, so the mapping should be video.
        //
        // Since the audio loader will wait for the main loader to load the first segment,
        // the main loader will save the first timeline mapping, and ensure that there won't
        // be a case where audio loads two segments without saving a mapping (thus leading
        // to missing segment timing info).
        this.syncController_.saveSegmentTimingInfo({
            segmentInfo: segmentInfo,
            shouldSaveTimelineMapping: this.loaderType_ === "main"
        });
        const segmentDurationMessage = $e88cd91ee18355c1$var$getTroublesomeSegmentDurationMessage(segmentInfo, this.sourceType_);
        if (segmentDurationMessage) {
            if (segmentDurationMessage.severity === "warn") $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn(segmentDurationMessage.message);
            else this.logger_(segmentDurationMessage.message);
        }
        this.recordThroughput_(segmentInfo);
        this.pendingSegment_ = null;
        this.state = "READY";
        if (segmentInfo.isSyncRequest) {
            this.trigger("syncinfoupdate"); // if the sync request was not appended
            // then it was not the correct segment.
            // throw it away and use the data it gave us
            // to get the correct one.
            if (!segmentInfo.hasAppendedData_) {
                this.logger_(`Throwing away un-appended sync request ${$e88cd91ee18355c1$var$segmentInfoString(segmentInfo)}`);
                return;
            }
        }
        this.logger_(`Appended ${$e88cd91ee18355c1$var$segmentInfoString(segmentInfo)}`);
        this.addSegmentMetadataCue_(segmentInfo);
        this.fetchAtBuffer_ = true;
        if (this.currentTimeline_ !== segmentInfo.timeline) {
            this.timelineChangeController_.lastTimelineChange({
                type: this.loaderType_,
                from: this.currentTimeline_,
                to: segmentInfo.timeline
            }); // If audio is not disabled, the main segment loader is responsible for updating
            // the audio timeline as well. If the content is video only, this won't have any
            // impact.
            if (this.loaderType_ === "main" && !this.audioDisabled_) this.timelineChangeController_.lastTimelineChange({
                type: "audio",
                from: this.currentTimeline_,
                to: segmentInfo.timeline
            });
        }
        this.currentTimeline_ = segmentInfo.timeline; // We must update the syncinfo to recalculate the seekable range before
        // the following conditional otherwise it may consider this a bad "guess"
        // and attempt to resync when the post-update seekable window and live
        // point would mean that this was the perfect segment to fetch
        this.trigger("syncinfoupdate");
        const segment = segmentInfo.segment;
        const part = segmentInfo.part;
        const badSegmentGuess = segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3;
        const badPartGuess = part && part.end && this.currentTime_() - part.end > segmentInfo.playlist.partTargetDuration * 3; // If we previously appended a segment/part that ends more than 3 part/targetDurations before
        // the currentTime_ that means that our conservative guess was too conservative.
        // In that case, reset the loader state so that we try to use any information gained
        // from the previous request to create a new, more accurate, sync-point.
        if (badSegmentGuess || badPartGuess) {
            this.logger_(`bad ${badSegmentGuess ? "segment" : "part"} ${$e88cd91ee18355c1$var$segmentInfoString(segmentInfo)}`);
            this.resetEverything();
            return;
        }
        const isWalkingForward = this.mediaIndex !== null; // Don't do a rendition switch unless we have enough time to get a sync segment
        // and conservatively guess
        if (isWalkingForward) this.trigger("bandwidthupdate");
        this.trigger("progress");
        this.mediaIndex = segmentInfo.mediaIndex;
        this.partIndex = segmentInfo.partIndex; // any time an update finishes and the last segment is in the
        // buffer, end the stream. this ensures the "ended" event will
        // fire if playback reaches that point.
        if (this.isEndOfStream_(segmentInfo.mediaIndex, segmentInfo.playlist, segmentInfo.partIndex)) this.endOfStream();
         // used for testing
        this.trigger("appended");
        if (segmentInfo.hasAppendedData_) this.mediaAppends++;
        if (!this.paused()) this.monitorBuffer_();
    }
    /**
   * Records the current throughput of the decrypt, transmux, and append
   * portion of the semgment pipeline. `throughput.rate` is a the cumulative
   * moving average of the throughput. `throughput.count` is the number of
   * data points in the average.
   *
   * @private
   * @param {Object} segmentInfo the object returned by loadSegment
   */ recordThroughput_(segmentInfo) {
        if (segmentInfo.duration < $e88cd91ee18355c1$var$MIN_SEGMENT_DURATION_TO_SAVE_STATS) {
            this.logger_(`Ignoring segment's throughput because its duration of ${segmentInfo.duration}` + ` is less than the min to record ${$e88cd91ee18355c1$var$MIN_SEGMENT_DURATION_TO_SAVE_STATS}`);
            return;
        }
        const rate = this.throughput.rate; // Add one to the time to ensure that we don't accidentally attempt to divide
        // by zero in the case where the throughput is ridiculously high
        const segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1; // Multiply by 8000 to convert from bytes/millisecond to bits/second
        const segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8000); // This is just a cumulative moving average calculation:
        //   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)
        this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;
    }
    /**
   * Adds a cue to the segment-metadata track with some metadata information about the
   * segment
   *
   * @private
   * @param {Object} segmentInfo
   *        the object returned by loadSegment
   * @method addSegmentMetadataCue_
   */ addSegmentMetadataCue_(segmentInfo) {
        if (!this.segmentMetadataTrack_) return;
        const segment = segmentInfo.segment;
        const start = segment.start;
        const end = segment.end; // Do not try adding the cue if the start and end times are invalid.
        if (!$e88cd91ee18355c1$var$finite(start) || !$e88cd91ee18355c1$var$finite(end)) return;
        $e88cd91ee18355c1$var$removeCuesFromTrack(start, end, this.segmentMetadataTrack_);
        const Cue = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebKitDataCue || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).VTTCue;
        const value = {
            custom: segment.custom,
            dateTimeObject: segment.dateTimeObject,
            dateTimeString: segment.dateTimeString,
            programDateTime: segment.programDateTime,
            bandwidth: segmentInfo.playlist.attributes.BANDWIDTH,
            resolution: segmentInfo.playlist.attributes.RESOLUTION,
            codecs: segmentInfo.playlist.attributes.CODECS,
            byteLength: segmentInfo.byteLength,
            uri: segmentInfo.uri,
            timeline: segmentInfo.timeline,
            playlist: segmentInfo.playlist.id,
            start: start,
            end: end
        };
        const data = JSON.stringify(value);
        const cue = new Cue(start, end, data); // Attach the metadata to the value property of the cue to keep consistency between
        // the differences of WebKitDataCue in safari and VTTCue in other browsers
        cue.value = value;
        this.segmentMetadataTrack_.addCue(cue);
    }
}
function $e88cd91ee18355c1$var$noop() {}
const $e88cd91ee18355c1$var$toTitleCase = function(string) {
    if (typeof string !== "string") return string;
    return string.replace(/./, (w)=>w.toUpperCase());
};
/**
 * @file source-updater.js
 */ const $e88cd91ee18355c1$var$bufferTypes = [
    "video",
    "audio"
];
const $e88cd91ee18355c1$var$updating = (type, sourceUpdater)=>{
    const sourceBuffer = sourceUpdater[`${type}Buffer`];
    return sourceBuffer && sourceBuffer.updating || sourceUpdater.queuePending[type];
};
const $e88cd91ee18355c1$var$nextQueueIndexOfType = (type, queue)=>{
    for(let i = 0; i < queue.length; i++){
        const queueEntry = queue[i];
        if (queueEntry.type === "mediaSource") // If the next entry is a media source entry (uses multiple source buffers), block
        // processing to allow it to go through first.
        return null;
        if (queueEntry.type === type) return i;
    }
    return null;
};
const $e88cd91ee18355c1$var$shiftQueue = (type, sourceUpdater)=>{
    if (sourceUpdater.queue.length === 0) return;
    let queueIndex = 0;
    let queueEntry = sourceUpdater.queue[queueIndex];
    if (queueEntry.type === "mediaSource") {
        if (!sourceUpdater.updating() && sourceUpdater.mediaSource.readyState !== "closed") {
            sourceUpdater.queue.shift();
            queueEntry.action(sourceUpdater);
            if (queueEntry.doneFn) queueEntry.doneFn();
             // Only specific source buffer actions must wait for async updateend events. Media
            // Source actions process synchronously. Therefore, both audio and video source
            // buffers are now clear to process the next queue entries.
            $e88cd91ee18355c1$var$shiftQueue("audio", sourceUpdater);
            $e88cd91ee18355c1$var$shiftQueue("video", sourceUpdater);
        } // Media Source actions require both source buffers, so if the media source action
        // couldn't process yet (because one or both source buffers are busy), block other
        // queue actions until both are available and the media source action can process.
        return;
    }
    if (type === "mediaSource") // If the queue was shifted by a media source action (this happens when pushing a
    // media source action onto the queue), then it wasn't from an updateend event from an
    // audio or video source buffer, so there's no change from previous state, and no
    // processing should be done.
    return;
     // Media source queue entries don't need to consider whether the source updater is
    // started (i.e., source buffers are created) as they don't need the source buffers, but
    // source buffer queue entries do.
    if (!sourceUpdater.ready() || sourceUpdater.mediaSource.readyState === "closed" || $e88cd91ee18355c1$var$updating(type, sourceUpdater)) return;
    if (queueEntry.type !== type) {
        queueIndex = $e88cd91ee18355c1$var$nextQueueIndexOfType(type, sourceUpdater.queue);
        if (queueIndex === null) // Either there's no queue entry that uses this source buffer type in the queue, or
        // there's a media source queue entry before the next entry of this type, in which
        // case wait for that action to process first.
        return;
        queueEntry = sourceUpdater.queue[queueIndex];
    }
    sourceUpdater.queue.splice(queueIndex, 1); // Keep a record that this source buffer type is in use.
    //
    // The queue pending operation must be set before the action is performed in the event
    // that the action results in a synchronous event that is acted upon. For instance, if
    // an exception is thrown that can be handled, it's possible that new actions will be
    // appended to an empty queue and immediately executed, but would not have the correct
    // pending information if this property was set after the action was performed.
    sourceUpdater.queuePending[type] = queueEntry;
    queueEntry.action(type, sourceUpdater);
    if (!queueEntry.doneFn) {
        // synchronous operation, process next entry
        sourceUpdater.queuePending[type] = null;
        $e88cd91ee18355c1$var$shiftQueue(type, sourceUpdater);
        return;
    }
};
const $e88cd91ee18355c1$var$cleanupBuffer = (type, sourceUpdater)=>{
    const buffer = sourceUpdater[`${type}Buffer`];
    const titleType = $e88cd91ee18355c1$var$toTitleCase(type);
    if (!buffer) return;
    buffer.removeEventListener("updateend", sourceUpdater[`on${titleType}UpdateEnd_`]);
    buffer.removeEventListener("error", sourceUpdater[`on${titleType}Error_`]);
    sourceUpdater.codecs[type] = null;
    sourceUpdater[`${type}Buffer`] = null;
};
const $e88cd91ee18355c1$var$inSourceBuffers = (mediaSource, sourceBuffer)=>mediaSource && sourceBuffer && Array.prototype.indexOf.call(mediaSource.sourceBuffers, sourceBuffer) !== -1;
const $e88cd91ee18355c1$var$actions = {
    appendBuffer: (bytes, segmentInfo, onError)=>(type, sourceUpdater)=>{
            const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null
            // or the media source does not contain this source buffer.
            if (!$e88cd91ee18355c1$var$inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) return;
            sourceUpdater.logger_(`Appending segment ${segmentInfo.mediaIndex}'s ${bytes.length} bytes to ${type}Buffer`);
            try {
                sourceBuffer.appendBuffer(bytes);
            } catch (e) {
                sourceUpdater.logger_(`Error with code ${e.code} ` + (e.code === $e88cd91ee18355c1$var$QUOTA_EXCEEDED_ERR ? "(QUOTA_EXCEEDED_ERR) " : "") + `when appending segment ${segmentInfo.mediaIndex} to ${type}Buffer`);
                sourceUpdater.queuePending[type] = null;
                onError(e);
            }
        },
    remove: (start, end)=>(type, sourceUpdater)=>{
            const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null
            // or the media source does not contain this source buffer.
            if (!$e88cd91ee18355c1$var$inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) return;
            sourceUpdater.logger_(`Removing ${start} to ${end} from ${type}Buffer`);
            try {
                sourceBuffer.remove(start, end);
            } catch (e) {
                sourceUpdater.logger_(`Remove ${start} to ${end} from ${type}Buffer failed`);
            }
        },
    timestampOffset: (offset)=>(type, sourceUpdater)=>{
            const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null
            // or the media source does not contain this source buffer.
            if (!$e88cd91ee18355c1$var$inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) return;
            sourceUpdater.logger_(`Setting ${type}timestampOffset to ${offset}`);
            sourceBuffer.timestampOffset = offset;
        },
    callback: (callback)=>(type, sourceUpdater)=>{
            callback();
        },
    endOfStream: (error)=>(sourceUpdater)=>{
            if (sourceUpdater.mediaSource.readyState !== "open") return;
            sourceUpdater.logger_(`Calling mediaSource endOfStream(${error || ""})`);
            try {
                sourceUpdater.mediaSource.endOfStream(error);
            } catch (e) {
                $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn("Failed to call media source endOfStream", e);
            }
        },
    duration: (duration)=>(sourceUpdater)=>{
            sourceUpdater.logger_(`Setting mediaSource duration to ${duration}`);
            try {
                sourceUpdater.mediaSource.duration = duration;
            } catch (e) {
                $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn("Failed to set media source duration", e);
            }
        },
    abort: ()=>(type, sourceUpdater)=>{
            if (sourceUpdater.mediaSource.readyState !== "open") return;
            const sourceBuffer = sourceUpdater[`${type}Buffer`]; // can't do anything if the media source / source buffer is null
            // or the media source does not contain this source buffer.
            if (!$e88cd91ee18355c1$var$inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) return;
            sourceUpdater.logger_(`calling abort on ${type}Buffer`);
            try {
                sourceBuffer.abort();
            } catch (e) {
                $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn(`Failed to abort on ${type}Buffer`, e);
            }
        },
    addSourceBuffer: (type, codec)=>(sourceUpdater)=>{
            const titleType = $e88cd91ee18355c1$var$toTitleCase(type);
            const mime = (0, $823f1f5df1bbf628$export$4b64fc0a026b9981)(codec);
            sourceUpdater.logger_(`Adding ${type}Buffer with codec ${codec} to mediaSource`);
            const sourceBuffer = sourceUpdater.mediaSource.addSourceBuffer(mime);
            sourceBuffer.addEventListener("updateend", sourceUpdater[`on${titleType}UpdateEnd_`]);
            sourceBuffer.addEventListener("error", sourceUpdater[`on${titleType}Error_`]);
            sourceUpdater.codecs[type] = codec;
            sourceUpdater[`${type}Buffer`] = sourceBuffer;
        },
    removeSourceBuffer: (type)=>(sourceUpdater)=>{
            const sourceBuffer = sourceUpdater[`${type}Buffer`];
            $e88cd91ee18355c1$var$cleanupBuffer(type, sourceUpdater); // can't do anything if the media source / source buffer is null
            // or the media source does not contain this source buffer.
            if (!$e88cd91ee18355c1$var$inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) return;
            sourceUpdater.logger_(`Removing ${type}Buffer with codec ${sourceUpdater.codecs[type]} from mediaSource`);
            try {
                sourceUpdater.mediaSource.removeSourceBuffer(sourceBuffer);
            } catch (e) {
                $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn(`Failed to removeSourceBuffer ${type}Buffer`, e);
            }
        },
    changeType: (codec)=>(type, sourceUpdater)=>{
            const sourceBuffer = sourceUpdater[`${type}Buffer`];
            const mime = (0, $823f1f5df1bbf628$export$4b64fc0a026b9981)(codec); // can't do anything if the media source / source buffer is null
            // or the media source does not contain this source buffer.
            if (!$e88cd91ee18355c1$var$inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) return;
             // do not update codec if we don't need to.
            if (sourceUpdater.codecs[type] === codec) return;
            sourceUpdater.logger_(`changing ${type}Buffer codec from ${sourceUpdater.codecs[type]} to ${codec}`);
            sourceBuffer.changeType(mime);
            sourceUpdater.codecs[type] = codec;
        }
};
const $e88cd91ee18355c1$var$pushQueue = ({ type: type, sourceUpdater: sourceUpdater, action: action, doneFn: doneFn, name: name })=>{
    sourceUpdater.queue.push({
        type: type,
        action: action,
        doneFn: doneFn,
        name: name
    });
    $e88cd91ee18355c1$var$shiftQueue(type, sourceUpdater);
};
const $e88cd91ee18355c1$var$onUpdateend = (type, sourceUpdater)=>(e)=>{
        // Although there should, in theory, be a pending action for any updateend receieved,
        // there are some actions that may trigger updateend events without set definitions in
        // the w3c spec. For instance, setting the duration on the media source may trigger
        // updateend events on source buffers. This does not appear to be in the spec. As such,
        // if we encounter an updateend without a corresponding pending action from our queue
        // for that source buffer type, process the next action.
        if (sourceUpdater.queuePending[type]) {
            const doneFn = sourceUpdater.queuePending[type].doneFn;
            sourceUpdater.queuePending[type] = null;
            if (doneFn) // if there's an error, report it
            doneFn(sourceUpdater[`${type}Error_`]);
        }
        $e88cd91ee18355c1$var$shiftQueue(type, sourceUpdater);
    };
/**
 * A queue of callbacks to be serialized and applied when a
 * MediaSource and its associated SourceBuffers are not in the
 * updating state. It is used by the segment loader to update the
 * underlying SourceBuffers when new data is loaded, for instance.
 *
 * @class SourceUpdater
 * @param {MediaSource} mediaSource the MediaSource to create the SourceBuffer from
 * @param {string} mimeType the desired MIME type of the underlying SourceBuffer
 */ class $e88cd91ee18355c1$var$SourceUpdater extends $e88cd91ee18355c1$export$2e2bcd8739ae039.EventTarget {
    constructor(mediaSource){
        super();
        this.mediaSource = mediaSource;
        this.sourceopenListener_ = ()=>$e88cd91ee18355c1$var$shiftQueue("mediaSource", this);
        this.mediaSource.addEventListener("sourceopen", this.sourceopenListener_);
        this.logger_ = $e88cd91ee18355c1$var$logger("SourceUpdater"); // initial timestamp offset is 0
        this.audioTimestampOffset_ = 0;
        this.videoTimestampOffset_ = 0;
        this.queue = [];
        this.queuePending = {
            audio: null,
            video: null
        };
        this.delayedAudioAppendQueue_ = [];
        this.videoAppendQueued_ = false;
        this.codecs = {};
        this.onVideoUpdateEnd_ = $e88cd91ee18355c1$var$onUpdateend("video", this);
        this.onAudioUpdateEnd_ = $e88cd91ee18355c1$var$onUpdateend("audio", this);
        this.onVideoError_ = (e)=>{
            // used for debugging
            this.videoError_ = e;
        };
        this.onAudioError_ = (e)=>{
            // used for debugging
            this.audioError_ = e;
        };
        this.createdSourceBuffers_ = false;
        this.initializedEme_ = false;
        this.triggeredReady_ = false;
    }
    initializedEme() {
        this.initializedEme_ = true;
        this.triggerReady();
    }
    hasCreatedSourceBuffers() {
        // if false, likely waiting on one of the segment loaders to get enough data to create
        // source buffers
        return this.createdSourceBuffers_;
    }
    hasInitializedAnyEme() {
        return this.initializedEme_;
    }
    ready() {
        return this.hasCreatedSourceBuffers() && this.hasInitializedAnyEme();
    }
    createSourceBuffers(codecs) {
        if (this.hasCreatedSourceBuffers()) // already created them before
        return;
         // the intial addOrChangeSourceBuffers will always be
        // two add buffers.
        this.addOrChangeSourceBuffers(codecs);
        this.createdSourceBuffers_ = true;
        this.trigger("createdsourcebuffers");
        this.triggerReady();
    }
    triggerReady() {
        // only allow ready to be triggered once, this prevents the case
        // where:
        // 1. we trigger createdsourcebuffers
        // 2. ie 11 synchronously initializates eme
        // 3. the synchronous initialization causes us to trigger ready
        // 4. We go back to the ready check in createSourceBuffers and ready is triggered again.
        if (this.ready() && !this.triggeredReady_) {
            this.triggeredReady_ = true;
            this.trigger("ready");
        }
    }
    /**
   * Add a type of source buffer to the media source.
   *
   * @param {string} type
   *        The type of source buffer to add.
   *
   * @param {string} codec
   *        The codec to add the source buffer with.
   */ addSourceBuffer(type, codec) {
        $e88cd91ee18355c1$var$pushQueue({
            type: "mediaSource",
            sourceUpdater: this,
            action: $e88cd91ee18355c1$var$actions.addSourceBuffer(type, codec),
            name: "addSourceBuffer"
        });
    }
    /**
   * call abort on a source buffer.
   *
   * @param {string} type
   *        The type of source buffer to call abort on.
   */ abort(type) {
        $e88cd91ee18355c1$var$pushQueue({
            type: type,
            sourceUpdater: this,
            action: $e88cd91ee18355c1$var$actions.abort(type),
            name: "abort"
        });
    }
    /**
   * Call removeSourceBuffer and remove a specific type
   * of source buffer on the mediaSource.
   *
   * @param {string} type
   *        The type of source buffer to remove.
   */ removeSourceBuffer(type) {
        if (!this.canRemoveSourceBuffer()) {
            $e88cd91ee18355c1$export$2e2bcd8739ae039.log.error("removeSourceBuffer is not supported!");
            return;
        }
        $e88cd91ee18355c1$var$pushQueue({
            type: "mediaSource",
            sourceUpdater: this,
            action: $e88cd91ee18355c1$var$actions.removeSourceBuffer(type),
            name: "removeSourceBuffer"
        });
    }
    /**
   * Whether or not the removeSourceBuffer function is supported
   * on the mediaSource.
   *
   * @return {boolean}
   *          if removeSourceBuffer can be called.
   */ canRemoveSourceBuffer() {
        // As of Firefox 83 removeSourceBuffer
        // throws errors, so we report that it does not support this.
        return !$e88cd91ee18355c1$export$2e2bcd8739ae039.browser.IS_FIREFOX && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).MediaSource && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).MediaSource.prototype && typeof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).MediaSource.prototype.removeSourceBuffer === "function";
    }
    /**
   * Whether or not the changeType function is supported
   * on our SourceBuffers.
   *
   * @return {boolean}
   *         if changeType can be called.
   */ static canChangeType() {
        return (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).SourceBuffer && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).SourceBuffer.prototype && typeof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).SourceBuffer.prototype.changeType === "function";
    }
    /**
   * Whether or not the changeType function is supported
   * on our SourceBuffers.
   *
   * @return {boolean}
   *         if changeType can be called.
   */ canChangeType() {
        return this.constructor.canChangeType();
    }
    /**
   * Call the changeType function on a source buffer, given the code and type.
   *
   * @param {string} type
   *        The type of source buffer to call changeType on.
   *
   * @param {string} codec
   *        The codec string to change type with on the source buffer.
   */ changeType(type, codec) {
        if (!this.canChangeType()) {
            $e88cd91ee18355c1$export$2e2bcd8739ae039.log.error("changeType is not supported!");
            return;
        }
        $e88cd91ee18355c1$var$pushQueue({
            type: type,
            sourceUpdater: this,
            action: $e88cd91ee18355c1$var$actions.changeType(codec),
            name: "changeType"
        });
    }
    /**
   * Add source buffers with a codec or, if they are already created,
   * call changeType on source buffers using changeType.
   *
   * @param {Object} codecs
   *        Codecs to switch to
   */ addOrChangeSourceBuffers(codecs) {
        if (!codecs || typeof codecs !== "object" || Object.keys(codecs).length === 0) throw new Error("Cannot addOrChangeSourceBuffers to undefined codecs");
        Object.keys(codecs).forEach((type)=>{
            const codec = codecs[type];
            if (!this.hasCreatedSourceBuffers()) return this.addSourceBuffer(type, codec);
            if (this.canChangeType()) this.changeType(type, codec);
        });
    }
    /**
   * Queue an update to append an ArrayBuffer.
   *
   * @param {MediaObject} object containing audioBytes and/or videoBytes
   * @param {Function} done the function to call when done
   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data
   */ appendBuffer(options, doneFn) {
        const { segmentInfo: segmentInfo, type: type, bytes: bytes } = options;
        this.processedAppend_ = true;
        if (type === "audio" && this.videoBuffer && !this.videoAppendQueued_) {
            this.delayedAudioAppendQueue_.push([
                options,
                doneFn
            ]);
            this.logger_(`delayed audio append of ${bytes.length} until video append`);
            return;
        } // In the case of certain errors, for instance, QUOTA_EXCEEDED_ERR, updateend will
        // not be fired. This means that the queue will be blocked until the next action
        // taken by the segment-loader. Provide a mechanism for segment-loader to handle
        // these errors by calling the doneFn with the specific error.
        const onError = doneFn;
        $e88cd91ee18355c1$var$pushQueue({
            type: type,
            sourceUpdater: this,
            action: $e88cd91ee18355c1$var$actions.appendBuffer(bytes, segmentInfo || {
                mediaIndex: -1
            }, onError),
            doneFn: doneFn,
            name: "appendBuffer"
        });
        if (type === "video") {
            this.videoAppendQueued_ = true;
            if (!this.delayedAudioAppendQueue_.length) return;
            const queue = this.delayedAudioAppendQueue_.slice();
            this.logger_(`queuing delayed audio ${queue.length} appendBuffers`);
            this.delayedAudioAppendQueue_.length = 0;
            queue.forEach((que)=>{
                this.appendBuffer.apply(this, que);
            });
        }
    }
    /**
   * Get the audio buffer's buffered timerange.
   *
   * @return {TimeRange}
   *         The audio buffer's buffered time range
   */ audioBuffered() {
        // no media source/source buffer or it isn't in the media sources
        // source buffer list
        if (!$e88cd91ee18355c1$var$inSourceBuffers(this.mediaSource, this.audioBuffer)) return $e88cd91ee18355c1$var$createTimeRanges();
        return this.audioBuffer.buffered ? this.audioBuffer.buffered : $e88cd91ee18355c1$var$createTimeRanges();
    }
    /**
   * Get the video buffer's buffered timerange.
   *
   * @return {TimeRange}
   *         The video buffer's buffered time range
   */ videoBuffered() {
        // no media source/source buffer or it isn't in the media sources
        // source buffer list
        if (!$e88cd91ee18355c1$var$inSourceBuffers(this.mediaSource, this.videoBuffer)) return $e88cd91ee18355c1$var$createTimeRanges();
        return this.videoBuffer.buffered ? this.videoBuffer.buffered : $e88cd91ee18355c1$var$createTimeRanges();
    }
    /**
   * Get a combined video/audio buffer's buffered timerange.
   *
   * @return {TimeRange}
   *         the combined time range
   */ buffered() {
        const video = $e88cd91ee18355c1$var$inSourceBuffers(this.mediaSource, this.videoBuffer) ? this.videoBuffer : null;
        const audio = $e88cd91ee18355c1$var$inSourceBuffers(this.mediaSource, this.audioBuffer) ? this.audioBuffer : null;
        if (audio && !video) return this.audioBuffered();
        if (video && !audio) return this.videoBuffered();
        return $e88cd91ee18355c1$var$bufferIntersection(this.audioBuffered(), this.videoBuffered());
    }
    /**
   * Add a callback to the queue that will set duration on the mediaSource.
   *
   * @param {number} duration
   *        The duration to set
   *
   * @param {Function} [doneFn]
   *        function to run after duration has been set.
   */ setDuration(duration, doneFn = $e88cd91ee18355c1$var$noop) {
        // In order to set the duration on the media source, it's necessary to wait for all
        // source buffers to no longer be updating. "If the updating attribute equals true on
        // any SourceBuffer in sourceBuffers, then throw an InvalidStateError exception and
        // abort these steps." (source: https://www.w3.org/TR/media-source/#attributes).
        $e88cd91ee18355c1$var$pushQueue({
            type: "mediaSource",
            sourceUpdater: this,
            action: $e88cd91ee18355c1$var$actions.duration(duration),
            name: "duration",
            doneFn: doneFn
        });
    }
    /**
   * Add a mediaSource endOfStream call to the queue
   *
   * @param {Error} [error]
   *        Call endOfStream with an error
   *
   * @param {Function} [doneFn]
   *        A function that should be called when the
   *        endOfStream call has finished.
   */ endOfStream(error = null, doneFn = $e88cd91ee18355c1$var$noop) {
        if (typeof error !== "string") error = undefined;
         // In order to set the duration on the media source, it's necessary to wait for all
        // source buffers to no longer be updating. "If the updating attribute equals true on
        // any SourceBuffer in sourceBuffers, then throw an InvalidStateError exception and
        // abort these steps." (source: https://www.w3.org/TR/media-source/#attributes).
        $e88cd91ee18355c1$var$pushQueue({
            type: "mediaSource",
            sourceUpdater: this,
            action: $e88cd91ee18355c1$var$actions.endOfStream(error),
            name: "endOfStream",
            doneFn: doneFn
        });
    }
    /**
   * Queue an update to remove a time range from the buffer.
   *
   * @param {number} start where to start the removal
   * @param {number} end where to end the removal
   * @param {Function} [done=noop] optional callback to be executed when the remove
   * operation is complete
   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end
   */ removeAudio(start, end, done = $e88cd91ee18355c1$var$noop) {
        if (!this.audioBuffered().length || this.audioBuffered().end(0) === 0) {
            done();
            return;
        }
        $e88cd91ee18355c1$var$pushQueue({
            type: "audio",
            sourceUpdater: this,
            action: $e88cd91ee18355c1$var$actions.remove(start, end),
            doneFn: done,
            name: "remove"
        });
    }
    /**
   * Queue an update to remove a time range from the buffer.
   *
   * @param {number} start where to start the removal
   * @param {number} end where to end the removal
   * @param {Function} [done=noop] optional callback to be executed when the remove
   * operation is complete
   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end
   */ removeVideo(start, end, done = $e88cd91ee18355c1$var$noop) {
        if (!this.videoBuffered().length || this.videoBuffered().end(0) === 0) {
            done();
            return;
        }
        $e88cd91ee18355c1$var$pushQueue({
            type: "video",
            sourceUpdater: this,
            action: $e88cd91ee18355c1$var$actions.remove(start, end),
            doneFn: done,
            name: "remove"
        });
    }
    /**
   * Whether the underlying sourceBuffer is updating or not
   *
   * @return {boolean} the updating status of the SourceBuffer
   */ updating() {
        // the audio/video source buffer is updating
        if ($e88cd91ee18355c1$var$updating("audio", this) || $e88cd91ee18355c1$var$updating("video", this)) return true;
        return false;
    }
    /**
   * Set/get the timestampoffset on the audio SourceBuffer
   *
   * @return {number} the timestamp offset
   */ audioTimestampOffset(offset) {
        if (typeof offset !== "undefined" && this.audioBuffer && // no point in updating if it's the same
        this.audioTimestampOffset_ !== offset) {
            $e88cd91ee18355c1$var$pushQueue({
                type: "audio",
                sourceUpdater: this,
                action: $e88cd91ee18355c1$var$actions.timestampOffset(offset),
                name: "timestampOffset"
            });
            this.audioTimestampOffset_ = offset;
        }
        return this.audioTimestampOffset_;
    }
    /**
   * Set/get the timestampoffset on the video SourceBuffer
   *
   * @return {number} the timestamp offset
   */ videoTimestampOffset(offset) {
        if (typeof offset !== "undefined" && this.videoBuffer && // no point in updating if it's the same
        this.videoTimestampOffset !== offset) {
            $e88cd91ee18355c1$var$pushQueue({
                type: "video",
                sourceUpdater: this,
                action: $e88cd91ee18355c1$var$actions.timestampOffset(offset),
                name: "timestampOffset"
            });
            this.videoTimestampOffset_ = offset;
        }
        return this.videoTimestampOffset_;
    }
    /**
   * Add a function to the queue that will be called
   * when it is its turn to run in the audio queue.
   *
   * @param {Function} callback
   *        The callback to queue.
   */ audioQueueCallback(callback) {
        if (!this.audioBuffer) return;
        $e88cd91ee18355c1$var$pushQueue({
            type: "audio",
            sourceUpdater: this,
            action: $e88cd91ee18355c1$var$actions.callback(callback),
            name: "callback"
        });
    }
    /**
   * Add a function to the queue that will be called
   * when it is its turn to run in the video queue.
   *
   * @param {Function} callback
   *        The callback to queue.
   */ videoQueueCallback(callback) {
        if (!this.videoBuffer) return;
        $e88cd91ee18355c1$var$pushQueue({
            type: "video",
            sourceUpdater: this,
            action: $e88cd91ee18355c1$var$actions.callback(callback),
            name: "callback"
        });
    }
    /**
   * dispose of the source updater and the underlying sourceBuffer
   */ dispose() {
        this.trigger("dispose");
        $e88cd91ee18355c1$var$bufferTypes.forEach((type)=>{
            this.abort(type);
            if (this.canRemoveSourceBuffer()) this.removeSourceBuffer(type);
            else this[`${type}QueueCallback`](()=>$e88cd91ee18355c1$var$cleanupBuffer(type, this));
        });
        this.videoAppendQueued_ = false;
        this.delayedAudioAppendQueue_.length = 0;
        if (this.sourceopenListener_) this.mediaSource.removeEventListener("sourceopen", this.sourceopenListener_);
        this.off();
    }
}
const $e88cd91ee18355c1$var$uint8ToUtf8 = (uintArray)=>decodeURIComponent(escape(String.fromCharCode.apply(null, uintArray)));
const $e88cd91ee18355c1$var$bufferToHexString = (buffer)=>{
    const uInt8Buffer = new Uint8Array(buffer);
    return Array.from(uInt8Buffer).map((byte)=>byte.toString(16).padStart(2, "0")).join("");
};
/**
 * @file vtt-segment-loader.js
 */ const $e88cd91ee18355c1$var$VTT_LINE_TERMINATORS = new Uint8Array("\n\n".split("").map((char)=>char.charCodeAt(0)));
class $e88cd91ee18355c1$var$NoVttJsError extends Error {
    constructor(){
        super("Trying to parse received VTT cues, but there is no WebVTT. Make sure vtt.js is loaded.");
    }
}
/**
 * An object that manages segment loading and appending.
 *
 * @class VTTSegmentLoader
 * @param {Object} options required and optional options
 * @extends videojs.EventTarget
 */ class $e88cd91ee18355c1$var$VTTSegmentLoader extends $e88cd91ee18355c1$var$SegmentLoader {
    constructor(settings, options = {}){
        super(settings, options); // SegmentLoader requires a MediaSource be specified or it will throw an error;
        // however, VTTSegmentLoader has no need of a media source, so delete the reference
        this.mediaSource_ = null;
        this.subtitlesTrack_ = null;
        this.loaderType_ = "subtitle";
        this.featuresNativeTextTracks_ = settings.featuresNativeTextTracks;
        this.loadVttJs = settings.loadVttJs; // The VTT segment will have its own time mappings. Saving VTT segment timing info in
        // the sync controller leads to improper behavior.
        this.shouldSaveSegmentTimingInfo_ = false;
    }
    createTransmuxer_() {
        // don't need to transmux any subtitles
        return null;
    }
    /**
   * Indicates which time ranges are buffered
   *
   * @return {TimeRange}
   *         TimeRange object representing the current buffered ranges
   */ buffered_() {
        if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues || !this.subtitlesTrack_.cues.length) return $e88cd91ee18355c1$var$createTimeRanges();
        const cues = this.subtitlesTrack_.cues;
        const start = cues[0].startTime;
        const end = cues[cues.length - 1].startTime;
        return $e88cd91ee18355c1$var$createTimeRanges([
            [
                start,
                end
            ]
        ]);
    }
    /**
   * Gets and sets init segment for the provided map
   *
   * @param {Object} map
   *        The map object representing the init segment to get or set
   * @param {boolean=} set
   *        If true, the init segment for the provided map should be saved
   * @return {Object}
   *         map object for desired init segment
   */ initSegmentForMap(map, set = false) {
        if (!map) return null;
        const id = $e88cd91ee18355c1$var$initSegmentId(map);
        let storedMap = this.initSegments_[id];
        if (set && !storedMap && map.bytes) {
            // append WebVTT line terminators to the media initialization segment if it exists
            // to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that
            // requires two or more WebVTT line terminators between the WebVTT header and the
            // rest of the file
            const combinedByteLength = $e88cd91ee18355c1$var$VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;
            const combinedSegment = new Uint8Array(combinedByteLength);
            combinedSegment.set(map.bytes);
            combinedSegment.set($e88cd91ee18355c1$var$VTT_LINE_TERMINATORS, map.bytes.byteLength);
            this.initSegments_[id] = storedMap = {
                resolvedUri: map.resolvedUri,
                byterange: map.byterange,
                bytes: combinedSegment
            };
        }
        return storedMap || map;
    }
    /**
   * Returns true if all configuration required for loading is present, otherwise false.
   *
   * @return {boolean} True if the all configuration is ready for loading
   * @private
   */ couldBeginLoading_() {
        return this.playlist_ && this.subtitlesTrack_ && !this.paused();
    }
    /**
   * Once all the starting parameters have been specified, begin
   * operation. This method should only be invoked from the INIT
   * state.
   *
   * @private
   */ init_() {
        this.state = "READY";
        this.resetEverything();
        return this.monitorBuffer_();
    }
    /**
   * Set a subtitle track on the segment loader to add subtitles to
   *
   * @param {TextTrack=} track
   *        The text track to add loaded subtitles to
   * @return {TextTrack}
   *        Returns the subtitles track
   */ track(track) {
        if (typeof track === "undefined") return this.subtitlesTrack_;
        this.subtitlesTrack_ = track; // if we were unpaused but waiting for a sourceUpdater, start
        // buffering now
        if (this.state === "INIT" && this.couldBeginLoading_()) this.init_();
        return this.subtitlesTrack_;
    }
    /**
   * Remove any data in the source buffer between start and end times
   *
   * @param {number} start - the start time of the region to remove from the buffer
   * @param {number} end - the end time of the region to remove from the buffer
   */ remove(start, end) {
        $e88cd91ee18355c1$var$removeCuesFromTrack(start, end, this.subtitlesTrack_);
    }
    /**
   * fill the buffer with segements unless the sourceBuffers are
   * currently updating
   *
   * Note: this function should only ever be called by monitorBuffer_
   * and never directly
   *
   * @private
   */ fillBuffer_() {
        // see if we need to begin loading immediately
        const segmentInfo = this.chooseNextRequest_();
        if (!segmentInfo) return;
        if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {
            // We don't have the timestamp offset that we need to sync subtitles.
            // Rerun on a timestamp offset or user interaction.
            const checkTimestampOffset = ()=>{
                this.state = "READY";
                if (!this.paused()) // if not paused, queue a buffer check as soon as possible
                this.monitorBuffer_();
            };
            this.syncController_.one("timestampoffset", checkTimestampOffset);
            this.state = "WAITING_ON_TIMELINE";
            return;
        }
        this.loadSegment_(segmentInfo);
    }
    timestampOffsetForSegment_() {
        return null;
    }
    chooseNextRequest_() {
        return this.skipEmptySegments_(super.chooseNextRequest_());
    }
    /**
   * Prevents the segment loader from requesting segments we know contain no subtitles
   * by walking forward until we find the next segment that we don't know whether it is
   * empty or not.
   *
   * @param {Object} segmentInfo
   *        a segment info object that describes the current segment
   * @return {Object}
   *         a segment info object that describes the current segment
   */ skipEmptySegments_(segmentInfo) {
        while(segmentInfo && segmentInfo.segment.empty){
            // stop at the last possible segmentInfo
            if (segmentInfo.mediaIndex + 1 >= segmentInfo.playlist.segments.length) {
                segmentInfo = null;
                break;
            }
            segmentInfo = this.generateSegmentInfo_({
                playlist: segmentInfo.playlist,
                mediaIndex: segmentInfo.mediaIndex + 1,
                startOfSegment: segmentInfo.startOfSegment + segmentInfo.duration,
                isSyncRequest: segmentInfo.isSyncRequest
            });
        }
        return segmentInfo;
    }
    stopForError(error) {
        this.error(error);
        this.state = "READY";
        this.pause();
        this.trigger("error");
    }
    /**
   * append a decrypted segement to the SourceBuffer through a SourceUpdater
   *
   * @private
   */ segmentRequestFinished_(error, simpleSegment, result) {
        if (!this.subtitlesTrack_) {
            this.state = "READY";
            return;
        }
        this.saveTransferStats_(simpleSegment.stats); // the request was aborted
        if (!this.pendingSegment_) {
            this.state = "READY";
            this.mediaRequestsAborted += 1;
            return;
        }
        if (error) {
            if (error.code === $e88cd91ee18355c1$var$REQUEST_ERRORS.TIMEOUT) this.handleTimeout_();
            if (error.code === $e88cd91ee18355c1$var$REQUEST_ERRORS.ABORTED) this.mediaRequestsAborted += 1;
            else this.mediaRequestsErrored += 1;
            this.stopForError(error);
            return;
        }
        const segmentInfo = this.pendingSegment_; // although the VTT segment loader bandwidth isn't really used, it's good to
        // maintain functionality between segment loaders
        this.saveBandwidthRelatedStats_(segmentInfo.duration, simpleSegment.stats); // if this request included a segment key, save that data in the cache
        if (simpleSegment.key) this.segmentKey(simpleSegment.key, true);
        this.state = "APPENDING"; // used for tests
        this.trigger("appending");
        const segment = segmentInfo.segment;
        if (segment.map) segment.map.bytes = simpleSegment.map.bytes;
        segmentInfo.bytes = simpleSegment.bytes; // Make sure that vttjs has loaded, otherwise, load it and wait till it finished loading
        if (typeof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebVTT !== "function" && typeof this.loadVttJs === "function") {
            this.state = "WAITING_ON_VTTJS"; // should be fine to call multiple times
            // script will be loaded once but multiple listeners will be added to the queue, which is expected.
            this.loadVttJs().then(()=>this.segmentRequestFinished_(error, simpleSegment, result), ()=>this.stopForError({
                    message: "Error loading vtt.js"
                }));
            return;
        }
        segment.requested = true;
        try {
            this.parseVTTCues_(segmentInfo);
        } catch (e) {
            this.stopForError({
                message: e.message
            });
            return;
        }
        this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);
        if (segmentInfo.cues.length) segmentInfo.timingInfo = {
            start: segmentInfo.cues[0].startTime,
            end: segmentInfo.cues[segmentInfo.cues.length - 1].endTime
        };
        else segmentInfo.timingInfo = {
            start: segmentInfo.startOfSegment,
            end: segmentInfo.startOfSegment + segmentInfo.duration
        };
        if (segmentInfo.isSyncRequest) {
            this.trigger("syncinfoupdate");
            this.pendingSegment_ = null;
            this.state = "READY";
            return;
        }
        segmentInfo.byteLength = segmentInfo.bytes.byteLength;
        this.mediaSecondsLoaded += segment.duration; // Create VTTCue instances for each cue in the new segment and add them to
        // the subtitle track
        segmentInfo.cues.forEach((cue)=>{
            this.subtitlesTrack_.addCue(this.featuresNativeTextTracks_ ? new (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).VTTCue(cue.startTime, cue.endTime, cue.text) : cue);
        }); // Remove any duplicate cues from the subtitle track. The WebVTT spec allows
        // cues to have identical time-intervals, but if the text is also identical
        // we can safely assume it is a duplicate that can be removed (ex. when a cue
        // "overlaps" VTT segments)
        $e88cd91ee18355c1$var$removeDuplicateCuesFromTrack(this.subtitlesTrack_);
        this.handleAppendsDone_();
    }
    handleData_() {
    // that we do not support here.
    }
    updateTimingInfoEnd_() {}
    /**
   * Uses the WebVTT parser to parse the segment response
   *
   * @throws NoVttJsError
   *
   * @param {Object} segmentInfo
   *        a segment info object that describes the current segment
   * @private
   */ parseVTTCues_(segmentInfo) {
        let decoder;
        let decodeBytesToString = false;
        if (typeof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebVTT !== "function") // caller is responsible for exception handling.
        throw new $e88cd91ee18355c1$var$NoVttJsError();
        if (typeof (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).TextDecoder === "function") decoder = new (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).TextDecoder("utf8");
        else {
            decoder = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebVTT.StringDecoder();
            decodeBytesToString = true;
        }
        const parser = new (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).WebVTT.Parser((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))), (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).vttjs, decoder);
        segmentInfo.cues = [];
        segmentInfo.timestampmap = {
            MPEGTS: 0,
            LOCAL: 0
        };
        parser.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);
        parser.ontimestampmap = (map)=>{
            segmentInfo.timestampmap = map;
        };
        parser.onparsingerror = (error)=>{
            $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn("Error encountered when parsing cues: " + error.message);
        };
        if (segmentInfo.segment.map) {
            let mapData = segmentInfo.segment.map.bytes;
            if (decodeBytesToString) mapData = $e88cd91ee18355c1$var$uint8ToUtf8(mapData);
            parser.parse(mapData);
        }
        let segmentData = segmentInfo.bytes;
        if (decodeBytesToString) segmentData = $e88cd91ee18355c1$var$uint8ToUtf8(segmentData);
        parser.parse(segmentData);
        parser.flush();
    }
    /**
   * Updates the start and end times of any cues parsed by the WebVTT parser using
   * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping
   * from the SyncController
   *
   * @param {Object} segmentInfo
   *        a segment info object that describes the current segment
   * @param {Object} mappingObj
   *        object containing a mapping from TS to media time
   * @param {Object} playlist
   *        the playlist object containing the segment
   * @private
   */ updateTimeMapping_(segmentInfo, mappingObj, playlist) {
        const segment = segmentInfo.segment;
        if (!mappingObj) // If the sync controller does not have a mapping of TS to Media Time for the
        // timeline, then we don't have enough information to update the cue
        // start/end times
        return;
        if (!segmentInfo.cues.length) {
            // If there are no cues, we also do not have enough information to figure out
            // segment timing. Mark that the segment contains no cues so we don't re-request
            // an empty segment.
            segment.empty = true;
            return;
        }
        const timestampmap = segmentInfo.timestampmap;
        const diff = timestampmap.MPEGTS / (0, $50c25c64d7e54de5$exports.ONE_SECOND_IN_TS) - timestampmap.LOCAL + mappingObj.mapping;
        segmentInfo.cues.forEach((cue)=>{
            // First convert cue time to TS time using the timestamp-map provided within the vtt
            cue.startTime += diff;
            cue.endTime += diff;
        });
        if (!playlist.syncInfo) {
            const firstStart = segmentInfo.cues[0].startTime;
            const lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;
            playlist.syncInfo = {
                mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,
                time: Math.min(firstStart, lastStart - segment.duration)
            };
        }
    }
}
/**
 * @file ad-cue-tags.js
 */ /**
 * Searches for an ad cue that overlaps with the given mediaTime
 *
 * @param {Object} track
 *        the track to find the cue for
 *
 * @param {number} mediaTime
 *        the time to find the cue at
 *
 * @return {Object|null}
 *         the found cue or null
 */ const $e88cd91ee18355c1$var$findAdCue = function(track, mediaTime) {
    const cues = track.cues;
    for(let i = 0; i < cues.length; i++){
        const cue = cues[i];
        if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) return cue;
    }
    return null;
};
const $e88cd91ee18355c1$var$updateAdCues = function(media, track, offset = 0) {
    if (!media.segments) return;
    let mediaTime = offset;
    let cue;
    for(let i = 0; i < media.segments.length; i++){
        const segment = media.segments[i];
        if (!cue) // Since the cues will span for at least the segment duration, adding a fudge
        // factor of half segment duration will prevent duplicate cues from being
        // created when timing info is not exact (e.g. cue start time initialized
        // at 10.006677, but next call mediaTime is 10.003332 )
        cue = $e88cd91ee18355c1$var$findAdCue(track, mediaTime + segment.duration / 2);
        if (cue) {
            if ("cueIn" in segment) {
                // Found a CUE-IN so end the cue
                cue.endTime = mediaTime;
                cue.adEndTime = mediaTime;
                mediaTime += segment.duration;
                cue = null;
                continue;
            }
            if (mediaTime < cue.endTime) {
                // Already processed this mediaTime for this cue
                mediaTime += segment.duration;
                continue;
            } // otherwise extend cue until a CUE-IN is found
            cue.endTime += segment.duration;
        } else {
            if ("cueOut" in segment) {
                cue = new (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);
                cue.adStartTime = mediaTime; // Assumes tag format to be
                // #EXT-X-CUE-OUT:30
                cue.adEndTime = mediaTime + parseFloat(segment.cueOut);
                track.addCue(cue);
            }
            if ("cueOutCont" in segment) {
                // Entered into the middle of an ad cue
                // Assumes tag formate to be
                // #EXT-X-CUE-OUT-CONT:10/30
                const [adOffset, adTotal] = segment.cueOutCont.split("/").map(parseFloat);
                cue = new (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).VTTCue(mediaTime, mediaTime + segment.duration, "");
                cue.adStartTime = mediaTime - adOffset;
                cue.adEndTime = cue.adStartTime + adTotal;
                track.addCue(cue);
            }
        }
        mediaTime += segment.duration;
    }
};
/**
 * @file sync-controller.js
 */ // synchronize expired playlist segments.
// the max media sequence diff is 48 hours of live stream
// content with two second segments. Anything larger than that
// will likely be invalid.
const $e88cd91ee18355c1$var$MAX_MEDIA_SEQUENCE_DIFF_FOR_SYNC = 86400;
const $e88cd91ee18355c1$var$syncPointStrategies = [
    // Stategy "VOD": Handle the VOD-case where the sync-point is *always*
    //                the equivalence display-time 0 === segment-index 0
    {
        name: "VOD",
        run: (syncController, playlist, duration, currentTimeline, currentTime)=>{
            if (duration !== Infinity) {
                const syncPoint = {
                    time: 0,
                    segmentIndex: 0,
                    partIndex: null
                };
                return syncPoint;
            }
            return null;
        }
    },
    {
        name: "MediaSequence",
        /**
   * run media sequence strategy
   *
   * @param {SyncController} syncController
   * @param {Object} playlist
   * @param {number} duration
   * @param {number} currentTimeline
   * @param {number} currentTime
   * @param {string} type
   */ run: (syncController, playlist, duration, currentTimeline, currentTime, type)=>{
            if (!type) return null;
            const mediaSequenceMap = syncController.getMediaSequenceMap(type);
            if (!mediaSequenceMap || mediaSequenceMap.size === 0) return null;
            if (playlist.mediaSequence === undefined || !Array.isArray(playlist.segments) || !playlist.segments.length) return null;
            let currentMediaSequence = playlist.mediaSequence;
            let segmentIndex = 0;
            for (const segment of playlist.segments){
                const range = mediaSequenceMap.get(currentMediaSequence);
                if (!range) break;
                if (currentTime >= range.start && currentTime < range.end) {
                    // we found segment
                    if (Array.isArray(segment.parts) && segment.parts.length) {
                        let currentPartStart = range.start;
                        let partIndex = 0;
                        for (const part of segment.parts){
                            const start = currentPartStart;
                            const end = start + part.duration;
                            if (currentTime >= start && currentTime < end) return {
                                time: range.start,
                                segmentIndex: segmentIndex,
                                partIndex: partIndex
                            };
                            partIndex++;
                            currentPartStart = end;
                        }
                    } // no parts found, return sync point for segment
                    return {
                        time: range.start,
                        segmentIndex: segmentIndex,
                        partIndex: null
                    };
                }
                segmentIndex++;
                currentMediaSequence++;
            } // we didn't find any segments for provided current time
            return null;
        }
    },
    // Stategy "ProgramDateTime": We have a program-date-time tag in this playlist
    {
        name: "ProgramDateTime",
        run: (syncController, playlist, duration, currentTimeline, currentTime)=>{
            if (!Object.keys(syncController.timelineToDatetimeMappings).length) return null;
            let syncPoint = null;
            let lastDistance = null;
            const partsAndSegments = $e88cd91ee18355c1$var$getPartsAndSegments(playlist);
            currentTime = currentTime || 0;
            for(let i = 0; i < partsAndSegments.length; i++){
                // start from the end and loop backwards for live
                // or start from the front and loop forwards for non-live
                const index = playlist.endList || currentTime === 0 ? i : partsAndSegments.length - (i + 1);
                const partAndSegment = partsAndSegments[index];
                const segment = partAndSegment.segment;
                const datetimeMapping = syncController.timelineToDatetimeMappings[segment.timeline];
                if (!datetimeMapping || !segment.dateTimeObject) continue;
                const segmentTime = segment.dateTimeObject.getTime() / 1000;
                let start = segmentTime + datetimeMapping; // take part duration into account.
                if (segment.parts && typeof partAndSegment.partIndex === "number") for(let z = 0; z < partAndSegment.partIndex; z++)start += segment.parts[z].duration;
                const distance = Math.abs(currentTime - start); // Once the distance begins to increase, or if distance is 0, we have passed
                // currentTime and can stop looking for better candidates
                if (lastDistance !== null && (distance === 0 || lastDistance < distance)) break;
                lastDistance = distance;
                syncPoint = {
                    time: start,
                    segmentIndex: partAndSegment.segmentIndex,
                    partIndex: partAndSegment.partIndex
                };
            }
            return syncPoint;
        }
    },
    // Stategy "Segment": We have a known time mapping for a timeline and a
    //                    segment in the current timeline with timing data
    {
        name: "Segment",
        run: (syncController, playlist, duration, currentTimeline, currentTime)=>{
            let syncPoint = null;
            let lastDistance = null;
            currentTime = currentTime || 0;
            const partsAndSegments = $e88cd91ee18355c1$var$getPartsAndSegments(playlist);
            for(let i = 0; i < partsAndSegments.length; i++){
                // start from the end and loop backwards for live
                // or start from the front and loop forwards for non-live
                const index = playlist.endList || currentTime === 0 ? i : partsAndSegments.length - (i + 1);
                const partAndSegment = partsAndSegments[index];
                const segment = partAndSegment.segment;
                const start = partAndSegment.part && partAndSegment.part.start || segment && segment.start;
                if (segment.timeline === currentTimeline && typeof start !== "undefined") {
                    const distance = Math.abs(currentTime - start); // Once the distance begins to increase, we have passed
                    // currentTime and can stop looking for better candidates
                    if (lastDistance !== null && lastDistance < distance) break;
                    if (!syncPoint || lastDistance === null || lastDistance >= distance) {
                        lastDistance = distance;
                        syncPoint = {
                            time: start,
                            segmentIndex: partAndSegment.segmentIndex,
                            partIndex: partAndSegment.partIndex
                        };
                    }
                }
            }
            return syncPoint;
        }
    },
    // Stategy "Discontinuity": We have a discontinuity with a known
    //                          display-time
    {
        name: "Discontinuity",
        run: (syncController, playlist, duration, currentTimeline, currentTime)=>{
            let syncPoint = null;
            currentTime = currentTime || 0;
            if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {
                let lastDistance = null;
                for(let i = 0; i < playlist.discontinuityStarts.length; i++){
                    const segmentIndex = playlist.discontinuityStarts[i];
                    const discontinuity = playlist.discontinuitySequence + i + 1;
                    const discontinuitySync = syncController.discontinuities[discontinuity];
                    if (discontinuitySync) {
                        const distance = Math.abs(currentTime - discontinuitySync.time); // Once the distance begins to increase, we have passed
                        // currentTime and can stop looking for better candidates
                        if (lastDistance !== null && lastDistance < distance) break;
                        if (!syncPoint || lastDistance === null || lastDistance >= distance) {
                            lastDistance = distance;
                            syncPoint = {
                                time: discontinuitySync.time,
                                segmentIndex: segmentIndex,
                                partIndex: null
                            };
                        }
                    }
                }
            }
            return syncPoint;
        }
    },
    // Stategy "Playlist": We have a playlist with a known mapping of
    //                     segment index to display time
    {
        name: "Playlist",
        run: (syncController, playlist, duration, currentTimeline, currentTime)=>{
            if (playlist.syncInfo) {
                const syncPoint = {
                    time: playlist.syncInfo.time,
                    segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence,
                    partIndex: null
                };
                return syncPoint;
            }
            return null;
        }
    }
];
class $e88cd91ee18355c1$var$SyncController extends $e88cd91ee18355c1$export$2e2bcd8739ae039.EventTarget {
    constructor(options = {}){
        super(); // ...for synching across variants
        this.timelines = [];
        this.discontinuities = [];
        this.timelineToDatetimeMappings = {};
        /**
     * @type {Map<string, Map<number, { start: number, end: number }>>}
     * @private
     */ this.mediaSequenceStorage_ = new Map();
        this.logger_ = $e88cd91ee18355c1$var$logger("SyncController");
    }
    /**
   * Get media sequence map by type
   *
   * @param {string} type - segment loader type
   * @return {Map<number, { start: number, end: number }> | undefined}
   */ getMediaSequenceMap(type) {
        return this.mediaSequenceStorage_.get(type);
    }
    /**
   * Update Media Sequence Map -> <MediaSequence, Range>
   *
   * @param {Object} playlist - parsed playlist
   * @param {number} currentTime - current player's time
   * @param {string} type - segment loader type
   * @return {void}
   */ updateMediaSequenceMap(playlist, currentTime, type) {
        // we should not process this playlist if it does not have mediaSequence or segments
        if (playlist.mediaSequence === undefined || !Array.isArray(playlist.segments) || !playlist.segments.length) return;
        const currentMap = this.getMediaSequenceMap(type);
        const result = new Map();
        let currentMediaSequence = playlist.mediaSequence;
        let currentBaseTime;
        if (!currentMap) // first playlist setup:
        currentBaseTime = 0;
        else if (currentMap.has(playlist.mediaSequence)) // further playlists setup:
        currentBaseTime = currentMap.get(playlist.mediaSequence).start;
        else {
            // it seems like we have a gap between playlists, use current time as a fallback:
            this.logger_(`MediaSequence sync for ${type} segment loader - received a gap between playlists.
Fallback base time to: ${currentTime}.
Received media sequence: ${currentMediaSequence}.
Current map: `, currentMap);
            currentBaseTime = currentTime;
        }
        this.logger_(`MediaSequence sync for ${type} segment loader.
Received media sequence: ${currentMediaSequence}.
base time is ${currentBaseTime}
Current map: `, currentMap);
        playlist.segments.forEach((segment)=>{
            const start = currentBaseTime;
            const end = start + segment.duration;
            const range = {
                start: start,
                end: end
            };
            result.set(currentMediaSequence, range);
            currentMediaSequence++;
            currentBaseTime = end;
        });
        this.mediaSequenceStorage_.set(type, result);
    }
    /**
   * Find a sync-point for the playlist specified
   *
   * A sync-point is defined as a known mapping from display-time to
   * a segment-index in the current playlist.
   *
   * @param {Playlist} playlist
   *        The playlist that needs a sync-point
   * @param {number} duration
   *        Duration of the MediaSource (Infinite if playing a live source)
   * @param {number} currentTimeline
   *        The last timeline from which a segment was loaded
   * @param {number} currentTime
   *        Current player's time
   * @param {string} type
   *        Segment loader type
   * @return {Object}
   *          A sync-point object
   */ getSyncPoint(playlist, duration, currentTimeline, currentTime, type) {
        // Always use VOD sync point for VOD
        if (duration !== Infinity) {
            const vodSyncPointStrategy = $e88cd91ee18355c1$var$syncPointStrategies.find(({ name: name })=>name === "VOD");
            return vodSyncPointStrategy.run(this, playlist, duration);
        }
        const syncPoints = this.runStrategies_(playlist, duration, currentTimeline, currentTime, type);
        if (!syncPoints.length) // Signal that we need to attempt to get a sync-point manually
        // by fetching a segment in the playlist and constructing
        // a sync-point from that information
        return null;
         // If we have exact match just return it instead of finding the nearest distance
        for (const syncPointInfo of syncPoints){
            const { syncPoint: syncPoint, strategy: strategy } = syncPointInfo;
            const { segmentIndex: segmentIndex, time: time } = syncPoint;
            if (segmentIndex < 0) continue;
            const selectedSegment = playlist.segments[segmentIndex];
            const start = time;
            const end = start + selectedSegment.duration;
            this.logger_(`Strategy: ${strategy}. Current time: ${currentTime}. selected segment: ${segmentIndex}. Time: [${start} -> ${end}]}`);
            if (currentTime >= start && currentTime < end) {
                this.logger_("Found sync point with exact match: ", syncPoint);
                return syncPoint;
            }
        } // Now find the sync-point that is closest to the currentTime because
        // that should result in the most accurate guess about which segment
        // to fetch
        return this.selectSyncPoint_(syncPoints, {
            key: "time",
            value: currentTime
        });
    }
    /**
   * Calculate the amount of time that has expired off the playlist during playback
   *
   * @param {Playlist} playlist
   *        Playlist object to calculate expired from
   * @param {number} duration
   *        Duration of the MediaSource (Infinity if playling a live source)
   * @return {number|null}
   *          The amount of time that has expired off the playlist during playback. Null
   *          if no sync-points for the playlist can be found.
   */ getExpiredTime(playlist, duration) {
        if (!playlist || !playlist.segments) return null;
        const syncPoints = this.runStrategies_(playlist, duration, playlist.discontinuitySequence, 0, "main"); // Without sync-points, there is not enough information to determine the expired time
        if (!syncPoints.length) return null;
        const syncPoint = this.selectSyncPoint_(syncPoints, {
            key: "segmentIndex",
            value: 0
        }); // If the sync-point is beyond the start of the playlist, we want to subtract the
        // duration from index 0 to syncPoint.segmentIndex instead of adding.
        if (syncPoint.segmentIndex > 0) syncPoint.time *= -1;
        return Math.abs(syncPoint.time + $e88cd91ee18355c1$var$sumDurations({
            defaultDuration: playlist.targetDuration,
            durationList: playlist.segments,
            startIndex: syncPoint.segmentIndex,
            endIndex: 0
        }));
    }
    /**
   * Runs each sync-point strategy and returns a list of sync-points returned by the
   * strategies
   *
   * @private
   * @param {Playlist} playlist
   *        The playlist that needs a sync-point
   * @param {number} duration
   *        Duration of the MediaSource (Infinity if playing a live source)
   * @param {number} currentTimeline
   *        The last timeline from which a segment was loaded
   * @param {number} currentTime
   *        Current player's time
   * @param {string} type
   *        Segment loader type
   * @return {Array}
   *          A list of sync-point objects
   */ runStrategies_(playlist, duration, currentTimeline, currentTime, type) {
        const syncPoints = []; // Try to find a sync-point in by utilizing various strategies...
        for(let i = 0; i < $e88cd91ee18355c1$var$syncPointStrategies.length; i++){
            const strategy = $e88cd91ee18355c1$var$syncPointStrategies[i];
            const syncPoint = strategy.run(this, playlist, duration, currentTimeline, currentTime, type);
            if (syncPoint) {
                syncPoint.strategy = strategy.name;
                syncPoints.push({
                    strategy: strategy.name,
                    syncPoint: syncPoint
                });
            }
        }
        return syncPoints;
    }
    /**
   * Selects the sync-point nearest the specified target
   *
   * @private
   * @param {Array} syncPoints
   *        List of sync-points to select from
   * @param {Object} target
   *        Object specifying the property and value we are targeting
   * @param {string} target.key
   *        Specifies the property to target. Must be either 'time' or 'segmentIndex'
   * @param {number} target.value
   *        The value to target for the specified key.
   * @return {Object}
   *          The sync-point nearest the target
   */ selectSyncPoint_(syncPoints, target) {
        let bestSyncPoint = syncPoints[0].syncPoint;
        let bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);
        let bestStrategy = syncPoints[0].strategy;
        for(let i = 1; i < syncPoints.length; i++){
            const newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);
            if (newDistance < bestDistance) {
                bestDistance = newDistance;
                bestSyncPoint = syncPoints[i].syncPoint;
                bestStrategy = syncPoints[i].strategy;
            }
        }
        this.logger_(`syncPoint for [${target.key}: ${target.value}] chosen with strategy` + ` [${bestStrategy}]: [time:${bestSyncPoint.time},` + ` segmentIndex:${bestSyncPoint.segmentIndex}` + (typeof bestSyncPoint.partIndex === "number" ? `,partIndex:${bestSyncPoint.partIndex}` : "") + "]");
        return bestSyncPoint;
    }
    /**
   * Save any meta-data present on the segments when segments leave
   * the live window to the playlist to allow for synchronization at the
   * playlist level later.
   *
   * @param {Playlist} oldPlaylist - The previous active playlist
   * @param {Playlist} newPlaylist - The updated and most current playlist
   */ saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {
        const mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence; // Ignore large media sequence gaps
        if (mediaSequenceDiff > $e88cd91ee18355c1$var$MAX_MEDIA_SEQUENCE_DIFF_FOR_SYNC) {
            $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn(`Not saving expired segment info. Media sequence gap ${mediaSequenceDiff} is too large.`);
            return;
        } // When a segment expires from the playlist and it has a start time
        // save that information as a possible sync-point reference in future
        for(let i = mediaSequenceDiff - 1; i >= 0; i--){
            const lastRemovedSegment = oldPlaylist.segments[i];
            if (lastRemovedSegment && typeof lastRemovedSegment.start !== "undefined") {
                newPlaylist.syncInfo = {
                    mediaSequence: oldPlaylist.mediaSequence + i,
                    time: lastRemovedSegment.start
                };
                this.logger_(`playlist refresh sync: [time:${newPlaylist.syncInfo.time},` + ` mediaSequence: ${newPlaylist.syncInfo.mediaSequence}]`);
                this.trigger("syncinfoupdate");
                break;
            }
        }
    }
    /**
   * Save the mapping from playlist's ProgramDateTime to display. This should only happen
   * before segments start to load.
   *
   * @param {Playlist} playlist - The currently active playlist
   */ setDateTimeMappingForStart(playlist) {
        // It's possible for the playlist to be updated before playback starts, meaning time
        // zero is not yet set. If, during these playlist refreshes, a discontinuity is
        // crossed, then the old time zero mapping (for the prior timeline) would be retained
        // unless the mappings are cleared.
        this.timelineToDatetimeMappings = {};
        if (playlist.segments && playlist.segments.length && playlist.segments[0].dateTimeObject) {
            const firstSegment = playlist.segments[0];
            const playlistTimestamp = firstSegment.dateTimeObject.getTime() / 1000;
            this.timelineToDatetimeMappings[firstSegment.timeline] = -playlistTimestamp;
        }
    }
    /**
   * Calculates and saves timeline mappings, playlist sync info, and segment timing values
   * based on the latest timing information.
   *
   * @param {Object} options
   *        Options object
   * @param {SegmentInfo} options.segmentInfo
   *        The current active request information
   * @param {boolean} options.shouldSaveTimelineMapping
   *        If there's a timeline change, determines if the timeline mapping should be
   *        saved for timeline mapping and program date time mappings.
   */ saveSegmentTimingInfo({ segmentInfo: segmentInfo, shouldSaveTimelineMapping: shouldSaveTimelineMapping }) {
        const didCalculateSegmentTimeMapping = this.calculateSegmentTimeMapping_(segmentInfo, segmentInfo.timingInfo, shouldSaveTimelineMapping);
        const segment = segmentInfo.segment;
        if (didCalculateSegmentTimeMapping) {
            this.saveDiscontinuitySyncInfo_(segmentInfo); // If the playlist does not have sync information yet, record that information
            // now with segment timing information
            if (!segmentInfo.playlist.syncInfo) segmentInfo.playlist.syncInfo = {
                mediaSequence: segmentInfo.playlist.mediaSequence + segmentInfo.mediaIndex,
                time: segment.start
            };
        }
        const dateTime = segment.dateTimeObject;
        if (segment.discontinuity && shouldSaveTimelineMapping && dateTime) this.timelineToDatetimeMappings[segment.timeline] = -(dateTime.getTime() / 1000);
    }
    timestampOffsetForTimeline(timeline) {
        if (typeof this.timelines[timeline] === "undefined") return null;
        return this.timelines[timeline].time;
    }
    mappingForTimeline(timeline) {
        if (typeof this.timelines[timeline] === "undefined") return null;
        return this.timelines[timeline].mapping;
    }
    /**
   * Use the "media time" for a segment to generate a mapping to "display time" and
   * save that display time to the segment.
   *
   * @private
   * @param {SegmentInfo} segmentInfo
   *        The current active request information
   * @param {Object} timingInfo
   *        The start and end time of the current segment in "media time"
   * @param {boolean} shouldSaveTimelineMapping
   *        If there's a timeline change, determines if the timeline mapping should be
   *        saved in timelines.
   * @return {boolean}
   *          Returns false if segment time mapping could not be calculated
   */ calculateSegmentTimeMapping_(segmentInfo, timingInfo, shouldSaveTimelineMapping) {
        // TODO: remove side effects
        const segment = segmentInfo.segment;
        const part = segmentInfo.part;
        let mappingObj = this.timelines[segmentInfo.timeline];
        let start;
        let end;
        if (typeof segmentInfo.timestampOffset === "number") {
            mappingObj = {
                time: segmentInfo.startOfSegment,
                mapping: segmentInfo.startOfSegment - timingInfo.start
            };
            if (shouldSaveTimelineMapping) {
                this.timelines[segmentInfo.timeline] = mappingObj;
                this.trigger("timestampoffset");
                this.logger_(`time mapping for timeline ${segmentInfo.timeline}: ` + `[time: ${mappingObj.time}] [mapping: ${mappingObj.mapping}]`);
            }
            start = segmentInfo.startOfSegment;
            end = timingInfo.end + mappingObj.mapping;
        } else if (mappingObj) {
            start = timingInfo.start + mappingObj.mapping;
            end = timingInfo.end + mappingObj.mapping;
        } else return false;
        if (part) {
            part.start = start;
            part.end = end;
        } // If we don't have a segment start yet or the start value we got
        // is less than our current segment.start value, save a new start value.
        // We have to do this because parts will have segment timing info saved
        // multiple times and we want segment start to be the earliest part start
        // value for that segment.
        if (!segment.start || start < segment.start) segment.start = start;
        segment.end = end;
        return true;
    }
    /**
   * Each time we have discontinuity in the playlist, attempt to calculate the location
   * in display of the start of the discontinuity and save that. We also save an accuracy
   * value so that we save values with the most accuracy (closest to 0.)
   *
   * @private
   * @param {SegmentInfo} segmentInfo - The current active request information
   */ saveDiscontinuitySyncInfo_(segmentInfo) {
        const playlist = segmentInfo.playlist;
        const segment = segmentInfo.segment; // If the current segment is a discontinuity then we know exactly where
        // the start of the range and it's accuracy is 0 (greater accuracy values
        // mean more approximation)
        if (segment.discontinuity) this.discontinuities[segment.timeline] = {
            time: segment.start,
            accuracy: 0
        };
        else if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) // Search for future discontinuities that we can provide better timing
        // information for and save that information for sync purposes
        for(let i = 0; i < playlist.discontinuityStarts.length; i++){
            const segmentIndex = playlist.discontinuityStarts[i];
            const discontinuity = playlist.discontinuitySequence + i + 1;
            const mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;
            const accuracy = Math.abs(mediaIndexDiff);
            if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {
                let time;
                if (mediaIndexDiff < 0) time = segment.start - $e88cd91ee18355c1$var$sumDurations({
                    defaultDuration: playlist.targetDuration,
                    durationList: playlist.segments,
                    startIndex: segmentInfo.mediaIndex,
                    endIndex: segmentIndex
                });
                else time = segment.end + $e88cd91ee18355c1$var$sumDurations({
                    defaultDuration: playlist.targetDuration,
                    durationList: playlist.segments,
                    startIndex: segmentInfo.mediaIndex + 1,
                    endIndex: segmentIndex
                });
                this.discontinuities[discontinuity] = {
                    time: time,
                    accuracy: accuracy
                };
            }
        }
    }
    dispose() {
        this.trigger("dispose");
        this.off();
    }
}
/**
 * The TimelineChangeController acts as a source for segment loaders to listen for and
 * keep track of latest and pending timeline changes. This is useful to ensure proper
 * sync, as each loader may need to make a consideration for what timeline the other
 * loader is on before making changes which could impact the other loader's media.
 *
 * @class TimelineChangeController
 * @extends videojs.EventTarget
 */ class $e88cd91ee18355c1$var$TimelineChangeController extends $e88cd91ee18355c1$export$2e2bcd8739ae039.EventTarget {
    constructor(){
        super();
        this.pendingTimelineChanges_ = {};
        this.lastTimelineChanges_ = {};
    }
    clearPendingTimelineChange(type) {
        this.pendingTimelineChanges_[type] = null;
        this.trigger("pendingtimelinechange");
    }
    pendingTimelineChange({ type: type, from: from, to: to }) {
        if (typeof from === "number" && typeof to === "number") {
            this.pendingTimelineChanges_[type] = {
                type: type,
                from: from,
                to: to
            };
            this.trigger("pendingtimelinechange");
        }
        return this.pendingTimelineChanges_[type];
    }
    lastTimelineChange({ type: type, from: from, to: to }) {
        if (typeof from === "number" && typeof to === "number") {
            this.lastTimelineChanges_[type] = {
                type: type,
                from: from,
                to: to
            };
            delete this.pendingTimelineChanges_[type];
            this.trigger("timelinechange");
        }
        return this.lastTimelineChanges_[type];
    }
    dispose() {
        this.trigger("dispose");
        this.pendingTimelineChanges_ = {};
        this.lastTimelineChanges_ = {};
        this.off();
    }
}
/* rollup-plugin-worker-factory start for worker!/home/runner/work/http-streaming/http-streaming/src/decrypter-worker.js */ const $e88cd91ee18355c1$var$workerCode = $e88cd91ee18355c1$var$transform($e88cd91ee18355c1$var$getWorkerString(function() {
    /**
   * @file stream.js
   */ /**
   * A lightweight readable stream implemention that handles event dispatching.
   *
   * @class Stream
   */ var Stream = /*#__PURE__*/ function() {
        function Stream() {
            this.listeners = {};
        }
        /**
     * Add a listener for a specified event type.
     *
     * @param {string} type the event name
     * @param {Function} listener the callback to be invoked when an event of
     * the specified type occurs
     */ var _proto = Stream.prototype;
        _proto.on = function on(type, listener) {
            if (!this.listeners[type]) this.listeners[type] = [];
            this.listeners[type].push(listener);
        } /**
     * Remove a listener for a specified event type.
     *
     * @param {string} type the event name
     * @param {Function} listener  a function previously registered for this
     * type of event through `on`
     * @return {boolean} if we could turn it off or not
     */ ;
        _proto.off = function off(type, listener) {
            if (!this.listeners[type]) return false;
            var index = this.listeners[type].indexOf(listener); // TODO: which is better?
            // In Video.js we slice listener functions
            // on trigger so that it does not mess up the order
            // while we loop through.
            //
            // Here we slice on off so that the loop in trigger
            // can continue using it's old reference to loop without
            // messing up the order.
            this.listeners[type] = this.listeners[type].slice(0);
            this.listeners[type].splice(index, 1);
            return index > -1;
        } /**
     * Trigger an event of the specified type on this stream. Any additional
     * arguments to this function are passed as parameters to event listeners.
     *
     * @param {string} type the event name
     */ ;
        _proto.trigger = function trigger(type) {
            var callbacks = this.listeners[type];
            if (!callbacks) return;
             // Slicing the arguments on every invocation of this method
            // can add a significant amount of overhead. Avoid the
            // intermediate object creation for the common case of a
            // single callback argument
            if (arguments.length === 2) {
                var length = callbacks.length;
                for(var i = 0; i < length; ++i)callbacks[i].call(this, arguments[1]);
            } else {
                var args = Array.prototype.slice.call(arguments, 1);
                var _length = callbacks.length;
                for(var _i = 0; _i < _length; ++_i)callbacks[_i].apply(this, args);
            }
        } /**
     * Destroys the stream and cleans up.
     */ ;
        _proto.dispose = function dispose() {
            this.listeners = {};
        } /**
     * Forwards all `data` events on this stream to the destination stream. The
     * destination stream should provide a method `push` to receive the data
     * events as they arrive.
     *
     * @param {Stream} destination the stream that will receive all `data` events
     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
     */ ;
        _proto.pipe = function pipe(destination) {
            this.on("data", function(data) {
                destination.push(data);
            });
        };
        return Stream;
    }();
    /*! @name pkcs7 @version 1.0.4 @license Apache-2.0 */ /**
   * Returns the subarray of a Uint8Array without PKCS#7 padding.
   *
   * @param padded {Uint8Array} unencrypted bytes that have been padded
   * @return {Uint8Array} the unpadded bytes
   * @see http://tools.ietf.org/html/rfc5652
   */ function unpad(padded) {
        return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);
    }
    /*! @name aes-decrypter @version 4.0.1 @license Apache-2.0 */ /**
   * @file aes.js
   *
   * This file contains an adaptation of the AES decryption algorithm
   * from the Standford Javascript Cryptography Library. That work is
   * covered by the following copyright and permissions notice:
   *
   * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are
   * met:
   *
   * 1. Redistributions of source code must retain the above copyright
   *    notice, this list of conditions and the following disclaimer.
   *
   * 2. Redistributions in binary form must reproduce the above
   *    copyright notice, this list of conditions and the following
   *    disclaimer in the documentation and/or other materials provided
   *    with the distribution.
   *
   * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
   * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE
   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
   * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
   * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
   * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *
   * The views and conclusions contained in the software and documentation
   * are those of the authors and should not be interpreted as representing
   * official policies, either expressed or implied, of the authors.
   */ /**
   * Expand the S-box tables.
   *
   * @private
   */ const precompute = function() {
        const tables = [
            [
                [],
                [],
                [],
                [],
                []
            ],
            [
                [],
                [],
                [],
                [],
                []
            ]
        ];
        const encTable = tables[0];
        const decTable = tables[1];
        const sbox = encTable[4];
        const sboxInv = decTable[4];
        let i;
        let x;
        let xInv;
        const d = [];
        const th = [];
        let x2;
        let x4;
        let x8;
        let s;
        let tEnc;
        let tDec; // Compute double and third tables
        for(i = 0; i < 256; i++)th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;
        for(x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1){
            // Compute sbox
            s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;
            s = s >> 8 ^ s & 255 ^ 99;
            sbox[x] = s;
            sboxInv[s] = x; // Compute MixColumns
            x8 = d[x4 = d[x2 = d[x]]];
            tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
            tEnc = d[s] * 0x101 ^ s * 0x1010100;
            for(i = 0; i < 4; i++){
                encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;
                decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;
            }
        } // Compactify. Considerable speedup on Firefox.
        for(i = 0; i < 5; i++){
            encTable[i] = encTable[i].slice(0);
            decTable[i] = decTable[i].slice(0);
        }
        return tables;
    };
    let aesTables = null;
    /**
   * Schedule out an AES key for both encryption and decryption. This
   * is a low-level class. Use a cipher mode to do bulk encryption.
   *
   * @class AES
   * @param key {Array} The key as an array of 4, 6 or 8 words.
   */ class AES {
        constructor(key){
            /**
      * The expanded S-box and inverse S-box tables. These will be computed
      * on the client so that we don't have to send them down the wire.
      *
      * There are two tables, _tables[0] is for encryption and
      * _tables[1] is for decryption.
      *
      * The first 4 sub-tables are the expanded S-box with MixColumns. The
      * last (_tables[01][4]) is the S-box itself.
      *
      * @private
      */ // if we have yet to precompute the S-box tables
            // do so now
            if (!aesTables) aesTables = precompute();
             // then make a copy of that object for use
            this._tables = [
                [
                    aesTables[0][0].slice(),
                    aesTables[0][1].slice(),
                    aesTables[0][2].slice(),
                    aesTables[0][3].slice(),
                    aesTables[0][4].slice()
                ],
                [
                    aesTables[1][0].slice(),
                    aesTables[1][1].slice(),
                    aesTables[1][2].slice(),
                    aesTables[1][3].slice(),
                    aesTables[1][4].slice()
                ]
            ];
            let i;
            let j;
            let tmp;
            const sbox = this._tables[0][4];
            const decTable = this._tables[1];
            const keyLen = key.length;
            let rcon = 1;
            if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) throw new Error("Invalid aes key size");
            const encKey = key.slice(0);
            const decKey = [];
            this._key = [
                encKey,
                decKey
            ]; // schedule encryption keys
            for(i = keyLen; i < 4 * keyLen + 28; i++){
                tmp = encKey[i - 1]; // apply sbox
                if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {
                    tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255]; // shift rows and add rcon
                    if (i % keyLen === 0) {
                        tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;
                        rcon = rcon << 1 ^ (rcon >> 7) * 283;
                    }
                }
                encKey[i] = encKey[i - keyLen] ^ tmp;
            } // schedule decryption keys
            for(j = 0; i; j++, i--){
                tmp = encKey[j & 3 ? i : i - 4];
                if (i <= 4 || j < 4) decKey[j] = tmp;
                else decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];
            }
        }
        /**
     * Decrypt 16 bytes, specified as four 32-bit words.
     *
     * @param {number} encrypted0 the first word to decrypt
     * @param {number} encrypted1 the second word to decrypt
     * @param {number} encrypted2 the third word to decrypt
     * @param {number} encrypted3 the fourth word to decrypt
     * @param {Int32Array} out the array to write the decrypted words
     * into
     * @param {number} offset the offset into the output array to start
     * writing results
     * @return {Array} The plaintext.
     */ decrypt(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {
            const key = this._key[1]; // state variables a,b,c,d are loaded with pre-whitened data
            let a = encrypted0 ^ key[0];
            let b = encrypted3 ^ key[1];
            let c = encrypted2 ^ key[2];
            let d = encrypted1 ^ key[3];
            let a2;
            let b2;
            let c2; // key.length === 2 ?
            const nInnerRounds = key.length / 4 - 2;
            let i;
            let kIndex = 4;
            const table = this._tables[1]; // load up the tables
            const table0 = table[0];
            const table1 = table[1];
            const table2 = table[2];
            const table3 = table[3];
            const sbox = table[4]; // Inner rounds. Cribbed from OpenSSL.
            for(i = 0; i < nInnerRounds; i++){
                a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d & 255] ^ key[kIndex];
                b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];
                c2 = table0[c >>> 24] ^ table1[d >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];
                d = table0[d >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];
                kIndex += 4;
                a = a2;
                b = b2;
                c = c2;
            } // Last round.
            for(i = 0; i < 4; i++){
                out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];
                a2 = a;
                a = b;
                b = c;
                c = d;
                d = a2;
            }
        }
    }
    /**
   * @file async-stream.js
   */ /**
   * A wrapper around the Stream class to use setTimeout
   * and run stream "jobs" Asynchronously
   *
   * @class AsyncStream
   * @extends Stream
   */ class AsyncStream extends Stream {
        constructor(){
            super(Stream);
            this.jobs = [];
            this.delay = 1;
            this.timeout_ = null;
        }
        /**
     * process an async job
     *
     * @private
     */ processJob_() {
            this.jobs.shift()();
            if (this.jobs.length) this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
            else this.timeout_ = null;
        }
        /**
     * push a job into the stream
     *
     * @param {Function} job the job to push into the stream
     */ push(job) {
            this.jobs.push(job);
            if (!this.timeout_) this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
        }
    }
    /**
   * @file decrypter.js
   *
   * An asynchronous implementation of AES-128 CBC decryption with
   * PKCS#7 padding.
   */ /**
   * Convert network-order (big-endian) bytes into their little-endian
   * representation.
   */ const ntoh = function(word) {
        return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;
    };
    /**
   * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.
   *
   * @param {Uint8Array} encrypted the encrypted bytes
   * @param {Uint32Array} key the bytes of the decryption key
   * @param {Uint32Array} initVector the initialization vector (IV) to
   * use for the first round of CBC.
   * @return {Uint8Array} the decrypted bytes
   *
   * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard
   * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29
   * @see https://tools.ietf.org/html/rfc2315
   */ const decrypt = function(encrypted, key, initVector) {
        // word-level access to the encrypted bytes
        const encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);
        const decipher = new AES(Array.prototype.slice.call(key)); // byte and word-level access for the decrypted output
        const decrypted = new Uint8Array(encrypted.byteLength);
        const decrypted32 = new Int32Array(decrypted.buffer); // temporary variables for working with the IV, encrypted, and
        // decrypted data
        let init0;
        let init1;
        let init2;
        let init3;
        let encrypted0;
        let encrypted1;
        let encrypted2;
        let encrypted3; // iteration variable
        let wordIx; // pull out the words of the IV to ensure we don't modify the
        // passed-in reference and easier access
        init0 = initVector[0];
        init1 = initVector[1];
        init2 = initVector[2];
        init3 = initVector[3]; // decrypt four word sequences, applying cipher-block chaining (CBC)
        // to each decrypted block
        for(wordIx = 0; wordIx < encrypted32.length; wordIx += 4){
            // convert big-endian (network order) words into little-endian
            // (javascript order)
            encrypted0 = ntoh(encrypted32[wordIx]);
            encrypted1 = ntoh(encrypted32[wordIx + 1]);
            encrypted2 = ntoh(encrypted32[wordIx + 2]);
            encrypted3 = ntoh(encrypted32[wordIx + 3]); // decrypt the block
            decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx); // XOR with the IV, and restore network byte-order to obtain the
            // plaintext
            decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);
            decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);
            decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);
            decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3); // setup the IV for the next round
            init0 = encrypted0;
            init1 = encrypted1;
            init2 = encrypted2;
            init3 = encrypted3;
        }
        return decrypted;
    };
    /**
   * The `Decrypter` class that manages decryption of AES
   * data through `AsyncStream` objects and the `decrypt`
   * function
   *
   * @param {Uint8Array} encrypted the encrypted bytes
   * @param {Uint32Array} key the bytes of the decryption key
   * @param {Uint32Array} initVector the initialization vector (IV) to
   * @param {Function} done the function to run when done
   * @class Decrypter
   */ class Decrypter {
        constructor(encrypted, key, initVector, done){
            const step = Decrypter.STEP;
            const encrypted32 = new Int32Array(encrypted.buffer);
            const decrypted = new Uint8Array(encrypted.byteLength);
            let i = 0;
            this.asyncStream_ = new AsyncStream(); // split up the encryption job and do the individual chunks asynchronously
            this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));
            for(i = step; i < encrypted32.length; i += step){
                initVector = new Uint32Array([
                    ntoh(encrypted32[i - 4]),
                    ntoh(encrypted32[i - 3]),
                    ntoh(encrypted32[i - 2]),
                    ntoh(encrypted32[i - 1])
                ]);
                this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));
            } // invoke the done() callback when everything is finished
            this.asyncStream_.push(function() {
                // remove pkcs#7 padding from the decrypted bytes
                done(null, unpad(decrypted));
            });
        }
        /**
     * a getter for step the maximum number of bytes to process at one time
     *
     * @return {number} the value of step 32000
     */ static get STEP() {
            // 4 * 8000;
            return 32000;
        }
        /**
     * @private
     */ decryptChunk_(encrypted, key, initVector, decrypted) {
            return function() {
                const bytes = decrypt(encrypted, key, initVector);
                decrypted.set(bytes, encrypted.byteOffset);
            };
        }
    }
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof $parcel$global !== "undefined" ? $parcel$global : typeof self !== "undefined" ? self : {};
    var win;
    if (typeof window !== "undefined") win = window;
    else if (typeof commonjsGlobal !== "undefined") win = commonjsGlobal;
    else if (typeof self !== "undefined") win = self;
    else win = {};
    var window_1 = win;
    var isArrayBufferView = function isArrayBufferView(obj) {
        if (ArrayBuffer.isView === "function") return ArrayBuffer.isView(obj);
        return obj && obj.buffer instanceof ArrayBuffer;
    };
    var BigInt = window_1.BigInt || Number;
    BigInt("0x1"), BigInt("0x100"), BigInt("0x10000"), BigInt("0x1000000"), BigInt("0x100000000"), BigInt("0x10000000000"), BigInt("0x1000000000000"), BigInt("0x100000000000000"), BigInt("0x10000000000000000");
    (function() {
        var a = new Uint16Array([
            0xFFCC
        ]);
        var b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
        if (b[0] === 0xFF) return "big";
        if (b[0] === 0xCC) return "little";
        return "unknown";
    })();
    /**
   * Creates an object for sending to a web worker modifying properties that are TypedArrays
   * into a new object with seperated properties for the buffer, byteOffset, and byteLength.
   *
   * @param {Object} message
   *        Object of properties and values to send to the web worker
   * @return {Object}
   *         Modified message with TypedArray values expanded
   * @function createTransferableMessage
   */ const createTransferableMessage = function(message) {
        const transferable = {};
        Object.keys(message).forEach((key)=>{
            const value = message[key];
            if (isArrayBufferView(value)) transferable[key] = {
                bytes: value.buffer,
                byteOffset: value.byteOffset,
                byteLength: value.byteLength
            };
            else transferable[key] = value;
        });
        return transferable;
    };
    /* global self */ /**
   * Our web worker interface so that things can talk to aes-decrypter
   * that will be running in a web worker. the scope is passed to this by
   * webworkify.
   */ self.onmessage = function(event) {
        const data = event.data;
        const encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);
        const key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);
        const iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);
        /* eslint-disable no-new, handle-callback-err */ new Decrypter(encrypted, key, iv, function(err, bytes) {
            self.postMessage(createTransferableMessage({
                source: data.source,
                decrypted: bytes
            }), [
                bytes.buffer
            ]);
        });
    /* eslint-enable */ };
}));
var $e88cd91ee18355c1$var$Decrypter = $e88cd91ee18355c1$var$factory($e88cd91ee18355c1$var$workerCode);
/* rollup-plugin-worker-factory end for worker!/home/runner/work/http-streaming/http-streaming/src/decrypter-worker.js */ /**
 * Convert the properties of an HLS track into an audioTrackKind.
 *
 * @private
 */ const $e88cd91ee18355c1$var$audioTrackKind_ = (properties)=>{
    let kind = properties.default ? "main" : "alternative";
    if (properties.characteristics && properties.characteristics.indexOf("public.accessibility.describes-video") >= 0) kind = "main-desc";
    return kind;
};
/**
 * Pause provided segment loader and playlist loader if active
 *
 * @param {SegmentLoader} segmentLoader
 *        SegmentLoader to pause
 * @param {Object} mediaType
 *        Active media type
 * @function stopLoaders
 */ const $e88cd91ee18355c1$var$stopLoaders = (segmentLoader, mediaType)=>{
    segmentLoader.abort();
    segmentLoader.pause();
    if (mediaType && mediaType.activePlaylistLoader) {
        mediaType.activePlaylistLoader.pause();
        mediaType.activePlaylistLoader = null;
    }
};
/**
 * Start loading provided segment loader and playlist loader
 *
 * @param {PlaylistLoader} playlistLoader
 *        PlaylistLoader to start loading
 * @param {Object} mediaType
 *        Active media type
 * @function startLoaders
 */ const $e88cd91ee18355c1$var$startLoaders = (playlistLoader, mediaType)=>{
    // Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the
    // playlist loader
    mediaType.activePlaylistLoader = playlistLoader;
    playlistLoader.load();
};
/**
 * Returns a function to be called when the media group changes. It performs a
 * non-destructive (preserve the buffer) resync of the SegmentLoader. This is because a
 * change of group is merely a rendition switch of the same content at another encoding,
 * rather than a change of content, such as switching audio from English to Spanish.
 *
 * @param {string} type
 *        MediaGroup type
 * @param {Object} settings
 *        Object containing required information for media groups
 * @return {Function}
 *         Handler for a non-destructive resync of SegmentLoader when the active media
 *         group changes.
 * @function onGroupChanged
 */ const $e88cd91ee18355c1$var$onGroupChanged = (type, settings)=>()=>{
        const { segmentLoaders: { [type]: segmentLoader, main: mainSegmentLoader }, mediaTypes: { [type]: mediaType } } = settings;
        const activeTrack = mediaType.activeTrack();
        const activeGroup = mediaType.getActiveGroup();
        const previousActiveLoader = mediaType.activePlaylistLoader;
        const lastGroup = mediaType.lastGroup_; // the group did not change do nothing
        if (activeGroup && lastGroup && activeGroup.id === lastGroup.id) return;
        mediaType.lastGroup_ = activeGroup;
        mediaType.lastTrack_ = activeTrack;
        $e88cd91ee18355c1$var$stopLoaders(segmentLoader, mediaType);
        if (!activeGroup || activeGroup.isMainPlaylist) // there is no group active or active group is a main playlist and won't change
        return;
        if (!activeGroup.playlistLoader) {
            if (previousActiveLoader) // The previous group had a playlist loader but the new active group does not
            // this means we are switching from demuxed to muxed audio. In this case we want to
            // do a destructive reset of the main segment loader and not restart the audio
            // loaders.
            mainSegmentLoader.resetEverything();
            return;
        } // Non-destructive resync
        segmentLoader.resyncLoader();
        $e88cd91ee18355c1$var$startLoaders(activeGroup.playlistLoader, mediaType);
    };
const $e88cd91ee18355c1$var$onGroupChanging = (type, settings)=>()=>{
        const { segmentLoaders: { [type]: segmentLoader }, mediaTypes: { [type]: mediaType } } = settings;
        mediaType.lastGroup_ = null;
        segmentLoader.abort();
        segmentLoader.pause();
    };
/**
 * Returns a function to be called when the media track changes. It performs a
 * destructive reset of the SegmentLoader to ensure we start loading as close to
 * currentTime as possible.
 *
 * @param {string} type
 *        MediaGroup type
 * @param {Object} settings
 *        Object containing required information for media groups
 * @return {Function}
 *         Handler for a destructive reset of SegmentLoader when the active media
 *         track changes.
 * @function onTrackChanged
 */ const $e88cd91ee18355c1$var$onTrackChanged = (type, settings)=>()=>{
        const { mainPlaylistLoader: mainPlaylistLoader, segmentLoaders: { [type]: segmentLoader, main: mainSegmentLoader }, mediaTypes: { [type]: mediaType } } = settings;
        const activeTrack = mediaType.activeTrack();
        const activeGroup = mediaType.getActiveGroup();
        const previousActiveLoader = mediaType.activePlaylistLoader;
        const lastTrack = mediaType.lastTrack_; // track did not change, do nothing
        if (lastTrack && activeTrack && lastTrack.id === activeTrack.id) return;
        mediaType.lastGroup_ = activeGroup;
        mediaType.lastTrack_ = activeTrack;
        $e88cd91ee18355c1$var$stopLoaders(segmentLoader, mediaType);
        if (!activeGroup) // there is no group active so we do not want to restart loaders
        return;
        if (activeGroup.isMainPlaylist) {
            // track did not change, do nothing
            if (!activeTrack || !lastTrack || activeTrack.id === lastTrack.id) return;
            const pc = settings.vhs.playlistController_;
            const newPlaylist = pc.selectPlaylist(); // media will not change do nothing
            if (pc.media() === newPlaylist) return;
            mediaType.logger_(`track change. Switching main audio from ${lastTrack.id} to ${activeTrack.id}`);
            mainPlaylistLoader.pause();
            mainSegmentLoader.resetEverything();
            pc.fastQualityChange_(newPlaylist);
            return;
        }
        if (type === "AUDIO") {
            if (!activeGroup.playlistLoader) {
                // when switching from demuxed audio/video to muxed audio/video (noted by no
                // playlist loader for the audio group), we want to do a destructive reset of the
                // main segment loader and not restart the audio loaders
                mainSegmentLoader.setAudio(true); // don't have to worry about disabling the audio of the audio segment loader since
                // it should be stopped
                mainSegmentLoader.resetEverything();
                return;
            } // although the segment loader is an audio segment loader, call the setAudio
            // function to ensure it is prepared to re-append the init segment (or handle other
            // config changes)
            segmentLoader.setAudio(true);
            mainSegmentLoader.setAudio(false);
        }
        if (previousActiveLoader === activeGroup.playlistLoader) {
            // Nothing has actually changed. This can happen because track change events can fire
            // multiple times for a "single" change. One for enabling the new active track, and
            // one for disabling the track that was active
            $e88cd91ee18355c1$var$startLoaders(activeGroup.playlistLoader, mediaType);
            return;
        }
        if (segmentLoader.track) // For WebVTT, set the new text track in the segmentloader
        segmentLoader.track(activeTrack);
         // destructive reset
        segmentLoader.resetEverything();
        $e88cd91ee18355c1$var$startLoaders(activeGroup.playlistLoader, mediaType);
    };
const $e88cd91ee18355c1$var$onError = {
    /**
   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters
   * an error.
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Error handler. Logs warning (or error if the playlist is excluded) to
   *         console and switches back to default audio track.
   * @function onError.AUDIO
   */ AUDIO: (type, settings)=>()=>{
            const { mediaTypes: { [type]: mediaType }, excludePlaylist: excludePlaylist } = settings; // switch back to default audio track
            const activeTrack = mediaType.activeTrack();
            const activeGroup = mediaType.activeGroup();
            const id = (activeGroup.filter((group)=>group.default)[0] || activeGroup[0]).id;
            const defaultTrack = mediaType.tracks[id];
            if (activeTrack === defaultTrack) {
                // Default track encountered an error. All we can do now is exclude the current
                // rendition and hope another will switch audio groups
                excludePlaylist({
                    error: {
                        message: "Problem encountered loading the default audio track."
                    }
                });
                return;
            }
            $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn("Problem encountered loading the alternate audio track.Switching back to default.");
            for(const trackId in mediaType.tracks)mediaType.tracks[trackId].enabled = mediaType.tracks[trackId] === defaultTrack;
            mediaType.onTrackChanged();
        },
    /**
   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters
   * an error.
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Error handler. Logs warning to console and disables the active subtitle track
   * @function onError.SUBTITLES
   */ SUBTITLES: (type, settings)=>()=>{
            const { mediaTypes: { [type]: mediaType } } = settings;
            $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn("Problem encountered loading the subtitle track.Disabling subtitle track.");
            const track = mediaType.activeTrack();
            if (track) track.mode = "disabled";
            mediaType.onTrackChanged();
        }
};
const $e88cd91ee18355c1$var$setupListeners = {
    /**
   * Setup event listeners for audio playlist loader
   *
   * @param {string} type
   *        MediaGroup type
   * @param {PlaylistLoader|null} playlistLoader
   *        PlaylistLoader to register listeners on
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function setupListeners.AUDIO
   */ AUDIO: (type, playlistLoader, settings)=>{
        if (!playlistLoader) // no playlist loader means audio will be muxed with the video
        return;
        const { tech: tech, requestOptions: requestOptions, segmentLoaders: { [type]: segmentLoader } } = settings;
        playlistLoader.on("loadedmetadata", ()=>{
            const media = playlistLoader.media();
            segmentLoader.playlist(media, requestOptions); // if the video is already playing, or if this isn't a live video and preload
            // permits, start downloading segments
            if (!tech.paused() || media.endList && tech.preload() !== "none") segmentLoader.load();
        });
        playlistLoader.on("loadedplaylist", ()=>{
            segmentLoader.playlist(playlistLoader.media(), requestOptions); // If the player isn't paused, ensure that the segment loader is running
            if (!tech.paused()) segmentLoader.load();
        });
        playlistLoader.on("error", $e88cd91ee18355c1$var$onError[type](type, settings));
    },
    /**
   * Setup event listeners for subtitle playlist loader
   *
   * @param {string} type
   *        MediaGroup type
   * @param {PlaylistLoader|null} playlistLoader
   *        PlaylistLoader to register listeners on
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function setupListeners.SUBTITLES
   */ SUBTITLES: (type, playlistLoader, settings)=>{
        const { tech: tech, requestOptions: requestOptions, segmentLoaders: { [type]: segmentLoader }, mediaTypes: { [type]: mediaType } } = settings;
        playlistLoader.on("loadedmetadata", ()=>{
            const media = playlistLoader.media();
            segmentLoader.playlist(media, requestOptions);
            segmentLoader.track(mediaType.activeTrack()); // if the video is already playing, or if this isn't a live video and preload
            // permits, start downloading segments
            if (!tech.paused() || media.endList && tech.preload() !== "none") segmentLoader.load();
        });
        playlistLoader.on("loadedplaylist", ()=>{
            segmentLoader.playlist(playlistLoader.media(), requestOptions); // If the player isn't paused, ensure that the segment loader is running
            if (!tech.paused()) segmentLoader.load();
        });
        playlistLoader.on("error", $e88cd91ee18355c1$var$onError[type](type, settings));
    }
};
const $e88cd91ee18355c1$var$initialize = {
    /**
   * Setup PlaylistLoaders and AudioTracks for the audio groups
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function initialize.AUDIO
   */ "AUDIO": (type, settings)=>{
        const { vhs: vhs, sourceType: sourceType, segmentLoaders: { [type]: segmentLoader }, requestOptions: requestOptions, main: { mediaGroups: mediaGroups }, mediaTypes: { [type]: { groups: groups, tracks: tracks, logger_: logger_ } }, mainPlaylistLoader: mainPlaylistLoader } = settings;
        const audioOnlyMain = $e88cd91ee18355c1$var$isAudioOnly(mainPlaylistLoader.main); // force a default if we have none
        if (!mediaGroups[type] || Object.keys(mediaGroups[type]).length === 0) {
            mediaGroups[type] = {
                main: {
                    default: {
                        default: true
                    }
                }
            };
            if (audioOnlyMain) mediaGroups[type].main.default.playlists = mainPlaylistLoader.main.playlists;
        }
        for(const groupId in mediaGroups[type]){
            if (!groups[groupId]) groups[groupId] = [];
            for(const variantLabel in mediaGroups[type][groupId]){
                let properties = mediaGroups[type][groupId][variantLabel];
                let playlistLoader;
                if (audioOnlyMain) {
                    logger_(`AUDIO group '${groupId}' label '${variantLabel}' is a main playlist`);
                    properties.isMainPlaylist = true;
                    playlistLoader = null; // if vhs-json was provided as the source, and the media playlist was resolved,
                // use the resolved media playlist object
                } else if (sourceType === "vhs-json" && properties.playlists) playlistLoader = new $e88cd91ee18355c1$var$PlaylistLoader(properties.playlists[0], vhs, requestOptions);
                else if (properties.resolvedUri) playlistLoader = new $e88cd91ee18355c1$var$PlaylistLoader(properties.resolvedUri, vhs, requestOptions); // TODO: dash isn't the only type with properties.playlists
                else if (properties.playlists && sourceType === "dash") playlistLoader = new $e88cd91ee18355c1$var$DashPlaylistLoader(properties.playlists[0], vhs, requestOptions, mainPlaylistLoader);
                else // no resolvedUri means the audio is muxed with the video when using this
                // audio track
                playlistLoader = null;
                properties = $e88cd91ee18355c1$var$merge({
                    id: variantLabel,
                    playlistLoader: playlistLoader
                }, properties);
                $e88cd91ee18355c1$var$setupListeners[type](type, properties.playlistLoader, settings);
                groups[groupId].push(properties);
                if (typeof tracks[variantLabel] === "undefined") {
                    const track = new $e88cd91ee18355c1$export$2e2bcd8739ae039.AudioTrack({
                        id: variantLabel,
                        kind: $e88cd91ee18355c1$var$audioTrackKind_(properties),
                        enabled: false,
                        language: properties.language,
                        default: properties.default,
                        label: variantLabel
                    });
                    tracks[variantLabel] = track;
                }
            }
        } // setup single error event handler for the segment loader
        segmentLoader.on("error", $e88cd91ee18355c1$var$onError[type](type, settings));
    },
    /**
   * Setup PlaylistLoaders and TextTracks for the subtitle groups
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function initialize.SUBTITLES
   */ "SUBTITLES": (type, settings)=>{
        const { tech: tech, vhs: vhs, sourceType: sourceType, segmentLoaders: { [type]: segmentLoader }, requestOptions: requestOptions, main: { mediaGroups: mediaGroups }, mediaTypes: { [type]: { groups: groups, tracks: tracks } }, mainPlaylistLoader: mainPlaylistLoader } = settings;
        for(const groupId in mediaGroups[type]){
            if (!groups[groupId]) groups[groupId] = [];
            for(const variantLabel in mediaGroups[type][groupId]){
                if (!vhs.options_.useForcedSubtitles && mediaGroups[type][groupId][variantLabel].forced) continue;
                let properties = mediaGroups[type][groupId][variantLabel];
                let playlistLoader;
                if (sourceType === "hls") playlistLoader = new $e88cd91ee18355c1$var$PlaylistLoader(properties.resolvedUri, vhs, requestOptions);
                else if (sourceType === "dash") {
                    const playlists = properties.playlists.filter((p)=>p.excludeUntil !== Infinity);
                    if (!playlists.length) return;
                    playlistLoader = new $e88cd91ee18355c1$var$DashPlaylistLoader(properties.playlists[0], vhs, requestOptions, mainPlaylistLoader);
                } else if (sourceType === "vhs-json") playlistLoader = new $e88cd91ee18355c1$var$PlaylistLoader(// if the vhs-json object included the media playlist, use the media playlist
                // as provided, otherwise use the resolved URI to load the playlist
                properties.playlists ? properties.playlists[0] : properties.resolvedUri, vhs, requestOptions);
                properties = $e88cd91ee18355c1$var$merge({
                    id: variantLabel,
                    playlistLoader: playlistLoader
                }, properties);
                $e88cd91ee18355c1$var$setupListeners[type](type, properties.playlistLoader, settings);
                groups[groupId].push(properties);
                if (typeof tracks[variantLabel] === "undefined") {
                    const track = tech.addRemoteTextTrack({
                        id: variantLabel,
                        kind: "subtitles",
                        default: properties.default && properties.autoselect,
                        language: properties.language,
                        label: variantLabel
                    }, false).track;
                    tracks[variantLabel] = track;
                }
            }
        } // setup single error event handler for the segment loader
        segmentLoader.on("error", $e88cd91ee18355c1$var$onError[type](type, settings));
    },
    /**
   * Setup TextTracks for the closed-caption groups
   *
   * @param {String} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function initialize['CLOSED-CAPTIONS']
   */ "CLOSED-CAPTIONS": (type, settings)=>{
        const { tech: tech, main: { mediaGroups: mediaGroups }, mediaTypes: { [type]: { groups: groups, tracks: tracks } } } = settings;
        for(const groupId in mediaGroups[type]){
            if (!groups[groupId]) groups[groupId] = [];
            for(const variantLabel in mediaGroups[type][groupId]){
                const properties = mediaGroups[type][groupId][variantLabel]; // Look for either 608 (CCn) or 708 (SERVICEn) caption services
                if (!/^(?:CC|SERVICE)/.test(properties.instreamId)) continue;
                const captionServices = tech.options_.vhs && tech.options_.vhs.captionServices || {};
                let newProps = {
                    label: variantLabel,
                    language: properties.language,
                    instreamId: properties.instreamId,
                    default: properties.default && properties.autoselect
                };
                if (captionServices[newProps.instreamId]) newProps = $e88cd91ee18355c1$var$merge(newProps, captionServices[newProps.instreamId]);
                if (newProps.default === undefined) delete newProps.default;
                 // No PlaylistLoader is required for Closed-Captions because the captions are
                // embedded within the video stream
                groups[groupId].push($e88cd91ee18355c1$var$merge({
                    id: variantLabel
                }, properties));
                if (typeof tracks[variantLabel] === "undefined") {
                    const track = tech.addRemoteTextTrack({
                        id: newProps.instreamId,
                        kind: "captions",
                        default: newProps.default,
                        language: newProps.language,
                        label: newProps.label
                    }, false).track;
                    tracks[variantLabel] = track;
                }
            }
        }
    }
};
const $e88cd91ee18355c1$var$groupMatch = (list, media)=>{
    for(let i = 0; i < list.length; i++){
        if ($e88cd91ee18355c1$var$playlistMatch(media, list[i])) return true;
        if (list[i].playlists && $e88cd91ee18355c1$var$groupMatch(list[i].playlists, media)) return true;
    }
    return false;
};
/**
 * Returns a function used to get the active group of the provided type
 *
 * @param {string} type
 *        MediaGroup type
 * @param {Object} settings
 *        Object containing required information for media groups
 * @return {Function}
 *         Function that returns the active media group for the provided type. Takes an
 *         optional parameter {TextTrack} track. If no track is provided, a list of all
 *         variants in the group, otherwise the variant corresponding to the provided
 *         track is returned.
 * @function activeGroup
 */ const $e88cd91ee18355c1$var$activeGroup = (type, settings)=>(track)=>{
        const { mainPlaylistLoader: mainPlaylistLoader, mediaTypes: { [type]: { groups: groups } } } = settings;
        const media = mainPlaylistLoader.media();
        if (!media) return null;
        let variants = null; // set to variants to main media active group
        if (media.attributes[type]) variants = groups[media.attributes[type]];
        const groupKeys = Object.keys(groups);
        if (!variants) {
            // find the mainPlaylistLoader media
            // that is in a media group if we are dealing
            // with audio only
            if (type === "AUDIO" && groupKeys.length > 1 && $e88cd91ee18355c1$var$isAudioOnly(settings.main)) for(let i = 0; i < groupKeys.length; i++){
                const groupPropertyList = groups[groupKeys[i]];
                if ($e88cd91ee18355c1$var$groupMatch(groupPropertyList, media)) {
                    variants = groupPropertyList;
                    break;
                }
            } // use the main group if it exists
            else if (groups.main) variants = groups.main; // only one group, use that one
            else if (groupKeys.length === 1) variants = groups[groupKeys[0]];
        }
        if (typeof track === "undefined") return variants;
        if (track === null || !variants) // An active track was specified so a corresponding group is expected. track === null
        // means no track is currently active so there is no corresponding group
        return null;
        return variants.filter((props)=>props.id === track.id)[0] || null;
    };
const $e88cd91ee18355c1$var$activeTrack = {
    /**
   * Returns a function used to get the active track of type provided
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Function that returns the active media track for the provided type. Returns
   *         null if no track is active
   * @function activeTrack.AUDIO
   */ AUDIO: (type, settings)=>()=>{
            const { mediaTypes: { [type]: { tracks: tracks } } } = settings;
            for(const id in tracks){
                if (tracks[id].enabled) return tracks[id];
            }
            return null;
        },
    /**
   * Returns a function used to get the active track of type provided
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Function that returns the active media track for the provided type. Returns
   *         null if no track is active
   * @function activeTrack.SUBTITLES
   */ SUBTITLES: (type, settings)=>()=>{
            const { mediaTypes: { [type]: { tracks: tracks } } } = settings;
            for(const id in tracks){
                if (tracks[id].mode === "showing" || tracks[id].mode === "hidden") return tracks[id];
            }
            return null;
        }
};
const $e88cd91ee18355c1$var$getActiveGroup = (type, { mediaTypes: mediaTypes })=>()=>{
        const activeTrack_ = mediaTypes[type].activeTrack();
        if (!activeTrack_) return null;
        return mediaTypes[type].activeGroup(activeTrack_);
    };
/**
 * Setup PlaylistLoaders and Tracks for media groups (Audio, Subtitles,
 * Closed-Captions) specified in the main manifest.
 *
 * @param {Object} settings
 *        Object containing required information for setting up the media groups
 * @param {Tech} settings.tech
 *        The tech of the player
 * @param {Object} settings.requestOptions
 *        XHR request options used by the segment loaders
 * @param {PlaylistLoader} settings.mainPlaylistLoader
 *        PlaylistLoader for the main source
 * @param {VhsHandler} settings.vhs
 *        VHS SourceHandler
 * @param {Object} settings.main
 *        The parsed main manifest
 * @param {Object} settings.mediaTypes
 *        Object to store the loaders, tracks, and utility methods for each media type
 * @param {Function} settings.excludePlaylist
 *        Excludes the current rendition and forces a rendition switch.
 * @function setupMediaGroups
 */ const $e88cd91ee18355c1$var$setupMediaGroups = (settings)=>{
    [
        "AUDIO",
        "SUBTITLES",
        "CLOSED-CAPTIONS"
    ].forEach((type)=>{
        $e88cd91ee18355c1$var$initialize[type](type, settings);
    });
    const { mediaTypes: mediaTypes, mainPlaylistLoader: mainPlaylistLoader, tech: tech, vhs: vhs, segmentLoaders: { ["AUDIO"]: audioSegmentLoader, main: mainSegmentLoader } } = settings; // setup active group and track getters and change event handlers
    [
        "AUDIO",
        "SUBTITLES"
    ].forEach((type)=>{
        mediaTypes[type].activeGroup = $e88cd91ee18355c1$var$activeGroup(type, settings);
        mediaTypes[type].activeTrack = $e88cd91ee18355c1$var$activeTrack[type](type, settings);
        mediaTypes[type].onGroupChanged = $e88cd91ee18355c1$var$onGroupChanged(type, settings);
        mediaTypes[type].onGroupChanging = $e88cd91ee18355c1$var$onGroupChanging(type, settings);
        mediaTypes[type].onTrackChanged = $e88cd91ee18355c1$var$onTrackChanged(type, settings);
        mediaTypes[type].getActiveGroup = $e88cd91ee18355c1$var$getActiveGroup(type, settings);
    }); // DO NOT enable the default subtitle or caption track.
    // DO enable the default audio track
    const audioGroup = mediaTypes.AUDIO.activeGroup();
    if (audioGroup) {
        const groupId = (audioGroup.filter((group)=>group.default)[0] || audioGroup[0]).id;
        mediaTypes.AUDIO.tracks[groupId].enabled = true;
        mediaTypes.AUDIO.onGroupChanged();
        mediaTypes.AUDIO.onTrackChanged();
        const activeAudioGroup = mediaTypes.AUDIO.getActiveGroup(); // a similar check for handling setAudio on each loader is run again each time the
        // track is changed, but needs to be handled here since the track may not be considered
        // changed on the first call to onTrackChanged
        if (!activeAudioGroup.playlistLoader) // either audio is muxed with video or the stream is audio only
        mainSegmentLoader.setAudio(true);
        else {
            // audio is demuxed
            mainSegmentLoader.setAudio(false);
            audioSegmentLoader.setAudio(true);
        }
    }
    mainPlaylistLoader.on("mediachange", ()=>{
        [
            "AUDIO",
            "SUBTITLES"
        ].forEach((type)=>mediaTypes[type].onGroupChanged());
    });
    mainPlaylistLoader.on("mediachanging", ()=>{
        [
            "AUDIO",
            "SUBTITLES"
        ].forEach((type)=>mediaTypes[type].onGroupChanging());
    }); // custom audio track change event handler for usage event
    const onAudioTrackChanged = ()=>{
        mediaTypes.AUDIO.onTrackChanged();
        tech.trigger({
            type: "usage",
            name: "vhs-audio-change"
        });
    };
    tech.audioTracks().addEventListener("change", onAudioTrackChanged);
    tech.remoteTextTracks().addEventListener("change", mediaTypes.SUBTITLES.onTrackChanged);
    vhs.on("dispose", ()=>{
        tech.audioTracks().removeEventListener("change", onAudioTrackChanged);
        tech.remoteTextTracks().removeEventListener("change", mediaTypes.SUBTITLES.onTrackChanged);
    }); // clear existing audio tracks and add the ones we just created
    tech.clearTracks("audio");
    for(const id in mediaTypes.AUDIO.tracks)tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id]);
};
/**
 * Creates skeleton object used to store the loaders, tracks, and utility methods for each
 * media type
 *
 * @return {Object}
 *         Object to store the loaders, tracks, and utility methods for each media type
 * @function createMediaTypes
 */ const $e88cd91ee18355c1$var$createMediaTypes = ()=>{
    const mediaTypes = {};
    [
        "AUDIO",
        "SUBTITLES",
        "CLOSED-CAPTIONS"
    ].forEach((type)=>{
        mediaTypes[type] = {
            groups: {},
            tracks: {},
            activePlaylistLoader: null,
            activeGroup: $e88cd91ee18355c1$var$noop,
            activeTrack: $e88cd91ee18355c1$var$noop,
            getActiveGroup: $e88cd91ee18355c1$var$noop,
            onGroupChanged: $e88cd91ee18355c1$var$noop,
            onTrackChanged: $e88cd91ee18355c1$var$noop,
            lastTrack_: null,
            logger_: $e88cd91ee18355c1$var$logger(`MediaGroups[${type}]`)
        };
    });
    return mediaTypes;
};
/**
 * A utility class for setting properties and maintaining the state of the content steering manifest.
 *
 * Content Steering manifest format:
 * VERSION: number (required) currently only version 1 is supported.
 * TTL: number in seconds (optional) until the next content steering manifest reload.
 * RELOAD-URI: string (optional) uri to fetch the next content steering manifest.
 * SERVICE-LOCATION-PRIORITY or PATHWAY-PRIORITY a non empty array of unique string values.
 * PATHWAY-CLONES: array (optional) (HLS only) pathway clone objects to copy from other playlists.
 */ class $e88cd91ee18355c1$var$SteeringManifest {
    constructor(){
        this.priority_ = [];
        this.pathwayClones_ = new Map();
    }
    set version(number) {
        // Only version 1 is currently supported for both DASH and HLS.
        if (number === 1) this.version_ = number;
    }
    set ttl(seconds) {
        // TTL = time-to-live, default = 300 seconds.
        this.ttl_ = seconds || 300;
    }
    set reloadUri(uri) {
        if (uri) // reload URI can be relative to the previous reloadUri.
        this.reloadUri_ = $e88cd91ee18355c1$var$resolveUrl(this.reloadUri_, uri);
    }
    set priority(array) {
        // priority must be non-empty and unique values.
        if (array && array.length) this.priority_ = array;
    }
    set pathwayClones(array) {
        // pathwayClones must be non-empty.
        if (array && array.length) this.pathwayClones_ = new Map(array.map((clone)=>[
                clone.ID,
                clone
            ]));
    }
    get version() {
        return this.version_;
    }
    get ttl() {
        return this.ttl_;
    }
    get reloadUri() {
        return this.reloadUri_;
    }
    get priority() {
        return this.priority_;
    }
    get pathwayClones() {
        return this.pathwayClones_;
    }
}
/**
 * This class represents a content steering manifest and associated state. See both HLS and DASH specifications.
 * HLS: https://developer.apple.com/streaming/HLSContentSteeringSpecification.pdf and
 * https://datatracker.ietf.org/doc/draft-pantos-hls-rfc8216bis/ section 4.4.6.6.
 * DASH: https://dashif.org/docs/DASH-IF-CTS-00XX-Content-Steering-Community-Review.pdf
 *
 * @param {function} xhr for making a network request from the browser.
 * @param {function} bandwidth for fetching the current bandwidth from the main segment loader.
 */ class $e88cd91ee18355c1$var$ContentSteeringController extends $e88cd91ee18355c1$export$2e2bcd8739ae039.EventTarget {
    constructor(xhr, bandwidth){
        super();
        this.currentPathway = null;
        this.defaultPathway = null;
        this.queryBeforeStart = false;
        this.availablePathways_ = new Set();
        this.steeringManifest = new $e88cd91ee18355c1$var$SteeringManifest();
        this.proxyServerUrl_ = null;
        this.manifestType_ = null;
        this.ttlTimeout_ = null;
        this.request_ = null;
        this.currentPathwayClones = new Map();
        this.nextPathwayClones = new Map();
        this.excludedSteeringManifestURLs = new Set();
        this.logger_ = $e88cd91ee18355c1$var$logger("Content Steering");
        this.xhr_ = xhr;
        this.getBandwidth_ = bandwidth;
    }
    /**
   * Assigns the content steering tag properties to the steering controller
   *
   * @param {string} baseUrl the baseURL from the main manifest for resolving the steering manifest url
   * @param {Object} steeringTag the content steering tag from the main manifest
   */ assignTagProperties(baseUrl, steeringTag) {
        this.manifestType_ = steeringTag.serverUri ? "HLS" : "DASH"; // serverUri is HLS serverURL is DASH
        const steeringUri = steeringTag.serverUri || steeringTag.serverURL;
        if (!steeringUri) {
            this.logger_(`steering manifest URL is ${steeringUri}, cannot request steering manifest.`);
            this.trigger("error");
            return;
        } // Content steering manifests can be encoded as a data URI. We can decode, parse and return early if that's the case.
        if (steeringUri.startsWith("data:")) {
            this.decodeDataUriManifest_(steeringUri.substring(steeringUri.indexOf(",") + 1));
            return;
        } // reloadUri is the resolution of the main manifest URL and steering URL.
        this.steeringManifest.reloadUri = $e88cd91ee18355c1$var$resolveUrl(baseUrl, steeringUri); // pathwayId is HLS defaultServiceLocation is DASH
        this.defaultPathway = steeringTag.pathwayId || steeringTag.defaultServiceLocation; // currently only DASH supports the following properties on <ContentSteering> tags.
        this.queryBeforeStart = steeringTag.queryBeforeStart;
        this.proxyServerUrl_ = steeringTag.proxyServerURL; // trigger a steering event if we have a pathway from the content steering tag.
        // this tells VHS which segment pathway to start with.
        // If queryBeforeStart is true we need to wait for the steering manifest response.
        if (this.defaultPathway && !this.queryBeforeStart) this.trigger("content-steering");
    }
    /**
   * Requests the content steering manifest and parse the response. This should only be called after
   * assignTagProperties was called with a content steering tag.
   *
   * @param {string} initialUri The optional uri to make the request with.
   *    If set, the request should be made with exactly what is passed in this variable.
   *    This scenario should only happen once on initalization.
   */ requestSteeringManifest(initial) {
        const reloadUri = this.steeringManifest.reloadUri;
        if (!reloadUri) return;
         // We currently don't support passing MPD query parameters directly to the content steering URL as this requires
        // ExtUrlQueryInfo tag support. See the DASH content steering spec section 8.1.
        // This request URI accounts for manifest URIs that have been excluded.
        const uri = initial ? reloadUri : this.getRequestURI(reloadUri); // If there are no valid manifest URIs, we should stop content steering.
        if (!uri) {
            this.logger_("No valid content steering manifest URIs. Stopping content steering.");
            this.trigger("error");
            this.dispose();
            return;
        }
        this.request_ = this.xhr_({
            uri: uri
        }, (error, errorInfo)=>{
            if (error) {
                // If the client receives HTTP 410 Gone in response to a manifest request,
                // it MUST NOT issue another request for that URI for the remainder of the
                // playback session. It MAY continue to use the most-recently obtained set
                // of Pathways.
                if (errorInfo.status === 410) {
                    this.logger_(`manifest request 410 ${error}.`);
                    this.logger_(`There will be no more content steering requests to ${uri} this session.`);
                    this.excludedSteeringManifestURLs.add(uri);
                    return;
                } // If the client receives HTTP 429 Too Many Requests with a Retry-After
                // header in response to a manifest request, it SHOULD wait until the time
                // specified by the Retry-After header to reissue the request.
                if (errorInfo.status === 429) {
                    const retrySeconds = errorInfo.responseHeaders["retry-after"];
                    this.logger_(`manifest request 429 ${error}.`);
                    this.logger_(`content steering will retry in ${retrySeconds} seconds.`);
                    this.startTTLTimeout_(parseInt(retrySeconds, 10));
                    return;
                } // If the Steering Manifest cannot be loaded and parsed correctly, the
                // client SHOULD continue to use the previous values and attempt to reload
                // it after waiting for the previously-specified TTL (or 5 minutes if
                // none).
                this.logger_(`manifest failed to load ${error}.`);
                this.startTTLTimeout_();
                return;
            }
            const steeringManifestJson = JSON.parse(this.request_.responseText);
            this.assignSteeringProperties_(steeringManifestJson);
            this.startTTLTimeout_();
        });
    }
    /**
   * Set the proxy server URL and add the steering manifest url as a URI encoded parameter.
   *
   * @param {string} steeringUrl the steering manifest url
   * @return the steering manifest url to a proxy server with all parameters set
   */ setProxyServerUrl_(steeringUrl) {
        const steeringUrlObject = new (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).URL(steeringUrl);
        const proxyServerUrlObject = new (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).URL(this.proxyServerUrl_);
        proxyServerUrlObject.searchParams.set("url", encodeURI(steeringUrlObject.toString()));
        return this.setSteeringParams_(proxyServerUrlObject.toString());
    }
    /**
   * Decodes and parses the data uri encoded steering manifest
   *
   * @param {string} dataUri the data uri to be decoded and parsed.
   */ decodeDataUriManifest_(dataUri) {
        const steeringManifestJson = JSON.parse((0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).atob(dataUri));
        this.assignSteeringProperties_(steeringManifestJson);
    }
    /**
   * Set the HLS or DASH content steering manifest request query parameters. For example:
   * _HLS_pathway="<CURRENT-PATHWAY-ID>" and _HLS_throughput=<THROUGHPUT>
   * _DASH_pathway and _DASH_throughput
   *
   * @param {string} uri to add content steering server parameters to.
   * @return a new uri as a string with the added steering query parameters.
   */ setSteeringParams_(url) {
        const urlObject = new (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).URL(url);
        const path = this.getPathway();
        const networkThroughput = this.getBandwidth_();
        if (path) {
            const pathwayKey = `_${this.manifestType_}_pathway`;
            urlObject.searchParams.set(pathwayKey, path);
        }
        if (networkThroughput) {
            const throughputKey = `_${this.manifestType_}_throughput`;
            urlObject.searchParams.set(throughputKey, networkThroughput);
        }
        return urlObject.toString();
    }
    /**
   * Assigns the current steering manifest properties and to the SteeringManifest object
   *
   * @param {Object} steeringJson the raw JSON steering manifest
   */ assignSteeringProperties_(steeringJson) {
        this.steeringManifest.version = steeringJson.VERSION;
        if (!this.steeringManifest.version) {
            this.logger_(`manifest version is ${steeringJson.VERSION}, which is not supported.`);
            this.trigger("error");
            return;
        }
        this.steeringManifest.ttl = steeringJson.TTL;
        this.steeringManifest.reloadUri = steeringJson["RELOAD-URI"]; // HLS = PATHWAY-PRIORITY required. DASH = SERVICE-LOCATION-PRIORITY optional
        this.steeringManifest.priority = steeringJson["PATHWAY-PRIORITY"] || steeringJson["SERVICE-LOCATION-PRIORITY"]; // Pathway clones to be created/updated in HLS.
        // See section 7.2 https://datatracker.ietf.org/doc/draft-pantos-hls-rfc8216bis/
        this.steeringManifest.pathwayClones = steeringJson["PATHWAY-CLONES"];
        this.nextPathwayClones = this.steeringManifest.pathwayClones; // 1. apply first pathway from the array.
        // 2. if first pathway doesn't exist in manifest, try next pathway.
        //    a. if all pathways are exhausted, ignore the steering manifest priority.
        // 3. if segments fail from an established pathway, try all variants/renditions, then exclude the failed pathway.
        //    a. exclude a pathway for a minimum of the last TTL duration. Meaning, from the next steering response,
        //       the excluded pathway will be ignored.
        //       See excludePathway usage in excludePlaylist().
        // If there are no available pathways, we need to stop content steering.
        if (!this.availablePathways_.size) {
            this.logger_("There are no available pathways for content steering. Ending content steering.");
            this.trigger("error");
            this.dispose();
        }
        const chooseNextPathway = (pathwaysByPriority)=>{
            for (const path of pathwaysByPriority){
                if (this.availablePathways_.has(path)) return path;
            } // If no pathway matches, ignore the manifest and choose the first available.
            return [
                ...this.availablePathways_
            ][0];
        };
        const nextPathway = chooseNextPathway(this.steeringManifest.priority);
        if (this.currentPathway !== nextPathway) {
            this.currentPathway = nextPathway;
            this.trigger("content-steering");
        }
    }
    /**
   * Returns the pathway to use for steering decisions
   *
   * @return {string} returns the current pathway or the default
   */ getPathway() {
        return this.currentPathway || this.defaultPathway;
    }
    /**
   * Chooses the manifest request URI based on proxy URIs and server URLs.
   * Also accounts for exclusion on certain manifest URIs.
   *
   * @param {string} reloadUri the base uri before parameters
   *
   * @return {string} the final URI for the request to the manifest server.
   */ getRequestURI(reloadUri) {
        if (!reloadUri) return null;
        const isExcluded = (uri)=>this.excludedSteeringManifestURLs.has(uri);
        if (this.proxyServerUrl_) {
            const proxyURI = this.setProxyServerUrl_(reloadUri);
            if (!isExcluded(proxyURI)) return proxyURI;
        }
        const steeringURI = this.setSteeringParams_(reloadUri);
        if (!isExcluded(steeringURI)) return steeringURI;
         // Return nothing if all valid manifest URIs are excluded.
        return null;
    }
    /**
   * Start the timeout for re-requesting the steering manifest at the TTL interval.
   *
   * @param {number} ttl time in seconds of the timeout. Defaults to the
   *        ttl interval in the steering manifest
   */ startTTLTimeout_(ttl = this.steeringManifest.ttl) {
        // 300 (5 minutes) is the default value.
        const ttlMS = ttl * 1000;
        this.ttlTimeout_ = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(()=>{
            this.requestSteeringManifest();
        }, ttlMS);
    }
    /**
   * Clear the TTL timeout if necessary.
   */ clearTTLTimeout_() {
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.ttlTimeout_);
        this.ttlTimeout_ = null;
    }
    /**
   * aborts any current steering xhr and sets the current request object to null
   */ abort() {
        if (this.request_) this.request_.abort();
        this.request_ = null;
    }
    /**
   * aborts steering requests clears the ttl timeout and resets all properties.
   */ dispose() {
        this.off("content-steering");
        this.off("error");
        this.abort();
        this.clearTTLTimeout_();
        this.currentPathway = null;
        this.defaultPathway = null;
        this.queryBeforeStart = null;
        this.proxyServerUrl_ = null;
        this.manifestType_ = null;
        this.ttlTimeout_ = null;
        this.request_ = null;
        this.excludedSteeringManifestURLs = new Set();
        this.availablePathways_ = new Set();
        this.steeringManifest = new $e88cd91ee18355c1$var$SteeringManifest();
    }
    /**
   * adds a pathway to the available pathways set
   *
   * @param {string} pathway the pathway string to add
   */ addAvailablePathway(pathway) {
        if (pathway) this.availablePathways_.add(pathway);
    }
    /**
   * Clears all pathways from the available pathways set
   */ clearAvailablePathways() {
        this.availablePathways_.clear();
    }
    /**
   * Removes a pathway from the available pathways set.
   */ excludePathway(pathway) {
        return this.availablePathways_.delete(pathway);
    }
    /**
   * Checks the refreshed DASH manifest content steering tag for changes.
   *
   * @param {string} baseURL new steering tag on DASH manifest refresh
   * @param {Object} newTag the new tag to check for changes
   * @return a true or false whether the new tag has different values
   */ didDASHTagChange(baseURL, newTag) {
        return !newTag && this.steeringManifest.reloadUri || newTag && ($e88cd91ee18355c1$var$resolveUrl(baseURL, newTag.serverURL) !== this.steeringManifest.reloadUri || newTag.defaultServiceLocation !== this.defaultPathway || newTag.queryBeforeStart !== this.queryBeforeStart || newTag.proxyServerURL !== this.proxyServerUrl_);
    }
    getAvailablePathways() {
        return this.availablePathways_;
    }
}
/**
 * @file playlist-controller.js
 */ const $e88cd91ee18355c1$var$ABORT_EARLY_EXCLUSION_SECONDS = 10;
let $e88cd91ee18355c1$var$Vhs$1; // SegmentLoader stats that need to have each loader's
// values summed to calculate the final value
const $e88cd91ee18355c1$var$loaderStats = [
    "mediaRequests",
    "mediaRequestsAborted",
    "mediaRequestsTimedout",
    "mediaRequestsErrored",
    "mediaTransferDuration",
    "mediaBytesTransferred",
    "mediaAppends"
];
const $e88cd91ee18355c1$var$sumLoaderStat = function(stat) {
    return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];
};
const $e88cd91ee18355c1$var$shouldSwitchToMedia = function({ currentPlaylist: currentPlaylist, buffered: buffered, currentTime: currentTime, nextPlaylist: nextPlaylist, bufferLowWaterLine: bufferLowWaterLine, bufferHighWaterLine: bufferHighWaterLine, duration: duration, bufferBasedABR: bufferBasedABR, log: log }) {
    // we have no other playlist to switch to
    if (!nextPlaylist) {
        $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn("We received no playlist to switch to. Please check your stream.");
        return false;
    }
    const sharedLogLine = `allowing switch ${currentPlaylist && currentPlaylist.id || "null"} -> ${nextPlaylist.id}`;
    if (!currentPlaylist) {
        log(`${sharedLogLine} as current playlist is not set`);
        return true;
    } // no need to switch if playlist is the same
    if (nextPlaylist.id === currentPlaylist.id) return false;
     // determine if current time is in a buffered range.
    const isBuffered = Boolean($e88cd91ee18355c1$var$findRange(buffered, currentTime).length); // If the playlist is live, then we want to not take low water line into account.
    // This is because in LIVE, the player plays 3 segments from the end of the
    // playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble
    // in those segments, a viewer will never experience a rendition upswitch.
    if (!currentPlaylist.endList) {
        // For LLHLS live streams, don't switch renditions before playback has started, as it almost
        // doubles the time to first playback.
        if (!isBuffered && typeof currentPlaylist.partTargetDuration === "number") {
            log(`not ${sharedLogLine} as current playlist is live llhls, but currentTime isn't in buffered.`);
            return false;
        }
        log(`${sharedLogLine} as current playlist is live`);
        return true;
    }
    const forwardBuffer = $e88cd91ee18355c1$var$timeAheadOf(buffered, currentTime);
    const maxBufferLowWaterLine = bufferBasedABR ? $e88cd91ee18355c1$var$Config.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE : $e88cd91ee18355c1$var$Config.MAX_BUFFER_LOW_WATER_LINE; // For the same reason as LIVE, we ignore the low water line when the VOD
    // duration is below the max potential low water line
    if (duration < maxBufferLowWaterLine) {
        log(`${sharedLogLine} as duration < max low water line (${duration} < ${maxBufferLowWaterLine})`);
        return true;
    }
    const nextBandwidth = nextPlaylist.attributes.BANDWIDTH;
    const currBandwidth = currentPlaylist.attributes.BANDWIDTH; // when switching down, if our buffer is lower than the high water line,
    // we can switch down
    if (nextBandwidth < currBandwidth && (!bufferBasedABR || forwardBuffer < bufferHighWaterLine)) {
        let logLine = `${sharedLogLine} as next bandwidth < current bandwidth (${nextBandwidth} < ${currBandwidth})`;
        if (bufferBasedABR) logLine += ` and forwardBuffer < bufferHighWaterLine (${forwardBuffer} < ${bufferHighWaterLine})`;
        log(logLine);
        return true;
    } // and if our buffer is higher than the low water line,
    // we can switch up
    if ((!bufferBasedABR || nextBandwidth > currBandwidth) && forwardBuffer >= bufferLowWaterLine) {
        let logLine = `${sharedLogLine} as forwardBuffer >= bufferLowWaterLine (${forwardBuffer} >= ${bufferLowWaterLine})`;
        if (bufferBasedABR) logLine += ` and next bandwidth > current bandwidth (${nextBandwidth} > ${currBandwidth})`;
        log(logLine);
        return true;
    }
    log(`not ${sharedLogLine} as no switching criteria met`);
    return false;
};
/**
 * the main playlist controller controller all interactons
 * between playlists and segmentloaders. At this time this mainly
 * involves a main playlist and a series of audio playlists
 * if they are available
 *
 * @class PlaylistController
 * @extends videojs.EventTarget
 */ class $e88cd91ee18355c1$var$PlaylistController extends $e88cd91ee18355c1$export$2e2bcd8739ae039.EventTarget {
    constructor(options){
        super();
        const { src: src, withCredentials: withCredentials, tech: tech, bandwidth: bandwidth, externVhs: externVhs, useCueTags: useCueTags, playlistExclusionDuration: playlistExclusionDuration, enableLowInitialPlaylist: enableLowInitialPlaylist, sourceType: sourceType, cacheEncryptionKeys: cacheEncryptionKeys, bufferBasedABR: bufferBasedABR, leastPixelDiffSelector: leastPixelDiffSelector, captionServices: captionServices } = options;
        if (!src) throw new Error("A non-empty playlist URL or JSON manifest string is required");
        let { maxPlaylistRetries: maxPlaylistRetries } = options;
        if (maxPlaylistRetries === null || typeof maxPlaylistRetries === "undefined") maxPlaylistRetries = Infinity;
        $e88cd91ee18355c1$var$Vhs$1 = externVhs;
        this.bufferBasedABR = Boolean(bufferBasedABR);
        this.leastPixelDiffSelector = Boolean(leastPixelDiffSelector);
        this.withCredentials = withCredentials;
        this.tech_ = tech;
        this.vhs_ = tech.vhs;
        this.sourceType_ = sourceType;
        this.useCueTags_ = useCueTags;
        this.playlistExclusionDuration = playlistExclusionDuration;
        this.maxPlaylistRetries = maxPlaylistRetries;
        this.enableLowInitialPlaylist = enableLowInitialPlaylist;
        if (this.useCueTags_) {
            this.cueTagsTrack_ = this.tech_.addTextTrack("metadata", "ad-cues");
            this.cueTagsTrack_.inBandMetadataTrackDispatchType = "";
        }
        this.requestOptions_ = {
            withCredentials: withCredentials,
            maxPlaylistRetries: maxPlaylistRetries,
            timeout: null
        };
        this.on("error", this.pauseLoading);
        this.mediaTypes_ = $e88cd91ee18355c1$var$createMediaTypes();
        this.mediaSource = new (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).MediaSource();
        this.handleDurationChange_ = this.handleDurationChange_.bind(this);
        this.handleSourceOpen_ = this.handleSourceOpen_.bind(this);
        this.handleSourceEnded_ = this.handleSourceEnded_.bind(this);
        this.mediaSource.addEventListener("durationchange", this.handleDurationChange_); // load the media source into the player
        this.mediaSource.addEventListener("sourceopen", this.handleSourceOpen_);
        this.mediaSource.addEventListener("sourceended", this.handleSourceEnded_); // we don't have to handle sourceclose since dispose will handle termination of
        // everything, and the MediaSource should not be detached without a proper disposal
        this.seekable_ = $e88cd91ee18355c1$var$createTimeRanges();
        this.hasPlayed_ = false;
        this.syncController_ = new $e88cd91ee18355c1$var$SyncController(options);
        this.segmentMetadataTrack_ = tech.addRemoteTextTrack({
            kind: "metadata",
            label: "segment-metadata"
        }, false).track;
        this.decrypter_ = new $e88cd91ee18355c1$var$Decrypter();
        this.sourceUpdater_ = new $e88cd91ee18355c1$var$SourceUpdater(this.mediaSource);
        this.inbandTextTracks_ = {};
        this.timelineChangeController_ = new $e88cd91ee18355c1$var$TimelineChangeController();
        this.keyStatusMap_ = new Map();
        const segmentLoaderSettings = {
            vhs: this.vhs_,
            parse708captions: options.parse708captions,
            useDtsForTimestampOffset: options.useDtsForTimestampOffset,
            captionServices: captionServices,
            mediaSource: this.mediaSource,
            currentTime: this.tech_.currentTime.bind(this.tech_),
            seekable: ()=>this.seekable(),
            seeking: ()=>this.tech_.seeking(),
            duration: ()=>this.duration(),
            hasPlayed: ()=>this.hasPlayed_,
            goalBufferLength: ()=>this.goalBufferLength(),
            bandwidth: bandwidth,
            syncController: this.syncController_,
            decrypter: this.decrypter_,
            sourceType: this.sourceType_,
            inbandTextTracks: this.inbandTextTracks_,
            cacheEncryptionKeys: cacheEncryptionKeys,
            sourceUpdater: this.sourceUpdater_,
            timelineChangeController: this.timelineChangeController_,
            exactManifestTimings: options.exactManifestTimings,
            addMetadataToTextTrack: this.addMetadataToTextTrack.bind(this)
        }; // The source type check not only determines whether a special DASH playlist loader
        // should be used, but also covers the case where the provided src is a vhs-json
        // manifest object (instead of a URL). In the case of vhs-json, the default
        // PlaylistLoader should be used.
        this.mainPlaylistLoader_ = this.sourceType_ === "dash" ? new $e88cd91ee18355c1$var$DashPlaylistLoader(src, this.vhs_, $e88cd91ee18355c1$var$merge(this.requestOptions_, {
            addMetadataToTextTrack: this.addMetadataToTextTrack.bind(this)
        })) : new $e88cd91ee18355c1$var$PlaylistLoader(src, this.vhs_, $e88cd91ee18355c1$var$merge(this.requestOptions_, {
            addDateRangesToTextTrack: this.addDateRangesToTextTrack_.bind(this)
        }));
        this.setupMainPlaylistLoaderListeners_(); // setup segment loaders
        // combined audio/video or just video when alternate audio track is selected
        this.mainSegmentLoader_ = new $e88cd91ee18355c1$var$SegmentLoader($e88cd91ee18355c1$var$merge(segmentLoaderSettings, {
            segmentMetadataTrack: this.segmentMetadataTrack_,
            loaderType: "main"
        }), options); // alternate audio track
        this.audioSegmentLoader_ = new $e88cd91ee18355c1$var$SegmentLoader($e88cd91ee18355c1$var$merge(segmentLoaderSettings, {
            loaderType: "audio"
        }), options);
        this.subtitleSegmentLoader_ = new $e88cd91ee18355c1$var$VTTSegmentLoader($e88cd91ee18355c1$var$merge(segmentLoaderSettings, {
            loaderType: "vtt",
            featuresNativeTextTracks: this.tech_.featuresNativeTextTracks,
            loadVttJs: ()=>new Promise((resolve, reject)=>{
                    function onLoad() {
                        tech.off("vttjserror", onError);
                        resolve();
                    }
                    function onError() {
                        tech.off("vttjsloaded", onLoad);
                        reject();
                    }
                    tech.one("vttjsloaded", onLoad);
                    tech.one("vttjserror", onError); // safe to call multiple times, script will be loaded only once:
                    tech.addWebVttScript_();
                })
        }), options);
        const getBandwidth = ()=>{
            return this.mainSegmentLoader_.bandwidth;
        };
        this.contentSteeringController_ = new $e88cd91ee18355c1$var$ContentSteeringController(this.vhs_.xhr, getBandwidth);
        this.setupSegmentLoaderListeners_();
        if (this.bufferBasedABR) {
            this.mainPlaylistLoader_.one("loadedplaylist", ()=>this.startABRTimer_());
            this.tech_.on("pause", ()=>this.stopABRTimer_());
            this.tech_.on("play", ()=>this.startABRTimer_());
        } // Create SegmentLoader stat-getters
        // mediaRequests_
        // mediaRequestsAborted_
        // mediaRequestsTimedout_
        // mediaRequestsErrored_
        // mediaTransferDuration_
        // mediaBytesTransferred_
        // mediaAppends_
        $e88cd91ee18355c1$var$loaderStats.forEach((stat)=>{
            this[stat + "_"] = $e88cd91ee18355c1$var$sumLoaderStat.bind(this, stat);
        });
        this.logger_ = $e88cd91ee18355c1$var$logger("pc");
        this.triggeredFmp4Usage = false;
        if (this.tech_.preload() === "none") {
            this.loadOnPlay_ = ()=>{
                this.loadOnPlay_ = null;
                this.mainPlaylistLoader_.load();
            };
            this.tech_.one("play", this.loadOnPlay_);
        } else this.mainPlaylistLoader_.load();
        this.timeToLoadedData__ = -1;
        this.mainAppendsToLoadedData__ = -1;
        this.audioAppendsToLoadedData__ = -1;
        const event = this.tech_.preload() === "none" ? "play" : "loadstart"; // start the first frame timer on loadstart or play (for preload none)
        this.tech_.one(event, ()=>{
            const timeToLoadedDataStart = Date.now();
            this.tech_.one("loadeddata", ()=>{
                this.timeToLoadedData__ = Date.now() - timeToLoadedDataStart;
                this.mainAppendsToLoadedData__ = this.mainSegmentLoader_.mediaAppends;
                this.audioAppendsToLoadedData__ = this.audioSegmentLoader_.mediaAppends;
            });
        });
    }
    mainAppendsToLoadedData_() {
        return this.mainAppendsToLoadedData__;
    }
    audioAppendsToLoadedData_() {
        return this.audioAppendsToLoadedData__;
    }
    appendsToLoadedData_() {
        const main = this.mainAppendsToLoadedData_();
        const audio = this.audioAppendsToLoadedData_();
        if (main === -1 || audio === -1) return -1;
        return main + audio;
    }
    timeToLoadedData_() {
        return this.timeToLoadedData__;
    }
    /**
   * Run selectPlaylist and switch to the new playlist if we should
   *
   * @param {string} [reason=abr] a reason for why the ABR check is made
   * @private
   */ checkABR_(reason = "abr") {
        const nextPlaylist = this.selectPlaylist();
        if (nextPlaylist && this.shouldSwitchToMedia_(nextPlaylist)) this.switchMedia_(nextPlaylist, reason);
    }
    switchMedia_(playlist, cause, delay) {
        const oldMedia = this.media();
        const oldId = oldMedia && (oldMedia.id || oldMedia.uri);
        const newId = playlist && (playlist.id || playlist.uri);
        if (oldId && oldId !== newId) {
            this.logger_(`switch media ${oldId} -> ${newId} from ${cause}`);
            this.tech_.trigger({
                type: "usage",
                name: `vhs-rendition-change-${cause}`
            });
        }
        this.mainPlaylistLoader_.media(playlist, delay);
    }
    /**
   * A function that ensures we switch our playlists inside of `mediaTypes`
   * to match the current `serviceLocation` provided by the contentSteering controller.
   * We want to check media types of `AUDIO`, `SUBTITLES`, and `CLOSED-CAPTIONS`.
   *
   * This should only be called on a DASH playback scenario while using content steering.
   * This is necessary due to differences in how media in HLS manifests are generally tied to
   * a video playlist, where in DASH that is not always the case.
   */ switchMediaForDASHContentSteering_() {
        [
            "AUDIO",
            "SUBTITLES",
            "CLOSED-CAPTIONS"
        ].forEach((type)=>{
            const mediaType = this.mediaTypes_[type];
            const activeGroup = mediaType ? mediaType.activeGroup() : null;
            const pathway = this.contentSteeringController_.getPathway();
            if (activeGroup && pathway) {
                // activeGroup can be an array or a single group
                const mediaPlaylists = activeGroup.length ? activeGroup[0].playlists : activeGroup.playlists;
                const dashMediaPlaylists = mediaPlaylists.filter((p)=>p.attributes.serviceLocation === pathway); // Switch the current active playlist to the correct CDN
                if (dashMediaPlaylists.length) this.mediaTypes_[type].activePlaylistLoader.media(dashMediaPlaylists[0]);
            }
        });
    }
    /**
   * Start a timer that periodically calls checkABR_
   *
   * @private
   */ startABRTimer_() {
        this.stopABRTimer_();
        this.abrTimer_ = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setInterval(()=>this.checkABR_(), 250);
    }
    /**
   * Stop the timer that periodically calls checkABR_
   *
   * @private
   */ stopABRTimer_() {
        // if we're scrubbing, we don't need to pause.
        // This getter will be added to Video.js in version 7.11.
        if (this.tech_.scrubbing && this.tech_.scrubbing()) return;
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearInterval(this.abrTimer_);
        this.abrTimer_ = null;
    }
    /**
   * Get a list of playlists for the currently selected audio playlist
   *
   * @return {Array} the array of audio playlists
   */ getAudioTrackPlaylists_() {
        const main = this.main();
        const defaultPlaylists = main && main.playlists || []; // if we don't have any audio groups then we can only
        // assume that the audio tracks are contained in main
        // playlist array, use that or an empty array.
        if (!main || !main.mediaGroups || !main.mediaGroups.AUDIO) return defaultPlaylists;
        const AUDIO = main.mediaGroups.AUDIO;
        const groupKeys = Object.keys(AUDIO);
        let track; // get the current active track
        if (Object.keys(this.mediaTypes_.AUDIO.groups).length) track = this.mediaTypes_.AUDIO.activeTrack(); // or get the default track from main if mediaTypes_ isn't setup yet
        else {
            // default group is `main` or just the first group.
            const defaultGroup = AUDIO.main || groupKeys.length && AUDIO[groupKeys[0]];
            for(const label in defaultGroup)if (defaultGroup[label].default) {
                track = {
                    label: label
                };
                break;
            }
        } // no active track no playlists.
        if (!track) return defaultPlaylists;
        const playlists = []; // get all of the playlists that are possible for the
        // active track.
        for(const group in AUDIO)if (AUDIO[group][track.label]) {
            const properties = AUDIO[group][track.label];
            if (properties.playlists && properties.playlists.length) playlists.push.apply(playlists, properties.playlists);
            else if (properties.uri) playlists.push(properties);
            else if (main.playlists.length) // if an audio group does not have a uri
            // see if we have main playlists that use it as a group.
            // if we do then add those to the playlists list.
            for(let i = 0; i < main.playlists.length; i++){
                const playlist = main.playlists[i];
                if (playlist.attributes && playlist.attributes.AUDIO && playlist.attributes.AUDIO === group) playlists.push(playlist);
            }
        }
        if (!playlists.length) return defaultPlaylists;
        return playlists;
    }
    /**
   * Register event handlers on the main playlist loader. A helper
   * function for construction time.
   *
   * @private
   */ setupMainPlaylistLoaderListeners_() {
        this.mainPlaylistLoader_.on("loadedmetadata", ()=>{
            const media = this.mainPlaylistLoader_.media();
            const requestTimeout = media.targetDuration * 1500; // If we don't have any more available playlists, we don't want to
            // timeout the request.
            if ($e88cd91ee18355c1$var$isLowestEnabledRendition(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.media())) this.requestOptions_.timeout = 0;
            else this.requestOptions_.timeout = requestTimeout;
             // if this isn't a live video and preload permits, start
            // downloading segments
            if (media.endList && this.tech_.preload() !== "none") {
                this.mainSegmentLoader_.playlist(media, this.requestOptions_);
                this.mainSegmentLoader_.load();
            }
            $e88cd91ee18355c1$var$setupMediaGroups({
                sourceType: this.sourceType_,
                segmentLoaders: {
                    AUDIO: this.audioSegmentLoader_,
                    SUBTITLES: this.subtitleSegmentLoader_,
                    main: this.mainSegmentLoader_
                },
                tech: this.tech_,
                requestOptions: this.requestOptions_,
                mainPlaylistLoader: this.mainPlaylistLoader_,
                vhs: this.vhs_,
                main: this.main(),
                mediaTypes: this.mediaTypes_,
                excludePlaylist: this.excludePlaylist.bind(this)
            });
            this.triggerPresenceUsage_(this.main(), media);
            this.setupFirstPlay();
            if (!this.mediaTypes_.AUDIO.activePlaylistLoader || this.mediaTypes_.AUDIO.activePlaylistLoader.media()) this.trigger("selectedinitialmedia");
            else // We must wait for the active audio playlist loader to
            // finish setting up before triggering this event so the
            // representations API and EME setup is correct
            this.mediaTypes_.AUDIO.activePlaylistLoader.one("loadedmetadata", ()=>{
                this.trigger("selectedinitialmedia");
            });
        });
        this.mainPlaylistLoader_.on("loadedplaylist", ()=>{
            if (this.loadOnPlay_) this.tech_.off("play", this.loadOnPlay_);
            let updatedPlaylist = this.mainPlaylistLoader_.media();
            if (!updatedPlaylist) {
                // Add content steering listeners on first load and init.
                this.attachContentSteeringListeners_();
                this.initContentSteeringController_(); // exclude any variants that are not supported by the browser before selecting
                // an initial media as the playlist selectors do not consider browser support
                this.excludeUnsupportedVariants_();
                let selectedMedia;
                if (this.enableLowInitialPlaylist) selectedMedia = this.selectInitialPlaylist();
                if (!selectedMedia) selectedMedia = this.selectPlaylist();
                if (!selectedMedia || !this.shouldSwitchToMedia_(selectedMedia)) return;
                this.initialMedia_ = selectedMedia;
                this.switchMedia_(this.initialMedia_, "initial"); // Under the standard case where a source URL is provided, loadedplaylist will
                // fire again since the playlist will be requested. In the case of vhs-json
                // (where the manifest object is provided as the source), when the media
                // playlist's `segments` list is already available, a media playlist won't be
                // requested, and loadedplaylist won't fire again, so the playlist handler must be
                // called on its own here.
                const haveJsonSource = this.sourceType_ === "vhs-json" && this.initialMedia_.segments;
                if (!haveJsonSource) return;
                updatedPlaylist = this.initialMedia_;
            }
            this.handleUpdatedMediaPlaylist(updatedPlaylist);
        });
        this.mainPlaylistLoader_.on("error", ()=>{
            const error = this.mainPlaylistLoader_.error;
            this.excludePlaylist({
                playlistToExclude: error.playlist,
                error: error
            });
        });
        this.mainPlaylistLoader_.on("mediachanging", ()=>{
            this.mainSegmentLoader_.abort();
            this.mainSegmentLoader_.pause();
        });
        this.mainPlaylistLoader_.on("mediachange", ()=>{
            const media = this.mainPlaylistLoader_.media();
            const requestTimeout = media.targetDuration * 1500; // If we don't have any more available playlists, we don't want to
            // timeout the request.
            if ($e88cd91ee18355c1$var$isLowestEnabledRendition(this.mainPlaylistLoader_.main, this.mainPlaylistLoader_.media())) this.requestOptions_.timeout = 0;
            else this.requestOptions_.timeout = requestTimeout;
            if (this.sourceType_ === "dash") // we don't want to re-request the same hls playlist right after it was changed
            this.mainPlaylistLoader_.load();
             // TODO: Create a new event on the PlaylistLoader that signals
            // that the segments have changed in some way and use that to
            // update the SegmentLoader instead of doing it twice here and
            // on `loadedplaylist`
            this.mainSegmentLoader_.pause();
            this.mainSegmentLoader_.playlist(media, this.requestOptions_);
            if (this.waitingForFastQualityPlaylistReceived_) this.runFastQualitySwitch_();
            else this.mainSegmentLoader_.load();
            this.tech_.trigger({
                type: "mediachange",
                bubbles: true
            });
        });
        this.mainPlaylistLoader_.on("playlistunchanged", ()=>{
            const updatedPlaylist = this.mainPlaylistLoader_.media(); // ignore unchanged playlists that have already been
            // excluded for not-changing. We likely just have a really slowly updating
            // playlist.
            if (updatedPlaylist.lastExcludeReason_ === "playlist-unchanged") return;
            const playlistOutdated = this.stuckAtPlaylistEnd_(updatedPlaylist);
            if (playlistOutdated) {
                // Playlist has stopped updating and we're stuck at its end. Try to
                // exclude it and switch to another playlist in the hope that that
                // one is updating (and give the player a chance to re-adjust to the
                // safe live point).
                this.excludePlaylist({
                    error: {
                        message: "Playlist no longer updating.",
                        reason: "playlist-unchanged"
                    }
                }); // useful for monitoring QoS
                this.tech_.trigger("playliststuck");
            }
        });
        this.mainPlaylistLoader_.on("renditiondisabled", ()=>{
            this.tech_.trigger({
                type: "usage",
                name: "vhs-rendition-disabled"
            });
        });
        this.mainPlaylistLoader_.on("renditionenabled", ()=>{
            this.tech_.trigger({
                type: "usage",
                name: "vhs-rendition-enabled"
            });
        });
    }
    /**
   * Given an updated media playlist (whether it was loaded for the first time, or
   * refreshed for live playlists), update any relevant properties and state to reflect
   * changes in the media that should be accounted for (e.g., cues and duration).
   *
   * @param {Object} updatedPlaylist the updated media playlist object
   *
   * @private
   */ handleUpdatedMediaPlaylist(updatedPlaylist) {
        if (this.useCueTags_) this.updateAdCues_(updatedPlaylist);
         // TODO: Create a new event on the PlaylistLoader that signals
        // that the segments have changed in some way and use that to
        // update the SegmentLoader instead of doing it twice here and
        // on `mediachange`
        this.mainSegmentLoader_.pause();
        this.mainSegmentLoader_.playlist(updatedPlaylist, this.requestOptions_);
        if (this.waitingForFastQualityPlaylistReceived_) this.runFastQualitySwitch_();
        this.updateDuration(!updatedPlaylist.endList); // If the player isn't paused, ensure that the segment loader is running,
        // as it is possible that it was temporarily stopped while waiting for
        // a playlist (e.g., in case the playlist errored and we re-requested it).
        if (!this.tech_.paused()) {
            this.mainSegmentLoader_.load();
            if (this.audioSegmentLoader_) this.audioSegmentLoader_.load();
        }
    }
    /**
   * A helper function for triggerring presence usage events once per source
   *
   * @private
   */ triggerPresenceUsage_(main, media) {
        const mediaGroups = main.mediaGroups || {};
        let defaultDemuxed = true;
        const audioGroupKeys = Object.keys(mediaGroups.AUDIO);
        for(const mediaGroup in mediaGroups.AUDIO)for(const label in mediaGroups.AUDIO[mediaGroup]){
            const properties = mediaGroups.AUDIO[mediaGroup][label];
            if (!properties.uri) defaultDemuxed = false;
        }
        if (defaultDemuxed) this.tech_.trigger({
            type: "usage",
            name: "vhs-demuxed"
        });
        if (Object.keys(mediaGroups.SUBTITLES).length) this.tech_.trigger({
            type: "usage",
            name: "vhs-webvtt"
        });
        if ($e88cd91ee18355c1$var$Vhs$1.Playlist.isAes(media)) this.tech_.trigger({
            type: "usage",
            name: "vhs-aes"
        });
        if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) this.tech_.trigger({
            type: "usage",
            name: "vhs-alternate-audio"
        });
        if (this.useCueTags_) this.tech_.trigger({
            type: "usage",
            name: "vhs-playlist-cue-tags"
        });
    }
    shouldSwitchToMedia_(nextPlaylist) {
        const currentPlaylist = this.mainPlaylistLoader_.media() || this.mainPlaylistLoader_.pendingMedia_;
        const currentTime = this.tech_.currentTime();
        const bufferLowWaterLine = this.bufferLowWaterLine();
        const bufferHighWaterLine = this.bufferHighWaterLine();
        const buffered = this.tech_.buffered();
        return $e88cd91ee18355c1$var$shouldSwitchToMedia({
            buffered: buffered,
            currentTime: currentTime,
            currentPlaylist: currentPlaylist,
            nextPlaylist: nextPlaylist,
            bufferLowWaterLine: bufferLowWaterLine,
            bufferHighWaterLine: bufferHighWaterLine,
            duration: this.duration(),
            bufferBasedABR: this.bufferBasedABR,
            log: this.logger_
        });
    }
    /**
   * Register event handlers on the segment loaders. A helper function
   * for construction time.
   *
   * @private
   */ setupSegmentLoaderListeners_() {
        this.mainSegmentLoader_.on("bandwidthupdate", ()=>{
            // Whether or not buffer based ABR or another ABR is used, on a bandwidth change it's
            // useful to check to see if a rendition switch should be made.
            this.checkABR_("bandwidthupdate");
            this.tech_.trigger("bandwidthupdate");
        });
        this.mainSegmentLoader_.on("timeout", ()=>{
            if (this.bufferBasedABR) // If a rendition change is needed, then it would've be done on `bandwidthupdate`.
            // Here the only consideration is that for buffer based ABR there's no guarantee
            // of an immediate switch (since the bandwidth is averaged with a timeout
            // bandwidth value of 1), so force a load on the segment loader to keep it going.
            this.mainSegmentLoader_.load();
        }); // `progress` events are not reliable enough of a bandwidth measure to trigger buffer
        // based ABR.
        if (!this.bufferBasedABR) this.mainSegmentLoader_.on("progress", ()=>{
            this.trigger("progress");
        });
        this.mainSegmentLoader_.on("error", ()=>{
            const error = this.mainSegmentLoader_.error();
            this.excludePlaylist({
                playlistToExclude: error.playlist,
                error: error
            });
        });
        this.mainSegmentLoader_.on("appenderror", ()=>{
            this.error = this.mainSegmentLoader_.error_;
            this.trigger("error");
        });
        this.mainSegmentLoader_.on("syncinfoupdate", ()=>{
            this.onSyncInfoUpdate_();
        });
        this.mainSegmentLoader_.on("timestampoffset", ()=>{
            this.tech_.trigger({
                type: "usage",
                name: "vhs-timestamp-offset"
            });
        });
        this.audioSegmentLoader_.on("syncinfoupdate", ()=>{
            this.onSyncInfoUpdate_();
        });
        this.audioSegmentLoader_.on("appenderror", ()=>{
            this.error = this.audioSegmentLoader_.error_;
            this.trigger("error");
        });
        this.mainSegmentLoader_.on("ended", ()=>{
            this.logger_("main segment loader ended");
            this.onEndOfStream();
        });
        this.mainSegmentLoader_.on("earlyabort", (event)=>{
            // never try to early abort with the new ABR algorithm
            if (this.bufferBasedABR) return;
            this.delegateLoaders_("all", [
                "abort"
            ]);
            this.excludePlaylist({
                error: {
                    message: "Aborted early because there isn't enough bandwidth to complete the request without rebuffering."
                },
                playlistExclusionDuration: $e88cd91ee18355c1$var$ABORT_EARLY_EXCLUSION_SECONDS
            });
        });
        const updateCodecs = ()=>{
            if (!this.sourceUpdater_.hasCreatedSourceBuffers()) return this.tryToCreateSourceBuffers_();
            const codecs = this.getCodecsOrExclude_(); // no codecs means that the playlist was excluded
            if (!codecs) return;
            this.sourceUpdater_.addOrChangeSourceBuffers(codecs);
        };
        this.mainSegmentLoader_.on("trackinfo", updateCodecs);
        this.audioSegmentLoader_.on("trackinfo", updateCodecs);
        this.mainSegmentLoader_.on("fmp4", ()=>{
            if (!this.triggeredFmp4Usage) {
                this.tech_.trigger({
                    type: "usage",
                    name: "vhs-fmp4"
                });
                this.triggeredFmp4Usage = true;
            }
        });
        this.audioSegmentLoader_.on("fmp4", ()=>{
            if (!this.triggeredFmp4Usage) {
                this.tech_.trigger({
                    type: "usage",
                    name: "vhs-fmp4"
                });
                this.triggeredFmp4Usage = true;
            }
        });
        this.audioSegmentLoader_.on("ended", ()=>{
            this.logger_("audioSegmentLoader ended");
            this.onEndOfStream();
        });
    }
    mediaSecondsLoaded_() {
        return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);
    }
    /**
   * Call load on our SegmentLoaders
   */ load() {
        this.mainSegmentLoader_.load();
        if (this.mediaTypes_.AUDIO.activePlaylistLoader) this.audioSegmentLoader_.load();
        if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) this.subtitleSegmentLoader_.load();
    }
    /**
   * Re-tune playback quality level for the current player
   * conditions. This method will perform destructive actions like removing
   * already buffered content in order to readjust the currently active
   * playlist quickly. This is good for manual quality changes
   *
   * @private
   */ fastQualityChange_(media = this.selectPlaylist()) {
        if (media && media === this.mainPlaylistLoader_.media()) {
            this.logger_("skipping fastQualityChange because new media is same as old");
            return;
        }
        this.switchMedia_(media, "fast-quality"); // we would like to avoid race condition when we call fastQuality,
        // reset everything and start loading segments from prev segments instead of new because new playlist is not received yet
        this.waitingForFastQualityPlaylistReceived_ = true;
    }
    runFastQualitySwitch_() {
        this.waitingForFastQualityPlaylistReceived_ = false; // Delete all buffered data to allow an immediate quality switch, then seek to give
        // the browser a kick to remove any cached frames from the previous rendtion (.04 seconds
        // ahead was roughly the minimum that will accomplish this across a variety of content
        // in IE and Edge, but seeking in place is sufficient on all other browsers)
        // Edge/IE bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14600375/
        // Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=651904
        this.mainSegmentLoader_.pause();
        this.mainSegmentLoader_.resetEverything(()=>{
            this.tech_.setCurrentTime(this.tech_.currentTime());
        }); // don't need to reset audio as it is reset when media changes
    }
    /**
   * Begin playback.
   */ play() {
        if (this.setupFirstPlay()) return;
        if (this.tech_.ended()) this.tech_.setCurrentTime(0);
        if (this.hasPlayed_) this.load();
        const seekable = this.tech_.seekable(); // if the viewer has paused and we fell out of the live window,
        // seek forward to the live point
        if (this.tech_.duration() === Infinity) {
            if (this.tech_.currentTime() < seekable.start(0)) return this.tech_.setCurrentTime(seekable.end(seekable.length - 1));
        }
    }
    /**
   * Seek to the latest media position if this is a live video and the
   * player and video are loaded and initialized.
   */ setupFirstPlay() {
        const media = this.mainPlaylistLoader_.media(); // Check that everything is ready to begin buffering for the first call to play
        //  If 1) there is no active media
        //     2) the player is paused
        //     3) the first play has already been setup
        // then exit early
        if (!media || this.tech_.paused() || this.hasPlayed_) return false;
         // when the video is a live stream and/or has a start time
        if (!media.endList || media.start) {
            const seekable = this.seekable();
            if (!seekable.length) // without a seekable range, the player cannot seek to begin buffering at the
            // live or start point
            return false;
            const seekableEnd = seekable.end(0);
            let startPoint = seekableEnd;
            if (media.start) {
                const offset = media.start.timeOffset;
                if (offset < 0) startPoint = Math.max(seekableEnd + offset, seekable.start(0));
                else startPoint = Math.min(seekableEnd, offset);
            } // trigger firstplay to inform the source handler to ignore the next seek event
            this.trigger("firstplay"); // seek to the live point
            this.tech_.setCurrentTime(startPoint);
        }
        this.hasPlayed_ = true; // we can begin loading now that everything is ready
        this.load();
        return true;
    }
    /**
   * handle the sourceopen event on the MediaSource
   *
   * @private
   */ handleSourceOpen_() {
        // Only attempt to create the source buffer if none already exist.
        // handleSourceOpen is also called when we are "re-opening" a source buffer
        // after `endOfStream` has been called (in response to a seek for instance)
        this.tryToCreateSourceBuffers_(); // if autoplay is enabled, begin playback. This is duplicative of
        // code in video.js but is required because play() must be invoked
        // *after* the media source has opened.
        if (this.tech_.autoplay()) {
            const playPromise = this.tech_.play(); // Catch/silence error when a pause interrupts a play request
            // on browsers which return a promise
            if (typeof playPromise !== "undefined" && typeof playPromise.then === "function") playPromise.then(null, (e)=>{});
        }
        this.trigger("sourceopen");
    }
    /**
   * handle the sourceended event on the MediaSource
   *
   * @private
   */ handleSourceEnded_() {
        if (!this.inbandTextTracks_.metadataTrack_) return;
        const cues = this.inbandTextTracks_.metadataTrack_.cues;
        if (!cues || !cues.length) return;
        const duration = this.duration();
        cues[cues.length - 1].endTime = isNaN(duration) || Math.abs(duration) === Infinity ? Number.MAX_VALUE : duration;
    }
    /**
   * handle the durationchange event on the MediaSource
   *
   * @private
   */ handleDurationChange_() {
        this.tech_.trigger("durationchange");
    }
    /**
   * Calls endOfStream on the media source when all active stream types have called
   * endOfStream
   *
   * @param {string} streamType
   *        Stream type of the segment loader that called endOfStream
   * @private
   */ onEndOfStream() {
        let isEndOfStream = this.mainSegmentLoader_.ended_;
        if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
            const mainMediaInfo = this.mainSegmentLoader_.getCurrentMediaInfo_(); // if the audio playlist loader exists, then alternate audio is active
            if (!mainMediaInfo || mainMediaInfo.hasVideo) // if we do not know if the main segment loader contains video yet or if we
            // definitively know the main segment loader contains video, then we need to wait
            // for both main and audio segment loaders to call endOfStream
            isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;
            else // otherwise just rely on the audio loader
            isEndOfStream = this.audioSegmentLoader_.ended_;
        }
        if (!isEndOfStream) return;
        this.stopABRTimer_();
        this.sourceUpdater_.endOfStream();
    }
    /**
   * Check if a playlist has stopped being updated
   *
   * @param {Object} playlist the media playlist object
   * @return {boolean} whether the playlist has stopped being updated or not
   */ stuckAtPlaylistEnd_(playlist) {
        const seekable = this.seekable();
        if (!seekable.length) // playlist doesn't have enough information to determine whether we are stuck
        return false;
        const expired = this.syncController_.getExpiredTime(playlist, this.duration());
        if (expired === null) return false;
         // does not use the safe live end to calculate playlist end, since we
        // don't want to say we are stuck while there is still content
        const absolutePlaylistEnd = $e88cd91ee18355c1$var$Vhs$1.Playlist.playlistEnd(playlist, expired);
        const currentTime = this.tech_.currentTime();
        const buffered = this.tech_.buffered();
        if (!buffered.length) // return true if the playhead reached the absolute end of the playlist
        return absolutePlaylistEnd - currentTime <= $e88cd91ee18355c1$var$SAFE_TIME_DELTA;
        const bufferedEnd = buffered.end(buffered.length - 1); // return true if there is too little buffer left and buffer has reached absolute
        // end of playlist
        return bufferedEnd - currentTime <= $e88cd91ee18355c1$var$SAFE_TIME_DELTA && absolutePlaylistEnd - bufferedEnd <= $e88cd91ee18355c1$var$SAFE_TIME_DELTA;
    }
    /**
   * Exclude a playlist for a set amount of time, making it unavailable for selection by
   * the rendition selection algorithm, then force a new playlist (rendition) selection.
   *
   * @param {Object=} playlistToExclude
   *                  the playlist to exclude, defaults to the currently selected playlist
   * @param {Object=} error
   *                  an optional error
   * @param {number=} playlistExclusionDuration
   *                  an optional number of seconds to exclude the playlist
   */ excludePlaylist({ playlistToExclude: playlistToExclude = this.mainPlaylistLoader_.media(), error: error = {}, playlistExclusionDuration: playlistExclusionDuration }) {
        // If the `error` was generated by the playlist loader, it will contain
        // the playlist we were trying to load (but failed) and that should be
        // excluded instead of the currently selected playlist which is likely
        // out-of-date in this scenario
        playlistToExclude = playlistToExclude || this.mainPlaylistLoader_.media();
        playlistExclusionDuration = playlistExclusionDuration || error.playlistExclusionDuration || this.playlistExclusionDuration; // If there is no current playlist, then an error occurred while we were
        // trying to load the main OR while we were disposing of the tech
        if (!playlistToExclude) {
            this.error = error;
            if (this.mediaSource.readyState !== "open") this.trigger("error");
            else this.sourceUpdater_.endOfStream("network");
            return;
        }
        playlistToExclude.playlistErrors_++;
        const playlists = this.mainPlaylistLoader_.main.playlists;
        const enabledPlaylists = playlists.filter($e88cd91ee18355c1$var$isEnabled);
        const isFinalRendition = enabledPlaylists.length === 1 && enabledPlaylists[0] === playlistToExclude; // Don't exclude the only playlist unless it was excluded
        // forever
        if (playlists.length === 1 && playlistExclusionDuration !== Infinity) {
            $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn(`Problem encountered with playlist ${playlistToExclude.id}. ` + "Trying again since it is the only playlist.");
            this.tech_.trigger("retryplaylist"); // if this is a final rendition, we should delay
            return this.mainPlaylistLoader_.load(isFinalRendition);
        }
        if (isFinalRendition) {
            // If we're content steering, try other pathways.
            if (this.main().contentSteering) {
                const pathway = this.pathwayAttribute_(playlistToExclude); // Ignore at least 1 steering manifest refresh.
                const reIncludeDelay = this.contentSteeringController_.steeringManifest.ttl * 1000;
                this.contentSteeringController_.excludePathway(pathway);
                this.excludeThenChangePathway_();
                setTimeout(()=>{
                    this.contentSteeringController_.addAvailablePathway(pathway);
                }, reIncludeDelay);
                return;
            } // Since we're on the final non-excluded playlist, and we're about to exclude
            // it, instead of erring the player or retrying this playlist, clear out the current
            // exclusion list. This allows other playlists to be attempted in case any have been
            // fixed.
            let reincluded = false;
            playlists.forEach((playlist)=>{
                // skip current playlist which is about to be excluded
                if (playlist === playlistToExclude) return;
                const excludeUntil = playlist.excludeUntil; // a playlist cannot be reincluded if it wasn't excluded to begin with.
                if (typeof excludeUntil !== "undefined" && excludeUntil !== Infinity) {
                    reincluded = true;
                    delete playlist.excludeUntil;
                }
            });
            if (reincluded) {
                $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn("Removing other playlists from the exclusion list because the last rendition is about to be excluded."); // Technically we are retrying a playlist, in that we are simply retrying a previous
                // playlist. This is needed for users relying on the retryplaylist event to catch a
                // case where the player might be stuck and looping through "dead" playlists.
                this.tech_.trigger("retryplaylist");
            }
        } // Exclude this playlist
        let excludeUntil;
        if (playlistToExclude.playlistErrors_ > this.maxPlaylistRetries) excludeUntil = Infinity;
        else excludeUntil = Date.now() + playlistExclusionDuration * 1000;
        playlistToExclude.excludeUntil = excludeUntil;
        if (error.reason) playlistToExclude.lastExcludeReason_ = error.reason;
        this.tech_.trigger("excludeplaylist");
        this.tech_.trigger({
            type: "usage",
            name: "vhs-rendition-excluded"
        }); // TODO: only load a new playlist if we're excluding the current playlist
        // If this function was called with a playlist that's not the current active playlist
        // (e.g., media().id !== playlistToExclude.id),
        // then a new playlist should not be selected and loaded, as there's nothing wrong with the current playlist.
        const nextPlaylist = this.selectPlaylist();
        if (!nextPlaylist) {
            this.error = "Playback cannot continue. No available working or supported playlists.";
            this.trigger("error");
            return;
        }
        const logFn = error.internal ? this.logger_ : $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn;
        const errorMessage = error.message ? " " + error.message : "";
        logFn(`${error.internal ? "Internal problem" : "Problem"} encountered with playlist ${playlistToExclude.id}.` + `${errorMessage} Switching to playlist ${nextPlaylist.id}.`); // if audio group changed reset audio loaders
        if (nextPlaylist.attributes.AUDIO !== playlistToExclude.attributes.AUDIO) this.delegateLoaders_("audio", [
            "abort",
            "pause"
        ]);
         // if subtitle group changed reset subtitle loaders
        if (nextPlaylist.attributes.SUBTITLES !== playlistToExclude.attributes.SUBTITLES) this.delegateLoaders_("subtitle", [
            "abort",
            "pause"
        ]);
        this.delegateLoaders_("main", [
            "abort",
            "pause"
        ]);
        const delayDuration = nextPlaylist.targetDuration / 2 * 1000 || 5000;
        const shouldDelay = typeof nextPlaylist.lastRequest === "number" && Date.now() - nextPlaylist.lastRequest <= delayDuration; // delay if it's a final rendition or if the last refresh is sooner than half targetDuration
        return this.switchMedia_(nextPlaylist, "exclude", isFinalRendition || shouldDelay);
    }
    /**
   * Pause all segment/playlist loaders
   */ pauseLoading() {
        this.delegateLoaders_("all", [
            "abort",
            "pause"
        ]);
        this.stopABRTimer_();
    }
    /**
   * Call a set of functions in order on playlist loaders, segment loaders,
   * or both types of loaders.
   *
   * @param {string} filter
   *        Filter loaders that should call fnNames using a string. Can be:
   *        * all - run on all loaders
   *        * audio - run on all audio loaders
   *        * subtitle - run on all subtitle loaders
   *        * main - run on the main loaders
   *
   * @param {Array|string} fnNames
   *        A string or array of function names to call.
   */ delegateLoaders_(filter, fnNames) {
        const loaders = [];
        const dontFilterPlaylist = filter === "all";
        if (dontFilterPlaylist || filter === "main") loaders.push(this.mainPlaylistLoader_);
        const mediaTypes = [];
        if (dontFilterPlaylist || filter === "audio") mediaTypes.push("AUDIO");
        if (dontFilterPlaylist || filter === "subtitle") {
            mediaTypes.push("CLOSED-CAPTIONS");
            mediaTypes.push("SUBTITLES");
        }
        mediaTypes.forEach((mediaType)=>{
            const loader = this.mediaTypes_[mediaType] && this.mediaTypes_[mediaType].activePlaylistLoader;
            if (loader) loaders.push(loader);
        });
        [
            "main",
            "audio",
            "subtitle"
        ].forEach((name)=>{
            const loader = this[`${name}SegmentLoader_`];
            if (loader && (filter === name || filter === "all")) loaders.push(loader);
        });
        loaders.forEach((loader)=>fnNames.forEach((fnName)=>{
                if (typeof loader[fnName] === "function") loader[fnName]();
            }));
    }
    /**
   * set the current time on all segment loaders
   *
   * @param {TimeRange} currentTime the current time to set
   * @return {TimeRange} the current time
   */ setCurrentTime(currentTime) {
        const buffered = $e88cd91ee18355c1$var$findRange(this.tech_.buffered(), currentTime);
        if (!(this.mainPlaylistLoader_ && this.mainPlaylistLoader_.media())) // return immediately if the metadata is not ready yet
        return 0;
         // it's clearly an edge-case but don't thrown an error if asked to
        // seek within an empty playlist
        if (!this.mainPlaylistLoader_.media().segments) return 0;
         // if the seek location is already buffered, continue buffering as usual
        if (buffered && buffered.length) return currentTime;
         // cancel outstanding requests so we begin buffering at the new
        // location
        this.mainSegmentLoader_.pause();
        this.mainSegmentLoader_.resetEverything();
        if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
            this.audioSegmentLoader_.pause();
            this.audioSegmentLoader_.resetEverything();
        }
        if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
            this.subtitleSegmentLoader_.pause();
            this.subtitleSegmentLoader_.resetEverything();
        } // start segment loader loading in case they are paused
        this.load();
    }
    /**
   * get the current duration
   *
   * @return {TimeRange} the duration
   */ duration() {
        if (!this.mainPlaylistLoader_) return 0;
        const media = this.mainPlaylistLoader_.media();
        if (!media) // no playlists loaded yet, so can't determine a duration
        return 0;
         // Don't rely on the media source for duration in the case of a live playlist since
        // setting the native MediaSource's duration to infinity ends up with consequences to
        // seekable behavior. See https://github.com/w3c/media-source/issues/5 for details.
        //
        // This is resolved in the spec by https://github.com/w3c/media-source/pull/92,
        // however, few browsers have support for setLiveSeekableRange()
        // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange
        //
        // Until a time when the duration of the media source can be set to infinity, and a
        // seekable range specified across browsers, just return Infinity.
        if (!media.endList) return Infinity;
         // Since this is a VOD video, it is safe to rely on the media source's duration (if
        // available). If it's not available, fall back to a playlist-calculated estimate.
        if (this.mediaSource) return this.mediaSource.duration;
        return $e88cd91ee18355c1$var$Vhs$1.Playlist.duration(media);
    }
    /**
   * check the seekable range
   *
   * @return {TimeRange} the seekable range
   */ seekable() {
        return this.seekable_;
    }
    onSyncInfoUpdate_() {
        let audioSeekable; // TODO check for creation of both source buffers before updating seekable
        //
        // A fix was made to this function where a check for
        // this.sourceUpdater_.hasCreatedSourceBuffers
        // was added to ensure that both source buffers were created before seekable was
        // updated. However, it originally had a bug where it was checking for a true and
        // returning early instead of checking for false. Setting it to check for false to
        // return early though created other issues. A call to play() would check for seekable
        // end without verifying that a seekable range was present. In addition, even checking
        // for that didn't solve some issues, as handleFirstPlay is sometimes worked around
        // due to a media update calling load on the segment loaders, skipping a seek to live,
        // thereby starting live streams at the beginning of the stream rather than at the end.
        //
        // This conditional should be fixed to wait for the creation of two source buffers at
        // the same time as the other sections of code are fixed to properly seek to live and
        // not throw an error due to checking for a seekable end when no seekable range exists.
        //
        // For now, fall back to the older behavior, with the understanding that the seekable
        // range may not be completely correct, leading to a suboptimal initial live point.
        if (!this.mainPlaylistLoader_) return;
        let media = this.mainPlaylistLoader_.media();
        if (!media) return;
        let expired = this.syncController_.getExpiredTime(media, this.duration());
        if (expired === null) // not enough information to update seekable
        return;
        const main = this.mainPlaylistLoader_.main;
        const mainSeekable = $e88cd91ee18355c1$var$Vhs$1.Playlist.seekable(media, expired, $e88cd91ee18355c1$var$Vhs$1.Playlist.liveEdgeDelay(main, media));
        if (mainSeekable.length === 0) return;
        if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
            media = this.mediaTypes_.AUDIO.activePlaylistLoader.media();
            expired = this.syncController_.getExpiredTime(media, this.duration());
            if (expired === null) return;
            audioSeekable = $e88cd91ee18355c1$var$Vhs$1.Playlist.seekable(media, expired, $e88cd91ee18355c1$var$Vhs$1.Playlist.liveEdgeDelay(main, media));
            if (audioSeekable.length === 0) return;
        }
        let oldEnd;
        let oldStart;
        if (this.seekable_ && this.seekable_.length) {
            oldEnd = this.seekable_.end(0);
            oldStart = this.seekable_.start(0);
        }
        if (!audioSeekable) // seekable has been calculated based on buffering video data so it
        // can be returned directly
        this.seekable_ = mainSeekable;
        else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) // seekables are pretty far off, rely on main
        this.seekable_ = mainSeekable;
        else this.seekable_ = $e88cd91ee18355c1$var$createTimeRanges([
            [
                audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0),
                audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)
            ]
        ]);
         // seekable is the same as last time
        if (this.seekable_ && this.seekable_.length) {
            if (this.seekable_.end(0) === oldEnd && this.seekable_.start(0) === oldStart) return;
        }
        this.logger_(`seekable updated [${$e88cd91ee18355c1$var$printableRange(this.seekable_)}]`);
        this.tech_.trigger("seekablechanged");
    }
    /**
   * Update the player duration
   */ updateDuration(isLive) {
        if (this.updateDuration_) {
            this.mediaSource.removeEventListener("sourceopen", this.updateDuration_);
            this.updateDuration_ = null;
        }
        if (this.mediaSource.readyState !== "open") {
            this.updateDuration_ = this.updateDuration.bind(this, isLive);
            this.mediaSource.addEventListener("sourceopen", this.updateDuration_);
            return;
        }
        if (isLive) {
            const seekable = this.seekable();
            if (!seekable.length) return;
             // Even in the case of a live playlist, the native MediaSource's duration should not
            // be set to Infinity (even though this would be expected for a live playlist), since
            // setting the native MediaSource's duration to infinity ends up with consequences to
            // seekable behavior. See https://github.com/w3c/media-source/issues/5 for details.
            //
            // This is resolved in the spec by https://github.com/w3c/media-source/pull/92,
            // however, few browsers have support for setLiveSeekableRange()
            // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange
            //
            // Until a time when the duration of the media source can be set to infinity, and a
            // seekable range specified across browsers, the duration should be greater than or
            // equal to the last possible seekable value.
            // MediaSource duration starts as NaN
            // It is possible (and probable) that this case will never be reached for many
            // sources, since the MediaSource reports duration as the highest value without
            // accounting for timestamp offset. For example, if the timestamp offset is -100 and
            // we buffered times 0 to 100 with real times of 100 to 200, even though current
            // time will be between 0 and 100, the native media source may report the duration
            // as 200. However, since we report duration separate from the media source (as
            // Infinity), and as long as the native media source duration value is greater than
            // our reported seekable range, seeks will work as expected. The large number as
            // duration for live is actually a strategy used by some players to work around the
            // issue of live seekable ranges cited above.
            if (isNaN(this.mediaSource.duration) || this.mediaSource.duration < seekable.end(seekable.length - 1)) this.sourceUpdater_.setDuration(seekable.end(seekable.length - 1));
            return;
        }
        const buffered = this.tech_.buffered();
        let duration = $e88cd91ee18355c1$var$Vhs$1.Playlist.duration(this.mainPlaylistLoader_.media());
        if (buffered.length > 0) duration = Math.max(duration, buffered.end(buffered.length - 1));
        if (this.mediaSource.duration !== duration) this.sourceUpdater_.setDuration(duration);
    }
    /**
   * dispose of the PlaylistController and everything
   * that it controls
   */ dispose() {
        this.trigger("dispose");
        this.decrypter_.terminate();
        this.mainPlaylistLoader_.dispose();
        this.mainSegmentLoader_.dispose();
        this.contentSteeringController_.dispose();
        this.keyStatusMap_.clear();
        if (this.loadOnPlay_) this.tech_.off("play", this.loadOnPlay_);
        [
            "AUDIO",
            "SUBTITLES"
        ].forEach((type)=>{
            const groups = this.mediaTypes_[type].groups;
            for(const id in groups)groups[id].forEach((group)=>{
                if (group.playlistLoader) group.playlistLoader.dispose();
            });
        });
        this.audioSegmentLoader_.dispose();
        this.subtitleSegmentLoader_.dispose();
        this.sourceUpdater_.dispose();
        this.timelineChangeController_.dispose();
        this.stopABRTimer_();
        if (this.updateDuration_) this.mediaSource.removeEventListener("sourceopen", this.updateDuration_);
        this.mediaSource.removeEventListener("durationchange", this.handleDurationChange_); // load the media source into the player
        this.mediaSource.removeEventListener("sourceopen", this.handleSourceOpen_);
        this.mediaSource.removeEventListener("sourceended", this.handleSourceEnded_);
        this.off();
    }
    /**
   * return the main playlist object if we have one
   *
   * @return {Object} the main playlist object that we parsed
   */ main() {
        return this.mainPlaylistLoader_.main;
    }
    /**
   * return the currently selected playlist
   *
   * @return {Object} the currently selected playlist object that we parsed
   */ media() {
        // playlist loader will not return media if it has not been fully loaded
        return this.mainPlaylistLoader_.media() || this.initialMedia_;
    }
    areMediaTypesKnown_() {
        const usingAudioLoader = !!this.mediaTypes_.AUDIO.activePlaylistLoader;
        const hasMainMediaInfo = !!this.mainSegmentLoader_.getCurrentMediaInfo_(); // if we are not using an audio loader, then we have audio media info
        // otherwise check on the segment loader.
        const hasAudioMediaInfo = !usingAudioLoader ? true : !!this.audioSegmentLoader_.getCurrentMediaInfo_(); // one or both loaders has not loaded sufficently to get codecs
        if (!hasMainMediaInfo || !hasAudioMediaInfo) return false;
        return true;
    }
    getCodecsOrExclude_() {
        const media = {
            main: this.mainSegmentLoader_.getCurrentMediaInfo_() || {},
            audio: this.audioSegmentLoader_.getCurrentMediaInfo_() || {}
        };
        const playlist = this.mainSegmentLoader_.getPendingSegmentPlaylist() || this.media(); // set "main" media equal to video
        media.video = media.main;
        const playlistCodecs = $e88cd91ee18355c1$var$codecsForPlaylist(this.main(), playlist);
        const codecs = {};
        const usingAudioLoader = !!this.mediaTypes_.AUDIO.activePlaylistLoader;
        if (media.main.hasVideo) codecs.video = playlistCodecs.video || media.main.videoCodec || (0, $823f1f5df1bbf628$export$77d6196664053611);
        if (media.main.isMuxed) codecs.video += `,${playlistCodecs.audio || media.main.audioCodec || (0, $823f1f5df1bbf628$export$615de1d7b49571dc)}`;
        if (media.main.hasAudio && !media.main.isMuxed || media.audio.hasAudio || usingAudioLoader) {
            codecs.audio = playlistCodecs.audio || media.main.audioCodec || media.audio.audioCodec || (0, $823f1f5df1bbf628$export$615de1d7b49571dc); // set audio isFmp4 so we use the correct "supports" function below
            media.audio.isFmp4 = media.main.hasAudio && !media.main.isMuxed ? media.main.isFmp4 : media.audio.isFmp4;
        } // no codecs, no playback.
        if (!codecs.audio && !codecs.video) {
            this.excludePlaylist({
                playlistToExclude: playlist,
                error: {
                    message: "Could not determine codecs for playlist."
                },
                playlistExclusionDuration: Infinity
            });
            return;
        } // fmp4 relies on browser support, while ts relies on muxer support
        const supportFunction = (isFmp4, codec)=>isFmp4 ? (0, $823f1f5df1bbf628$export$3ee949df8fbc592f)(codec) : (0, $823f1f5df1bbf628$export$614fda2d02e4a9d7)(codec);
        const unsupportedCodecs = {};
        let unsupportedAudio;
        [
            "video",
            "audio"
        ].forEach(function(type) {
            if (codecs.hasOwnProperty(type) && !supportFunction(media[type].isFmp4, codecs[type])) {
                const supporter = media[type].isFmp4 ? "browser" : "muxer";
                unsupportedCodecs[supporter] = unsupportedCodecs[supporter] || [];
                unsupportedCodecs[supporter].push(codecs[type]);
                if (type === "audio") unsupportedAudio = supporter;
            }
        });
        if (usingAudioLoader && unsupportedAudio && playlist.attributes.AUDIO) {
            const audioGroup = playlist.attributes.AUDIO;
            this.main().playlists.forEach((variant)=>{
                const variantAudioGroup = variant.attributes && variant.attributes.AUDIO;
                if (variantAudioGroup === audioGroup && variant !== playlist) variant.excludeUntil = Infinity;
            });
            this.logger_(`excluding audio group ${audioGroup} as ${unsupportedAudio} does not support codec(s): "${codecs.audio}"`);
        } // if we have any unsupported codecs exclude this playlist.
        if (Object.keys(unsupportedCodecs).length) {
            const message = Object.keys(unsupportedCodecs).reduce((acc, supporter)=>{
                if (acc) acc += ", ";
                acc += `${supporter} does not support codec(s): "${unsupportedCodecs[supporter].join(",")}"`;
                return acc;
            }, "") + ".";
            this.excludePlaylist({
                playlistToExclude: playlist,
                error: {
                    internal: true,
                    message: message
                },
                playlistExclusionDuration: Infinity
            });
            return;
        } // check if codec switching is happening
        if (this.sourceUpdater_.hasCreatedSourceBuffers() && !this.sourceUpdater_.canChangeType()) {
            const switchMessages = [];
            [
                "video",
                "audio"
            ].forEach((type)=>{
                const newCodec = ((0, $823f1f5df1bbf628$export$56679b562aa2891c)(this.sourceUpdater_.codecs[type] || "")[0] || {}).type;
                const oldCodec = ((0, $823f1f5df1bbf628$export$56679b562aa2891c)(codecs[type] || "")[0] || {}).type;
                if (newCodec && oldCodec && newCodec.toLowerCase() !== oldCodec.toLowerCase()) switchMessages.push(`"${this.sourceUpdater_.codecs[type]}" -> "${codecs[type]}"`);
            });
            if (switchMessages.length) {
                this.excludePlaylist({
                    playlistToExclude: playlist,
                    error: {
                        message: `Codec switching not supported: ${switchMessages.join(", ")}.`,
                        internal: true
                    },
                    playlistExclusionDuration: Infinity
                });
                return;
            }
        } // TODO: when using the muxer shouldn't we just return
        // the codecs that the muxer outputs?
        return codecs;
    }
    /**
   * Create source buffers and exlude any incompatible renditions.
   *
   * @private
   */ tryToCreateSourceBuffers_() {
        // media source is not ready yet or sourceBuffers are already
        // created.
        if (this.mediaSource.readyState !== "open" || this.sourceUpdater_.hasCreatedSourceBuffers()) return;
        if (!this.areMediaTypesKnown_()) return;
        const codecs = this.getCodecsOrExclude_(); // no codecs means that the playlist was excluded
        if (!codecs) return;
        this.sourceUpdater_.createSourceBuffers(codecs);
        const codecString = [
            codecs.video,
            codecs.audio
        ].filter(Boolean).join(",");
        this.excludeIncompatibleVariants_(codecString);
    }
    /**
   * Excludes playlists with codecs that are unsupported by the muxer and browser.
   */ excludeUnsupportedVariants_() {
        const playlists = this.main().playlists;
        const ids = []; // TODO: why don't we have a property to loop through all
        // playlist? Why did we ever mix indexes and keys?
        Object.keys(playlists).forEach((key)=>{
            const variant = playlists[key]; // check if we already processed this playlist.
            if (ids.indexOf(variant.id) !== -1) return;
            ids.push(variant.id);
            const codecs = $e88cd91ee18355c1$var$codecsForPlaylist(this.main, variant);
            const unsupported = [];
            if (codecs.audio && !(0, $823f1f5df1bbf628$export$614fda2d02e4a9d7)(codecs.audio) && !(0, $823f1f5df1bbf628$export$3ee949df8fbc592f)(codecs.audio)) unsupported.push(`audio codec ${codecs.audio}`);
            if (codecs.video && !(0, $823f1f5df1bbf628$export$614fda2d02e4a9d7)(codecs.video) && !(0, $823f1f5df1bbf628$export$3ee949df8fbc592f)(codecs.video)) unsupported.push(`video codec ${codecs.video}`);
            if (codecs.text && codecs.text === "stpp.ttml.im1t") unsupported.push(`text codec ${codecs.text}`);
            if (unsupported.length) {
                variant.excludeUntil = Infinity;
                this.logger_(`excluding ${variant.id} for unsupported: ${unsupported.join(", ")}`);
            }
        });
    }
    /**
   * Exclude playlists that are known to be codec or
   * stream-incompatible with the SourceBuffer configuration. For
   * instance, Media Source Extensions would cause the video element to
   * stall waiting for video data if you switched from a variant with
   * video and audio to an audio-only one.
   *
   * @param {Object} media a media playlist compatible with the current
   * set of SourceBuffers. Variants in the current main playlist that
   * do not appear to have compatible codec or stream configurations
   * will be excluded from the default playlist selection algorithm
   * indefinitely.
   * @private
   */ excludeIncompatibleVariants_(codecString) {
        const ids = [];
        const playlists = this.main().playlists;
        const codecs = $e88cd91ee18355c1$var$unwrapCodecList((0, $823f1f5df1bbf628$export$56679b562aa2891c)(codecString));
        const codecCount_ = $e88cd91ee18355c1$var$codecCount(codecs);
        const videoDetails = codecs.video && (0, $823f1f5df1bbf628$export$56679b562aa2891c)(codecs.video)[0] || null;
        const audioDetails = codecs.audio && (0, $823f1f5df1bbf628$export$56679b562aa2891c)(codecs.audio)[0] || null;
        Object.keys(playlists).forEach((key)=>{
            const variant = playlists[key]; // check if we already processed this playlist.
            // or it if it is already excluded forever.
            if (ids.indexOf(variant.id) !== -1 || variant.excludeUntil === Infinity) return;
            ids.push(variant.id);
            const exclusionReasons = []; // get codecs from the playlist for this variant
            const variantCodecs = $e88cd91ee18355c1$var$codecsForPlaylist(this.mainPlaylistLoader_.main, variant);
            const variantCodecCount = $e88cd91ee18355c1$var$codecCount(variantCodecs); // if no codecs are listed, we cannot determine that this
            // variant is incompatible. Wait for mux.js to probe
            if (!variantCodecs.audio && !variantCodecs.video) return;
             // TODO: we can support this by removing the
            // old media source and creating a new one, but it will take some work.
            // The number of streams cannot change
            if (variantCodecCount !== codecCount_) exclusionReasons.push(`codec count "${variantCodecCount}" !== "${codecCount_}"`);
             // only exclude playlists by codec change, if codecs cannot switch
            // during playback.
            if (!this.sourceUpdater_.canChangeType()) {
                const variantVideoDetails = variantCodecs.video && (0, $823f1f5df1bbf628$export$56679b562aa2891c)(variantCodecs.video)[0] || null;
                const variantAudioDetails = variantCodecs.audio && (0, $823f1f5df1bbf628$export$56679b562aa2891c)(variantCodecs.audio)[0] || null; // the video codec cannot change
                if (variantVideoDetails && videoDetails && variantVideoDetails.type.toLowerCase() !== videoDetails.type.toLowerCase()) exclusionReasons.push(`video codec "${variantVideoDetails.type}" !== "${videoDetails.type}"`);
                 // the audio codec cannot change
                if (variantAudioDetails && audioDetails && variantAudioDetails.type.toLowerCase() !== audioDetails.type.toLowerCase()) exclusionReasons.push(`audio codec "${variantAudioDetails.type}" !== "${audioDetails.type}"`);
            }
            if (exclusionReasons.length) {
                variant.excludeUntil = Infinity;
                this.logger_(`excluding ${variant.id}: ${exclusionReasons.join(" && ")}`);
            }
        });
    }
    updateAdCues_(media) {
        let offset = 0;
        const seekable = this.seekable();
        if (seekable.length) offset = seekable.start(0);
        $e88cd91ee18355c1$var$updateAdCues(media, this.cueTagsTrack_, offset);
    }
    /**
   * Calculates the desired forward buffer length based on current time
   *
   * @return {number} Desired forward buffer length in seconds
   */ goalBufferLength() {
        const currentTime = this.tech_.currentTime();
        const initial = $e88cd91ee18355c1$var$Config.GOAL_BUFFER_LENGTH;
        const rate = $e88cd91ee18355c1$var$Config.GOAL_BUFFER_LENGTH_RATE;
        const max = Math.max(initial, $e88cd91ee18355c1$var$Config.MAX_GOAL_BUFFER_LENGTH);
        return Math.min(initial + currentTime * rate, max);
    }
    /**
   * Calculates the desired buffer low water line based on current time
   *
   * @return {number} Desired buffer low water line in seconds
   */ bufferLowWaterLine() {
        const currentTime = this.tech_.currentTime();
        const initial = $e88cd91ee18355c1$var$Config.BUFFER_LOW_WATER_LINE;
        const rate = $e88cd91ee18355c1$var$Config.BUFFER_LOW_WATER_LINE_RATE;
        const max = Math.max(initial, $e88cd91ee18355c1$var$Config.MAX_BUFFER_LOW_WATER_LINE);
        const newMax = Math.max(initial, $e88cd91ee18355c1$var$Config.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE);
        return Math.min(initial + currentTime * rate, this.bufferBasedABR ? newMax : max);
    }
    bufferHighWaterLine() {
        return $e88cd91ee18355c1$var$Config.BUFFER_HIGH_WATER_LINE;
    }
    addDateRangesToTextTrack_(dateRanges) {
        $e88cd91ee18355c1$var$createMetadataTrackIfNotExists(this.inbandTextTracks_, "com.apple.streaming", this.tech_);
        $e88cd91ee18355c1$var$addDateRangeMetadata({
            inbandTextTracks: this.inbandTextTracks_,
            dateRanges: dateRanges
        });
    }
    addMetadataToTextTrack(dispatchType, metadataArray, videoDuration) {
        const timestampOffset = this.sourceUpdater_.videoBuffer ? this.sourceUpdater_.videoTimestampOffset() : this.sourceUpdater_.audioTimestampOffset(); // There's potentially an issue where we could double add metadata if there's a muxed
        // audio/video source with a metadata track, and an alt audio with a metadata track.
        // However, this probably won't happen, and if it does it can be handled then.
        $e88cd91ee18355c1$var$createMetadataTrackIfNotExists(this.inbandTextTracks_, dispatchType, this.tech_);
        $e88cd91ee18355c1$var$addMetadata({
            inbandTextTracks: this.inbandTextTracks_,
            metadataArray: metadataArray,
            timestampOffset: timestampOffset,
            videoDuration: videoDuration
        });
    }
    /**
   * Utility for getting the pathway or service location from an HLS or DASH playlist.
   *
   * @param {Object} playlist for getting pathway from.
   * @return the pathway attribute of a playlist
   */ pathwayAttribute_(playlist) {
        return playlist.attributes["PATHWAY-ID"] || playlist.attributes.serviceLocation;
    }
    /**
   * Initialize available pathways and apply the tag properties.
   */ initContentSteeringController_() {
        const main = this.main();
        if (!main.contentSteering) return;
        for (const playlist of main.playlists)this.contentSteeringController_.addAvailablePathway(this.pathwayAttribute_(playlist));
        this.contentSteeringController_.assignTagProperties(main.uri, main.contentSteering); // request the steering manifest immediately if queryBeforeStart is set.
        if (this.contentSteeringController_.queryBeforeStart) {
            // When queryBeforeStart is true, initial request should omit steering parameters.
            this.contentSteeringController_.requestSteeringManifest(true);
            return;
        } // otherwise start content steering after playback starts
        this.tech_.one("canplay", ()=>{
            this.contentSteeringController_.requestSteeringManifest();
        });
    }
    /**
   * Reset the content steering controller and re-init.
   */ resetContentSteeringController_() {
        this.contentSteeringController_.clearAvailablePathways();
        this.contentSteeringController_.dispose();
        this.initContentSteeringController_();
    }
    /**
   * Attaches the listeners for content steering.
   */ attachContentSteeringListeners_() {
        this.contentSteeringController_.on("content-steering", this.excludeThenChangePathway_.bind(this));
        if (this.sourceType_ === "dash") this.mainPlaylistLoader_.on("loadedplaylist", ()=>{
            const main = this.main(); // check if steering tag or pathways changed.
            const didDashTagChange = this.contentSteeringController_.didDASHTagChange(main.uri, main.contentSteering);
            const didPathwaysChange = ()=>{
                const availablePathways = this.contentSteeringController_.getAvailablePathways();
                const newPathways = [];
                for (const playlist of main.playlists){
                    const serviceLocation = playlist.attributes.serviceLocation;
                    if (serviceLocation) {
                        newPathways.push(serviceLocation);
                        if (!availablePathways.has(serviceLocation)) return true;
                    }
                } // If we have no new serviceLocations and previously had availablePathways
                if (!newPathways.length && availablePathways.size) return true;
                return false;
            };
            if (didDashTagChange || didPathwaysChange()) this.resetContentSteeringController_();
        });
    }
    /**
   * Simple exclude and change playlist logic for content steering.
   */ excludeThenChangePathway_() {
        const currentPathway = this.contentSteeringController_.getPathway();
        if (!currentPathway) return;
        this.handlePathwayClones_();
        const main = this.main();
        const playlists = main.playlists;
        const ids = new Set();
        let didEnablePlaylists = false;
        Object.keys(playlists).forEach((key)=>{
            const variant = playlists[key];
            const pathwayId = this.pathwayAttribute_(variant);
            const differentPathwayId = pathwayId && currentPathway !== pathwayId;
            const steeringExclusion = variant.excludeUntil === Infinity && variant.lastExcludeReason_ === "content-steering";
            if (steeringExclusion && !differentPathwayId) {
                delete variant.excludeUntil;
                delete variant.lastExcludeReason_;
                didEnablePlaylists = true;
            }
            const noExcludeUntil = !variant.excludeUntil && variant.excludeUntil !== Infinity;
            const shouldExclude = !ids.has(variant.id) && differentPathwayId && noExcludeUntil;
            if (!shouldExclude) return;
            ids.add(variant.id);
            variant.excludeUntil = Infinity;
            variant.lastExcludeReason_ = "content-steering"; // TODO: kind of spammy, maybe move this.
            this.logger_(`excluding ${variant.id} for ${variant.lastExcludeReason_}`);
        });
        if (this.contentSteeringController_.manifestType_ === "DASH") Object.keys(this.mediaTypes_).forEach((key)=>{
            const type = this.mediaTypes_[key];
            if (type.activePlaylistLoader) {
                const currentPlaylist = type.activePlaylistLoader.media_; // Check if the current media playlist matches the current CDN
                if (currentPlaylist && currentPlaylist.attributes.serviceLocation !== currentPathway) didEnablePlaylists = true;
            }
        });
        if (didEnablePlaylists) this.changeSegmentPathway_();
    }
    /**
   * Add, update, or delete playlists and media groups for
   * the pathway clones for HLS Content Steering.
   *
   * See https://datatracker.ietf.org/doc/draft-pantos-hls-rfc8216bis/
   *
   * NOTE: Pathway cloning does not currently support the `PER_VARIANT_URIS` and
   * `PER_RENDITION_URIS` as we do not handle `STABLE-VARIANT-ID` or
   * `STABLE-RENDITION-ID` values.
   */ handlePathwayClones_() {
        const main = this.main();
        const playlists = main.playlists;
        const currentPathwayClones = this.contentSteeringController_.currentPathwayClones;
        const nextPathwayClones = this.contentSteeringController_.nextPathwayClones;
        const hasClones = currentPathwayClones && currentPathwayClones.size || nextPathwayClones && nextPathwayClones.size;
        if (!hasClones) return;
        for (const [id, clone] of currentPathwayClones.entries()){
            const newClone = nextPathwayClones.get(id); // Delete the old pathway clone.
            if (!newClone) {
                this.mainPlaylistLoader_.updateOrDeleteClone(clone);
                this.contentSteeringController_.excludePathway(id);
            }
        }
        for (const [id, clone] of nextPathwayClones.entries()){
            const oldClone = currentPathwayClones.get(id); // Create a new pathway if it is a new pathway clone object.
            if (!oldClone) {
                const playlistsToClone = playlists.filter((p)=>{
                    return p.attributes["PATHWAY-ID"] === clone["BASE-ID"];
                });
                playlistsToClone.forEach((p)=>{
                    this.mainPlaylistLoader_.addClonePathway(clone, p);
                });
                this.contentSteeringController_.addAvailablePathway(id);
                continue;
            } // There have not been changes to the pathway clone object, so skip.
            if (this.equalPathwayClones_(oldClone, clone)) continue;
             // Update a preexisting cloned pathway.
            // True is set for the update flag.
            this.mainPlaylistLoader_.updateOrDeleteClone(clone, true);
            this.contentSteeringController_.addAvailablePathway(id);
        } // Deep copy contents of next to current pathways.
        this.contentSteeringController_.currentPathwayClones = new Map(JSON.parse(JSON.stringify([
            ...nextPathwayClones
        ])));
    }
    /**
   * Determines whether two pathway clone objects are equivalent.
   *
   * @param {Object} a The first pathway clone object.
   * @param {Object} b The second pathway clone object.
   * @return {boolean} True if the pathway clone objects are equal, false otherwise.
   */ equalPathwayClones_(a, b) {
        if (a["BASE-ID"] !== b["BASE-ID"] || a.ID !== b.ID || a["URI-REPLACEMENT"].HOST !== b["URI-REPLACEMENT"].HOST) return false;
        const aParams = a["URI-REPLACEMENT"].PARAMS;
        const bParams = b["URI-REPLACEMENT"].PARAMS; // We need to iterate through both lists of params because one could be
        // missing a parameter that the other has.
        for(const p in aParams){
            if (aParams[p] !== bParams[p]) return false;
        }
        for(const p in bParams){
            if (aParams[p] !== bParams[p]) return false;
        }
        return true;
    }
    /**
   * Changes the current playlists for audio, video and subtitles after a new pathway
   * is chosen from content steering.
   */ changeSegmentPathway_() {
        const nextPlaylist = this.selectPlaylist();
        this.pauseLoading(); // Switch audio and text track playlists if necessary in DASH
        if (this.contentSteeringController_.manifestType_ === "DASH") this.switchMediaForDASHContentSteering_();
        this.switchMedia_(nextPlaylist, "content-steering");
    }
    /**
   * Iterates through playlists and check their keyId set and compare with the
   * keyStatusMap, only enable playlists that have a usable key. If the playlist
   * has no keyId leave it enabled by default.
   */ excludeNonUsablePlaylistsByKeyId_() {
        if (!this.mainPlaylistLoader_ || !this.mainPlaylistLoader_.main) return;
        let nonUsableKeyStatusCount = 0;
        const NON_USABLE = "non-usable";
        this.mainPlaylistLoader_.main.playlists.forEach((playlist)=>{
            const keyIdSet = this.mainPlaylistLoader_.getKeyIdSet(playlist); // If the playlist doesn't have keyIDs lets not exclude it.
            if (!keyIdSet || !keyIdSet.size) return;
            keyIdSet.forEach((key)=>{
                const USABLE = "usable";
                const hasUsableKeyStatus = this.keyStatusMap_.has(key) && this.keyStatusMap_.get(key) === USABLE;
                const nonUsableExclusion = playlist.lastExcludeReason_ === NON_USABLE && playlist.excludeUntil === Infinity;
                if (!hasUsableKeyStatus) {
                    // Only exclude playlists that haven't already been excluded as non-usable.
                    if (playlist.excludeUntil !== Infinity && playlist.lastExcludeReason_ !== NON_USABLE) {
                        playlist.excludeUntil = Infinity;
                        playlist.lastExcludeReason_ = NON_USABLE;
                        this.logger_(`excluding playlist ${playlist.id} because the key ID ${key} doesn't exist in the keyStatusMap or is not ${USABLE}`);
                    } // count all nonUsableKeyStatus
                    nonUsableKeyStatusCount++;
                } else if (hasUsableKeyStatus && nonUsableExclusion) {
                    delete playlist.excludeUntil;
                    delete playlist.lastExcludeReason_;
                    this.logger_(`enabling playlist ${playlist.id} because key ID ${key} is ${USABLE}`);
                }
            });
        }); // If for whatever reason every playlist has a non usable key status. Lets try re-including the SD renditions as a failsafe.
        if (nonUsableKeyStatusCount >= this.mainPlaylistLoader_.main.playlists.length) this.mainPlaylistLoader_.main.playlists.forEach((playlist)=>{
            const isNonHD = playlist && playlist.attributes && playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height < 720;
            const excludedForNonUsableKey = playlist.excludeUntil === Infinity && playlist.lastExcludeReason_ === NON_USABLE;
            if (isNonHD && excludedForNonUsableKey) {
                // Only delete the excludeUntil so we don't try and re-exclude these playlists.
                delete playlist.excludeUntil;
                $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn(`enabling non-HD playlist ${playlist.id} because all playlists were excluded due to ${NON_USABLE} key IDs`);
            }
        });
    }
    /**
   * Adds a keystatus to the keystatus map, tries to convert to string if necessary.
   *
   * @param {any} keyId the keyId to add a status for
   * @param {string} status the status of the keyId
   */ addKeyStatus_(keyId, status) {
        const isString = typeof keyId === "string";
        const keyIdHexString = isString ? keyId : $e88cd91ee18355c1$var$bufferToHexString(keyId);
        const formattedKeyIdString = keyIdHexString.slice(0, 32).toLowerCase();
        this.logger_(`KeyStatus '${status}' with key ID ${formattedKeyIdString} added to the keyStatusMap`);
        this.keyStatusMap_.set(formattedKeyIdString, status);
    }
    /**
   * Utility function for adding key status to the keyStatusMap and filtering usable encrypted playlists.
   *
   * @param {any} keyId the keyId from the keystatuschange event
   * @param {string} status the key status string
   */ updatePlaylistByKeyStatus(keyId, status) {
        this.addKeyStatus_(keyId, status);
        if (!this.waitingForFastQualityPlaylistReceived_) this.excludeNonUsableThenChangePlaylist_();
         // Listen to loadedplaylist with a single listener and check for new contentProtection elements when a playlist is updated.
        this.mainPlaylistLoader_.off("loadedplaylist", this.excludeNonUsableThenChangePlaylist_.bind(this));
        this.mainPlaylistLoader_.on("loadedplaylist", this.excludeNonUsableThenChangePlaylist_.bind(this));
    }
    excludeNonUsableThenChangePlaylist_() {
        this.excludeNonUsablePlaylistsByKeyId_();
        this.fastQualityChange_();
    }
}
/**
 * Returns a function that acts as the Enable/disable playlist function.
 *
 * @param {PlaylistLoader} loader - The main playlist loader
 * @param {string} playlistID - id of the playlist
 * @param {Function} changePlaylistFn - A function to be called after a
 * playlist's enabled-state has been changed. Will NOT be called if a
 * playlist's enabled-state is unchanged
 * @param {boolean=} enable - Value to set the playlist enabled-state to
 * or if undefined returns the current enabled-state for the playlist
 * @return {Function} Function for setting/getting enabled
 */ const $e88cd91ee18355c1$var$enableFunction = (loader, playlistID, changePlaylistFn)=>(enable)=>{
        const playlist = loader.main.playlists[playlistID];
        const incompatible = $e88cd91ee18355c1$var$isIncompatible(playlist);
        const currentlyEnabled = $e88cd91ee18355c1$var$isEnabled(playlist);
        if (typeof enable === "undefined") return currentlyEnabled;
        if (enable) delete playlist.disabled;
        else playlist.disabled = true;
        if (enable !== currentlyEnabled && !incompatible) {
            // Ensure the outside world knows about our changes
            changePlaylistFn();
            if (enable) loader.trigger("renditionenabled");
            else loader.trigger("renditiondisabled");
        }
        return enable;
    };
/**
 * The representation object encapsulates the publicly visible information
 * in a media playlist along with a setter/getter-type function (enabled)
 * for changing the enabled-state of a particular playlist entry
 *
 * @class Representation
 */ class $e88cd91ee18355c1$var$Representation {
    constructor(vhsHandler, playlist, id){
        const { playlistController_: pc } = vhsHandler;
        const qualityChangeFunction = pc.fastQualityChange_.bind(pc); // some playlist attributes are optional
        if (playlist.attributes) {
            const resolution = playlist.attributes.RESOLUTION;
            this.width = resolution && resolution.width;
            this.height = resolution && resolution.height;
            this.bandwidth = playlist.attributes.BANDWIDTH;
            this.frameRate = playlist.attributes["FRAME-RATE"];
        }
        this.codecs = $e88cd91ee18355c1$var$codecsForPlaylist(pc.main(), playlist);
        this.playlist = playlist; // The id is simply the ordinality of the media playlist
        // within the main playlist
        this.id = id; // Partially-apply the enableFunction to create a playlist-
        // specific variant
        this.enabled = $e88cd91ee18355c1$var$enableFunction(vhsHandler.playlists, playlist.id, qualityChangeFunction);
    }
}
/**
 * A mixin function that adds the `representations` api to an instance
 * of the VhsHandler class
 *
 * @param {VhsHandler} vhsHandler - An instance of VhsHandler to add the
 * representation API into
 */ const $e88cd91ee18355c1$var$renditionSelectionMixin = function(vhsHandler) {
    // Add a single API-specific function to the VhsHandler instance
    vhsHandler.representations = ()=>{
        const main = vhsHandler.playlistController_.main();
        const playlists = $e88cd91ee18355c1$var$isAudioOnly(main) ? vhsHandler.playlistController_.getAudioTrackPlaylists_() : main.playlists;
        if (!playlists) return [];
        return playlists.filter((media)=>!$e88cd91ee18355c1$var$isIncompatible(media)).map((e, i)=>new $e88cd91ee18355c1$var$Representation(vhsHandler, e, e.id));
    };
};
/**
 * @file playback-watcher.js
 *
 * Playback starts, and now my watch begins. It shall not end until my death. I shall
 * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns
 * and win no glory. I shall live and die at my post. I am the corrector of the underflow.
 * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge
 * my life and honor to the Playback Watch, for this Player and all the Players to come.
 */ const $e88cd91ee18355c1$var$timerCancelEvents = [
    "seeking",
    "seeked",
    "pause",
    "playing",
    "error"
];
/**
 * @class PlaybackWatcher
 */ class $e88cd91ee18355c1$var$PlaybackWatcher {
    /**
   * Represents an PlaybackWatcher object.
   *
   * @class
   * @param {Object} options an object that includes the tech and settings
   */ constructor(options){
        this.playlistController_ = options.playlistController;
        this.tech_ = options.tech;
        this.seekable = options.seekable;
        this.allowSeeksWithinUnsafeLiveWindow = options.allowSeeksWithinUnsafeLiveWindow;
        this.liveRangeSafeTimeDelta = options.liveRangeSafeTimeDelta;
        this.media = options.media;
        this.consecutiveUpdates = 0;
        this.lastRecordedTime = null;
        this.checkCurrentTimeTimeout_ = null;
        this.logger_ = $e88cd91ee18355c1$var$logger("PlaybackWatcher");
        this.logger_("initialize");
        const playHandler = ()=>this.monitorCurrentTime_();
        const canPlayHandler = ()=>this.monitorCurrentTime_();
        const waitingHandler = ()=>this.techWaiting_();
        const cancelTimerHandler = ()=>this.resetTimeUpdate_();
        const pc = this.playlistController_;
        const loaderTypes = [
            "main",
            "subtitle",
            "audio"
        ];
        const loaderChecks = {};
        loaderTypes.forEach((type)=>{
            loaderChecks[type] = {
                reset: ()=>this.resetSegmentDownloads_(type),
                updateend: ()=>this.checkSegmentDownloads_(type)
            };
            pc[`${type}SegmentLoader_`].on("appendsdone", loaderChecks[type].updateend); // If a rendition switch happens during a playback stall where the buffer
            // isn't changing we want to reset. We cannot assume that the new rendition
            // will also be stalled, until after new appends.
            pc[`${type}SegmentLoader_`].on("playlistupdate", loaderChecks[type].reset); // Playback stalls should not be detected right after seeking.
            // This prevents one segment playlists (single vtt or single segment content)
            // from being detected as stalling. As the buffer will not change in those cases, since
            // the buffer is the entire video duration.
            this.tech_.on([
                "seeked",
                "seeking"
            ], loaderChecks[type].reset);
        });
        /**
     * We check if a seek was into a gap through the following steps:
     * 1. We get a seeking event and we do not get a seeked event. This means that
     *    a seek was attempted but not completed.
     * 2. We run `fixesBadSeeks_` on segment loader appends. This means that we already
     *    removed everything from our buffer and appended a segment, and should be ready
     *    to check for gaps.
     */ const setSeekingHandlers = (fn)=>{
            [
                "main",
                "audio"
            ].forEach((type)=>{
                pc[`${type}SegmentLoader_`][fn]("appended", this.seekingAppendCheck_);
            });
        };
        this.seekingAppendCheck_ = ()=>{
            if (this.fixesBadSeeks_()) {
                this.consecutiveUpdates = 0;
                this.lastRecordedTime = this.tech_.currentTime();
                setSeekingHandlers("off");
            }
        };
        this.clearSeekingAppendCheck_ = ()=>setSeekingHandlers("off");
        this.watchForBadSeeking_ = ()=>{
            this.clearSeekingAppendCheck_();
            setSeekingHandlers("on");
        };
        this.tech_.on("seeked", this.clearSeekingAppendCheck_);
        this.tech_.on("seeking", this.watchForBadSeeking_);
        this.tech_.on("waiting", waitingHandler);
        this.tech_.on($e88cd91ee18355c1$var$timerCancelEvents, cancelTimerHandler);
        this.tech_.on("canplay", canPlayHandler);
        /*
      An edge case exists that results in gaps not being skipped when they exist at the beginning of a stream. This case
      is surfaced in one of two ways:
       1)  The `waiting` event is fired before the player has buffered content, making it impossible
          to find or skip the gap. The `waiting` event is followed by a `play` event. On first play
          we can check if playback is stalled due to a gap, and skip the gap if necessary.
      2)  A source with a gap at the beginning of the stream is loaded programatically while the player
          is in a playing state. To catch this case, it's important that our one-time play listener is setup
          even if the player is in a playing state
    */ this.tech_.one("play", playHandler); // Define the dispose function to clean up our events
        this.dispose = ()=>{
            this.clearSeekingAppendCheck_();
            this.logger_("dispose");
            this.tech_.off("waiting", waitingHandler);
            this.tech_.off($e88cd91ee18355c1$var$timerCancelEvents, cancelTimerHandler);
            this.tech_.off("canplay", canPlayHandler);
            this.tech_.off("play", playHandler);
            this.tech_.off("seeking", this.watchForBadSeeking_);
            this.tech_.off("seeked", this.clearSeekingAppendCheck_);
            loaderTypes.forEach((type)=>{
                pc[`${type}SegmentLoader_`].off("appendsdone", loaderChecks[type].updateend);
                pc[`${type}SegmentLoader_`].off("playlistupdate", loaderChecks[type].reset);
                this.tech_.off([
                    "seeked",
                    "seeking"
                ], loaderChecks[type].reset);
            });
            if (this.checkCurrentTimeTimeout_) (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.checkCurrentTimeTimeout_);
            this.resetTimeUpdate_();
        };
    }
    /**
   * Periodically check current time to see if playback stopped
   *
   * @private
   */ monitorCurrentTime_() {
        this.checkCurrentTime_();
        if (this.checkCurrentTimeTimeout_) (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).clearTimeout(this.checkCurrentTimeTimeout_);
         // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
        this.checkCurrentTimeTimeout_ = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).setTimeout(this.monitorCurrentTime_.bind(this), 250);
    }
    /**
   * Reset stalled download stats for a specific type of loader
   *
   * @param {string} type
   *        The segment loader type to check.
   *
   * @listens SegmentLoader#playlistupdate
   * @listens Tech#seeking
   * @listens Tech#seeked
   */ resetSegmentDownloads_(type) {
        const loader = this.playlistController_[`${type}SegmentLoader_`];
        if (this[`${type}StalledDownloads_`] > 0) this.logger_(`resetting possible stalled download count for ${type} loader`);
        this[`${type}StalledDownloads_`] = 0;
        this[`${type}Buffered_`] = loader.buffered_();
    }
    /**
   * Checks on every segment `appendsdone` to see
   * if segment appends are making progress. If they are not
   * and we are still downloading bytes. We exclude the playlist.
   *
   * @param {string} type
   *        The segment loader type to check.
   *
   * @listens SegmentLoader#appendsdone
   */ checkSegmentDownloads_(type) {
        const pc = this.playlistController_;
        const loader = pc[`${type}SegmentLoader_`];
        const buffered = loader.buffered_();
        const isBufferedDifferent = $e88cd91ee18355c1$var$isRangeDifferent(this[`${type}Buffered_`], buffered);
        this[`${type}Buffered_`] = buffered; // if another watcher is going to fix the issue or
        // the buffered value for this loader changed
        // appends are working
        if (isBufferedDifferent) {
            this.resetSegmentDownloads_(type);
            return;
        }
        this[`${type}StalledDownloads_`]++;
        this.logger_(`found #${this[`${type}StalledDownloads_`]} ${type} appends that did not increase buffer (possible stalled download)`, {
            playlistId: loader.playlist_ && loader.playlist_.id,
            buffered: $e88cd91ee18355c1$var$timeRangesToArray(buffered)
        }); // after 10 possibly stalled appends with no reset, exclude
        if (this[`${type}StalledDownloads_`] < 10) return;
        this.logger_(`${type} loader stalled download exclusion`);
        this.resetSegmentDownloads_(type);
        this.tech_.trigger({
            type: "usage",
            name: `vhs-${type}-download-exclusion`
        });
        if (type === "subtitle") return;
         // TODO: should we exclude audio tracks rather than main tracks
        // when type is audio?
        pc.excludePlaylist({
            error: {
                message: `Excessive ${type} segment downloading detected.`
            },
            playlistExclusionDuration: Infinity
        });
    }
    /**
   * The purpose of this function is to emulate the "waiting" event on
   * browsers that do not emit it when they are waiting for more
   * data to continue playback
   *
   * @private
   */ checkCurrentTime_() {
        if (this.tech_.paused() || this.tech_.seeking()) return;
        const currentTime = this.tech_.currentTime();
        const buffered = this.tech_.buffered();
        if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + $e88cd91ee18355c1$var$SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) // If current time is at the end of the final buffered region, then any playback
        // stall is most likely caused by buffering in a low bandwidth environment. The tech
        // should fire a `waiting` event in this scenario, but due to browser and tech
        // inconsistencies. Calling `techWaiting_` here allows us to simulate
        // responding to a native `waiting` event when the tech fails to emit one.
        return this.techWaiting_();
        if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {
            this.consecutiveUpdates++;
            this.waiting_();
        } else if (currentTime === this.lastRecordedTime) this.consecutiveUpdates++;
        else {
            this.consecutiveUpdates = 0;
            this.lastRecordedTime = currentTime;
        }
    }
    /**
   * Resets the 'timeupdate' mechanism designed to detect that we are stalled
   *
   * @private
   */ resetTimeUpdate_() {
        this.consecutiveUpdates = 0;
    }
    /**
   * Fixes situations where there's a bad seek
   *
   * @return {boolean} whether an action was taken to fix the seek
   * @private
   */ fixesBadSeeks_() {
        const seeking = this.tech_.seeking();
        if (!seeking) return false;
         // TODO: It's possible that these seekable checks should be moved out of this function
        // and into a function that runs on seekablechange. It's also possible that we only need
        // afterSeekableWindow as the buffered check at the bottom is good enough to handle before
        // seekable range.
        const seekable = this.seekable();
        const currentTime = this.tech_.currentTime();
        const isAfterSeekableRange = this.afterSeekableWindow_(seekable, currentTime, this.media(), this.allowSeeksWithinUnsafeLiveWindow);
        let seekTo;
        if (isAfterSeekableRange) {
            const seekableEnd = seekable.end(seekable.length - 1); // sync to live point (if VOD, our seekable was updated and we're simply adjusting)
            seekTo = seekableEnd;
        }
        if (this.beforeSeekableWindow_(seekable, currentTime)) {
            const seekableStart = seekable.start(0); // sync to the beginning of the live window
            // provide a buffer of .1 seconds to handle rounding/imprecise numbers
            seekTo = seekableStart + // if the playlist is too short and the seekable range is an exact time (can
            // happen in live with a 3 segment playlist), then don't use a time delta
            (seekableStart === seekable.end(0) ? 0 : $e88cd91ee18355c1$var$SAFE_TIME_DELTA);
        }
        if (typeof seekTo !== "undefined") {
            this.logger_(`Trying to seek outside of seekable at time ${currentTime} with ` + `seekable range ${$e88cd91ee18355c1$var$printableRange(seekable)}. Seeking to ` + `${seekTo}.`);
            this.tech_.setCurrentTime(seekTo);
            return true;
        }
        const sourceUpdater = this.playlistController_.sourceUpdater_;
        const buffered = this.tech_.buffered();
        const audioBuffered = sourceUpdater.audioBuffer ? sourceUpdater.audioBuffered() : null;
        const videoBuffered = sourceUpdater.videoBuffer ? sourceUpdater.videoBuffered() : null;
        const media = this.media(); // verify that at least two segment durations or one part duration have been
        // appended before checking for a gap.
        const minAppendedDuration = media.partTargetDuration ? media.partTargetDuration : (media.targetDuration - $e88cd91ee18355c1$var$TIME_FUDGE_FACTOR) * 2; // verify that at least two segment durations have been
        // appended before checking for a gap.
        const bufferedToCheck = [
            audioBuffered,
            videoBuffered
        ];
        for(let i = 0; i < bufferedToCheck.length; i++){
            // skip null buffered
            if (!bufferedToCheck[i]) continue;
            const timeAhead = $e88cd91ee18355c1$var$timeAheadOf(bufferedToCheck[i], currentTime); // if we are less than two video/audio segment durations or one part
            // duration behind we haven't appended enough to call this a bad seek.
            if (timeAhead < minAppendedDuration) return false;
        }
        const nextRange = $e88cd91ee18355c1$var$findNextRange(buffered, currentTime); // we have appended enough content, but we don't have anything buffered
        // to seek over the gap
        if (nextRange.length === 0) return false;
        seekTo = nextRange.start(0) + $e88cd91ee18355c1$var$SAFE_TIME_DELTA;
        this.logger_(`Buffered region starts (${nextRange.start(0)}) ` + ` just beyond seek point (${currentTime}). Seeking to ${seekTo}.`);
        this.tech_.setCurrentTime(seekTo);
        return true;
    }
    /**
   * Handler for situations when we determine the player is waiting.
   *
   * @private
   */ waiting_() {
        if (this.techWaiting_()) return;
         // All tech waiting checks failed. Use last resort correction
        const currentTime = this.tech_.currentTime();
        const buffered = this.tech_.buffered();
        const currentRange = $e88cd91ee18355c1$var$findRange(buffered, currentTime); // Sometimes the player can stall for unknown reasons within a contiguous buffered
        // region with no indication that anything is amiss (seen in Firefox). Seeking to
        // currentTime is usually enough to kickstart the player. This checks that the player
        // is currently within a buffered region before attempting a corrective seek.
        // Chrome does not appear to continue `timeupdate` events after a `waiting` event
        // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also
        // make sure there is ~3 seconds of forward buffer before taking any corrective action
        // to avoid triggering an `unknownwaiting` event when the network is slow.
        if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {
            this.resetTimeUpdate_();
            this.tech_.setCurrentTime(currentTime);
            this.logger_(`Stopped at ${currentTime} while inside a buffered region ` + `[${currentRange.start(0)} -> ${currentRange.end(0)}]. Attempting to resume ` + "playback by seeking to the current time."); // unknown waiting corrections may be useful for monitoring QoS
            this.tech_.trigger({
                type: "usage",
                name: "vhs-unknown-waiting"
            });
            return;
        }
    }
    /**
   * Handler for situations when the tech fires a `waiting` event
   *
   * @return {boolean}
   *         True if an action (or none) was needed to correct the waiting. False if no
   *         checks passed
   * @private
   */ techWaiting_() {
        const seekable = this.seekable();
        const currentTime = this.tech_.currentTime();
        if (this.tech_.seeking()) // Tech is seeking or already waiting on another action, no action needed
        return true;
        if (this.beforeSeekableWindow_(seekable, currentTime)) {
            const livePoint = seekable.end(seekable.length - 1);
            this.logger_(`Fell out of live window at time ${currentTime}. Seeking to ` + `live point (seekable end) ${livePoint}`);
            this.resetTimeUpdate_();
            this.tech_.setCurrentTime(livePoint); // live window resyncs may be useful for monitoring QoS
            this.tech_.trigger({
                type: "usage",
                name: "vhs-live-resync"
            });
            return true;
        }
        const sourceUpdater = this.tech_.vhs.playlistController_.sourceUpdater_;
        const buffered = this.tech_.buffered();
        const videoUnderflow = this.videoUnderflow_({
            audioBuffered: sourceUpdater.audioBuffered(),
            videoBuffered: sourceUpdater.videoBuffered(),
            currentTime: currentTime
        });
        if (videoUnderflow) {
            // Even though the video underflowed and was stuck in a gap, the audio overplayed
            // the gap, leading currentTime into a buffered range. Seeking to currentTime
            // allows the video to catch up to the audio position without losing any audio
            // (only suffering ~3 seconds of frozen video and a pause in audio playback).
            this.resetTimeUpdate_();
            this.tech_.setCurrentTime(currentTime); // video underflow may be useful for monitoring QoS
            this.tech_.trigger({
                type: "usage",
                name: "vhs-video-underflow"
            });
            return true;
        }
        const nextRange = $e88cd91ee18355c1$var$findNextRange(buffered, currentTime); // check for gap
        if (nextRange.length > 0) {
            this.logger_(`Stopped at ${currentTime} and seeking to ${nextRange.start(0)}`);
            this.resetTimeUpdate_();
            this.skipTheGap_(currentTime);
            return true;
        } // All checks failed. Returning false to indicate failure to correct waiting
        return false;
    }
    afterSeekableWindow_(seekable, currentTime, playlist, allowSeeksWithinUnsafeLiveWindow = false) {
        if (!seekable.length) // we can't make a solid case if there's no seekable, default to false
        return false;
        let allowedEnd = seekable.end(seekable.length - 1) + $e88cd91ee18355c1$var$SAFE_TIME_DELTA;
        const isLive = !playlist.endList;
        const isLLHLS = typeof playlist.partTargetDuration === "number";
        if (isLive && (isLLHLS || allowSeeksWithinUnsafeLiveWindow)) allowedEnd = seekable.end(seekable.length - 1) + playlist.targetDuration * 3;
        if (currentTime > allowedEnd) return true;
        return false;
    }
    beforeSeekableWindow_(seekable, currentTime) {
        if (seekable.length && // can't fall before 0 and 0 seekable start identifies VOD stream
        seekable.start(0) > 0 && currentTime < seekable.start(0) - this.liveRangeSafeTimeDelta) return true;
        return false;
    }
    videoUnderflow_({ videoBuffered: videoBuffered, audioBuffered: audioBuffered, currentTime: currentTime }) {
        // audio only content will not have video underflow :)
        if (!videoBuffered) return;
        let gap; // find a gap in demuxed content.
        if (videoBuffered.length && audioBuffered.length) {
            // in Chrome audio will continue to play for ~3s when we run out of video
            // so we have to check that the video buffer did have some buffer in the
            // past.
            const lastVideoRange = $e88cd91ee18355c1$var$findRange(videoBuffered, currentTime - 3);
            const videoRange = $e88cd91ee18355c1$var$findRange(videoBuffered, currentTime);
            const audioRange = $e88cd91ee18355c1$var$findRange(audioBuffered, currentTime);
            if (audioRange.length && !videoRange.length && lastVideoRange.length) gap = {
                start: lastVideoRange.end(0),
                end: audioRange.end(0)
            };
             // find a gap in muxed content.
        } else {
            const nextRange = $e88cd91ee18355c1$var$findNextRange(videoBuffered, currentTime); // Even if there is no available next range, there is still a possibility we are
            // stuck in a gap due to video underflow.
            if (!nextRange.length) gap = this.gapFromVideoUnderflow_(videoBuffered, currentTime);
        }
        if (gap) {
            this.logger_(`Encountered a gap in video from ${gap.start} to ${gap.end}. ` + `Seeking to current time ${currentTime}`);
            return true;
        }
        return false;
    }
    /**
   * Timer callback. If playback still has not proceeded, then we seek
   * to the start of the next buffered region.
   *
   * @private
   */ skipTheGap_(scheduledCurrentTime) {
        const buffered = this.tech_.buffered();
        const currentTime = this.tech_.currentTime();
        const nextRange = $e88cd91ee18355c1$var$findNextRange(buffered, currentTime);
        this.resetTimeUpdate_();
        if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) return;
        this.logger_("skipTheGap_:", "currentTime:", currentTime, "scheduled currentTime:", scheduledCurrentTime, "nextRange start:", nextRange.start(0)); // only seek if we still have not played
        this.tech_.setCurrentTime(nextRange.start(0) + $e88cd91ee18355c1$var$TIME_FUDGE_FACTOR);
        this.tech_.trigger({
            type: "usage",
            name: "vhs-gap-skip"
        });
    }
    gapFromVideoUnderflow_(buffered, currentTime) {
        // At least in Chrome, if there is a gap in the video buffer, the audio will continue
        // playing for ~3 seconds after the video gap starts. This is done to account for
        // video buffer underflow/underrun (note that this is not done when there is audio
        // buffer underflow/underrun -- in that case the video will stop as soon as it
        // encounters the gap, as audio stalls are more noticeable/jarring to a user than
        // video stalls). The player's time will reflect the playthrough of audio, so the
        // time will appear as if we are in a buffered region, even if we are stuck in a
        // "gap."
        //
        // Example:
        // video buffer:   0 => 10.1, 10.2 => 20
        // audio buffer:   0 => 20
        // overall buffer: 0 => 10.1, 10.2 => 20
        // current time: 13
        //
        // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,
        // however, the audio continued playing until it reached ~3 seconds past the gap
        // (13 seconds), at which point it stops as well. Since current time is past the
        // gap, findNextRange will return no ranges.
        //
        // To check for this issue, we see if there is a gap that starts somewhere within
        // a 3 second range (3 seconds +/- 1 second) back from our current time.
        const gaps = $e88cd91ee18355c1$var$findGaps(buffered);
        for(let i = 0; i < gaps.length; i++){
            const start = gaps.start(i);
            const end = gaps.end(i); // gap is starts no more than 4 seconds back
            if (currentTime - start < 4 && currentTime - start > 2) return {
                start: start,
                end: end
            };
        }
        return null;
    }
}
const $e88cd91ee18355c1$var$defaultOptions = {
    errorInterval: 30,
    getSource (next) {
        const tech = this.tech({
            IWillNotUseThisInPlugins: true
        });
        const sourceObj = tech.currentSource_ || this.currentSource();
        return next(sourceObj);
    }
};
/**
 * Main entry point for the plugin
 *
 * @param {Player} player a reference to a videojs Player instance
 * @param {Object} [options] an object with plugin options
 * @private
 */ const $e88cd91ee18355c1$var$initPlugin = function(player, options) {
    let lastCalled = 0;
    let seekTo = 0;
    const localOptions = $e88cd91ee18355c1$var$merge($e88cd91ee18355c1$var$defaultOptions, options);
    player.ready(()=>{
        player.trigger({
            type: "usage",
            name: "vhs-error-reload-initialized"
        });
    });
    /**
   * Player modifications to perform that must wait until `loadedmetadata`
   * has been triggered
   *
   * @private
   */ const loadedMetadataHandler = function() {
        if (seekTo) player.currentTime(seekTo);
    };
    /**
   * Set the source on the player element, play, and seek if necessary
   *
   * @param {Object} sourceObj An object specifying the source url and mime-type to play
   * @private
   */ const setSource = function(sourceObj) {
        if (sourceObj === null || sourceObj === undefined) return;
        seekTo = player.duration() !== Infinity && player.currentTime() || 0;
        player.one("loadedmetadata", loadedMetadataHandler);
        player.src(sourceObj);
        player.trigger({
            type: "usage",
            name: "vhs-error-reload"
        });
        player.play();
    };
    /**
   * Attempt to get a source from either the built-in getSource function
   * or a custom function provided via the options
   *
   * @private
   */ const errorHandler = function() {
        // Do not attempt to reload the source if a source-reload occurred before
        // 'errorInterval' time has elapsed since the last source-reload
        if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {
            player.trigger({
                type: "usage",
                name: "vhs-error-reload-canceled"
            });
            return;
        }
        if (!localOptions.getSource || typeof localOptions.getSource !== "function") {
            $e88cd91ee18355c1$export$2e2bcd8739ae039.log.error("ERROR: reloadSourceOnError - The option getSource must be a function!");
            return;
        }
        lastCalled = Date.now();
        return localOptions.getSource.call(player, setSource);
    };
    /**
   * Unbind any event handlers that were bound by the plugin
   *
   * @private
   */ const cleanupEvents = function() {
        player.off("loadedmetadata", loadedMetadataHandler);
        player.off("error", errorHandler);
        player.off("dispose", cleanupEvents);
    };
    /**
   * Cleanup before re-initializing the plugin
   *
   * @param {Object} [newOptions] an object with plugin options
   * @private
   */ const reinitPlugin = function(newOptions) {
        cleanupEvents();
        $e88cd91ee18355c1$var$initPlugin(player, newOptions);
    };
    player.on("error", errorHandler);
    player.on("dispose", cleanupEvents); // Overwrite the plugin function so that we can correctly cleanup before
    // initializing the plugin
    player.reloadSourceOnError = reinitPlugin;
};
/**
 * Reload the source when an error is detected as long as there
 * wasn't an error previously within the last 30 seconds
 *
 * @param {Object} [options] an object with plugin options
 */ const $e88cd91ee18355c1$var$reloadSourceOnError = function(options) {
    $e88cd91ee18355c1$var$initPlugin(this, options);
};
var $e88cd91ee18355c1$var$version$4 = "3.9.1";
var $e88cd91ee18355c1$var$version$3 = "7.0.2";
var $e88cd91ee18355c1$var$version$2 = "1.3.0";
var $e88cd91ee18355c1$var$version$1 = "7.1.0";
var $e88cd91ee18355c1$var$version = "4.0.1";
/**
 * @file videojs-http-streaming.js
 *
 * The main file for the VHS project.
 * License: https://github.com/videojs/videojs-http-streaming/blob/main/LICENSE
 */ const $e88cd91ee18355c1$var$Vhs = {
    PlaylistLoader: $e88cd91ee18355c1$var$PlaylistLoader,
    Playlist: $e88cd91ee18355c1$var$Playlist,
    utils: $e88cd91ee18355c1$var$utils,
    STANDARD_PLAYLIST_SELECTOR: $e88cd91ee18355c1$var$lastBandwidthSelector,
    INITIAL_PLAYLIST_SELECTOR: $e88cd91ee18355c1$var$lowestBitrateCompatibleVariantSelector,
    lastBandwidthSelector: $e88cd91ee18355c1$var$lastBandwidthSelector,
    movingAverageBandwidthSelector: $e88cd91ee18355c1$var$movingAverageBandwidthSelector,
    comparePlaylistBandwidth: $e88cd91ee18355c1$var$comparePlaylistBandwidth,
    comparePlaylistResolution: $e88cd91ee18355c1$var$comparePlaylistResolution,
    xhr: $e88cd91ee18355c1$var$xhrFactory()
}; // Define getter/setters for config properties
Object.keys($e88cd91ee18355c1$var$Config).forEach((prop)=>{
    Object.defineProperty($e88cd91ee18355c1$var$Vhs, prop, {
        get () {
            $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn(`using Vhs.${prop} is UNSAFE be sure you know what you are doing`);
            return $e88cd91ee18355c1$var$Config[prop];
        },
        set (value) {
            $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn(`using Vhs.${prop} is UNSAFE be sure you know what you are doing`);
            if (typeof value !== "number" || value < 0) {
                $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn(`value of Vhs.${prop} must be greater than or equal to 0`);
                return;
            }
            $e88cd91ee18355c1$var$Config[prop] = value;
        }
    });
});
const $e88cd91ee18355c1$var$LOCAL_STORAGE_KEY = "videojs-vhs";
/**
 * Updates the selectedIndex of the QualityLevelList when a mediachange happens in vhs.
 *
 * @param {QualityLevelList} qualityLevels The QualityLevelList to update.
 * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.
 * @function handleVhsMediaChange
 */ const $e88cd91ee18355c1$var$handleVhsMediaChange = function(qualityLevels, playlistLoader) {
    const newPlaylist = playlistLoader.media();
    let selectedIndex = -1;
    for(let i = 0; i < qualityLevels.length; i++)if (qualityLevels[i].id === newPlaylist.id) {
        selectedIndex = i;
        break;
    }
    qualityLevels.selectedIndex_ = selectedIndex;
    qualityLevels.trigger({
        selectedIndex: selectedIndex,
        type: "change"
    });
};
/**
 * Adds quality levels to list once playlist metadata is available
 *
 * @param {QualityLevelList} qualityLevels The QualityLevelList to attach events to.
 * @param {Object} vhs Vhs object to listen to for media events.
 * @function handleVhsLoadedMetadata
 */ const $e88cd91ee18355c1$var$handleVhsLoadedMetadata = function(qualityLevels, vhs) {
    vhs.representations().forEach((rep)=>{
        qualityLevels.addQualityLevel(rep);
    });
    $e88cd91ee18355c1$var$handleVhsMediaChange(qualityLevels, vhs.playlists);
}; // VHS is a source handler, not a tech. Make sure attempts to use it
// as one do not cause exceptions.
$e88cd91ee18355c1$var$Vhs.canPlaySource = function() {
    return $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn("VHS is no longer a tech. Please remove it from your player's techOrder.");
};
const $e88cd91ee18355c1$var$emeKeySystems = (keySystemOptions, mainPlaylist, audioPlaylist)=>{
    if (!keySystemOptions) return keySystemOptions;
    let codecs = {};
    if (mainPlaylist && mainPlaylist.attributes && mainPlaylist.attributes.CODECS) codecs = $e88cd91ee18355c1$var$unwrapCodecList((0, $823f1f5df1bbf628$export$56679b562aa2891c)(mainPlaylist.attributes.CODECS));
    if (audioPlaylist && audioPlaylist.attributes && audioPlaylist.attributes.CODECS) codecs.audio = audioPlaylist.attributes.CODECS;
    const videoContentType = (0, $823f1f5df1bbf628$export$4b64fc0a026b9981)(codecs.video);
    const audioContentType = (0, $823f1f5df1bbf628$export$4b64fc0a026b9981)(codecs.audio); // upsert the content types based on the selected playlist
    const keySystemContentTypes = {};
    for(const keySystem in keySystemOptions){
        keySystemContentTypes[keySystem] = {};
        if (audioContentType) keySystemContentTypes[keySystem].audioContentType = audioContentType;
        if (videoContentType) keySystemContentTypes[keySystem].videoContentType = videoContentType;
         // Default to using the video playlist's PSSH even though they may be different, as
        // videojs-contrib-eme will only accept one in the options.
        //
        // This shouldn't be an issue for most cases as early intialization will handle all
        // unique PSSH values, and if they aren't, then encrypted events should have the
        // specific information needed for the unique license.
        if (mainPlaylist.contentProtection && mainPlaylist.contentProtection[keySystem] && mainPlaylist.contentProtection[keySystem].pssh) keySystemContentTypes[keySystem].pssh = mainPlaylist.contentProtection[keySystem].pssh;
         // videojs-contrib-eme accepts the option of specifying: 'com.some.cdm': 'url'
        // so we need to prevent overwriting the URL entirely
        if (typeof keySystemOptions[keySystem] === "string") keySystemContentTypes[keySystem].url = keySystemOptions[keySystem];
    }
    return $e88cd91ee18355c1$var$merge(keySystemOptions, keySystemContentTypes);
};
/**
 * @typedef {Object} KeySystems
 *
 * keySystems configuration for https://github.com/videojs/videojs-contrib-eme
 * Note: not all options are listed here.
 *
 * @property {Uint8Array} [pssh]
 *           Protection System Specific Header
 */ /**
 * Goes through all the playlists and collects an array of KeySystems options objects
 * containing each playlist's keySystems and their pssh values, if available.
 *
 * @param {Object[]} playlists
 *        The playlists to look through
 * @param {string[]} keySystems
 *        The keySystems to collect pssh values for
 *
 * @return {KeySystems[]}
 *         An array of KeySystems objects containing available key systems and their
 *         pssh values
 */ const $e88cd91ee18355c1$var$getAllPsshKeySystemsOptions = (playlists, keySystems)=>{
    return playlists.reduce((keySystemsArr, playlist)=>{
        if (!playlist.contentProtection) return keySystemsArr;
        const keySystemsOptions = keySystems.reduce((keySystemsObj, keySystem)=>{
            const keySystemOptions = playlist.contentProtection[keySystem];
            if (keySystemOptions && keySystemOptions.pssh) keySystemsObj[keySystem] = {
                pssh: keySystemOptions.pssh
            };
            return keySystemsObj;
        }, {});
        if (Object.keys(keySystemsOptions).length) keySystemsArr.push(keySystemsOptions);
        return keySystemsArr;
    }, []);
};
/**
 * Returns a promise that waits for the
 * [eme plugin](https://github.com/videojs/videojs-contrib-eme) to create a key session.
 *
 * Works around https://bugs.chromium.org/p/chromium/issues/detail?id=895449 in non-IE11
 * browsers.
 *
 * As per the above ticket, this is particularly important for Chrome, where, if
 * unencrypted content is appended before encrypted content and the key session has not
 * been created, a MEDIA_ERR_DECODE will be thrown once the encrypted content is reached
 * during playback.
 *
 * @param {Object} player
 *        The player instance
 * @param {Object[]} sourceKeySystems
 *        The key systems options from the player source
 * @param {Object} [audioMedia]
 *        The active audio media playlist (optional)
 * @param {Object[]} mainPlaylists
 *        The playlists found on the main playlist object
 *
 * @return {Object}
 *         Promise that resolves when the key session has been created
 */ const $e88cd91ee18355c1$var$waitForKeySessionCreation = ({ player: player, sourceKeySystems: sourceKeySystems, audioMedia: audioMedia, mainPlaylists: mainPlaylists })=>{
    if (!player.eme.initializeMediaKeys) return Promise.resolve();
     // TODO should all audio PSSH values be initialized for DRM?
    //
    // All unique video rendition pssh values are initialized for DRM, but here only
    // the initial audio playlist license is initialized. In theory, an encrypted
    // event should be fired if the user switches to an alternative audio playlist
    // where a license is required, but this case hasn't yet been tested. In addition, there
    // may be many alternate audio playlists unlikely to be used (e.g., multiple different
    // languages).
    const playlists = audioMedia ? mainPlaylists.concat([
        audioMedia
    ]) : mainPlaylists;
    const keySystemsOptionsArr = $e88cd91ee18355c1$var$getAllPsshKeySystemsOptions(playlists, Object.keys(sourceKeySystems));
    const initializationFinishedPromises = [];
    const keySessionCreatedPromises = []; // Since PSSH values are interpreted as initData, EME will dedupe any duplicates. The
    // only place where it should not be deduped is for ms-prefixed APIs, but
    // the existence of modern EME APIs in addition to
    // ms-prefixed APIs on Edge should prevent this from being a concern.
    // initializeMediaKeys also won't use the webkit-prefixed APIs.
    keySystemsOptionsArr.forEach((keySystemsOptions)=>{
        keySessionCreatedPromises.push(new Promise((resolve, reject)=>{
            player.tech_.one("keysessioncreated", resolve);
        }));
        initializationFinishedPromises.push(new Promise((resolve, reject)=>{
            player.eme.initializeMediaKeys({
                keySystems: keySystemsOptions
            }, (err)=>{
                if (err) {
                    reject(err);
                    return;
                }
                resolve();
            });
        }));
    }); // The reasons Promise.race is chosen over Promise.any:
    //
    // * Promise.any is only available in Safari 14+.
    // * None of these promises are expected to reject. If they do reject, it might be
    //   better here for the race to surface the rejection, rather than mask it by using
    //   Promise.any.
    return Promise.race([
        // If a session was previously created, these will all finish resolving without
        // creating a new session, otherwise it will take until the end of all license
        // requests, which is why the key session check is used (to make setup much faster).
        Promise.all(initializationFinishedPromises),
        // Once a single session is created, the browser knows DRM will be used.
        Promise.race(keySessionCreatedPromises)
    ]);
};
/**
 * If the [eme](https://github.com/videojs/videojs-contrib-eme) plugin is available, and
 * there are keySystems on the source, sets up source options to prepare the source for
 * eme.
 *
 * @param {Object} player
 *        The player instance
 * @param {Object[]} sourceKeySystems
 *        The key systems options from the player source
 * @param {Object} media
 *        The active media playlist
 * @param {Object} [audioMedia]
 *        The active audio media playlist (optional)
 *
 * @return {boolean}
 *         Whether or not options were configured and EME is available
 */ const $e88cd91ee18355c1$var$setupEmeOptions = ({ player: player, sourceKeySystems: sourceKeySystems, media: media, audioMedia: audioMedia })=>{
    const sourceOptions = $e88cd91ee18355c1$var$emeKeySystems(sourceKeySystems, media, audioMedia);
    if (!sourceOptions) return false;
    player.currentSource().keySystems = sourceOptions; // eme handles the rest of the setup, so if it is missing
    // do nothing.
    if (sourceOptions && !player.eme) {
        $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn("DRM encrypted source cannot be decrypted without a DRM plugin");
        return false;
    }
    return true;
};
const $e88cd91ee18355c1$var$getVhsLocalStorage = ()=>{
    if (!(0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).localStorage) return null;
    const storedObject = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).localStorage.getItem($e88cd91ee18355c1$var$LOCAL_STORAGE_KEY);
    if (!storedObject) return null;
    try {
        return JSON.parse(storedObject);
    } catch (e) {
        // someone may have tampered with the value
        return null;
    }
};
const $e88cd91ee18355c1$var$updateVhsLocalStorage = (options)=>{
    if (!(0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).localStorage) return false;
    let objectToStore = $e88cd91ee18355c1$var$getVhsLocalStorage();
    objectToStore = objectToStore ? $e88cd91ee18355c1$var$merge(objectToStore, options) : options;
    try {
        (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).localStorage.setItem($e88cd91ee18355c1$var$LOCAL_STORAGE_KEY, JSON.stringify(objectToStore));
    } catch (e) {
        // Throws if storage is full (e.g., always on iOS 5+ Safari private mode, where
        // storage is set to 0).
        // https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem#Exceptions
        // No need to perform any operation.
        return false;
    }
    return objectToStore;
};
/**
 * Parses VHS-supported media types from data URIs. See
 * https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs
 * for information on data URIs.
 *
 * @param {string} dataUri
 *        The data URI
 *
 * @return {string|Object}
 *         The parsed object/string, or the original string if no supported media type
 *         was found
 */ const $e88cd91ee18355c1$var$expandDataUri = (dataUri)=>{
    if (dataUri.toLowerCase().indexOf("data:application/vnd.videojs.vhs+json,") === 0) return JSON.parse(dataUri.substring(dataUri.indexOf(",") + 1));
     // no known case for this data URI, return the string as-is
    return dataUri;
};
/**
 * Adds a request hook to an xhr object
 *
 * @param {Object} xhr object to add the onRequest hook to
 * @param {function} callback hook function for an xhr request
 */ const $e88cd91ee18355c1$var$addOnRequestHook = (xhr, callback)=>{
    if (!xhr._requestCallbackSet) xhr._requestCallbackSet = new Set();
    xhr._requestCallbackSet.add(callback);
};
/**
 * Adds a response hook to an xhr object
 *
 * @param {Object} xhr object to add the onResponse hook to
 * @param {function} callback hook function for an xhr response
 */ const $e88cd91ee18355c1$var$addOnResponseHook = (xhr, callback)=>{
    if (!xhr._responseCallbackSet) xhr._responseCallbackSet = new Set();
    xhr._responseCallbackSet.add(callback);
};
/**
 * Removes a request hook on an xhr object, deletes the onRequest set if empty.
 *
 * @param {Object} xhr object to remove the onRequest hook from
 * @param {function} callback hook function to remove
 */ const $e88cd91ee18355c1$var$removeOnRequestHook = (xhr, callback)=>{
    if (!xhr._requestCallbackSet) return;
    xhr._requestCallbackSet.delete(callback);
    if (!xhr._requestCallbackSet.size) delete xhr._requestCallbackSet;
};
/**
 * Removes a response hook on an xhr object, deletes the onResponse set if empty.
 *
 * @param {Object} xhr object to remove the onResponse hook from
 * @param {function} callback hook function to remove
 */ const $e88cd91ee18355c1$var$removeOnResponseHook = (xhr, callback)=>{
    if (!xhr._responseCallbackSet) return;
    xhr._responseCallbackSet.delete(callback);
    if (!xhr._responseCallbackSet.size) delete xhr._responseCallbackSet;
};
/**
 * Whether the browser has built-in HLS support.
 */ $e88cd91ee18355c1$var$Vhs.supportsNativeHls = function() {
    if (!(0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))) || !(0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement) return false;
    const video = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("video"); // native HLS is definitely not supported if HTML5 video isn't
    if (!$e88cd91ee18355c1$export$2e2bcd8739ae039.getTech("Html5").isSupported()) return false;
     // HLS manifests can go by many mime-types
    const canPlay = [
        // Apple santioned
        "application/vnd.apple.mpegurl",
        // Apple sanctioned for backwards compatibility
        "audio/mpegurl",
        // Very common
        "audio/x-mpegurl",
        // Very common
        "application/x-mpegurl",
        // Included for completeness
        "video/x-mpegurl",
        "video/mpegurl",
        "application/mpegurl"
    ];
    return canPlay.some(function(canItPlay) {
        return /maybe|probably/i.test(video.canPlayType(canItPlay));
    });
}();
$e88cd91ee18355c1$var$Vhs.supportsNativeDash = function() {
    if (!(0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))) || !(0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement || !$e88cd91ee18355c1$export$2e2bcd8739ae039.getTech("Html5").isSupported()) return false;
    return /maybe|probably/i.test((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).createElement("video").canPlayType("application/dash+xml"));
}();
$e88cd91ee18355c1$var$Vhs.supportsTypeNatively = (type)=>{
    if (type === "hls") return $e88cd91ee18355c1$var$Vhs.supportsNativeHls;
    if (type === "dash") return $e88cd91ee18355c1$var$Vhs.supportsNativeDash;
    return false;
};
/**
 * VHS is a source handler, not a tech. Make sure attempts to use it
 * as one do not cause exceptions.
 */ $e88cd91ee18355c1$var$Vhs.isSupported = function() {
    return $e88cd91ee18355c1$export$2e2bcd8739ae039.log.warn("VHS is no longer a tech. Please remove it from your player's techOrder.");
};
/**
 * A global function for setting an onRequest hook
 *
 * @param {function} callback for request modifiction
 */ $e88cd91ee18355c1$var$Vhs.xhr.onRequest = function(callback) {
    $e88cd91ee18355c1$var$addOnRequestHook($e88cd91ee18355c1$var$Vhs.xhr, callback);
};
/**
 * A global function for setting an onResponse hook
 *
 * @param {callback} callback for response data retrieval
 */ $e88cd91ee18355c1$var$Vhs.xhr.onResponse = function(callback) {
    $e88cd91ee18355c1$var$addOnResponseHook($e88cd91ee18355c1$var$Vhs.xhr, callback);
};
/**
 * Deletes a global onRequest callback if it exists
 *
 * @param {function} callback to delete from the global set
 */ $e88cd91ee18355c1$var$Vhs.xhr.offRequest = function(callback) {
    $e88cd91ee18355c1$var$removeOnRequestHook($e88cd91ee18355c1$var$Vhs.xhr, callback);
};
/**
 * Deletes a global onResponse callback if it exists
 *
 * @param {function} callback to delete from the global set
 */ $e88cd91ee18355c1$var$Vhs.xhr.offResponse = function(callback) {
    $e88cd91ee18355c1$var$removeOnResponseHook($e88cd91ee18355c1$var$Vhs.xhr, callback);
};
const $e88cd91ee18355c1$var$Component = $e88cd91ee18355c1$export$2e2bcd8739ae039.getComponent("Component");
/**
 * The Vhs Handler object, where we orchestrate all of the parts
 * of VHS to interact with video.js
 *
 * @class VhsHandler
 * @extends videojs.Component
 * @param {Object} source the soruce object
 * @param {Tech} tech the parent tech object
 * @param {Object} options optional and required options
 */ class $e88cd91ee18355c1$var$VhsHandler extends $e88cd91ee18355c1$var$Component {
    constructor(source, tech, options){
        super(tech, options.vhs); // if a tech level `initialBandwidth` option was passed
        // use that over the VHS level `bandwidth` option
        if (typeof options.initialBandwidth === "number") this.options_.bandwidth = options.initialBandwidth;
        this.logger_ = $e88cd91ee18355c1$var$logger("VhsHandler"); // we need access to the player in some cases,
        // so, get it from Video.js via the `playerId`
        if (tech.options_ && tech.options_.playerId) {
            const _player = $e88cd91ee18355c1$export$2e2bcd8739ae039.getPlayer(tech.options_.playerId);
            this.player_ = _player;
        }
        this.tech_ = tech;
        this.source_ = source;
        this.stats = {};
        this.ignoreNextSeekingEvent_ = false;
        this.setOptions_();
        if (this.options_.overrideNative && tech.overrideNativeAudioTracks && tech.overrideNativeVideoTracks) {
            tech.overrideNativeAudioTracks(true);
            tech.overrideNativeVideoTracks(true);
        } else if (this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) // overriding native VHS only works if audio tracks have been emulated
        // error early if we're misconfigured
        throw new Error("Overriding native VHS requires emulated tracks. See https://git.io/vMpjB");
         // listen for fullscreenchange events for this player so that we
        // can adjust our quality selection quickly
        this.on((0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))), [
            "fullscreenchange",
            "webkitfullscreenchange",
            "mozfullscreenchange",
            "MSFullscreenChange"
        ], (event)=>{
            const fullscreenElement = (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).fullscreenElement || (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).webkitFullscreenElement || (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).mozFullScreenElement || (0, (/*@__PURE__*/$parcel$interopDefault($hiZ2X))).msFullscreenElement;
            if (fullscreenElement && fullscreenElement.contains(this.tech_.el())) this.playlistController_.fastQualityChange_();
            else // When leaving fullscreen, since the in page pixel dimensions should be smaller
            // than full screen, see if there should be a rendition switch down to preserve
            // bandwidth.
            this.playlistController_.checkABR_();
        });
        this.on(this.tech_, "seeking", function() {
            if (this.ignoreNextSeekingEvent_) {
                this.ignoreNextSeekingEvent_ = false;
                return;
            }
            this.setCurrentTime(this.tech_.currentTime());
        });
        this.on(this.tech_, "error", function() {
            // verify that the error was real and we are loaded
            // enough to have pc loaded.
            if (this.tech_.error() && this.playlistController_) this.playlistController_.pauseLoading();
        });
        this.on(this.tech_, "play", this.play);
    }
    /**
   * Set VHS options based on options from configuration, as well as partial
   * options to be passed at a later time.
   *
   * @param {Object} options A partial chunk of config options
   */ setOptions_(options = {}) {
        this.options_ = $e88cd91ee18355c1$var$merge(this.options_, options); // defaults
        this.options_.withCredentials = this.options_.withCredentials || false;
        this.options_.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions === false ? false : true;
        this.options_.useDevicePixelRatio = this.options_.useDevicePixelRatio || false;
        this.options_.useBandwidthFromLocalStorage = typeof this.source_.useBandwidthFromLocalStorage !== "undefined" ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || false;
        this.options_.useForcedSubtitles = this.options_.useForcedSubtitles || false;
        this.options_.useNetworkInformationApi = this.options_.useNetworkInformationApi || false;
        this.options_.useDtsForTimestampOffset = this.options_.useDtsForTimestampOffset || false;
        this.options_.customTagParsers = this.options_.customTagParsers || [];
        this.options_.customTagMappers = this.options_.customTagMappers || [];
        this.options_.cacheEncryptionKeys = this.options_.cacheEncryptionKeys || false;
        this.options_.llhls = this.options_.llhls === false ? false : true;
        this.options_.bufferBasedABR = this.options_.bufferBasedABR || false;
        if (typeof this.options_.playlistExclusionDuration !== "number") this.options_.playlistExclusionDuration = 60;
        if (typeof this.options_.bandwidth !== "number") {
            if (this.options_.useBandwidthFromLocalStorage) {
                const storedObject = $e88cd91ee18355c1$var$getVhsLocalStorage();
                if (storedObject && storedObject.bandwidth) {
                    this.options_.bandwidth = storedObject.bandwidth;
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-bandwidth-from-local-storage"
                    });
                }
                if (storedObject && storedObject.throughput) {
                    this.options_.throughput = storedObject.throughput;
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-throughput-from-local-storage"
                    });
                }
            }
        } // if bandwidth was not set by options or pulled from local storage, start playlist
        // selection at a reasonable bandwidth
        if (typeof this.options_.bandwidth !== "number") this.options_.bandwidth = $e88cd91ee18355c1$var$Config.INITIAL_BANDWIDTH;
         // If the bandwidth number is unchanged from the initial setting
        // then this takes precedence over the enableLowInitialPlaylist option
        this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === $e88cd91ee18355c1$var$Config.INITIAL_BANDWIDTH; // grab options passed to player.src
        [
            "withCredentials",
            "useDevicePixelRatio",
            "limitRenditionByPlayerDimensions",
            "bandwidth",
            "customTagParsers",
            "customTagMappers",
            "cacheEncryptionKeys",
            "playlistSelector",
            "initialPlaylistSelector",
            "bufferBasedABR",
            "liveRangeSafeTimeDelta",
            "llhls",
            "useForcedSubtitles",
            "useNetworkInformationApi",
            "useDtsForTimestampOffset",
            "exactManifestTimings",
            "leastPixelDiffSelector"
        ].forEach((option)=>{
            if (typeof this.source_[option] !== "undefined") this.options_[option] = this.source_[option];
        });
        this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions;
        this.useDevicePixelRatio = this.options_.useDevicePixelRatio;
    }
    setOptions(options = {}) {
        this.setOptions_(options);
    }
    /**
   * called when player.src gets called, handle a new source
   *
   * @param {Object} src the source object to handle
   */ src(src, type) {
        // do nothing if the src is falsey
        if (!src) return;
        this.setOptions_(); // add main playlist controller options
        this.options_.src = $e88cd91ee18355c1$var$expandDataUri(this.source_.src);
        this.options_.tech = this.tech_;
        this.options_.externVhs = $e88cd91ee18355c1$var$Vhs;
        this.options_.sourceType = (0, $c1e8cd70b6fc15b0$export$c4f0bf48244d4c05)(type); // Whenever we seek internally, we should update the tech
        this.options_.seekTo = (time)=>{
            this.tech_.setCurrentTime(time);
        };
        this.playlistController_ = new $e88cd91ee18355c1$var$PlaylistController(this.options_);
        const playbackWatcherOptions = $e88cd91ee18355c1$var$merge({
            liveRangeSafeTimeDelta: $e88cd91ee18355c1$var$SAFE_TIME_DELTA
        }, this.options_, {
            seekable: ()=>this.seekable(),
            media: ()=>this.playlistController_.media(),
            playlistController: this.playlistController_
        });
        this.playbackWatcher_ = new $e88cd91ee18355c1$var$PlaybackWatcher(playbackWatcherOptions);
        this.playlistController_.on("error", ()=>{
            const player = $e88cd91ee18355c1$export$2e2bcd8739ae039.players[this.tech_.options_.playerId];
            let error = this.playlistController_.error;
            if (typeof error === "object" && !error.code) error.code = 3;
            else if (typeof error === "string") error = {
                message: error,
                code: 3
            };
            player.error(error);
        });
        const defaultSelector = this.options_.bufferBasedABR ? $e88cd91ee18355c1$var$Vhs.movingAverageBandwidthSelector(0.55) : $e88cd91ee18355c1$var$Vhs.STANDARD_PLAYLIST_SELECTOR; // `this` in selectPlaylist should be the VhsHandler for backwards
        // compatibility with < v2
        this.playlistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : defaultSelector.bind(this);
        this.playlistController_.selectInitialPlaylist = $e88cd91ee18355c1$var$Vhs.INITIAL_PLAYLIST_SELECTOR.bind(this); // re-expose some internal objects for backwards compatibility with < v2
        this.playlists = this.playlistController_.mainPlaylistLoader_;
        this.mediaSource = this.playlistController_.mediaSource; // Proxy assignment of some properties to the main playlist
        // controller. Using a custom property for backwards compatibility
        // with < v2
        Object.defineProperties(this, {
            selectPlaylist: {
                get () {
                    return this.playlistController_.selectPlaylist;
                },
                set (selectPlaylist) {
                    this.playlistController_.selectPlaylist = selectPlaylist.bind(this);
                }
            },
            throughput: {
                get () {
                    return this.playlistController_.mainSegmentLoader_.throughput.rate;
                },
                set (throughput) {
                    this.playlistController_.mainSegmentLoader_.throughput.rate = throughput; // By setting `count` to 1 the throughput value becomes the starting value
                    // for the cumulative average
                    this.playlistController_.mainSegmentLoader_.throughput.count = 1;
                }
            },
            bandwidth: {
                get () {
                    let playerBandwidthEst = this.playlistController_.mainSegmentLoader_.bandwidth;
                    const networkInformation = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).navigator.connection || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).navigator.mozConnection || (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).navigator.webkitConnection;
                    const tenMbpsAsBitsPerSecond = 10e6;
                    if (this.options_.useNetworkInformationApi && networkInformation) {
                        // downlink returns Mbps
                        // https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlink
                        const networkInfoBandwidthEstBitsPerSec = networkInformation.downlink * 1000000; // downlink maxes out at 10 Mbps. In the event that both networkInformationApi and the player
                        // estimate a bandwidth greater than 10 Mbps, use the larger of the two estimates to ensure that
                        // high quality streams are not filtered out.
                        if (networkInfoBandwidthEstBitsPerSec >= tenMbpsAsBitsPerSecond && playerBandwidthEst >= tenMbpsAsBitsPerSecond) playerBandwidthEst = Math.max(playerBandwidthEst, networkInfoBandwidthEstBitsPerSec);
                        else playerBandwidthEst = networkInfoBandwidthEstBitsPerSec;
                    }
                    return playerBandwidthEst;
                },
                set (bandwidth) {
                    this.playlistController_.mainSegmentLoader_.bandwidth = bandwidth; // setting the bandwidth manually resets the throughput counter
                    // `count` is set to zero that current value of `rate` isn't included
                    // in the cumulative average
                    this.playlistController_.mainSegmentLoader_.throughput = {
                        rate: 0,
                        count: 0
                    };
                }
            },
            /**
       * `systemBandwidth` is a combination of two serial processes bit-rates. The first
       * is the network bitrate provided by `bandwidth` and the second is the bitrate of
       * the entire process after that - decryption, transmuxing, and appending - provided
       * by `throughput`.
       *
       * Since the two process are serial, the overall system bandwidth is given by:
       *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)
       */ systemBandwidth: {
                get () {
                    const invBandwidth = 1 / (this.bandwidth || 1);
                    let invThroughput;
                    if (this.throughput > 0) invThroughput = 1 / this.throughput;
                    else invThroughput = 0;
                    const systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));
                    return systemBitrate;
                },
                set () {
                    $e88cd91ee18355c1$export$2e2bcd8739ae039.log.error('The "systemBandwidth" property is read-only');
                }
            }
        });
        if (this.options_.bandwidth) this.bandwidth = this.options_.bandwidth;
        if (this.options_.throughput) this.throughput = this.options_.throughput;
        Object.defineProperties(this.stats, {
            bandwidth: {
                get: ()=>this.bandwidth || 0,
                enumerable: true
            },
            mediaRequests: {
                get: ()=>this.playlistController_.mediaRequests_() || 0,
                enumerable: true
            },
            mediaRequestsAborted: {
                get: ()=>this.playlistController_.mediaRequestsAborted_() || 0,
                enumerable: true
            },
            mediaRequestsTimedout: {
                get: ()=>this.playlistController_.mediaRequestsTimedout_() || 0,
                enumerable: true
            },
            mediaRequestsErrored: {
                get: ()=>this.playlistController_.mediaRequestsErrored_() || 0,
                enumerable: true
            },
            mediaTransferDuration: {
                get: ()=>this.playlistController_.mediaTransferDuration_() || 0,
                enumerable: true
            },
            mediaBytesTransferred: {
                get: ()=>this.playlistController_.mediaBytesTransferred_() || 0,
                enumerable: true
            },
            mediaSecondsLoaded: {
                get: ()=>this.playlistController_.mediaSecondsLoaded_() || 0,
                enumerable: true
            },
            mediaAppends: {
                get: ()=>this.playlistController_.mediaAppends_() || 0,
                enumerable: true
            },
            mainAppendsToLoadedData: {
                get: ()=>this.playlistController_.mainAppendsToLoadedData_() || 0,
                enumerable: true
            },
            audioAppendsToLoadedData: {
                get: ()=>this.playlistController_.audioAppendsToLoadedData_() || 0,
                enumerable: true
            },
            appendsToLoadedData: {
                get: ()=>this.playlistController_.appendsToLoadedData_() || 0,
                enumerable: true
            },
            timeToLoadedData: {
                get: ()=>this.playlistController_.timeToLoadedData_() || 0,
                enumerable: true
            },
            buffered: {
                get: ()=>$e88cd91ee18355c1$var$timeRangesToArray(this.tech_.buffered()),
                enumerable: true
            },
            currentTime: {
                get: ()=>this.tech_.currentTime(),
                enumerable: true
            },
            currentSource: {
                get: ()=>this.tech_.currentSource_,
                enumerable: true
            },
            currentTech: {
                get: ()=>this.tech_.name_,
                enumerable: true
            },
            duration: {
                get: ()=>this.tech_.duration(),
                enumerable: true
            },
            main: {
                get: ()=>this.playlists.main,
                enumerable: true
            },
            playerDimensions: {
                get: ()=>this.tech_.currentDimensions(),
                enumerable: true
            },
            seekable: {
                get: ()=>$e88cd91ee18355c1$var$timeRangesToArray(this.tech_.seekable()),
                enumerable: true
            },
            timestamp: {
                get: ()=>Date.now(),
                enumerable: true
            },
            videoPlaybackQuality: {
                get: ()=>this.tech_.getVideoPlaybackQuality(),
                enumerable: true
            }
        });
        this.tech_.one("canplay", this.playlistController_.setupFirstPlay.bind(this.playlistController_));
        this.tech_.on("bandwidthupdate", ()=>{
            if (this.options_.useBandwidthFromLocalStorage) $e88cd91ee18355c1$var$updateVhsLocalStorage({
                bandwidth: this.bandwidth,
                throughput: Math.round(this.throughput)
            });
        });
        this.playlistController_.on("selectedinitialmedia", ()=>{
            // Add the manual rendition mix-in to VhsHandler
            $e88cd91ee18355c1$var$renditionSelectionMixin(this);
        });
        this.playlistController_.sourceUpdater_.on("createdsourcebuffers", ()=>{
            this.setupEme_();
        }); // the bandwidth of the primary segment loader is our best
        // estimate of overall bandwidth
        this.on(this.playlistController_, "progress", function() {
            this.tech_.trigger("progress");
        }); // In the live case, we need to ignore the very first `seeking` event since
        // that will be the result of the seek-to-live behavior
        this.on(this.playlistController_, "firstplay", function() {
            this.ignoreNextSeekingEvent_ = true;
        });
        this.setupQualityLevels_(); // do nothing if the tech has been disposed already
        // this can occur if someone sets the src in player.ready(), for instance
        if (!this.tech_.el()) return;
        this.mediaSourceUrl_ = (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).URL.createObjectURL(this.playlistController_.mediaSource);
        this.tech_.src(this.mediaSourceUrl_);
    }
    createKeySessions_() {
        const audioPlaylistLoader = this.playlistController_.mediaTypes_.AUDIO.activePlaylistLoader;
        this.logger_("waiting for EME key session creation");
        $e88cd91ee18355c1$var$waitForKeySessionCreation({
            player: this.player_,
            sourceKeySystems: this.source_.keySystems,
            audioMedia: audioPlaylistLoader && audioPlaylistLoader.media(),
            mainPlaylists: this.playlists.main.playlists
        }).then(()=>{
            this.logger_("created EME key session");
            this.playlistController_.sourceUpdater_.initializedEme();
        }).catch((err)=>{
            this.logger_("error while creating EME key session", err);
            this.player_.error({
                message: "Failed to initialize media keys for EME",
                code: 3
            });
        });
    }
    handleWaitingForKey_() {
        // If waitingforkey is fired, it's possible that the data that's necessary to retrieve
        // the key is in the manifest. While this should've happened on initial source load, it
        // may happen again in live streams where the keys change, and the manifest info
        // reflects the update.
        //
        // Because videojs-contrib-eme compares the PSSH data we send to that of PSSH data it's
        // already requested keys for, we don't have to worry about this generating extraneous
        // requests.
        this.logger_("waitingforkey fired, attempting to create any new key sessions");
        this.createKeySessions_();
    }
    /**
   * If necessary and EME is available, sets up EME options and waits for key session
   * creation.
   *
   * This function also updates the source updater so taht it can be used, as for some
   * browsers, EME must be configured before content is appended (if appending unencrypted
   * content before encrypted content).
   */ setupEme_() {
        const audioPlaylistLoader = this.playlistController_.mediaTypes_.AUDIO.activePlaylistLoader;
        const didSetupEmeOptions = $e88cd91ee18355c1$var$setupEmeOptions({
            player: this.player_,
            sourceKeySystems: this.source_.keySystems,
            media: this.playlists.media(),
            audioMedia: audioPlaylistLoader && audioPlaylistLoader.media()
        });
        this.player_.tech_.on("keystatuschange", (e)=>{
            this.playlistController_.updatePlaylistByKeyStatus(e.keyId, e.status);
        });
        this.handleWaitingForKey_ = this.handleWaitingForKey_.bind(this);
        this.player_.tech_.on("waitingforkey", this.handleWaitingForKey_);
        if (!didSetupEmeOptions) {
            // If EME options were not set up, we've done all we could to initialize EME.
            this.playlistController_.sourceUpdater_.initializedEme();
            return;
        }
        this.createKeySessions_();
    }
    /**
   * Initializes the quality levels and sets listeners to update them.
   *
   * @method setupQualityLevels_
   * @private
   */ setupQualityLevels_() {
        const player = $e88cd91ee18355c1$export$2e2bcd8739ae039.players[this.tech_.options_.playerId]; // if there isn't a player or there isn't a qualityLevels plugin
        // or qualityLevels_ listeners have already been setup, do nothing.
        if (!player || !player.qualityLevels || this.qualityLevels_) return;
        this.qualityLevels_ = player.qualityLevels();
        this.playlistController_.on("selectedinitialmedia", ()=>{
            $e88cd91ee18355c1$var$handleVhsLoadedMetadata(this.qualityLevels_, this);
        });
        this.playlists.on("mediachange", ()=>{
            $e88cd91ee18355c1$var$handleVhsMediaChange(this.qualityLevels_, this.playlists);
        });
    }
    /**
   * return the version
   */ static version() {
        return {
            "@videojs/http-streaming": $e88cd91ee18355c1$var$version$4,
            "mux.js": $e88cd91ee18355c1$var$version$3,
            "mpd-parser": $e88cd91ee18355c1$var$version$2,
            "m3u8-parser": $e88cd91ee18355c1$var$version$1,
            "aes-decrypter": $e88cd91ee18355c1$var$version
        };
    }
    /**
   * return the version
   */ version() {
        return this.constructor.version();
    }
    canChangeType() {
        return $e88cd91ee18355c1$var$SourceUpdater.canChangeType();
    }
    /**
   * Begin playing the video.
   */ play() {
        this.playlistController_.play();
    }
    /**
   * a wrapper around the function in PlaylistController
   */ setCurrentTime(currentTime) {
        this.playlistController_.setCurrentTime(currentTime);
    }
    /**
   * a wrapper around the function in PlaylistController
   */ duration() {
        return this.playlistController_.duration();
    }
    /**
   * a wrapper around the function in PlaylistController
   */ seekable() {
        return this.playlistController_.seekable();
    }
    /**
   * Abort all outstanding work and cleanup.
   */ dispose() {
        if (this.playbackWatcher_) this.playbackWatcher_.dispose();
        if (this.playlistController_) this.playlistController_.dispose();
        if (this.qualityLevels_) this.qualityLevels_.dispose();
        if (this.tech_ && this.tech_.vhs) delete this.tech_.vhs;
        if (this.mediaSourceUrl_ && (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).URL.revokeObjectURL) {
            (0, (/*@__PURE__*/$parcel$interopDefault($cktB7))).URL.revokeObjectURL(this.mediaSourceUrl_);
            this.mediaSourceUrl_ = null;
        }
        if (this.tech_) this.tech_.off("waitingforkey", this.handleWaitingForKey_);
        super.dispose();
    }
    convertToProgramTime(time, callback) {
        return $e88cd91ee18355c1$var$getProgramTime({
            playlist: this.playlistController_.media(),
            time: time,
            callback: callback
        });
    }
    seekToProgramTime(programTime, callback, pauseAfterSeek = true, retryCount = 2) {
        return $e88cd91ee18355c1$var$seekToProgramTime({
            programTime: programTime,
            playlist: this.playlistController_.media(),
            retryCount: retryCount,
            pauseAfterSeek: pauseAfterSeek,
            seekTo: this.options_.seekTo,
            tech: this.options_.tech,
            callback: callback
        });
    }
    /**
   * Adds the onRequest, onResponse, offRequest and offResponse functions
   * to the VhsHandler xhr Object.
   */ setupXhrHooks_() {
        /**
     * A player function for setting an onRequest hook
     *
     * @param {function} callback for request modifiction
     */ this.xhr.onRequest = (callback)=>{
            $e88cd91ee18355c1$var$addOnRequestHook(this.xhr, callback);
        };
        /**
     * A player function for setting an onResponse hook
     *
     * @param {callback} callback for response data retrieval
     */ this.xhr.onResponse = (callback)=>{
            $e88cd91ee18355c1$var$addOnResponseHook(this.xhr, callback);
        };
        /**
     * Deletes a player onRequest callback if it exists
     *
     * @param {function} callback to delete from the player set
     */ this.xhr.offRequest = (callback)=>{
            $e88cd91ee18355c1$var$removeOnRequestHook(this.xhr, callback);
        };
        /**
     * Deletes a player onResponse callback if it exists
     *
     * @param {function} callback to delete from the player set
     */ this.xhr.offResponse = (callback)=>{
            $e88cd91ee18355c1$var$removeOnResponseHook(this.xhr, callback);
        }; // Trigger an event on the player to notify the user that vhs is ready to set xhr hooks.
        // This allows hooks to be set before the source is set to vhs when handleSource is called.
        this.player_.trigger("xhr-hooks-ready");
    }
}
/**
 * The Source Handler object, which informs video.js what additional
 * MIME types are supported and sets up playback. It is registered
 * automatically to the appropriate tech based on the capabilities of
 * the browser it is running in. It is not necessary to use or modify
 * this object in normal usage.
 */ const $e88cd91ee18355c1$var$VhsSourceHandler = {
    name: "videojs-http-streaming",
    VERSION: $e88cd91ee18355c1$var$version$4,
    canHandleSource (srcObj, options = {}) {
        const localOptions = $e88cd91ee18355c1$var$merge($e88cd91ee18355c1$export$2e2bcd8739ae039.options, options);
        return $e88cd91ee18355c1$var$VhsSourceHandler.canPlayType(srcObj.type, localOptions);
    },
    handleSource (source, tech, options = {}) {
        const localOptions = $e88cd91ee18355c1$var$merge($e88cd91ee18355c1$export$2e2bcd8739ae039.options, options);
        tech.vhs = new $e88cd91ee18355c1$var$VhsHandler(source, tech, localOptions);
        tech.vhs.xhr = $e88cd91ee18355c1$var$xhrFactory();
        tech.vhs.setupXhrHooks_();
        tech.vhs.src(source.src, source.type);
        return tech.vhs;
    },
    canPlayType (type, options) {
        const simpleType = (0, $c1e8cd70b6fc15b0$export$c4f0bf48244d4c05)(type);
        if (!simpleType) return "";
        const overrideNative = $e88cd91ee18355c1$var$VhsSourceHandler.getOverrideNative(options);
        const supportsTypeNatively = $e88cd91ee18355c1$var$Vhs.supportsTypeNatively(simpleType);
        const canUseMsePlayback = !supportsTypeNatively || overrideNative;
        return canUseMsePlayback ? "maybe" : "";
    },
    getOverrideNative (options = {}) {
        const { vhs: vhs = {} } = options;
        const defaultOverrideNative = !($e88cd91ee18355c1$export$2e2bcd8739ae039.browser.IS_ANY_SAFARI || $e88cd91ee18355c1$export$2e2bcd8739ae039.browser.IS_IOS);
        const { overrideNative: overrideNative = defaultOverrideNative } = vhs;
        return overrideNative;
    }
};
/**
 * Check to see if the native MediaSource object exists and supports
 * an MP4 container with both H.264 video and AAC-LC audio.
 *
 * @return {boolean} if  native media sources are supported
 */ const $e88cd91ee18355c1$var$supportsNativeMediaSources = ()=>{
    return (0, $823f1f5df1bbf628$export$3ee949df8fbc592f)("avc1.4d400d,mp4a.40.2");
}; // register source handlers with the appropriate techs
if ($e88cd91ee18355c1$var$supportsNativeMediaSources()) $e88cd91ee18355c1$export$2e2bcd8739ae039.getTech("Html5").registerSourceHandler($e88cd91ee18355c1$var$VhsSourceHandler, 0);
$e88cd91ee18355c1$export$2e2bcd8739ae039.VhsHandler = $e88cd91ee18355c1$var$VhsHandler;
$e88cd91ee18355c1$export$2e2bcd8739ae039.VhsSourceHandler = $e88cd91ee18355c1$var$VhsSourceHandler;
$e88cd91ee18355c1$export$2e2bcd8739ae039.Vhs = $e88cd91ee18355c1$var$Vhs;
if (!$e88cd91ee18355c1$export$2e2bcd8739ae039.use) $e88cd91ee18355c1$export$2e2bcd8739ae039.registerComponent("Vhs", $e88cd91ee18355c1$var$Vhs);
$e88cd91ee18355c1$export$2e2bcd8739ae039.options.vhs = $e88cd91ee18355c1$export$2e2bcd8739ae039.options.vhs || {};
if (!$e88cd91ee18355c1$export$2e2bcd8739ae039.getPlugin || !$e88cd91ee18355c1$export$2e2bcd8739ae039.getPlugin("reloadSourceOnError")) $e88cd91ee18355c1$export$2e2bcd8739ae039.registerPlugin("reloadSourceOnError", $e88cd91ee18355c1$var$reloadSourceOnError);



const $ab5dab850e79cc84$var$Video = (props)=>{
    const videoNode = (0, $d4J5n.useRef)(null);
    const [player, setPlayer] = (0, $d4J5n.useState)(null);
    (0, $d4J5n.useEffect)(()=>{
        if (videoNode.current) {
            const _player = (0, $e88cd91ee18355c1$export$2e2bcd8739ae039)(videoNode.current, props);
            setPlayer(_player);
            return ()=>{
                if (player !== null) player.dispose();
            };
        }
    }, []);
    return /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
        "data-vjs-player": true,
        children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("video", {
            ref: videoNode,
            className: "video-js"
        })
    });
};
function $ab5dab850e79cc84$export$2e2bcd8739ae039() {
    const play = {
        fill: true,
        fluid: true,
        autoplay: true,
        controls: true,
        preload: "metadata",
        sources: [
            {
                src: "https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8",
                type: "application/x-mpegURL"
            }
        ]
    };
    return /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
        className: "App",
        children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)($ab5dab850e79cc84$var$Video, {
            width: 800,
            ...play
        })
    });
}



const $20b1bd269a8d5e6d$export$635259c202bd3120 = ()=>{
    return /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
        className: "main-desktop",
        children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
            className: "frame-wrapper",
            children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                className: "frame-2",
                children: [
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("header", {
                        className: "header",
                        children: [
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                className: "text-wrapper-3",
                                children: "Pelota Libre TV"
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                                className: "solar-football-bold",
                                alt: "Solar football bold",
                                src: "/img/solar-football-bold-duotone.svg"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                        className: "hero-page",
                        children: [
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                className: "text-wrapper-4",
                                children: "Pelota Libre TV"
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                className: "text-wrapper-5",
                                children: "Watch Pelota Libre TV online live and direct. Free stream channels to watch football matches Argentine, Chilean, Colombian, Peruvian, Ecuadorian, Copa Libertadores, Copa Sudamericana and Champions League among others."
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                        className: "video-player",
                        children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $ab5dab850e79cc84$export$2e2bcd8739ae039), {})
                    }),
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                        className: "slider",
                        children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                            className: "group",
                            children: [
                                /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                    className: "image-wrapper",
                                    children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                                        className: "img",
                                        alt: "Image",
                                        src: "/img/frame-30.png"
                                    })
                                }),
                                /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                    className: "frame-3"
                                }),
                                /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                    className: "frame-4"
                                }),
                                /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                    className: "frame-5"
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                        className: "list-of-games",
                        children: [
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                className: "buttons-games",
                                children: [
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $79f17ec0cd7bcad3$export$b89a827e9254211a), {
                                        className: "frame-1"
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $79f17ec0cd7bcad3$export$b89a827e9254211a), {
                                        className: "frame-1"
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $79f17ec0cd7bcad3$export$b89a827e9254211a), {
                                        className: "frame-1"
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $79f17ec0cd7bcad3$export$b89a827e9254211a), {
                                        className: "frame-1"
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $79f17ec0cd7bcad3$export$b89a827e9254211a), {
                                        className: "frame-1"
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $79f17ec0cd7bcad3$export$b89a827e9254211a), {
                                        className: "frame-1"
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $79f17ec0cd7bcad3$export$b89a827e9254211a), {
                                        className: "frame-1"
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $79f17ec0cd7bcad3$export$b89a827e9254211a), {
                                        className: "frame-1"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                className: "title-of-games",
                                children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                    className: "text-wrapper-6",
                                    children: "Sports agenda for Friday, Decamber 1, 2023"
                                })
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                className: "rectangle"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                        className: "second-page",
                        children: [
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                className: "text-wrapper-7",
                                children: "Watch live online football channels"
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                className: "chanels",
                                children: [
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-6",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $d92a12d3199f1fd9$export$61776738076f0932), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $d92a12d3199f1fd9$export$61776738076f0932), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $d92a12d3199f1fd9$export$61776738076f0932), {})
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-6",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $d92a12d3199f1fd9$export$61776738076f0932), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $d92a12d3199f1fd9$export$61776738076f0932), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $d92a12d3199f1fd9$export$61776738076f0932), {})
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-6",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $d92a12d3199f1fd9$export$61776738076f0932), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $d92a12d3199f1fd9$export$61776738076f0932), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $d92a12d3199f1fd9$export$61776738076f0932), {})
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-7",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $d92a12d3199f1fd9$export$61776738076f0932), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $d92a12d3199f1fd9$export$61776738076f0932), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $d92a12d3199f1fd9$export$61776738076f0932), {})
                                        ]
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                        className: "third-page",
                        children: [
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                className: "text-wrapper-8",
                                children: "Common questions"
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                className: "questions-and",
                                children: [
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-8",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                                className: "qu-es-pelota-libre",
                                                children: " What is Pelota Libre TV?"
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("p", {
                                                className: "div-2",
                                                children: [
                                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("a", {
                                                        href: "https://pelotalibre.com/",
                                                        rel: "noopener noreferrer",
                                                        target: "_blank",
                                                        children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                                                            className: "span",
                                                            children: "Pelota Libre TV"
                                                        })
                                                    }),
                                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("span", {
                                                        className: "span",
                                                        children: [
                                                            " ",
                                                            "It has all the free live channels to watch Argentine, Chilean, Colombian and soccer. Peruvian online, in addition to the Copa Sudamericana, Copa Libertadores, Boca Juniors matches and River Plate, Argentine National Team and much more.                  "
                                                        ]
                                                    })
                                                ]
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-8",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                                className: "text-wrapper-9",
                                                children: "How to watch Pelota Libre TV live from your computer/PC or cell phone?                "
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("p", {
                                                className: "div-2",
                                                children: [
                                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                                                        className: "span",
                                                        children: "To be able to see "
                                                    }),
                                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("a", {
                                                        href: "https://pelotalibre.com/",
                                                        rel: "noopener noreferrer",
                                                        target: "_blank",
                                                        children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                                                            className: "span",
                                                            children: "Pelota Libre TV"
                                                        })
                                                    }),
                                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("span", {
                                                        className: "span",
                                                        children: [
                                                            " ",
                                                            "From your computer or cell phone you just have to go to pelotalibre.com from Android or iPhone iOS and Choose the channel you want to watch live.                  "
                                                        ]
                                                    })
                                                ]
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-8",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                                className: "text-wrapper-10",
                                                children: "How to watch a match on Pelota Libre TV live and direct?"
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("p", {
                                                className: "div-2",
                                                children: [
                                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                                                        className: "span",
                                                        children: "Para ver "
                                                    }),
                                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("a", {
                                                        href: "https://pelotalibre.com/",
                                                        rel: "noopener noreferrer",
                                                        target: "_blank",
                                                        children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                                                            className: "span",
                                                            children: "Pelota Libre TV"
                                                        })
                                                    }),
                                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("span", {
                                                        className: "span",
                                                        children: [
                                                            " ",
                                                            "online live and direct you must enter this page and then select the soccer match in live that you want to see that appear in the daily agenda or simply enter the channel that broadcasts the match at match time."
                                                        ]
                                                    })
                                                ]
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-8",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                                className: "text-wrapper-9",
                                                children: "What soccer games does F\xfatbol Libre broadcast?"
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                                className: "div-2",
                                                children: "In F\xfatbol Libre you can see all the Argentine soccer matches that include those of Boca Juniors and River Plate for the Argentine, Chilean, Colombian and Peruvian championship, Copa Libertadores and Copa South American.                "
                                            })
                                        ]
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("footer", {
                        className: "footer",
                        children: [
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                className: "text-wrapper-11",
                                children: "Social"
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                className: "frame-9",
                                children: [
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-10",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                                                className: "img-2",
                                                alt: "Ri twitter fill",
                                                src: "/img/ri-twitter-fill.svg"
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                                className: "text-wrapper-12",
                                                children: "Twitter"
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-10",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                                                className: "img-2",
                                                alt: "Ri instagram fill",
                                                src: "/img/ri-instagram-fill.svg"
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                                className: "text-wrapper-12",
                                                children: "Instagram"
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-11",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                                                className: "vector",
                                                alt: "Vector",
                                                src: "/img/vector.svg"
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                                className: "text-wrapper-12",
                                                children: "YouTube"
                                            })
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                className: "frame-12",
                                children: [
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                        className: "text-wrapper-13",
                                        children: "Pelota Libre"
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                        className: "text-wrapper-14",
                                        children: "DMCA"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                className: "text-wrapper-15",
                                children: "Pelota Libre TV 2023 \xa9 All rights reserved."
                            })
                        ]
                    })
                ]
            })
        })
    });
};





parcelRequire("d4J5n");

/**
 * React Router DOM v6.20.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */ 
var $d4J5n = parcelRequire("d4J5n");



function $7b9bbaa53cb01344$var$_extends() {
    $7b9bbaa53cb01344$var$_extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return $7b9bbaa53cb01344$var$_extends.apply(this, arguments);
}
function $7b9bbaa53cb01344$var$_objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
const $7b9bbaa53cb01344$var$defaultMethod = "get";
const $7b9bbaa53cb01344$var$defaultEncType = "application/x-www-form-urlencoded";
function $7b9bbaa53cb01344$var$isHtmlElement(object) {
    return object != null && typeof object.tagName === "string";
}
function $7b9bbaa53cb01344$var$isButtonElement(object) {
    return $7b9bbaa53cb01344$var$isHtmlElement(object) && object.tagName.toLowerCase() === "button";
}
function $7b9bbaa53cb01344$var$isFormElement(object) {
    return $7b9bbaa53cb01344$var$isHtmlElement(object) && object.tagName.toLowerCase() === "form";
}
function $7b9bbaa53cb01344$var$isInputElement(object) {
    return $7b9bbaa53cb01344$var$isHtmlElement(object) && object.tagName.toLowerCase() === "input";
}
function $7b9bbaa53cb01344$var$isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function $7b9bbaa53cb01344$var$shouldProcessLinkClick(event, target) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target || target === "_self") && // Let browser handle "target=_blank" etc.
    !$7b9bbaa53cb01344$var$isModifiedEvent(event) // Ignore clicks with modifier keys
    ;
}
/**
 * Creates a URLSearchParams object using the given initializer.
 *
 * This is identical to `new URLSearchParams(init)` except it also
 * supports arrays as values in the object form of the initializer
 * instead of just strings. This is convenient when you need multiple
 * values for a given key, but don't want to use an array initializer.
 *
 * For example, instead of:
 *
 *   let searchParams = new URLSearchParams([
 *     ['sort', 'name'],
 *     ['sort', 'price']
 *   ]);
 *
 * you can do:
 *
 *   let searchParams = createSearchParams({
 *     sort: ['name', 'price']
 *   });
 */ function $7b9bbaa53cb01344$export$a2e4e2dcc7b1f22f(init) {
    if (init === void 0) init = "";
    return new URLSearchParams(typeof init === "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key)=>{
        let value = init[key];
        return memo.concat(Array.isArray(value) ? value.map((v)=>[
                key,
                v
            ]) : [
            [
                key,
                value
            ]
        ]);
    }, []));
}
function $7b9bbaa53cb01344$var$getSearchParamsForLocation(locationSearch, defaultSearchParams) {
    let searchParams = $7b9bbaa53cb01344$export$a2e4e2dcc7b1f22f(locationSearch);
    if (defaultSearchParams) // Use `defaultSearchParams.forEach(...)` here instead of iterating of
    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to
    // web extensions. Relevant Bugzilla tickets:
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984
    defaultSearchParams.forEach((_, key)=>{
        if (!searchParams.has(key)) defaultSearchParams.getAll(key).forEach((value)=>{
            searchParams.append(key, value);
        });
    });
    return searchParams;
}
// One-time check for submitter support
let $7b9bbaa53cb01344$var$_formDataSupportsSubmitter = null;
function $7b9bbaa53cb01344$var$isFormDataSubmitterSupported() {
    if ($7b9bbaa53cb01344$var$_formDataSupportsSubmitter === null) try {
        new FormData(document.createElement("form"), // @ts-expect-error if FormData supports the submitter parameter, this will throw
        0);
        $7b9bbaa53cb01344$var$_formDataSupportsSubmitter = false;
    } catch (e) {
        $7b9bbaa53cb01344$var$_formDataSupportsSubmitter = true;
    }
    return $7b9bbaa53cb01344$var$_formDataSupportsSubmitter;
}
const $7b9bbaa53cb01344$var$supportedFormEncTypes = new Set([
    "application/x-www-form-urlencoded",
    "multipart/form-data",
    "text/plain"
]);
function $7b9bbaa53cb01344$var$getFormEncType(encType) {
    if (encType != null && !$7b9bbaa53cb01344$var$supportedFormEncTypes.has(encType)) return null;
    return encType;
}
function $7b9bbaa53cb01344$var$getFormSubmissionInfo(target, basename) {
    let method;
    let action;
    let encType;
    let formData;
    let body;
    if ($7b9bbaa53cb01344$var$isFormElement(target)) {
        // When grabbing the action from the element, it will have had the basename
        // prefixed to ensure non-JS scenarios work, so strip it since we'll
        // re-prefix in the router
        let attr = target.getAttribute("action");
        action = attr ? (0, $0e856af10b3b08bf$export$b69e3301ce081aa3)(attr, basename) : null;
        method = target.getAttribute("method") || $7b9bbaa53cb01344$var$defaultMethod;
        encType = $7b9bbaa53cb01344$var$getFormEncType(target.getAttribute("enctype")) || $7b9bbaa53cb01344$var$defaultEncType;
        formData = new FormData(target);
    } else if ($7b9bbaa53cb01344$var$isButtonElement(target) || $7b9bbaa53cb01344$var$isInputElement(target) && (target.type === "submit" || target.type === "image")) {
        let form = target.form;
        if (form == null) throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
        // <button>/<input type="submit"> may override attributes of <form>
        // When grabbing the action from the element, it will have had the basename
        // prefixed to ensure non-JS scenarios work, so strip it since we'll
        // re-prefix in the router
        let attr = target.getAttribute("formaction") || form.getAttribute("action");
        action = attr ? (0, $0e856af10b3b08bf$export$b69e3301ce081aa3)(attr, basename) : null;
        method = target.getAttribute("formmethod") || form.getAttribute("method") || $7b9bbaa53cb01344$var$defaultMethod;
        encType = $7b9bbaa53cb01344$var$getFormEncType(target.getAttribute("formenctype")) || $7b9bbaa53cb01344$var$getFormEncType(form.getAttribute("enctype")) || $7b9bbaa53cb01344$var$defaultEncType;
        // Build a FormData object populated from a form and submitter
        formData = new FormData(form, target);
        // If this browser doesn't support the `FormData(el, submitter)` format,
        // then tack on the submitter value at the end.  This is a lightweight
        // solution that is not 100% spec compliant.  For complete support in older
        // browsers, consider using the `formdata-submitter-polyfill` package
        if (!$7b9bbaa53cb01344$var$isFormDataSubmitterSupported()) {
            let { name: name, type: type, value: value } = target;
            if (type === "image") {
                let prefix = name ? name + "." : "";
                formData.append(prefix + "x", "0");
                formData.append(prefix + "y", "0");
            } else if (name) formData.append(name, value);
        }
    } else if ($7b9bbaa53cb01344$var$isHtmlElement(target)) throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
    else {
        method = $7b9bbaa53cb01344$var$defaultMethod;
        action = null;
        encType = $7b9bbaa53cb01344$var$defaultEncType;
        body = target;
    }
    // Send body for <Form encType="text/plain" so we encode it into text
    if (formData && encType === "text/plain") {
        body = formData;
        formData = undefined;
    }
    return {
        action: action,
        method: method.toLowerCase(),
        encType: encType,
        formData: formData,
        body: body
    };
}
const $7b9bbaa53cb01344$var$_excluded = [
    "onClick",
    "relative",
    "reloadDocument",
    "replace",
    "state",
    "target",
    "to",
    "preventScrollReset",
    "unstable_viewTransition"
], $7b9bbaa53cb01344$var$_excluded2 = [
    "aria-current",
    "caseSensitive",
    "className",
    "end",
    "style",
    "to",
    "unstable_viewTransition",
    "children"
], $7b9bbaa53cb01344$var$_excluded3 = [
    "fetcherKey",
    "navigate",
    "reloadDocument",
    "replace",
    "state",
    "method",
    "action",
    "onSubmit",
    "relative",
    "preventScrollReset",
    "unstable_viewTransition"
];
function $7b9bbaa53cb01344$export$1f3f55432a00e06d(routes, opts) {
    return (0, $0e856af10b3b08bf$export$baddd0131ee8c05b)({
        basename: opts == null ? void 0 : opts.basename,
        future: $7b9bbaa53cb01344$var$_extends({}, opts == null ? void 0 : opts.future, {
            v7_prependBasename: true
        }),
        history: (0, $0e856af10b3b08bf$export$719fc203c4e16dee)({
            window: opts == null ? void 0 : opts.window
        }),
        hydrationData: (opts == null ? void 0 : opts.hydrationData) || $7b9bbaa53cb01344$var$parseHydrationData(),
        routes: routes,
        mapRouteProperties: (0, $5b1ea468d903474a$export$52b333d321859367),
        window: opts == null ? void 0 : opts.window
    }).initialize();
}
function $7b9bbaa53cb01344$export$1ba7ed8a3a7b3765(routes, opts) {
    return (0, $0e856af10b3b08bf$export$baddd0131ee8c05b)({
        basename: opts == null ? void 0 : opts.basename,
        future: $7b9bbaa53cb01344$var$_extends({}, opts == null ? void 0 : opts.future, {
            v7_prependBasename: true
        }),
        history: (0, $0e856af10b3b08bf$export$b71fdd3798280242)({
            window: opts == null ? void 0 : opts.window
        }),
        hydrationData: (opts == null ? void 0 : opts.hydrationData) || $7b9bbaa53cb01344$var$parseHydrationData(),
        routes: routes,
        mapRouteProperties: (0, $5b1ea468d903474a$export$52b333d321859367),
        window: opts == null ? void 0 : opts.window
    }).initialize();
}
function $7b9bbaa53cb01344$var$parseHydrationData() {
    var _window;
    let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
    if (state && state.errors) state = $7b9bbaa53cb01344$var$_extends({}, state, {
        errors: $7b9bbaa53cb01344$var$deserializeErrors(state.errors)
    });
    return state;
}
function $7b9bbaa53cb01344$var$deserializeErrors(errors) {
    if (!errors) return null;
    let entries = Object.entries(errors);
    let serialized = {};
    for (let [key, val] of entries){
        // Hey you!  If you change this, please change the corresponding logic in
        // serializeErrors in react-router-dom/server.tsx :)
        if (val && val.__type === "RouteErrorResponse") serialized[key] = new (0, $0e856af10b3b08bf$export$6c6580e81da25755)(val.status, val.statusText, val.data, val.internal === true);
        else if (val && val.__type === "Error") {
            // Attempt to reconstruct the right type of Error (i.e., ReferenceError)
            if (val.__subType) {
                let ErrorConstructor = window[val.__subType];
                if (typeof ErrorConstructor === "function") try {
                    // @ts-expect-error
                    let error = new ErrorConstructor(val.message);
                    // Wipe away the client-side stack trace.  Nothing to fill it in with
                    // because we don't serialize SSR stack traces for security reasons
                    error.stack = "";
                    serialized[key] = error;
                } catch (e) {
                // no-op - fall through and create a normal Error
                }
            }
            if (serialized[key] == null) {
                let error = new Error(val.message);
                // Wipe away the client-side stack trace.  Nothing to fill it in with
                // because we don't serialize SSR stack traces for security reasons
                error.stack = "";
                serialized[key] = error;
            }
        } else serialized[key] = val;
    }
    return serialized;
}
const $7b9bbaa53cb01344$export$7ad602f0e94e62d1 = /*#__PURE__*/ $d4J5n.createContext({
    isTransitioning: false
});
const $7b9bbaa53cb01344$export$148fd98d095596d4 = /*#__PURE__*/ $d4J5n.createContext(new Map());
//#endregion
////////////////////////////////////////////////////////////////////////////////
//#region Components
////////////////////////////////////////////////////////////////////////////////
/**
  Webpack + React 17 fails to compile on any of the following because webpack
  complains that `startTransition` doesn't exist in `React`:
  * import { startTransition } from "react"
  * import * as React from from "react";
    "startTransition" in React ? React.startTransition(() => setState()) : setState()
  * import * as React from from "react";
    "startTransition" in React ? React["startTransition"](() => setState()) : setState()

  Moving it to a constant such as the following solves the Webpack/React 17 issue:
  * import * as React from from "react";
    const START_TRANSITION = "startTransition";
    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()

  However, that introduces webpack/terser minification issues in production builds
  in React 18 where minification/obfuscation ends up removing the call of
  React.startTransition entirely from the first half of the ternary.  Grabbing
  this exported reference once up front resolves that issue.

  See https://github.com/remix-run/react-router/issues/10579
*/ const $7b9bbaa53cb01344$var$START_TRANSITION = "startTransition";
const $7b9bbaa53cb01344$var$startTransitionImpl = $d4J5n[$7b9bbaa53cb01344$var$START_TRANSITION];
const $7b9bbaa53cb01344$var$FLUSH_SYNC = "flushSync";
const $7b9bbaa53cb01344$var$flushSyncImpl = $4723f549251dd88b$exports[$7b9bbaa53cb01344$var$FLUSH_SYNC];
function $7b9bbaa53cb01344$var$startTransitionSafe(cb) {
    if ($7b9bbaa53cb01344$var$startTransitionImpl) $7b9bbaa53cb01344$var$startTransitionImpl(cb);
    else cb();
}
function $7b9bbaa53cb01344$var$flushSyncSafe(cb) {
    if ($7b9bbaa53cb01344$var$flushSyncImpl) $7b9bbaa53cb01344$var$flushSyncImpl(cb);
    else cb();
}
class $7b9bbaa53cb01344$var$Deferred {
    constructor(){
        this.status = "pending";
        this.promise = new Promise((resolve, reject)=>{
            this.resolve = (value)=>{
                if (this.status === "pending") {
                    this.status = "resolved";
                    resolve(value);
                }
            };
            this.reject = (reason)=>{
                if (this.status === "pending") {
                    this.status = "rejected";
                    reject(reason);
                }
            };
        });
    }
}
/**
 * Given a Remix Router instance, render the appropriate UI
 */ function $7b9bbaa53cb01344$export$323e4fc2fa4753fb(_ref) {
    let { fallbackElement: fallbackElement, router: router, future: future } = _ref;
    let [state, setStateImpl] = $d4J5n.useState(router.state);
    let [pendingState, setPendingState] = $d4J5n.useState();
    let [vtContext, setVtContext] = $d4J5n.useState({
        isTransitioning: false
    });
    let [renderDfd, setRenderDfd] = $d4J5n.useState();
    let [transition, setTransition] = $d4J5n.useState();
    let [interruption, setInterruption] = $d4J5n.useState();
    let fetcherData = $d4J5n.useRef(new Map());
    let { v7_startTransition: v7_startTransition } = future || {};
    let optInStartTransition = $d4J5n.useCallback((cb)=>{
        if (v7_startTransition) $7b9bbaa53cb01344$var$startTransitionSafe(cb);
        else cb();
    }, [
        v7_startTransition
    ]);
    let setState = $d4J5n.useCallback((newState, _ref2)=>{
        let { deletedFetchers: deletedFetchers, unstable_flushSync: flushSync, unstable_viewTransitionOpts: viewTransitionOpts } = _ref2;
        deletedFetchers.forEach((key)=>fetcherData.current.delete(key));
        newState.fetchers.forEach((fetcher, key)=>{
            if (fetcher.data !== undefined) fetcherData.current.set(key, fetcher.data);
        });
        let isViewTransitionUnavailable = router.window == null || typeof router.window.document.startViewTransition !== "function";
        // If this isn't a view transition or it's not available in this browser,
        // just update and be done with it
        if (!viewTransitionOpts || isViewTransitionUnavailable) {
            if (flushSync) $7b9bbaa53cb01344$var$flushSyncSafe(()=>setStateImpl(newState));
            else optInStartTransition(()=>setStateImpl(newState));
            return;
        }
        // flushSync + startViewTransition
        if (flushSync) {
            // Flush through the context to mark DOM elements as transition=ing
            $7b9bbaa53cb01344$var$flushSyncSafe(()=>{
                // Cancel any pending transitions
                if (transition) {
                    renderDfd && renderDfd.resolve();
                    transition.skipTransition();
                }
                setVtContext({
                    isTransitioning: true,
                    flushSync: true,
                    currentLocation: viewTransitionOpts.currentLocation,
                    nextLocation: viewTransitionOpts.nextLocation
                });
            });
            // Update the DOM
            let t = router.window.document.startViewTransition(()=>{
                $7b9bbaa53cb01344$var$flushSyncSafe(()=>setStateImpl(newState));
            });
            // Clean up after the animation completes
            t.finished.finally(()=>{
                $7b9bbaa53cb01344$var$flushSyncSafe(()=>{
                    setRenderDfd(undefined);
                    setTransition(undefined);
                    setPendingState(undefined);
                    setVtContext({
                        isTransitioning: false
                    });
                });
            });
            $7b9bbaa53cb01344$var$flushSyncSafe(()=>setTransition(t));
            return;
        }
        // startTransition + startViewTransition
        if (transition) {
            // Interrupting an in-progress transition, cancel and let everything flush
            // out, and then kick off a new transition from the interruption state
            renderDfd && renderDfd.resolve();
            transition.skipTransition();
            setInterruption({
                state: newState,
                currentLocation: viewTransitionOpts.currentLocation,
                nextLocation: viewTransitionOpts.nextLocation
            });
        } else {
            // Completed navigation update with opted-in view transitions, let 'er rip
            setPendingState(newState);
            setVtContext({
                isTransitioning: true,
                flushSync: false,
                currentLocation: viewTransitionOpts.currentLocation,
                nextLocation: viewTransitionOpts.nextLocation
            });
        }
    }, [
        router.window,
        transition,
        renderDfd,
        fetcherData,
        optInStartTransition
    ]);
    // Need to use a layout effect here so we are subscribed early enough to
    // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)
    $d4J5n.useLayoutEffect(()=>router.subscribe(setState), [
        router,
        setState
    ]);
    // When we start a view transition, create a Deferred we can use for the
    // eventual "completed" render
    $d4J5n.useEffect(()=>{
        if (vtContext.isTransitioning && !vtContext.flushSync) setRenderDfd(new $7b9bbaa53cb01344$var$Deferred());
    }, [
        vtContext
    ]);
    // Once the deferred is created, kick off startViewTransition() to update the
    // DOM and then wait on the Deferred to resolve (indicating the DOM update has
    // happened)
    $d4J5n.useEffect(()=>{
        if (renderDfd && pendingState && router.window) {
            let newState = pendingState;
            let renderPromise = renderDfd.promise;
            let transition = router.window.document.startViewTransition(async ()=>{
                optInStartTransition(()=>setStateImpl(newState));
                await renderPromise;
            });
            transition.finished.finally(()=>{
                setRenderDfd(undefined);
                setTransition(undefined);
                setPendingState(undefined);
                setVtContext({
                    isTransitioning: false
                });
            });
            setTransition(transition);
        }
    }, [
        optInStartTransition,
        pendingState,
        renderDfd,
        router.window
    ]);
    // When the new location finally renders and is committed to the DOM, this
    // effect will run to resolve the transition
    $d4J5n.useEffect(()=>{
        if (renderDfd && pendingState && state.location.key === pendingState.location.key) renderDfd.resolve();
    }, [
        renderDfd,
        transition,
        state.location,
        pendingState
    ]);
    // If we get interrupted with a new navigation during a transition, we skip
    // the active transition, let it cleanup, then kick it off again here
    $d4J5n.useEffect(()=>{
        if (!vtContext.isTransitioning && interruption) {
            setPendingState(interruption.state);
            setVtContext({
                isTransitioning: true,
                flushSync: false,
                currentLocation: interruption.currentLocation,
                nextLocation: interruption.nextLocation
            });
            setInterruption(undefined);
        }
    }, [
        vtContext.isTransitioning,
        interruption
    ]);
    let navigator = $d4J5n.useMemo(()=>{
        return {
            createHref: router.createHref,
            encodeLocation: router.encodeLocation,
            go: (n)=>router.navigate(n),
            push: (to, state, opts)=>router.navigate(to, {
                    state: state,
                    preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
                }),
            replace: (to, state, opts)=>router.navigate(to, {
                    replace: true,
                    state: state,
                    preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
                })
        };
    }, [
        router
    ]);
    let basename = router.basename || "/";
    let dataRouterContext = $d4J5n.useMemo(()=>({
            router: router,
            navigator: navigator,
            static: false,
            basename: basename
        }), [
        router,
        navigator,
        basename
    ]);
    // The fragment and {null} here are important!  We need them to keep React 18's
    // useId happy when we are server-rendering since we may have a <script> here
    // containing the hydrated server-side staticContext (from StaticRouterProvider).
    // useId relies on the component tree structure to generate deterministic id's
    // so we need to ensure it remains the same on the client even though
    // we don't need the <script> tag
    return /*#__PURE__*/ $d4J5n.createElement($d4J5n.Fragment, null, /*#__PURE__*/ $d4J5n.createElement((0, $5b1ea468d903474a$export$3add0d5dce533e2e).Provider, {
        value: dataRouterContext
    }, /*#__PURE__*/ $d4J5n.createElement((0, $5b1ea468d903474a$export$145dfa71566a64dc).Provider, {
        value: state
    }, /*#__PURE__*/ $d4J5n.createElement($7b9bbaa53cb01344$export$148fd98d095596d4.Provider, {
        value: fetcherData.current
    }, /*#__PURE__*/ $d4J5n.createElement($7b9bbaa53cb01344$export$7ad602f0e94e62d1.Provider, {
        value: vtContext
    }, /*#__PURE__*/ $d4J5n.createElement((0, $5b1ea468d903474a$export$55185c17a0fcbe46), {
        basename: basename,
        location: state.location,
        navigationType: state.historyAction,
        navigator: navigator
    }, state.initialized ? /*#__PURE__*/ $d4J5n.createElement($7b9bbaa53cb01344$var$DataRoutes, {
        routes: router.routes,
        state: state
    }) : fallbackElement))))), null);
}
function $7b9bbaa53cb01344$var$DataRoutes(_ref3) {
    let { routes: routes, state: state } = _ref3;
    return (0, $5b1ea468d903474a$export$5fcee62552a12fbf)(routes, undefined, state);
}
/**
 * A `<Router>` for use in web browsers. Provides the cleanest URLs.
 */ function $7b9bbaa53cb01344$export$9ba4e89fdfa1fc54(_ref4) {
    let { basename: basename, children: children, future: future, window: window1 } = _ref4;
    let historyRef = $d4J5n.useRef();
    if (historyRef.current == null) historyRef.current = (0, $0e856af10b3b08bf$export$719fc203c4e16dee)({
        window: window1,
        v5Compat: true
    });
    let history = historyRef.current;
    let [state, setStateImpl] = $d4J5n.useState({
        action: history.action,
        location: history.location
    });
    let { v7_startTransition: v7_startTransition } = future || {};
    let setState = $d4J5n.useCallback((newState)=>{
        v7_startTransition && $7b9bbaa53cb01344$var$startTransitionImpl ? $7b9bbaa53cb01344$var$startTransitionImpl(()=>setStateImpl(newState)) : setStateImpl(newState);
    }, [
        setStateImpl,
        v7_startTransition
    ]);
    $d4J5n.useLayoutEffect(()=>history.listen(setState), [
        history,
        setState
    ]);
    return /*#__PURE__*/ $d4J5n.createElement((0, $5b1ea468d903474a$export$55185c17a0fcbe46), {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history
    });
}
/**
 * A `<Router>` for use in web browsers. Stores the location in the hash
 * portion of the URL so it is not sent to the server.
 */ function $7b9bbaa53cb01344$export$7221d69dcfc8e36b(_ref5) {
    let { basename: basename, children: children, future: future, window: window1 } = _ref5;
    let historyRef = $d4J5n.useRef();
    if (historyRef.current == null) historyRef.current = (0, $0e856af10b3b08bf$export$b71fdd3798280242)({
        window: window1,
        v5Compat: true
    });
    let history = historyRef.current;
    let [state, setStateImpl] = $d4J5n.useState({
        action: history.action,
        location: history.location
    });
    let { v7_startTransition: v7_startTransition } = future || {};
    let setState = $d4J5n.useCallback((newState)=>{
        v7_startTransition && $7b9bbaa53cb01344$var$startTransitionImpl ? $7b9bbaa53cb01344$var$startTransitionImpl(()=>setStateImpl(newState)) : setStateImpl(newState);
    }, [
        setStateImpl,
        v7_startTransition
    ]);
    $d4J5n.useLayoutEffect(()=>history.listen(setState), [
        history,
        setState
    ]);
    return /*#__PURE__*/ $d4J5n.createElement((0, $5b1ea468d903474a$export$55185c17a0fcbe46), {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history
    });
}
/**
 * A `<Router>` that accepts a pre-instantiated history object. It's important
 * to note that using your own history object is highly discouraged and may add
 * two versions of the history library to your bundles unless you use the same
 * version of the history library that React Router uses internally.
 */ function $7b9bbaa53cb01344$export$eefb0c834599897e(_ref6) {
    let { basename: basename, children: children, future: future, history: history } = _ref6;
    let [state, setStateImpl] = $d4J5n.useState({
        action: history.action,
        location: history.location
    });
    let { v7_startTransition: v7_startTransition } = future || {};
    let setState = $d4J5n.useCallback((newState)=>{
        v7_startTransition && $7b9bbaa53cb01344$var$startTransitionImpl ? $7b9bbaa53cb01344$var$startTransitionImpl(()=>setStateImpl(newState)) : setStateImpl(newState);
    }, [
        setStateImpl,
        v7_startTransition
    ]);
    $d4J5n.useLayoutEffect(()=>history.listen(setState), [
        history,
        setState
    ]);
    return /*#__PURE__*/ $d4J5n.createElement((0, $5b1ea468d903474a$export$55185c17a0fcbe46), {
        basename: basename,
        children: children,
        location: state.location,
        navigationType: state.action,
        navigator: history
    });
}
const $7b9bbaa53cb01344$var$isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
const $7b9bbaa53cb01344$var$ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
/**
 * The public API for rendering a history-aware `<a>`.
 */ const $7b9bbaa53cb01344$export$a6c7ac8248d6e38a = /*#__PURE__*/ $d4J5n.forwardRef(function LinkWithRef(_ref7, ref) {
    let { onClick: onClick, relative: relative, reloadDocument: reloadDocument, replace: replace, state: state, target: target, to: to, preventScrollReset: preventScrollReset, unstable_viewTransition: unstable_viewTransition } = _ref7, rest = $7b9bbaa53cb01344$var$_objectWithoutPropertiesLoose(_ref7, $7b9bbaa53cb01344$var$_excluded);
    let { basename: basename } = $d4J5n.useContext((0, $5b1ea468d903474a$export$26749e8557646306));
    // Rendered into <a href> for absolute URLs
    let absoluteHref;
    let isExternal = false;
    if (typeof to === "string" && $7b9bbaa53cb01344$var$ABSOLUTE_URL_REGEX.test(to)) {
        // Render the absolute href server- and client-side
        absoluteHref = to;
        // Only check for external origins client-side
        if ($7b9bbaa53cb01344$var$isBrowser) try {
            let currentUrl = new URL(window.location.href);
            let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
            let path = (0, $0e856af10b3b08bf$export$b69e3301ce081aa3)(targetUrl.pathname, basename);
            if (targetUrl.origin === currentUrl.origin && path != null) // Strip the protocol/origin/basename for same-origin absolute URLs
            to = path + targetUrl.search + targetUrl.hash;
            else isExternal = true;
        } catch (e) {}
    }
    // Rendered into <a href> for relative URLs
    let href = (0, $5b1ea468d903474a$export$b66bb29c5006f12f)(to, {
        relative: relative
    });
    let internalOnClick = $7b9bbaa53cb01344$export$67621102c14d847(to, {
        replace: replace,
        state: state,
        target: target,
        preventScrollReset: preventScrollReset,
        relative: relative,
        unstable_viewTransition: unstable_viewTransition
    });
    function handleClick(event) {
        if (onClick) onClick(event);
        if (!event.defaultPrevented) internalOnClick(event);
    }
    return(/*#__PURE__*/ // eslint-disable-next-line jsx-a11y/anchor-has-content
    $d4J5n.createElement("a", $7b9bbaa53cb01344$var$_extends({}, rest, {
        href: absoluteHref || href,
        onClick: isExternal || reloadDocument ? onClick : handleClick,
        ref: ref,
        target: target
    })));
});
/**
 * A `<Link>` wrapper that knows if it's "active" or not.
 */ const $7b9bbaa53cb01344$export$b0d92dbee9b5b60d = /*#__PURE__*/ $d4J5n.forwardRef(function NavLinkWithRef(_ref8, ref) {
    let { "aria-current": ariaCurrentProp = "page", caseSensitive: caseSensitive = false, className: classNameProp = "", end: end = false, style: styleProp, to: to, unstable_viewTransition: unstable_viewTransition, children: children } = _ref8, rest = $7b9bbaa53cb01344$var$_objectWithoutPropertiesLoose(_ref8, $7b9bbaa53cb01344$var$_excluded2);
    let path = (0, $5b1ea468d903474a$export$e75d2a2d1b3c245b)(to, {
        relative: rest.relative
    });
    let location = (0, $5b1ea468d903474a$export$45d76561a5302f2b)();
    let routerState = $d4J5n.useContext((0, $5b1ea468d903474a$export$145dfa71566a64dc));
    let { navigator: navigator } = $d4J5n.useContext((0, $5b1ea468d903474a$export$26749e8557646306));
    let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
    // eslint-disable-next-line react-hooks/rules-of-hooks
    $7b9bbaa53cb01344$export$328fe15191788e7f(path) && unstable_viewTransition === true;
    let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;
    let locationPathname = location.pathname;
    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
    if (!caseSensitive) {
        locationPathname = locationPathname.toLowerCase();
        nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
        toPathname = toPathname.toLowerCase();
    }
    // If the `to` has a trailing slash, look at that exact spot.  Otherwise,
    // we're looking for a slash _after_ what's in `to`.  For example:
    //
    // <NavLink to="/users"> and <NavLink to="/users/">
    // both want to look for a / at index 6 to match URL `/users/matt`
    const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
    let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
    let renderProps = {
        isActive: isActive,
        isPending: isPending,
        isTransitioning: isTransitioning
    };
    let ariaCurrent = isActive ? ariaCurrentProp : undefined;
    let className;
    if (typeof classNameProp === "function") className = classNameProp(renderProps);
    else // If the className prop is not a function, we use a default `active`
    // class for <NavLink />s that are active. In v5 `active` was the default
    // value for `activeClassName`, but we are removing that API and can still
    // use the old default behavior for a cleaner upgrade path and keep the
    // simple styling rules working as they currently do.
    className = [
        classNameProp,
        isActive ? "active" : null,
        isPending ? "pending" : null,
        isTransitioning ? "transitioning" : null
    ].filter(Boolean).join(" ");
    let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
    return /*#__PURE__*/ $d4J5n.createElement($7b9bbaa53cb01344$export$a6c7ac8248d6e38a, $7b9bbaa53cb01344$var$_extends({}, rest, {
        "aria-current": ariaCurrent,
        className: className,
        ref: ref,
        style: style,
        to: to,
        unstable_viewTransition: unstable_viewTransition
    }), typeof children === "function" ? children(renderProps) : children);
});
/**
 * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except
 * that the interaction with the server is with `fetch` instead of new document
 * requests, allowing components to add nicer UX to the page as the form is
 * submitted and returns with data.
 */ const $7b9bbaa53cb01344$export$a7fed597f4b8afd8 = /*#__PURE__*/ $d4J5n.forwardRef((_ref9, forwardedRef)=>{
    let { fetcherKey: fetcherKey, navigate: navigate, reloadDocument: reloadDocument, replace: replace, state: state, method: method = $7b9bbaa53cb01344$var$defaultMethod, action: action, onSubmit: onSubmit, relative: relative, preventScrollReset: preventScrollReset, unstable_viewTransition: unstable_viewTransition } = _ref9, props = $7b9bbaa53cb01344$var$_objectWithoutPropertiesLoose(_ref9, $7b9bbaa53cb01344$var$_excluded3);
    let submit = $7b9bbaa53cb01344$export$47c85c6e3a081d3();
    let formAction = $7b9bbaa53cb01344$export$89a6bd6db0d97c56(action, {
        relative: relative
    });
    let formMethod = method.toLowerCase() === "get" ? "get" : "post";
    let submitHandler = (event)=>{
        onSubmit && onSubmit(event);
        if (event.defaultPrevented) return;
        event.preventDefault();
        let submitter = event.nativeEvent.submitter;
        let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
        submit(submitter || event.currentTarget, {
            fetcherKey: fetcherKey,
            method: submitMethod,
            navigate: navigate,
            replace: replace,
            state: state,
            relative: relative,
            preventScrollReset: preventScrollReset,
            unstable_viewTransition: unstable_viewTransition
        });
    };
    return /*#__PURE__*/ $d4J5n.createElement("form", $7b9bbaa53cb01344$var$_extends({
        ref: forwardedRef,
        method: formMethod,
        action: formAction,
        onSubmit: reloadDocument ? onSubmit : submitHandler
    }, props));
});
/**
 * This component will emulate the browser's scroll restoration on location
 * changes.
 */ function $7b9bbaa53cb01344$export$11aac1aab828f1fa(_ref10) {
    let { getKey: getKey, storageKey: storageKey } = _ref10;
    $7b9bbaa53cb01344$export$25057cfe5591e3e9({
        getKey: getKey,
        storageKey: storageKey
    });
    return null;
}
//#endregion
////////////////////////////////////////////////////////////////////////////////
//#region Hooks
////////////////////////////////////////////////////////////////////////////////
var $7b9bbaa53cb01344$var$DataRouterHook;
(function(DataRouterHook) {
    DataRouterHook["UseScrollRestoration"] = "useScrollRestoration";
    DataRouterHook["UseSubmit"] = "useSubmit";
    DataRouterHook["UseSubmitFetcher"] = "useSubmitFetcher";
    DataRouterHook["UseFetcher"] = "useFetcher";
    DataRouterHook["useViewTransitionState"] = "useViewTransitionState";
})($7b9bbaa53cb01344$var$DataRouterHook || ($7b9bbaa53cb01344$var$DataRouterHook = {}));
var $7b9bbaa53cb01344$var$DataRouterStateHook;
(function(DataRouterStateHook) {
    DataRouterStateHook["UseFetcher"] = "useFetcher";
    DataRouterStateHook["UseFetchers"] = "useFetchers";
    DataRouterStateHook["UseScrollRestoration"] = "useScrollRestoration";
})($7b9bbaa53cb01344$var$DataRouterStateHook || ($7b9bbaa53cb01344$var$DataRouterStateHook = {}));
// Internal hooks
function $7b9bbaa53cb01344$var$getDataRouterConsoleError(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
}
function $7b9bbaa53cb01344$var$useDataRouterContext(hookName) {
    let ctx = $d4J5n.useContext((0, $5b1ea468d903474a$export$3add0d5dce533e2e));
    !ctx && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    return ctx;
}
function $7b9bbaa53cb01344$var$useDataRouterState(hookName) {
    let state = $d4J5n.useContext((0, $5b1ea468d903474a$export$145dfa71566a64dc));
    !state && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    return state;
}
// External hooks
/**
 * Handles the click behavior for router `<Link>` components. This is useful if
 * you need to create custom `<Link>` components with the same click behavior we
 * use in our exported `<Link>`.
 */ function $7b9bbaa53cb01344$export$67621102c14d847(to, _temp) {
    let { target: target, replace: replaceProp, state: state, preventScrollReset: preventScrollReset, relative: relative, unstable_viewTransition: unstable_viewTransition } = _temp === void 0 ? {} : _temp;
    let navigate = (0, $5b1ea468d903474a$export$9770f232ac06a008)();
    let location = (0, $5b1ea468d903474a$export$45d76561a5302f2b)();
    let path = (0, $5b1ea468d903474a$export$e75d2a2d1b3c245b)(to, {
        relative: relative
    });
    return $d4J5n.useCallback((event)=>{
        if ($7b9bbaa53cb01344$var$shouldProcessLinkClick(event, target)) {
            event.preventDefault();
            // If the URL hasn't changed, a regular <a> will do a replace instead of
            // a push, so do the same here unless the replace prop is explicitly set
            let replace = replaceProp !== undefined ? replaceProp : (0, $0e856af10b3b08bf$export$fe53371bee54353d)(location) === (0, $0e856af10b3b08bf$export$fe53371bee54353d)(path);
            navigate(to, {
                replace: replace,
                state: state,
                preventScrollReset: preventScrollReset,
                relative: relative,
                unstable_viewTransition: unstable_viewTransition
            });
        }
    }, [
        location,
        navigate,
        path,
        replaceProp,
        state,
        target,
        to,
        preventScrollReset,
        relative,
        unstable_viewTransition
    ]);
}
/**
 * A convenient wrapper for reading and writing search parameters via the
 * URLSearchParams interface.
 */ function $7b9bbaa53cb01344$export$f1a78c17382fe22a(defaultInit) {
    let defaultSearchParamsRef = $d4J5n.useRef($7b9bbaa53cb01344$export$a2e4e2dcc7b1f22f(defaultInit));
    let hasSetSearchParamsRef = $d4J5n.useRef(false);
    let location = (0, $5b1ea468d903474a$export$45d76561a5302f2b)();
    let searchParams = $d4J5n.useMemo(()=>// Only merge in the defaults if we haven't yet called setSearchParams.
        // Once we call that we want those to take precedence, otherwise you can't
        // remove a param with setSearchParams({}) if it has an initial value
        $7b9bbaa53cb01344$var$getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [
        location.search
    ]);
    let navigate = (0, $5b1ea468d903474a$export$9770f232ac06a008)();
    let setSearchParams = $d4J5n.useCallback((nextInit, navigateOptions)=>{
        const newSearchParams = $7b9bbaa53cb01344$export$a2e4e2dcc7b1f22f(typeof nextInit === "function" ? nextInit(searchParams) : nextInit);
        hasSetSearchParamsRef.current = true;
        navigate("?" + newSearchParams, navigateOptions);
    }, [
        navigate,
        searchParams
    ]);
    return [
        searchParams,
        setSearchParams
    ];
}
function $7b9bbaa53cb01344$var$validateClientSideSubmission() {
    if (typeof document === "undefined") throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
}
let $7b9bbaa53cb01344$var$fetcherId = 0;
let $7b9bbaa53cb01344$var$getUniqueFetcherId = ()=>"__" + String(++$7b9bbaa53cb01344$var$fetcherId) + "__";
/**
 * Returns a function that may be used to programmatically submit a form (or
 * some arbitrary data) to the server.
 */ function $7b9bbaa53cb01344$export$47c85c6e3a081d3() {
    let { router: router } = $7b9bbaa53cb01344$var$useDataRouterContext($7b9bbaa53cb01344$var$DataRouterHook.UseSubmit);
    let { basename: basename } = $d4J5n.useContext((0, $5b1ea468d903474a$export$26749e8557646306));
    let currentRouteId = (0, $5b1ea468d903474a$export$5fc8298006ad9e58)();
    return $d4J5n.useCallback(function(target, options) {
        if (options === void 0) options = {};
        $7b9bbaa53cb01344$var$validateClientSideSubmission();
        let { action: action, method: method, encType: encType, formData: formData, body: body } = $7b9bbaa53cb01344$var$getFormSubmissionInfo(target, basename);
        if (options.navigate === false) {
            let key = options.fetcherKey || $7b9bbaa53cb01344$var$getUniqueFetcherId();
            router.fetch(key, currentRouteId, options.action || action, {
                preventScrollReset: options.preventScrollReset,
                formData: formData,
                body: body,
                formMethod: options.method || method,
                formEncType: options.encType || encType,
                unstable_flushSync: options.unstable_flushSync
            });
        } else router.navigate(options.action || action, {
            preventScrollReset: options.preventScrollReset,
            formData: formData,
            body: body,
            formMethod: options.method || method,
            formEncType: options.encType || encType,
            replace: options.replace,
            state: options.state,
            fromRouteId: currentRouteId,
            unstable_flushSync: options.unstable_flushSync,
            unstable_viewTransition: options.unstable_viewTransition
        });
    }, [
        router,
        basename,
        currentRouteId
    ]);
}
// v7: Eventually we should deprecate this entirely in favor of using the
// router method directly?
function $7b9bbaa53cb01344$export$89a6bd6db0d97c56(action, _temp2) {
    let { relative: relative } = _temp2 === void 0 ? {} : _temp2;
    let { basename: basename } = $d4J5n.useContext((0, $5b1ea468d903474a$export$26749e8557646306));
    let routeContext = $d4J5n.useContext((0, $5b1ea468d903474a$export$9072aa6dd1f93057));
    !routeContext && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    let [match] = routeContext.matches.slice(-1);
    // Shallow clone path so we can modify it below, otherwise we modify the
    // object referenced by useMemo inside useResolvedPath
    let path = $7b9bbaa53cb01344$var$_extends({}, (0, $5b1ea468d903474a$export$e75d2a2d1b3c245b)(action ? action : ".", {
        relative: relative
    }));
    // Previously we set the default action to ".". The problem with this is that
    // `useResolvedPath(".")` excludes search params of the resolved URL. This is
    // the intended behavior of when "." is specifically provided as
    // the form action, but inconsistent w/ browsers when the action is omitted.
    // https://github.com/remix-run/remix/issues/927
    let location = (0, $5b1ea468d903474a$export$45d76561a5302f2b)();
    if (action == null) {
        // Safe to write to this directly here since if action was undefined, we
        // would have called useResolvedPath(".") which will never include a search
        path.search = location.search;
        // When grabbing search params from the URL, remove any included ?index param
        // since it might not apply to our contextual route.  We add it back based
        // on match.route.index below
        let params = new URLSearchParams(path.search);
        if (params.has("index") && params.get("index") === "") {
            params.delete("index");
            path.search = params.toString() ? "?" + params.toString() : "";
        }
    }
    if ((!action || action === ".") && match.route.index) path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    // If we're operating within a basename, prepend it to the pathname prior
    // to creating the form action.  If this is a root navigation, then just use
    // the raw basename which allows the basename to have full control over the
    // presence of a trailing slash on root actions
    if (basename !== "/") path.pathname = path.pathname === "/" ? basename : (0, $0e856af10b3b08bf$export$86d9a7913e44197e)([
        basename,
        path.pathname
    ]);
    return (0, $0e856af10b3b08bf$export$fe53371bee54353d)(path);
}
// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`
/**
 * Interacts with route loaders and actions without causing a navigation. Great
 * for any interaction that stays on the same page.
 */ function $7b9bbaa53cb01344$export$5b0d2d9a9921565a(_temp3) {
    var _route$matches;
    let { key: key } = _temp3 === void 0 ? {} : _temp3;
    let { router: router } = $7b9bbaa53cb01344$var$useDataRouterContext($7b9bbaa53cb01344$var$DataRouterHook.UseFetcher);
    let state = $7b9bbaa53cb01344$var$useDataRouterState($7b9bbaa53cb01344$var$DataRouterStateHook.UseFetcher);
    let fetcherData = $d4J5n.useContext($7b9bbaa53cb01344$export$148fd98d095596d4);
    let route = $d4J5n.useContext((0, $5b1ea468d903474a$export$9072aa6dd1f93057));
    let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;
    !fetcherData && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    !route && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    !(routeId != null) && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    // Fetcher key handling
    let [fetcherKey, setFetcherKey] = $d4J5n.useState(key || "");
    if (key && key !== fetcherKey) setFetcherKey(key);
    else if (!fetcherKey) setFetcherKey($7b9bbaa53cb01344$var$getUniqueFetcherId());
    // Registration/cleanup
    $d4J5n.useEffect(()=>{
        router.getFetcher(fetcherKey);
        return ()=>{
            // Tell the router we've unmounted - if v7_fetcherPersist is enabled this
            // will not delete immediately but instead queue up a delete after the
            // fetcher returns to an `idle` state
            router.deleteFetcher(fetcherKey);
        };
    }, [
        router,
        fetcherKey
    ]);
    // Fetcher additions
    let load = $d4J5n.useCallback((href, opts)=>{
        !routeId && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
        router.fetch(fetcherKey, routeId, href, opts);
    }, [
        fetcherKey,
        routeId,
        router
    ]);
    let submitImpl = $7b9bbaa53cb01344$export$47c85c6e3a081d3();
    let submit = $d4J5n.useCallback((target, opts)=>{
        submitImpl(target, $7b9bbaa53cb01344$var$_extends({}, opts, {
            navigate: false,
            fetcherKey: fetcherKey
        }));
    }, [
        fetcherKey,
        submitImpl
    ]);
    let FetcherForm = $d4J5n.useMemo(()=>{
        let FetcherForm = /*#__PURE__*/ $d4J5n.forwardRef((props, ref)=>{
            return /*#__PURE__*/ $d4J5n.createElement($7b9bbaa53cb01344$export$a7fed597f4b8afd8, $7b9bbaa53cb01344$var$_extends({}, props, {
                navigate: false,
                fetcherKey: fetcherKey,
                ref: ref
            }));
        });
        return FetcherForm;
    }, [
        fetcherKey
    ]);
    // Exposed FetcherWithComponents
    let fetcher = state.fetchers.get(fetcherKey) || (0, $0e856af10b3b08bf$export$52eace9c284d3585);
    let data = fetcherData.get(fetcherKey);
    let fetcherWithComponents = $d4J5n.useMemo(()=>$7b9bbaa53cb01344$var$_extends({
            Form: FetcherForm,
            submit: submit,
            load: load
        }, fetcher, {
            data: data
        }), [
        FetcherForm,
        submit,
        load,
        fetcher,
        data
    ]);
    return fetcherWithComponents;
}
/**
 * Provides all fetchers currently on the page. Useful for layouts and parent
 * routes that need to provide pending/optimistic UI regarding the fetch.
 */ function $7b9bbaa53cb01344$export$fa996778a3a31087() {
    let state = $7b9bbaa53cb01344$var$useDataRouterState($7b9bbaa53cb01344$var$DataRouterStateHook.UseFetchers);
    return Array.from(state.fetchers.entries()).map((_ref11)=>{
        let [key, fetcher] = _ref11;
        return $7b9bbaa53cb01344$var$_extends({}, fetcher, {
            key: key
        });
    });
}
const $7b9bbaa53cb01344$var$SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
let $7b9bbaa53cb01344$var$savedScrollPositions = {};
/**
 * When rendered inside a RouterProvider, will restore scroll positions on navigations
 */ function $7b9bbaa53cb01344$export$25057cfe5591e3e9(_temp4) {
    let { getKey: getKey, storageKey: storageKey } = _temp4 === void 0 ? {} : _temp4;
    let { router: router } = $7b9bbaa53cb01344$var$useDataRouterContext($7b9bbaa53cb01344$var$DataRouterHook.UseScrollRestoration);
    let { restoreScrollPosition: restoreScrollPosition, preventScrollReset: preventScrollReset } = $7b9bbaa53cb01344$var$useDataRouterState($7b9bbaa53cb01344$var$DataRouterStateHook.UseScrollRestoration);
    let { basename: basename } = $d4J5n.useContext((0, $5b1ea468d903474a$export$26749e8557646306));
    let location = (0, $5b1ea468d903474a$export$45d76561a5302f2b)();
    let matches = (0, $5b1ea468d903474a$export$2378eb7f5ff86053)();
    let navigation = (0, $5b1ea468d903474a$export$d0fd4b7106de2769)();
    // Trigger manual scroll restoration while we're active
    $d4J5n.useEffect(()=>{
        window.history.scrollRestoration = "manual";
        return ()=>{
            window.history.scrollRestoration = "auto";
        };
    }, []);
    // Save positions on pagehide
    $7b9bbaa53cb01344$var$usePageHide($d4J5n.useCallback(()=>{
        if (navigation.state === "idle") {
            let key = (getKey ? getKey(location, matches) : null) || location.key;
            $7b9bbaa53cb01344$var$savedScrollPositions[key] = window.scrollY;
        }
        try {
            sessionStorage.setItem(storageKey || $7b9bbaa53cb01344$var$SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify($7b9bbaa53cb01344$var$savedScrollPositions));
        } catch (error) {}
        window.history.scrollRestoration = "auto";
    }, [
        storageKey,
        getKey,
        navigation.state,
        location,
        matches
    ]));
    // Read in any saved scroll locations
    if (typeof document !== "undefined") {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        $d4J5n.useLayoutEffect(()=>{
            try {
                let sessionPositions = sessionStorage.getItem(storageKey || $7b9bbaa53cb01344$var$SCROLL_RESTORATION_STORAGE_KEY);
                if (sessionPositions) $7b9bbaa53cb01344$var$savedScrollPositions = JSON.parse(sessionPositions);
            } catch (e) {
            // no-op, use default empty object
            }
        }, [
            storageKey
        ]);
        // Enable scroll restoration in the router
        // eslint-disable-next-line react-hooks/rules-of-hooks
        $d4J5n.useLayoutEffect(()=>{
            let getKeyWithoutBasename = getKey && basename !== "/" ? (location, matches)=>getKey($7b9bbaa53cb01344$var$_extends({}, location, {
                    pathname: (0, $0e856af10b3b08bf$export$b69e3301ce081aa3)(location.pathname, basename) || location.pathname
                }), matches) : getKey;
            let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration($7b9bbaa53cb01344$var$savedScrollPositions, ()=>window.scrollY, getKeyWithoutBasename);
            return ()=>disableScrollRestoration && disableScrollRestoration();
        }, [
            router,
            basename,
            getKey
        ]);
        // Restore scrolling when state.restoreScrollPosition changes
        // eslint-disable-next-line react-hooks/rules-of-hooks
        $d4J5n.useLayoutEffect(()=>{
            // Explicit false means don't do anything (used for submissions)
            if (restoreScrollPosition === false) return;
            // been here before, scroll to it
            if (typeof restoreScrollPosition === "number") {
                window.scrollTo(0, restoreScrollPosition);
                return;
            }
            // try to scroll to the hash
            if (location.hash) {
                let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));
                if (el) {
                    el.scrollIntoView();
                    return;
                }
            }
            // Don't reset if this navigation opted out
            if (preventScrollReset === true) return;
            // otherwise go to the top on new locations
            window.scrollTo(0, 0);
        }, [
            location,
            restoreScrollPosition,
            preventScrollReset
        ]);
    }
}
/**
 * Setup a callback to be fired on the window's `beforeunload` event. This is
 * useful for saving some data to `window.localStorage` just before the page
 * refreshes.
 *
 * Note: The `callback` argument should be a function created with
 * `React.useCallback()`.
 */ function $7b9bbaa53cb01344$export$c0a586b329cae57d(callback, options) {
    let { capture: capture } = options || {};
    $d4J5n.useEffect(()=>{
        let opts = capture != null ? {
            capture: capture
        } : undefined;
        window.addEventListener("beforeunload", callback, opts);
        return ()=>{
            window.removeEventListener("beforeunload", callback, opts);
        };
    }, [
        callback,
        capture
    ]);
}
/**
 * Setup a callback to be fired on the window's `pagehide` event. This is
 * useful for saving some data to `window.localStorage` just before the page
 * refreshes.  This event is better supported than beforeunload across browsers.
 *
 * Note: The `callback` argument should be a function created with
 * `React.useCallback()`.
 */ function $7b9bbaa53cb01344$var$usePageHide(callback, options) {
    let { capture: capture } = options || {};
    $d4J5n.useEffect(()=>{
        let opts = capture != null ? {
            capture: capture
        } : undefined;
        window.addEventListener("pagehide", callback, opts);
        return ()=>{
            window.removeEventListener("pagehide", callback, opts);
        };
    }, [
        callback,
        capture
    ]);
}
/**
 * Wrapper around useBlocker to show a window.confirm prompt to users instead
 * of building a custom UI with useBlocker.
 *
 * Warning: This has *a lot of rough edges* and behaves very differently (and
 * very incorrectly in some cases) across browsers if user click addition
 * back/forward navigations while the confirm is open.  Use at your own risk.
 */ function $7b9bbaa53cb01344$export$39f4eb3dbd812741(_ref12) {
    let { when: when, message: message } = _ref12;
    let blocker = (0, $5b1ea468d903474a$export$b273b3273281a049)(when);
    $d4J5n.useEffect(()=>{
        if (blocker.state === "blocked") {
            let proceed = window.confirm(message);
            if (proceed) // This timeout is needed to avoid a weird "race" on POP navigations
            // between the `window.history` revert navigation and the result of
            // `window.confirm`
            setTimeout(blocker.proceed, 0);
            else blocker.reset();
        }
    }, [
        blocker,
        message
    ]);
    $d4J5n.useEffect(()=>{
        if (blocker.state === "blocked" && !when) blocker.reset();
    }, [
        blocker,
        when
    ]);
}
/**
 * Return a boolean indicating if there is an active view transition to the
 * given href.  You can use this value to render CSS classes or viewTransitionName
 * styles onto your elements
 *
 * @param href The destination href
 * @param [opts.relative] Relative routing type ("route" | "path")
 */ function $7b9bbaa53cb01344$export$328fe15191788e7f(to, opts) {
    if (opts === void 0) opts = {};
    let vtContext = $d4J5n.useContext($7b9bbaa53cb01344$export$7ad602f0e94e62d1);
    !(vtContext != null) && (0, $0e856af10b3b08bf$export$3e9cee6b33872309)(false);
    let { basename: basename } = $7b9bbaa53cb01344$var$useDataRouterContext($7b9bbaa53cb01344$var$DataRouterHook.useViewTransitionState);
    let path = (0, $5b1ea468d903474a$export$e75d2a2d1b3c245b)(to, {
        relative: opts.relative
    });
    if (!vtContext.isTransitioning) return false;
    let currentPath = (0, $0e856af10b3b08bf$export$b69e3301ce081aa3)(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
    let nextPath = (0, $0e856af10b3b08bf$export$b69e3301ce081aa3)(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
    // Transition is active if we're going to or coming from the indicated
    // destination.  This ensures that other PUSH navigations that reverse
    // an indicated transition apply.  I.e., on the list view you have:
    //
    //   <NavLink to="/details/1" unstable_viewTransition>
    //
    // If you click the breadcrumb back to the list view:
    //
    //   <NavLink to="/list" unstable_viewTransition>
    //
    // We should apply the transition because it's indicated as active going
    // from /list -> /details/1 and therefore should be active on the reverse
    // (even though this isn't strictly a POP reverse)
    return (0, $0e856af10b3b08bf$export$81336c211d5ff295)(path.pathname, nextPath) != null || (0, $0e856af10b3b08bf$export$81336c211d5ff295)(path.pathname, currentPath) != null;
}


const $a8b51b85483304f8$export$db77ccec0bb4ccac = ()=>{
    let navigate = (0, $5b1ea468d903474a$export$9770f232ac06a008)();
    const routeChange = ()=>{
        let path = `/`;
        navigate(path);
    };
    return /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
        className: "element",
        children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
            className: "frame-wrapper",
            children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                className: "frame",
                children: [
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("header", {
                        className: "header",
                        children: [
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                className: "text-wrapper",
                                children: "Pelota Libre TV"
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                                className: "solar-football-bold",
                                alt: "Solar football bold",
                                src: "/img/solar-football-bold-duotone.svg"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                        className: "hero-page",
                        children: [
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                                className: "rectangle",
                                alt: "Rectangle",
                                src: "/img/rectangle-7.png"
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                className: "div-wrapper",
                                children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                    className: "div",
                                    onClick: routeChange,
                                    children: "Take this button to return main page"
                                })
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("footer", {
                        className: "footer",
                        children: [
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                className: "text-wrapper-2",
                                children: "Social"
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                className: "frame-2",
                                children: [
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-3",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                                                className: "img",
                                                alt: "Ri twitter fill",
                                                src: "/img/ri-twitter-fill.svg"
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                                className: "text-wrapper-3",
                                                children: "Twitter"
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-3",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                                                className: "img",
                                                alt: "Ri instagram fill",
                                                src: "/img/ri-instagram-fill.svg"
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                                className: "text-wrapper-3",
                                                children: "Instagram"
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-4",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                                                className: "vector",
                                                alt: "Vector",
                                                src: "/img/vector.svg"
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                                className: "text-wrapper-3",
                                                children: "YouTube"
                                            })
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                className: "frame-5",
                                children: [
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                        className: "text-wrapper-4",
                                        children: "Pelota Libre"
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                        className: "text-wrapper-5",
                                        children: "DMCA"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                className: "p",
                                children: "Pelota Libre TV 2023 \xa9 All rights reserved."
                            })
                        ]
                    })
                ]
            })
        })
    });
};





parcelRequire("d4J5n");
/*
We're constantly improving the code you see. 
Please share your feedback here: https://form.asana.com/?k=uvp-HPgd3_hyoXRBw1IcNg&d=1152665201300829
*/ 
parcelRequire("d4J5n");

const $f94a3a0e64443954$export$16fa2f45be04daa8 = ()=>{
    return /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
        className: "component",
        children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("p", {
            className: "opci-n-AR",
            children: [
                /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("a", {
                    href: "https://embed.pelotalibre.com/dtvpl2.html?id=1057&lang=1",
                    rel: "noopener noreferrer",
                    target: "_blank",
                    children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                        className: "text-wrapper",
                        children: "Option 1"
                    })
                }),
                /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                    className: "text-wrapper",
                    children: " (AR)"
                })
            ]
        })
    });
};







const $fedeb307b1cc62af$export$b43f76609dd1aff0 = ()=>{
    const reloadPage = ()=>{
        window.location.reload();
    };
    let navigate = (0, $5b1ea468d903474a$export$9770f232ac06a008)();
    const routeChange = ()=>{
        let path = `/`;
        navigate(path);
    };
    return /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
        className: "film-page",
        children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
            className: "frame-wrapper",
            children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                className: "frame",
                children: [
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("header", {
                        className: "header",
                        children: [
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                className: "div",
                                onClick: routeChange,
                                children: "Pelota Libre TV"
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                                className: "solar-football-bold",
                                alt: "Solar football bold",
                                src: "/img/solar-football-bold-duotone.svg"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("p", {
                        className: "canal-d-sports",
                        children: [
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("span", {
                                className: "span",
                                children: [
                                    "Canal D Sports Online LIVE and direct",
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("br", {})
                                ]
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                                className: "text-wrapper-2",
                                children: "Pelota Libre TV - D Sports"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                        className: "video-player",
                        children: [
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                className: "video-player-2",
                                children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $ab5dab850e79cc84$export$2e2bcd8739ae039), {})
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                className: "options",
                                children: [
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-2",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $f94a3a0e64443954$export$16fa2f45be04daa8), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $f94a3a0e64443954$export$16fa2f45be04daa8), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $f94a3a0e64443954$export$16fa2f45be04daa8), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $f94a3a0e64443954$export$16fa2f45be04daa8), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $f94a3a0e64443954$export$16fa2f45be04daa8), {})
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-2",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $f94a3a0e64443954$export$16fa2f45be04daa8), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $f94a3a0e64443954$export$16fa2f45be04daa8), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $f94a3a0e64443954$export$16fa2f45be04daa8), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $f94a3a0e64443954$export$16fa2f45be04daa8), {}),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $f94a3a0e64443954$export$16fa2f45be04daa8), {})
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                className: "reboot-button",
                                children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                    className: "text-wrapper-3",
                                    onClick: reloadPage,
                                    children: "Reload page"
                                })
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                        className: "questions-answers",
                        children: [
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                className: "element",
                                children: [
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                        className: "p",
                                        children: "What is D Sports channel live?"
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("p", {
                                        className: "ver-canal-d-sports",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("span", {
                                                className: "text-wrapper-4",
                                                children: [
                                                    "Watch D Sports channel online live and direct. D Sports is a Latin American television channel to watch live all the matches of the Spanish Football League, Copa del Rey, Spanish Super Cup, Conmebol Sudamericana matches, among other sporting events.                  ",
                                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("br", {}),
                                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("br", {}),
                                                    "In addition to this channel you can also watch its sister channels online, which are:",
                                                    " ",
                                                    "                "
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("a", {
                                                href: "https://pelotalibre.com/en-vivo/directv-sports-2/",
                                                rel: "noopener noreferrer",
                                                target: "_blank",
                                                children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                                                    children: "D Sports 2"
                                                })
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                                                className: "text-wrapper-4",
                                                children: " y "
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("a", {
                                                href: "https://pelotalibre.com/en-vivo/directv-sports-plus/",
                                                rel: "noopener noreferrer",
                                                target: "_blank",
                                                children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                                                    children: "D Sports Plus"
                                                })
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                                                children: "."
                                            })
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                className: "element",
                                children: [
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                        className: "text-wrapper-6",
                                        children: "How can I watch the D Sports channel online live and direct?"
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("p", {
                                        className: "para-poder-ver-todos",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("span", {
                                                children: [
                                                    "To be able to watch all the live matches that D Sports broadcasts online, you must go to page home",
                                                    " "
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("a", {
                                                href: "https://pelotalibre.com/",
                                                rel: "noopener noreferrer",
                                                target: "_blank",
                                                children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                                                    children: "Pelota Libre TV"
                                                })
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("span", {
                                                children: [
                                                    " ",
                                                    "at the time the match is being played and then click on the logo",
                                                    " "
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("a", {
                                                href: "https://pelotalibre.com/en-vivo/directv-sports/",
                                                rel: "noopener noreferrer",
                                                target: "_blank",
                                                children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                                                    children: "D Sports"
                                                })
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("span", {
                                                className: "text-wrapper-4",
                                                children: [
                                                    " ",
                                                    'or in "View Channel" to access live and direct D Sports programming. Then to To enter the page you must click on the Play button in the player under the title "Canal D Sports Online LIVE and direct". You can also enter the official page of D Sports at directvsports.com to watch the channel live from your computer, cell phone or from the television via Chromecast.                '
                                                ]
                                            })
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                className: "element",
                                children: [
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                        className: "text-wrapper-7",
                                        children: "D Sports programming live and direct 24 hours a day"
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                        className: "text-wrapper-8",
                                        children: "The complete programming 24 hours a day of D Sports can be seen live and direct from this page to be able to watch programs such as F\xfatbol Total, DirecTV Connection, Football is spoken like this, among others exclusive programs on this channel.              "
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                className: "element",
                                children: [
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                        className: "text-wrapper-9",
                                        children: "How to watch D Sports matches live without paying?"
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("p", {
                                        className: "para-ver-todos-los",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                                                className: "text-wrapper-4",
                                                children: "To see all the games that happen "
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("a", {
                                                href: "https://pelotalibre.com/en-vivo/directv-sports/",
                                                rel: "noopener noreferrer",
                                                target: "_blank",
                                                children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("span", {
                                                    children: "D Sports"
                                                })
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("span", {
                                                className: "text-wrapper-4",
                                                children: [
                                                    " ",
                                                    "of the Spanish League, Premier League, Champions League and Europa League you can enter this channel and Watch it for free live and direct for everyone.                  ",
                                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("br", {})
                                                ]
                                            })
                                        ]
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("footer", {
                        className: "footer",
                        children: [
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                className: "text-wrapper-10",
                                children: "Social"
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                className: "frame-3",
                                children: [
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-4",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                                                className: "img",
                                                alt: "Ri twitter fill",
                                                src: "/img/ri-twitter-fill.svg"
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                                className: "text-wrapper-11",
                                                children: "Twitter"
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-4",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                                                className: "img",
                                                alt: "Ri instagram fill",
                                                src: "/img/ri-instagram-fill.svg"
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                                className: "text-wrapper-11",
                                                children: "Instagram"
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                        className: "frame-5",
                                        children: [
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("img", {
                                                className: "vector",
                                                alt: "Vector",
                                                src: "/img/vector.svg"
                                            }),
                                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                                className: "text-wrapper-11",
                                                children: "YouTube"
                                            })
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)("div", {
                                className: "frame-6",
                                children: [
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                        className: "text-wrapper-12",
                                        children: "Pelota Libre"
                                    }),
                                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("div", {
                                        className: "text-wrapper-13",
                                        children: "DMCA"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)("p", {
                                className: "text-wrapper-14",
                                children: "Pelota Libre TV 2023 \xa9 All rights reserved."
                            })
                        ]
                    })
                ]
            })
        })
    });
};





function $6d7f06814ef3fc6d$export$2e2bcd8739ae039() {
    return /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $7b9bbaa53cb01344$export$9ba4e89fdfa1fc54), {
        children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $5b1ea468d903474a$export$3565eb3d00ca5a74), {
            children: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsxs)((0, $5b1ea468d903474a$export$e7b0ac011bb776c6), {
                path: "/",
                basename: "/peru-channels",
                children: [
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $5b1ea468d903474a$export$e7b0ac011bb776c6), {
                        index: true,
                        element: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $20b1bd269a8d5e6d$export$635259c202bd3120), {})
                    }),
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $5b1ea468d903474a$export$e7b0ac011bb776c6), {
                        path: "*",
                        element: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $a8b51b85483304f8$export$db77ccec0bb4ccac), {})
                    }),
                    /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $5b1ea468d903474a$export$e7b0ac011bb776c6), {
                        path: "/detail",
                        element: /*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)((0, $fedeb307b1cc62af$export$b43f76609dd1aff0), {})
                    })
                ]
            })
        })
    });
}
const $6d7f06814ef3fc6d$var$app = document.getElementById("app");
const $6d7f06814ef3fc6d$var$root = (0, (/*@__PURE__*/$parcel$interopDefault($fef8548889890d4d$exports))).createRoot($6d7f06814ef3fc6d$var$app);
$6d7f06814ef3fc6d$var$root.render(/*#__PURE__*/ (0, $17b288f07ec57b56$exports.jsx)($6d7f06814ef3fc6d$export$2e2bcd8739ae039, {}));


//# sourceMappingURL=index.06261b9a.js.map
